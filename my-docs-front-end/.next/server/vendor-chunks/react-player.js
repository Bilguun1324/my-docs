"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-player";
exports.ids = ["vendor-chunks/react-player"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-player/lib/Player.js":
/*!*************************************************!*\
  !*** ./node_modules/react-player/lib/Player.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Player_exports = {};\n__export(Player_exports, {\n    default: ()=>Player\n});\nmodule.exports = __toCommonJS(Player_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_react_fast_compare = __toESM(__webpack_require__(/*! react-fast-compare */ \"(ssr)/./node_modules/react-fast-compare/index.js\"));\nvar import_props = __webpack_require__(/*! ./props */ \"(ssr)/./node_modules/react-player/lib/props.js\");\nvar import_utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nconst SEEK_ON_PLAY_EXPIRY = 5e3;\nclass Player extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"mounted\", false);\n        __publicField(this, \"isReady\", false);\n        __publicField(this, \"isPlaying\", false);\n        // Track playing state internally to prevent bugs\n        __publicField(this, \"isLoading\", true);\n        // Use isLoading to prevent onPause when switching URL\n        __publicField(this, \"loadOnReady\", null);\n        __publicField(this, \"startOnPlay\", true);\n        __publicField(this, \"seekOnPlay\", null);\n        __publicField(this, \"onDurationCalled\", false);\n        __publicField(this, \"handlePlayerMount\", (player)=>{\n            if (this.player) {\n                this.progress();\n                return;\n            }\n            this.player = player;\n            this.player.load(this.props.url);\n            this.progress();\n        });\n        __publicField(this, \"getInternalPlayer\", (key)=>{\n            if (!this.player) return null;\n            return this.player[key];\n        });\n        __publicField(this, \"progress\", ()=>{\n            if (this.props.url && this.player && this.isReady) {\n                const playedSeconds = this.getCurrentTime() || 0;\n                const loadedSeconds = this.getSecondsLoaded();\n                const duration = this.getDuration();\n                if (duration) {\n                    const progress = {\n                        playedSeconds,\n                        played: playedSeconds / duration\n                    };\n                    if (loadedSeconds !== null) {\n                        progress.loadedSeconds = loadedSeconds;\n                        progress.loaded = loadedSeconds / duration;\n                    }\n                    if (progress.playedSeconds !== this.prevPlayed || progress.loadedSeconds !== this.prevLoaded) {\n                        this.props.onProgress(progress);\n                    }\n                    this.prevPlayed = progress.playedSeconds;\n                    this.prevLoaded = progress.loadedSeconds;\n                }\n            }\n            this.progressTimeout = setTimeout(this.progress, this.props.progressFrequency || this.props.progressInterval);\n        });\n        __publicField(this, \"handleReady\", ()=>{\n            if (!this.mounted) return;\n            this.isReady = true;\n            this.isLoading = false;\n            const { onReady, playing, volume, muted } = this.props;\n            onReady();\n            if (!muted && volume !== null) {\n                this.player.setVolume(volume);\n            }\n            if (this.loadOnReady) {\n                this.player.load(this.loadOnReady, true);\n                this.loadOnReady = null;\n            } else if (playing) {\n                this.player.play();\n            }\n            this.handleDurationCheck();\n        });\n        __publicField(this, \"handlePlay\", ()=>{\n            this.isPlaying = true;\n            this.isLoading = false;\n            const { onStart, onPlay, playbackRate } = this.props;\n            if (this.startOnPlay) {\n                if (this.player.setPlaybackRate && playbackRate !== 1) {\n                    this.player.setPlaybackRate(playbackRate);\n                }\n                onStart();\n                this.startOnPlay = false;\n            }\n            onPlay();\n            if (this.seekOnPlay) {\n                this.seekTo(this.seekOnPlay);\n                this.seekOnPlay = null;\n            }\n            this.handleDurationCheck();\n        });\n        __publicField(this, \"handlePause\", (e)=>{\n            this.isPlaying = false;\n            if (!this.isLoading) {\n                this.props.onPause(e);\n            }\n        });\n        __publicField(this, \"handleEnded\", ()=>{\n            const { activePlayer, loop, onEnded } = this.props;\n            if (activePlayer.loopOnEnded && loop) {\n                this.seekTo(0);\n            }\n            if (!loop) {\n                this.isPlaying = false;\n                onEnded();\n            }\n        });\n        __publicField(this, \"handleError\", (...args)=>{\n            this.isLoading = false;\n            this.props.onError(...args);\n        });\n        __publicField(this, \"handleDurationCheck\", ()=>{\n            clearTimeout(this.durationCheckTimeout);\n            const duration = this.getDuration();\n            if (duration) {\n                if (!this.onDurationCalled) {\n                    this.props.onDuration(duration);\n                    this.onDurationCalled = true;\n                }\n            } else {\n                this.durationCheckTimeout = setTimeout(this.handleDurationCheck, 100);\n            }\n        });\n        __publicField(this, \"handleLoaded\", ()=>{\n            this.isLoading = false;\n        });\n    }\n    componentDidMount() {\n        this.mounted = true;\n    }\n    componentWillUnmount() {\n        clearTimeout(this.progressTimeout);\n        clearTimeout(this.durationCheckTimeout);\n        if (this.isReady && this.props.stopOnUnmount) {\n            this.player.stop();\n            if (this.player.disablePIP) {\n                this.player.disablePIP();\n            }\n        }\n        this.mounted = false;\n    }\n    componentDidUpdate(prevProps) {\n        if (!this.player) {\n            return;\n        }\n        const { url, playing, volume, muted, playbackRate, pip, loop, activePlayer, disableDeferredLoading } = this.props;\n        if (!(0, import_react_fast_compare.default)(prevProps.url, url)) {\n            if (this.isLoading && !activePlayer.forceLoad && !disableDeferredLoading && !(0, import_utils.isMediaStream)(url)) {\n                console.warn(`ReactPlayer: the attempt to load ${url} is being deferred until the player has loaded`);\n                this.loadOnReady = url;\n                return;\n            }\n            this.isLoading = true;\n            this.startOnPlay = true;\n            this.onDurationCalled = false;\n            this.player.load(url, this.isReady);\n        }\n        if (!prevProps.playing && playing && !this.isPlaying) {\n            this.player.play();\n        }\n        if (prevProps.playing && !playing && this.isPlaying) {\n            this.player.pause();\n        }\n        if (!prevProps.pip && pip && this.player.enablePIP) {\n            this.player.enablePIP();\n        }\n        if (prevProps.pip && !pip && this.player.disablePIP) {\n            this.player.disablePIP();\n        }\n        if (prevProps.volume !== volume && volume !== null) {\n            this.player.setVolume(volume);\n        }\n        if (prevProps.muted !== muted) {\n            if (muted) {\n                this.player.mute();\n            } else {\n                this.player.unmute();\n                if (volume !== null) {\n                    setTimeout(()=>this.player.setVolume(volume));\n                }\n            }\n        }\n        if (prevProps.playbackRate !== playbackRate && this.player.setPlaybackRate) {\n            this.player.setPlaybackRate(playbackRate);\n        }\n        if (prevProps.loop !== loop && this.player.setLoop) {\n            this.player.setLoop(loop);\n        }\n    }\n    getDuration() {\n        if (!this.isReady) return null;\n        return this.player.getDuration();\n    }\n    getCurrentTime() {\n        if (!this.isReady) return null;\n        return this.player.getCurrentTime();\n    }\n    getSecondsLoaded() {\n        if (!this.isReady) return null;\n        return this.player.getSecondsLoaded();\n    }\n    seekTo(amount, type, keepPlaying) {\n        if (!this.isReady) {\n            if (amount !== 0) {\n                this.seekOnPlay = amount;\n                setTimeout(()=>{\n                    this.seekOnPlay = null;\n                }, SEEK_ON_PLAY_EXPIRY);\n            }\n            return;\n        }\n        const isFraction = !type ? amount > 0 && amount < 1 : type === \"fraction\";\n        if (isFraction) {\n            const duration = this.player.getDuration();\n            if (!duration) {\n                console.warn(\"ReactPlayer: could not seek using fraction –\\xa0duration not yet available\");\n                return;\n            }\n            this.player.seekTo(duration * amount, keepPlaying);\n            return;\n        }\n        this.player.seekTo(amount, keepPlaying);\n    }\n    render() {\n        const Player2 = this.props.activePlayer;\n        if (!Player2) {\n            return null;\n        }\n        return /* @__PURE__ */ import_react.default.createElement(Player2, {\n            ...this.props,\n            onMount: this.handlePlayerMount,\n            onReady: this.handleReady,\n            onPlay: this.handlePlay,\n            onPause: this.handlePause,\n            onEnded: this.handleEnded,\n            onLoaded: this.handleLoaded,\n            onError: this.handleError\n        });\n    }\n}\n__publicField(Player, \"displayName\", \"Player\");\n__publicField(Player, \"propTypes\", import_props.propTypes);\n__publicField(Player, \"defaultProps\", import_props.defaultProps);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9QbGF5ZXIuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFdBQVdDLE9BQU9DLE1BQU07QUFDNUIsSUFBSUMsWUFBWUYsT0FBT0csY0FBYztBQUNyQyxJQUFJQyxtQkFBbUJKLE9BQU9LLHdCQUF3QjtBQUN0RCxJQUFJQyxvQkFBb0JOLE9BQU9PLG1CQUFtQjtBQUNsRCxJQUFJQyxlQUFlUixPQUFPUyxjQUFjO0FBQ3hDLElBQUlDLGVBQWVWLE9BQU9XLFNBQVMsQ0FBQ0MsY0FBYztBQUNsRCxJQUFJQyxrQkFBa0IsQ0FBQ0MsS0FBS0MsS0FBS0MsUUFBVUQsT0FBT0QsTUFBTVosVUFBVVksS0FBS0MsS0FBSztRQUFFRSxZQUFZO1FBQU1DLGNBQWM7UUFBTUMsVUFBVTtRQUFNSDtJQUFNLEtBQUtGLEdBQUcsQ0FBQ0MsSUFBSSxHQUFHQztBQUMxSixJQUFJSSxXQUFXLENBQUNDLFFBQVFDO0lBQ3RCLElBQUssSUFBSUMsUUFBUUQsSUFDZnBCLFVBQVVtQixRQUFRRSxNQUFNO1FBQUVDLEtBQUtGLEdBQUcsQ0FBQ0MsS0FBSztRQUFFTixZQUFZO0lBQUs7QUFDL0Q7QUFDQSxJQUFJUSxjQUFjLENBQUNDLElBQUlDLE1BQU1DLFFBQVFDO0lBQ25DLElBQUlGLFFBQVEsT0FBT0EsU0FBUyxZQUFZLE9BQU9BLFNBQVMsWUFBWTtRQUNsRSxLQUFLLElBQUlaLE9BQU9ULGtCQUFrQnFCLE1BQ2hDLElBQUksQ0FBQ2pCLGFBQWFvQixJQUFJLENBQUNKLElBQUlYLFFBQVFBLFFBQVFhLFFBQ3pDMUIsVUFBVXdCLElBQUlYLEtBQUs7WUFBRVMsS0FBSyxJQUFNRyxJQUFJLENBQUNaLElBQUk7WUFBRUUsWUFBWSxDQUFFWSxDQUFBQSxPQUFPekIsaUJBQWlCdUIsTUFBTVosSUFBRyxLQUFNYyxLQUFLWixVQUFVO1FBQUM7SUFDdEg7SUFDQSxPQUFPUztBQUNUO0FBQ0EsSUFBSUssVUFBVSxDQUFDQyxLQUFL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Z0JNLGFBQWE0RixZQUFZIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktZG9jcy1mcm9uLWVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXBsYXllci9saWIvUGxheWVyLmpzPzhlMjkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fY3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2dldFByb3RvT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvRVNNID0gKG1vZCwgaXNOb2RlTW9kZSwgdGFyZ2V0KSA9PiAodGFyZ2V0ID0gbW9kICE9IG51bGwgPyBfX2NyZWF0ZShfX2dldFByb3RvT2YobW9kKSkgOiB7fSwgX19jb3B5UHJvcHMoXG4gIC8vIElmIHRoZSBpbXBvcnRlciBpcyBpbiBub2RlIGNvbXBhdGliaWxpdHkgbW9kZSBvciB0aGlzIGlzIG5vdCBhbiBFU01cbiAgLy8gZmlsZSB0aGF0IGhhcyBiZWVuIGNvbnZlcnRlZCB0byBhIENvbW1vbkpTIGZpbGUgdXNpbmcgYSBCYWJlbC1cbiAgLy8gY29tcGF0aWJsZSB0cmFuc2Zvcm0gKGkuZS4gXCJfX2VzTW9kdWxlXCIgaGFzIG5vdCBiZWVuIHNldCksIHRoZW4gc2V0XG4gIC8vIFwiZGVmYXVsdFwiIHRvIHRoZSBDb21tb25KUyBcIm1vZHVsZS5leHBvcnRzXCIgZm9yIG5vZGUgY29tcGF0aWJpbGl0eS5cbiAgaXNOb2RlTW9kZSB8fCAhbW9kIHx8ICFtb2QuX19lc01vZHVsZSA/IF9fZGVmUHJvcCh0YXJnZXQsIFwiZGVmYXVsdFwiLCB7IHZhbHVlOiBtb2QsIGVudW1lcmFibGU6IHRydWUgfSkgOiB0YXJnZXQsXG4gIG1vZFxuKSk7XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBfX3B1YmxpY0ZpZWxkID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ge1xuICBfX2RlZk5vcm1hbFByb3Aob2JqLCB0eXBlb2Yga2V5ICE9PSBcInN5bWJvbFwiID8ga2V5ICsgXCJcIiA6IGtleSwgdmFsdWUpO1xuICByZXR1cm4gdmFsdWU7XG59O1xudmFyIFBsYXllcl9leHBvcnRzID0ge307XG5fX2V4cG9ydChQbGF5ZXJfZXhwb3J0cywge1xuICBkZWZhdWx0OiAoKSA9PiBQbGF5ZXJcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoUGxheWVyX2V4cG9ydHMpO1xudmFyIGltcG9ydF9yZWFjdCA9IF9fdG9FU00ocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBpbXBvcnRfcmVhY3RfZmFzdF9jb21wYXJlID0gX190b0VTTShyZXF1aXJlKFwicmVhY3QtZmFzdC1jb21wYXJlXCIpKTtcbnZhciBpbXBvcnRfcHJvcHMgPSByZXF1aXJlKFwiLi9wcm9wc1wiKTtcbnZhciBpbXBvcnRfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmNvbnN0IFNFRUtfT05fUExBWV9FWFBJUlkgPSA1ZTM7XG5jbGFzcyBQbGF5ZXIgZXh0ZW5kcyBpbXBvcnRfcmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwibW91bnRlZFwiLCBmYWxzZSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImlzUmVhZHlcIiwgZmFsc2UpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJpc1BsYXlpbmdcIiwgZmFsc2UpO1xuICAgIC8vIFRyYWNrIHBsYXlpbmcgc3RhdGUgaW50ZXJuYWxseSB0byBwcmV2ZW50IGJ1Z3NcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiaXNMb2FkaW5nXCIsIHRydWUpO1xuICAgIC8vIFVzZSBpc0xvYWRpbmcgdG8gcHJldmVudCBvblBhdXNlIHdoZW4gc3dpdGNoaW5nIFVSTFxuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJsb2FkT25SZWFkeVwiLCBudWxsKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwic3RhcnRPblBsYXlcIiwgdHJ1ZSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInNlZWtPblBsYXlcIiwgbnVsbCk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIm9uRHVyYXRpb25DYWxsZWRcIiwgZmFsc2UpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJoYW5kbGVQbGF5ZXJNb3VudFwiLCAocGxheWVyKSA9PiB7XG4gICAgICBpZiAodGhpcy5wbGF5ZXIpIHtcbiAgICAgICAgdGhpcy5wcm9ncmVzcygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLnBsYXllciA9IHBsYXllcjtcbiAgICAgIHRoaXMucGxheWVyLmxvYWQodGhpcy5wcm9wcy51cmwpO1xuICAgICAgdGhpcy5wcm9ncmVzcygpO1xuICAgIH0pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJnZXRJbnRlcm5hbFBsYXllclwiLCAoa2V5KSA9PiB7XG4gICAgICBpZiAoIXRoaXMucGxheWVyKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiB0aGlzLnBsYXllcltrZXldO1xuICAgIH0pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJwcm9ncmVzc1wiLCAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5wcm9wcy51cmwgJiYgdGhpcy5wbGF5ZXIgJiYgdGhpcy5pc1JlYWR5KSB7XG4gICAgICAgIGNvbnN0IHBsYXllZFNlY29uZHMgPSB0aGlzLmdldEN1cnJlbnRUaW1lKCkgfHwgMDtcbiAgICAgICAgY29uc3QgbG9hZGVkU2Vjb25kcyA9IHRoaXMuZ2V0U2Vjb25kc0xvYWRlZCgpO1xuICAgICAgICBjb25zdCBkdXJhdGlvbiA9IHRoaXMuZ2V0RHVyYXRpb24oKTtcbiAgICAgICAgaWYgKGR1cmF0aW9uKSB7XG4gICAgICAgICAgY29uc3QgcHJvZ3Jlc3MgPSB7XG4gICAgICAgICAgICBwbGF5ZWRTZWNvbmRzLFxuICAgICAgICAgICAgcGxheWVkOiBwbGF5ZWRTZWNvbmRzIC8gZHVyYXRpb25cbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmIChsb2FkZWRTZWNvbmRzICE9PSBudWxsKSB7XG4gICAgICAgICAgICBwcm9ncmVzcy5sb2FkZWRTZWNvbmRzID0gbG9hZGVkU2Vjb25kcztcbiAgICAgICAgICAgIHByb2dyZXNzLmxvYWRlZCA9IGxvYWRlZFNlY29uZHMgLyBkdXJhdGlvbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHByb2dyZXNzLnBsYXllZFNlY29uZHMgIT09IHRoaXMucHJldlBsYXllZCB8fCBwcm9ncmVzcy5sb2FkZWRTZWNvbmRzICE9PSB0aGlzLnByZXZMb2FkZWQpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25Qcm9ncmVzcyhwcm9ncmVzcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMucHJldlBsYXllZCA9IHByb2dyZXNzLnBsYXllZFNlY29uZHM7XG4gICAgICAgICAgdGhpcy5wcmV2TG9hZGVkID0gcHJvZ3Jlc3MubG9hZGVkU2Vjb25kcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5wcm9ncmVzc1RpbWVvdXQgPSBzZXRUaW1lb3V0KHRoaXMucHJvZ3Jlc3MsIHRoaXMucHJvcHMucHJvZ3Jlc3NGcmVxdWVuY3kgfHwgdGhpcy5wcm9wcy5wcm9ncmVzc0ludGVydmFsKTtcbiAgICB9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiaGFuZGxlUmVhZHlcIiwgKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLm1vdW50ZWQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRoaXMuaXNSZWFkeSA9IHRydWU7XG4gICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xuICAgICAgY29uc3QgeyBvblJlYWR5LCBwbGF5aW5nLCB2b2x1bWUsIG11dGVkIH0gPSB0aGlzLnByb3BzO1xuICAgICAgb25SZWFkeSgpO1xuICAgICAgaWYgKCFtdXRlZCAmJiB2b2x1bWUgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIuc2V0Vm9sdW1lKHZvbHVtZSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5sb2FkT25SZWFkeSkge1xuICAgICAgICB0aGlzLnBsYXllci5sb2FkKHRoaXMubG9hZE9uUmVhZHksIHRydWUpO1xuICAgICAgICB0aGlzLmxvYWRPblJlYWR5ID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAocGxheWluZykge1xuICAgICAgICB0aGlzLnBsYXllci5wbGF5KCk7XG4gICAgICB9XG4gICAgICB0aGlzLmhhbmRsZUR1cmF0aW9uQ2hlY2soKTtcbiAgICB9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiaGFuZGxlUGxheVwiLCAoKSA9PiB7XG4gICAgICB0aGlzLmlzUGxheWluZyA9IHRydWU7XG4gICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xuICAgICAgY29uc3QgeyBvblN0YXJ0LCBvblBsYXksIHBsYXliYWNrUmF0ZSB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGlmICh0aGlzLnN0YXJ0T25QbGF5KSB7XG4gICAgICAgIGlmICh0aGlzLnBsYXllci5zZXRQbGF5YmFja1JhdGUgJiYgcGxheWJhY2tSYXRlICE9PSAxKSB7XG4gICAgICAgICAgdGhpcy5wbGF5ZXIuc2V0UGxheWJhY2tSYXRlKHBsYXliYWNrUmF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgb25TdGFydCgpO1xuICAgICAgICB0aGlzLnN0YXJ0T25QbGF5ID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBvblBsYXkoKTtcbiAgICAgIGlmICh0aGlzLnNlZWtPblBsYXkpIHtcbiAgICAgICAgdGhpcy5zZWVrVG8odGhpcy5zZWVrT25QbGF5KTtcbiAgICAgICAgdGhpcy5zZWVrT25QbGF5ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHRoaXMuaGFuZGxlRHVyYXRpb25DaGVjaygpO1xuICAgIH0pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJoYW5kbGVQYXVzZVwiLCAoZSkgPT4ge1xuICAgICAgdGhpcy5pc1BsYXlpbmcgPSBmYWxzZTtcbiAgICAgIGlmICghdGhpcy5pc0xvYWRpbmcpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5vblBhdXNlKGUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJoYW5kbGVFbmRlZFwiLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGFjdGl2ZVBsYXllciwgbG9vcCwgb25FbmRlZCB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGlmIChhY3RpdmVQbGF5ZXIubG9vcE9uRW5kZWQgJiYgbG9vcCkge1xuICAgICAgICB0aGlzLnNlZWtUbygwKTtcbiAgICAgIH1cbiAgICAgIGlmICghbG9vcCkge1xuICAgICAgICB0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xuICAgICAgICBvbkVuZGVkKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImhhbmRsZUVycm9yXCIsICguLi5hcmdzKSA9PiB7XG4gICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5wcm9wcy5vbkVycm9yKC4uLmFyZ3MpO1xuICAgIH0pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJoYW5kbGVEdXJhdGlvbkNoZWNrXCIsICgpID0+IHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmR1cmF0aW9uQ2hlY2tUaW1lb3V0KTtcbiAgICAgIGNvbnN0IGR1cmF0aW9uID0gdGhpcy5nZXREdXJhdGlvbigpO1xuICAgICAgaWYgKGR1cmF0aW9uKSB7XG4gICAgICAgIGlmICghdGhpcy5vbkR1cmF0aW9uQ2FsbGVkKSB7XG4gICAgICAgICAgdGhpcy5wcm9wcy5vbkR1cmF0aW9uKGR1cmF0aW9uKTtcbiAgICAgICAgICB0aGlzLm9uRHVyYXRpb25DYWxsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmR1cmF0aW9uQ2hlY2tUaW1lb3V0ID0gc2V0VGltZW91dCh0aGlzLmhhbmRsZUR1cmF0aW9uQ2hlY2ssIDEwMCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImhhbmRsZUxvYWRlZFwiLCAoKSA9PiB7XG4gICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xuICAgIH0pO1xuICB9XG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMubW91bnRlZCA9IHRydWU7XG4gIH1cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMucHJvZ3Jlc3NUaW1lb3V0KTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5kdXJhdGlvbkNoZWNrVGltZW91dCk7XG4gICAgaWYgKHRoaXMuaXNSZWFkeSAmJiB0aGlzLnByb3BzLnN0b3BPblVubW91bnQpIHtcbiAgICAgIHRoaXMucGxheWVyLnN0b3AoKTtcbiAgICAgIGlmICh0aGlzLnBsYXllci5kaXNhYmxlUElQKSB7XG4gICAgICAgIHRoaXMucGxheWVyLmRpc2FibGVQSVAoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5tb3VudGVkID0gZmFsc2U7XG4gIH1cbiAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICghdGhpcy5wbGF5ZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgeyB1cmwsIHBsYXlpbmcsIHZvbHVtZSwgbXV0ZWQsIHBsYXliYWNrUmF0ZSwgcGlwLCBsb29wLCBhY3RpdmVQbGF5ZXIsIGRpc2FibGVEZWZlcnJlZExvYWRpbmcgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCEoMCwgaW1wb3J0X3JlYWN0X2Zhc3RfY29tcGFyZS5kZWZhdWx0KShwcmV2UHJvcHMudXJsLCB1cmwpKSB7XG4gICAgICBpZiAodGhpcy5pc0xvYWRpbmcgJiYgIWFjdGl2ZVBsYXllci5mb3JjZUxvYWQgJiYgIWRpc2FibGVEZWZlcnJlZExvYWRpbmcgJiYgISgwLCBpbXBvcnRfdXRpbHMuaXNNZWRpYVN0cmVhbSkodXJsKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oYFJlYWN0UGxheWVyOiB0aGUgYXR0ZW1wdCB0byBsb2FkICR7dXJsfSBpcyBiZWluZyBkZWZlcnJlZCB1bnRpbCB0aGUgcGxheWVyIGhhcyBsb2FkZWRgKTtcbiAgICAgICAgdGhpcy5sb2FkT25SZWFkeSA9IHVybDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlO1xuICAgICAgdGhpcy5zdGFydE9uUGxheSA9IHRydWU7XG4gICAgICB0aGlzLm9uRHVyYXRpb25DYWxsZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMucGxheWVyLmxvYWQodXJsLCB0aGlzLmlzUmVhZHkpO1xuICAgIH1cbiAgICBpZiAoIXByZXZQcm9wcy5wbGF5aW5nICYmIHBsYXlpbmcgJiYgIXRoaXMuaXNQbGF5aW5nKSB7XG4gICAgICB0aGlzLnBsYXllci5wbGF5KCk7XG4gICAgfVxuICAgIGlmIChwcmV2UHJvcHMucGxheWluZyAmJiAhcGxheWluZyAmJiB0aGlzLmlzUGxheWluZykge1xuICAgICAgdGhpcy5wbGF5ZXIucGF1c2UoKTtcbiAgICB9XG4gICAgaWYgKCFwcmV2UHJvcHMucGlwICYmIHBpcCAmJiB0aGlzLnBsYXllci5lbmFibGVQSVApIHtcbiAgICAgIHRoaXMucGxheWVyLmVuYWJsZVBJUCgpO1xuICAgIH1cbiAgICBpZiAocHJldlByb3BzLnBpcCAmJiAhcGlwICYmIHRoaXMucGxheWVyLmRpc2FibGVQSVApIHtcbiAgICAgIHRoaXMucGxheWVyLmRpc2FibGVQSVAoKTtcbiAgICB9XG4gICAgaWYgKHByZXZQcm9wcy52b2x1bWUgIT09IHZvbHVtZSAmJiB2b2x1bWUgIT09IG51bGwpIHtcbiAgICAgIHRoaXMucGxheWVyLnNldFZvbHVtZSh2b2x1bWUpO1xuICAgIH1cbiAgICBpZiAocHJldlByb3BzLm11dGVkICE9PSBtdXRlZCkge1xuICAgICAgaWYgKG11dGVkKSB7XG4gICAgICAgIHRoaXMucGxheWVyLm11dGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGxheWVyLnVubXV0ZSgpO1xuICAgICAgICBpZiAodm9sdW1lICE9PSBudWxsKSB7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnBsYXllci5zZXRWb2x1bWUodm9sdW1lKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByZXZQcm9wcy5wbGF5YmFja1JhdGUgIT09IHBsYXliYWNrUmF0ZSAmJiB0aGlzLnBsYXllci5zZXRQbGF5YmFja1JhdGUpIHtcbiAgICAgIHRoaXMucGxheWVyLnNldFBsYXliYWNrUmF0ZShwbGF5YmFja1JhdGUpO1xuICAgIH1cbiAgICBpZiAocHJldlByb3BzLmxvb3AgIT09IGxvb3AgJiYgdGhpcy5wbGF5ZXIuc2V0TG9vcCkge1xuICAgICAgdGhpcy5wbGF5ZXIuc2V0TG9vcChsb29wKTtcbiAgICB9XG4gIH1cbiAgZ2V0RHVyYXRpb24oKSB7XG4gICAgaWYgKCF0aGlzLmlzUmVhZHkpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gdGhpcy5wbGF5ZXIuZ2V0RHVyYXRpb24oKTtcbiAgfVxuICBnZXRDdXJyZW50VGltZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNSZWFkeSlcbiAgICAgIHJldHVybiBudWxsO1xuICAgIHJldHVybiB0aGlzLnBsYXllci5nZXRDdXJyZW50VGltZSgpO1xuICB9XG4gIGdldFNlY29uZHNMb2FkZWQoKSB7XG4gICAgaWYgKCF0aGlzLmlzUmVhZHkpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gdGhpcy5wbGF5ZXIuZ2V0U2Vjb25kc0xvYWRlZCgpO1xuICB9XG4gIHNlZWtUbyhhbW91bnQsIHR5cGUsIGtlZXBQbGF5aW5nKSB7XG4gICAgaWYgKCF0aGlzLmlzUmVhZHkpIHtcbiAgICAgIGlmIChhbW91bnQgIT09IDApIHtcbiAgICAgICAgdGhpcy5zZWVrT25QbGF5ID0gYW1vdW50O1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLnNlZWtPblBsYXkgPSBudWxsO1xuICAgICAgICB9LCBTRUVLX09OX1BMQVlfRVhQSVJZKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaXNGcmFjdGlvbiA9ICF0eXBlID8gYW1vdW50ID4gMCAmJiBhbW91bnQgPCAxIDogdHlwZSA9PT0gXCJmcmFjdGlvblwiO1xuICAgIGlmIChpc0ZyYWN0aW9uKSB7XG4gICAgICBjb25zdCBkdXJhdGlvbiA9IHRoaXMucGxheWVyLmdldER1cmF0aW9uKCk7XG4gICAgICBpZiAoIWR1cmF0aW9uKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIlJlYWN0UGxheWVyOiBjb3VsZCBub3Qgc2VlayB1c2luZyBmcmFjdGlvbiBcXHUyMDEzXFx4QTBkdXJhdGlvbiBub3QgeWV0IGF2YWlsYWJsZVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5wbGF5ZXIuc2Vla1RvKGR1cmF0aW9uICogYW1vdW50LCBrZWVwUGxheWluZyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMucGxheWVyLnNlZWtUbyhhbW91bnQsIGtlZXBQbGF5aW5nKTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgUGxheWVyMiA9IHRoaXMucHJvcHMuYWN0aXZlUGxheWVyO1xuICAgIGlmICghUGxheWVyMikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gaW1wb3J0X3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgIFBsYXllcjIsXG4gICAgICB7XG4gICAgICAgIC4uLnRoaXMucHJvcHMsXG4gICAgICAgIG9uTW91bnQ6IHRoaXMuaGFuZGxlUGxheWVyTW91bnQsXG4gICAgICAgIG9uUmVhZHk6IHRoaXMuaGFuZGxlUmVhZHksXG4gICAgICAgIG9uUGxheTogdGhpcy5oYW5kbGVQbGF5LFxuICAgICAgICBvblBhdXNlOiB0aGlzLmhhbmRsZVBhdXNlLFxuICAgICAgICBvbkVuZGVkOiB0aGlzLmhhbmRsZUVuZGVkLFxuICAgICAgICBvbkxvYWRlZDogdGhpcy5oYW5kbGVMb2FkZWQsXG4gICAgICAgIG9uRXJyb3I6IHRoaXMuaGFuZGxlRXJyb3JcbiAgICAgIH1cbiAgICApO1xuICB9XG59XG5fX3B1YmxpY0ZpZWxkKFBsYXllciwgXCJkaXNwbGF5TmFtZVwiLCBcIlBsYXllclwiKTtcbl9fcHVibGljRmllbGQoUGxheWVyLCBcInByb3BUeXBlc1wiLCBpbXBvcnRfcHJvcHMucHJvcFR5cGVzKTtcbl9fcHVibGljRmllbGQoUGxheWVyLCBcImRlZmF1bHRQcm9wc1wiLCBpbXBvcnRfcHJvcHMuZGVmYXVsdFByb3BzKTtcbiJdLCJuYW1lcyI6WyJfX2NyZWF0ZSIsIk9iamVjdCIsImNyZWF0ZSIsIl9fZGVmUHJvcCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9fZ2V0UHJvdG9PZiIsImdldFByb3RvdHlwZU9mIiwiX19oYXNPd25Qcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJfX2RlZk5vcm1hbFByb3AiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9fZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImdldCIsIl9fY29weVByb3BzIiwidG8iLCJmcm9tIiwiZXhjZXB0IiwiZGVzYyIsImNhbGwiLCJfX3RvRVNNIiwibW9kIiwiaXNOb2RlTW9kZSIsIl9fZXNNb2R1bGUiLCJfX3RvQ29tbW9uSlMiLCJfX3B1YmxpY0ZpZWxkIiwiUGxheWVyX2V4cG9ydHMiLCJkZWZhdWx0IiwiUGxheWVyIiwibW9kdWxlIiwiZXhwb3J0cyIsImltcG9ydF9yZWFjdCIsInJlcXVpcmUiLCJpbXBvcnRfcmVhY3RfZmFzdF9jb21wYXJlIiwiaW1wb3J0X3Byb3BzIiwiaW1wb3J0X3V0aWxzIiwiU0VFS19PTl9QTEFZX0VYUElSWSIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwicGxheWVyIiwicHJvZ3Jlc3MiLCJsb2FkIiwicHJvcHMiLCJ1cmwiLCJpc1JlYWR5IiwicGxheWVkU2Vjb25kcyIsImdldEN1cnJlbnRUaW1lIiwibG9hZGVkU2Vjb25kcyIsImdldFNlY29uZHNMb2FkZWQiLCJkdXJhdGlvbiIsImdldER1cmF0aW9uIiwicGxheWVkIiwibG9hZGVkIiwicHJldlBsYXllZCIsInByZXZMb2FkZWQiLCJvblByb2dyZXNzIiwicHJvZ3Jlc3NUaW1lb3V0Iiwic2V0VGltZW91dCIsInByb2dyZXNzRnJlcXVlbmN5IiwicHJvZ3Jlc3NJbnRlcnZhbCIsIm1vdW50ZWQiLCJpc0xvYWRpbmciLCJvblJlYWR5IiwicGxheWluZyIsInZvbHVtZSIsIm11dGVkIiwic2V0Vm9sdW1lIiwibG9hZE9uUmVhZHkiLCJwbGF5IiwiaGFuZGxlRHVyYXRpb25DaGVjayIsImlzUGxheWluZyIsIm9uU3RhcnQiLCJvblBsYXkiLCJwbGF5YmFja1JhdGUiLCJzdGFydE9uUGxheSIsInNldFBsYXliYWNrUmF0ZSIsInNlZWtPblBsYXkiLCJzZWVrVG8iLCJlIiwib25QYXVzZSIsImFjdGl2ZVBsYXllciIsImxvb3AiLCJvbkVuZGVkIiwibG9vcE9uRW5kZWQiLCJhcmdzIiwib25FcnJvciIsImNsZWFyVGltZW91dCIsImR1cmF0aW9uQ2hlY2tUaW1lb3V0Iiwib25EdXJhdGlvbkNhbGxlZCIsIm9uRHVyYXRpb24iLCJjb21wb25lbnREaWRNb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50Iiwic3RvcE9uVW5tb3VudCIsInN0b3AiLCJkaXNhYmxlUElQIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicHJldlByb3BzIiwicGlwIiwiZGlzYWJsZURlZmVycmVkTG9hZGluZyIsImZvcmNlTG9hZCIsImlzTWVkaWFTdHJlYW0iLCJjb25zb2xlIiwid2FybiIsInBhdXNlIiwiZW5hYmxlUElQIiwibXV0ZSIsInVubXV0ZSIsInNldExvb3AiLCJhbW91bnQiLCJ0eXBlIiwia2VlcFBsYXlpbmciLCJpc0ZyYWN0aW9uIiwicmVuZGVyIiwiUGxheWVyMiIsImNyZWF0ZUVsZW1lbnQiLCJvbk1vdW50IiwiaGFuZGxlUGxheWVyTW91bnQiLCJoYW5kbGVSZWFkeSIsImhhbmRsZVBsYXkiLCJoYW5kbGVQYXVzZSIsImhhbmRsZUVuZGVkIiwib25Mb2FkZWQiLCJoYW5kbGVMb2FkZWQiLCJoYW5kbGVFcnJvciIsInByb3BUeXBlcyIsImRlZmF1bHRQcm9wcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/Player.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/Preview.js":
/*!**************************************************!*\
  !*** ./node_modules/react-player/lib/Preview.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Preview_exports = {};\n__export(Preview_exports, {\n    default: ()=>Preview\n});\nmodule.exports = __toCommonJS(Preview_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nconst ICON_SIZE = \"64px\";\nconst cache = {};\nclass Preview extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"mounted\", false);\n        __publicField(this, \"state\", {\n            image: null\n        });\n        __publicField(this, \"handleKeyPress\", (e)=>{\n            if (e.key === \"Enter\" || e.key === \" \") {\n                this.props.onClick();\n            }\n        });\n    }\n    componentDidMount() {\n        this.mounted = true;\n        this.fetchImage(this.props);\n    }\n    componentDidUpdate(prevProps) {\n        const { url, light } = this.props;\n        if (prevProps.url !== url || prevProps.light !== light) {\n            this.fetchImage(this.props);\n        }\n    }\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n    fetchImage({ url, light, oEmbedUrl }) {\n        if (import_react.default.isValidElement(light)) {\n            return;\n        }\n        if (typeof light === \"string\") {\n            this.setState({\n                image: light\n            });\n            return;\n        }\n        if (cache[url]) {\n            this.setState({\n                image: cache[url]\n            });\n            return;\n        }\n        this.setState({\n            image: null\n        });\n        return window.fetch(oEmbedUrl.replace(\"{url}\", url)).then((response)=>response.json()).then((data)=>{\n            if (data.thumbnail_url && this.mounted) {\n                const image = data.thumbnail_url.replace(\"height=100\", \"height=480\").replace(\"-d_295x166\", \"-d_640\");\n                this.setState({\n                    image\n                });\n                cache[url] = image;\n            }\n        });\n    }\n    render() {\n        const { light, onClick, playIcon, previewTabIndex } = this.props;\n        const { image } = this.state;\n        const isElement = import_react.default.isValidElement(light);\n        const flexCenter = {\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\"\n        };\n        const styles = {\n            preview: {\n                width: \"100%\",\n                height: \"100%\",\n                backgroundImage: image && !isElement ? `url(${image})` : void 0,\n                backgroundSize: \"cover\",\n                backgroundPosition: \"center\",\n                cursor: \"pointer\",\n                ...flexCenter\n            },\n            shadow: {\n                background: \"radial-gradient(rgb(0, 0, 0, 0.3), rgba(0, 0, 0, 0) 60%)\",\n                borderRadius: ICON_SIZE,\n                width: ICON_SIZE,\n                height: ICON_SIZE,\n                position: isElement ? \"absolute\" : void 0,\n                ...flexCenter\n            },\n            playIcon: {\n                borderStyle: \"solid\",\n                borderWidth: \"16px 0 16px 26px\",\n                borderColor: \"transparent transparent transparent white\",\n                marginLeft: \"7px\"\n            }\n        };\n        const defaultPlayIcon = /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            style: styles.shadow,\n            className: \"react-player__shadow\"\n        }, /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            style: styles.playIcon,\n            className: \"react-player__play-icon\"\n        }));\n        return /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            style: styles.preview,\n            className: \"react-player__preview\",\n            onClick,\n            tabIndex: previewTabIndex,\n            onKeyPress: this.handleKeyPress\n        }, isElement ? light : null, playIcon || defaultPlayIcon);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/Preview.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/ReactPlayer.js":
/*!******************************************************!*\
  !*** ./node_modules/react-player/lib/ReactPlayer.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar ReactPlayer_exports = {};\n__export(ReactPlayer_exports, {\n    createReactPlayer: ()=>createReactPlayer\n});\nmodule.exports = __toCommonJS(ReactPlayer_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_deepmerge = __toESM(__webpack_require__(/*! deepmerge */ \"(ssr)/./node_modules/deepmerge/dist/cjs.js\"));\nvar import_memoize_one = __toESM(__webpack_require__(/*! memoize-one */ \"(ssr)/./node_modules/memoize-one/dist/memoize-one.esm.js\"));\nvar import_react_fast_compare = __toESM(__webpack_require__(/*! react-fast-compare */ \"(ssr)/./node_modules/react-fast-compare/index.js\"));\nvar import_props = __webpack_require__(/*! ./props */ \"(ssr)/./node_modules/react-player/lib/props.js\");\nvar import_utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_Player = __toESM(__webpack_require__(/*! ./Player */ \"(ssr)/./node_modules/react-player/lib/Player.js\"));\nconst Preview = (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerPreview */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Preview */ \"(ssr)/./node_modules/react-player/lib/Preview.js\", 23)));\nconst IS_BROWSER =  false && 0;\nconst IS_GLOBAL = typeof global !== \"undefined\" && global.window && global.window.document;\nconst SUPPORTED_PROPS = Object.keys(import_props.propTypes);\nconst UniversalSuspense = IS_BROWSER || IS_GLOBAL ? import_react.Suspense : ()=>null;\nconst customPlayers = [];\nconst createReactPlayer = (players, fallback)=>{\n    var _a;\n    return _a = class extends import_react.Component {\n        constructor(){\n            super(...arguments);\n            __publicField(this, \"state\", {\n                showPreview: !!this.props.light\n            });\n            // Use references, as refs is used by React\n            __publicField(this, \"references\", {\n                wrapper: (wrapper)=>{\n                    this.wrapper = wrapper;\n                },\n                player: (player)=>{\n                    this.player = player;\n                }\n            });\n            __publicField(this, \"handleClickPreview\", (e)=>{\n                this.setState({\n                    showPreview: false\n                });\n                this.props.onClickPreview(e);\n            });\n            __publicField(this, \"showPreview\", ()=>{\n                this.setState({\n                    showPreview: true\n                });\n            });\n            __publicField(this, \"getDuration\", ()=>{\n                if (!this.player) return null;\n                return this.player.getDuration();\n            });\n            __publicField(this, \"getCurrentTime\", ()=>{\n                if (!this.player) return null;\n                return this.player.getCurrentTime();\n            });\n            __publicField(this, \"getSecondsLoaded\", ()=>{\n                if (!this.player) return null;\n                return this.player.getSecondsLoaded();\n            });\n            __publicField(this, \"getInternalPlayer\", (key = \"player\")=>{\n                if (!this.player) return null;\n                return this.player.getInternalPlayer(key);\n            });\n            __publicField(this, \"seekTo\", (fraction, type, keepPlaying)=>{\n                if (!this.player) return null;\n                this.player.seekTo(fraction, type, keepPlaying);\n            });\n            __publicField(this, \"handleReady\", ()=>{\n                this.props.onReady(this);\n            });\n            __publicField(this, \"getActivePlayer\", (0, import_memoize_one.default)((url)=>{\n                for (const player of [\n                    ...customPlayers,\n                    ...players\n                ]){\n                    if (player.canPlay(url)) {\n                        return player;\n                    }\n                }\n                if (fallback) {\n                    return fallback;\n                }\n                return null;\n            }));\n            __publicField(this, \"getConfig\", (0, import_memoize_one.default)((url, key)=>{\n                const { config } = this.props;\n                return import_deepmerge.default.all([\n                    import_props.defaultProps.config,\n                    import_props.defaultProps.config[key] || {},\n                    config,\n                    config[key] || {}\n                ]);\n            }));\n            __publicField(this, \"getAttributes\", (0, import_memoize_one.default)((url)=>{\n                return (0, import_utils.omit)(this.props, SUPPORTED_PROPS);\n            }));\n            __publicField(this, \"renderActivePlayer\", (url)=>{\n                if (!url) return null;\n                const player = this.getActivePlayer(url);\n                if (!player) return null;\n                const config = this.getConfig(url, player.key);\n                return /* @__PURE__ */ import_react.default.createElement(import_Player.default, {\n                    ...this.props,\n                    key: player.key,\n                    ref: this.references.player,\n                    config,\n                    activePlayer: player.lazyPlayer || player,\n                    onReady: this.handleReady\n                });\n            });\n        }\n        shouldComponentUpdate(nextProps, nextState) {\n            return !(0, import_react_fast_compare.default)(this.props, nextProps) || !(0, import_react_fast_compare.default)(this.state, nextState);\n        }\n        componentDidUpdate(prevProps) {\n            const { light } = this.props;\n            if (!prevProps.light && light) {\n                this.setState({\n                    showPreview: true\n                });\n            }\n            if (prevProps.light && !light) {\n                this.setState({\n                    showPreview: false\n                });\n            }\n        }\n        renderPreview(url) {\n            if (!url) return null;\n            const { light, playIcon, previewTabIndex, oEmbedUrl } = this.props;\n            return /* @__PURE__ */ import_react.default.createElement(Preview, {\n                url,\n                light,\n                playIcon,\n                previewTabIndex,\n                oEmbedUrl,\n                onClick: this.handleClickPreview\n            });\n        }\n        render() {\n            const { url, style, width, height, fallback: fallback2, wrapper: Wrapper } = this.props;\n            const { showPreview } = this.state;\n            const attributes = this.getAttributes(url);\n            const wrapperRef = typeof Wrapper === \"string\" ? this.references.wrapper : void 0;\n            return /* @__PURE__ */ import_react.default.createElement(Wrapper, {\n                ref: wrapperRef,\n                style: {\n                    ...style,\n                    width,\n                    height\n                },\n                ...attributes\n            }, /* @__PURE__ */ import_react.default.createElement(UniversalSuspense, {\n                fallback: fallback2\n            }, showPreview ? this.renderPreview(url) : this.renderActivePlayer(url)));\n        }\n    }, __publicField(_a, \"displayName\", \"ReactPlayer\"), __publicField(_a, \"propTypes\", import_props.propTypes), __publicField(_a, \"defaultProps\", import_props.defaultProps), __publicField(_a, \"addCustomPlayer\", (player)=>{\n        customPlayers.push(player);\n    }), __publicField(_a, \"removeCustomPlayers\", ()=>{\n        customPlayers.length = 0;\n    }), __publicField(_a, \"canPlay\", (url)=>{\n        for (const Player2 of [\n            ...customPlayers,\n            ...players\n        ]){\n            if (Player2.canPlay(url)) {\n                return true;\n            }\n        }\n        return false;\n    }), __publicField(_a, \"canEnablePIP\", (url)=>{\n        for (const Player2 of [\n            ...customPlayers,\n            ...players\n        ]){\n            if (Player2.canEnablePIP && Player2.canEnablePIP(url)) {\n                return true;\n            }\n        }\n        return false;\n    }), _a;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/ReactPlayer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/patterns.js":
/*!***************************************************!*\
  !*** ./node_modules/react-player/lib/patterns.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar patterns_exports = {};\n__export(patterns_exports, {\n    AUDIO_EXTENSIONS: ()=>AUDIO_EXTENSIONS,\n    DASH_EXTENSIONS: ()=>DASH_EXTENSIONS,\n    FLV_EXTENSIONS: ()=>FLV_EXTENSIONS,\n    HLS_EXTENSIONS: ()=>HLS_EXTENSIONS,\n    MATCH_URL_DAILYMOTION: ()=>MATCH_URL_DAILYMOTION,\n    MATCH_URL_FACEBOOK: ()=>MATCH_URL_FACEBOOK,\n    MATCH_URL_FACEBOOK_WATCH: ()=>MATCH_URL_FACEBOOK_WATCH,\n    MATCH_URL_KALTURA: ()=>MATCH_URL_KALTURA,\n    MATCH_URL_MIXCLOUD: ()=>MATCH_URL_MIXCLOUD,\n    MATCH_URL_SOUNDCLOUD: ()=>MATCH_URL_SOUNDCLOUD,\n    MATCH_URL_STREAMABLE: ()=>MATCH_URL_STREAMABLE,\n    MATCH_URL_TWITCH_CHANNEL: ()=>MATCH_URL_TWITCH_CHANNEL,\n    MATCH_URL_TWITCH_VIDEO: ()=>MATCH_URL_TWITCH_VIDEO,\n    MATCH_URL_VIDYARD: ()=>MATCH_URL_VIDYARD,\n    MATCH_URL_VIMEO: ()=>MATCH_URL_VIMEO,\n    MATCH_URL_WISTIA: ()=>MATCH_URL_WISTIA,\n    MATCH_URL_YOUTUBE: ()=>MATCH_URL_YOUTUBE,\n    VIDEO_EXTENSIONS: ()=>VIDEO_EXTENSIONS,\n    canPlay: ()=>canPlay\n});\nmodule.exports = __toCommonJS(patterns_exports);\nvar import_utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nconst MATCH_URL_YOUTUBE = /(?:youtu\\.be\\/|youtube(?:-nocookie|education)?\\.com\\/(?:embed\\/|v\\/|watch\\/|watch\\?v=|watch\\?.+&v=|shorts\\/|live\\/))((\\w|-){11})|youtube\\.com\\/playlist\\?list=|youtube\\.com\\/user\\//;\nconst MATCH_URL_SOUNDCLOUD = /(?:soundcloud\\.com|snd\\.sc)\\/[^.]+$/;\nconst MATCH_URL_VIMEO = /vimeo\\.com\\/(?!progressive_redirect).+/;\nconst MATCH_URL_FACEBOOK = /^https?:\\/\\/(www\\.)?facebook\\.com.*\\/(video(s)?|watch|story)(\\.php?|\\/).+$/;\nconst MATCH_URL_FACEBOOK_WATCH = /^https?:\\/\\/fb\\.watch\\/.+$/;\nconst MATCH_URL_STREAMABLE = /streamable\\.com\\/([a-z0-9]+)$/;\nconst MATCH_URL_WISTIA = /(?:wistia\\.(?:com|net)|wi\\.st)\\/(?:medias|embed)\\/(?:iframe\\/)?([^?]+)/;\nconst MATCH_URL_TWITCH_VIDEO = /(?:www\\.|go\\.)?twitch\\.tv\\/videos\\/(\\d+)($|\\?)/;\nconst MATCH_URL_TWITCH_CHANNEL = /(?:www\\.|go\\.)?twitch\\.tv\\/([a-zA-Z0-9_]+)($|\\?)/;\nconst MATCH_URL_DAILYMOTION = /^(?:(?:https?):)?(?:\\/\\/)?(?:www\\.)?(?:(?:dailymotion\\.com(?:\\/embed)?\\/video)|dai\\.ly)\\/([a-zA-Z0-9]+)(?:_[\\w_-]+)?(?:[\\w.#_-]+)?/;\nconst MATCH_URL_MIXCLOUD = /mixcloud\\.com\\/([^/]+\\/[^/]+)/;\nconst MATCH_URL_VIDYARD = /vidyard.com\\/(?:watch\\/)?([a-zA-Z0-9-_]+)/;\nconst MATCH_URL_KALTURA = /^https?:\\/\\/[a-zA-Z]+\\.kaltura.(com|org)\\/p\\/([0-9]+)\\/sp\\/([0-9]+)00\\/embedIframeJs\\/uiconf_id\\/([0-9]+)\\/partner_id\\/([0-9]+)(.*)entry_id.([a-zA-Z0-9-_].*)$/;\nconst AUDIO_EXTENSIONS = /\\.(m4a|m4b|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\\?)/i;\nconst VIDEO_EXTENSIONS = /\\.(mp4|og[gv]|webm|mov|m4v)(#t=[,\\d+]+)?($|\\?)/i;\nconst HLS_EXTENSIONS = /\\.(m3u8)($|\\?)/i;\nconst DASH_EXTENSIONS = /\\.(mpd)($|\\?)/i;\nconst FLV_EXTENSIONS = /\\.(flv)($|\\?)/i;\nconst canPlayFile = (url)=>{\n    if (url instanceof Array) {\n        for (const item of url){\n            if (typeof item === \"string\" && canPlayFile(item)) {\n                return true;\n            }\n            if (canPlayFile(item.src)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if ((0, import_utils.isMediaStream)(url) || (0, import_utils.isBlobUrl)(url)) {\n        return true;\n    }\n    return AUDIO_EXTENSIONS.test(url) || VIDEO_EXTENSIONS.test(url) || HLS_EXTENSIONS.test(url) || DASH_EXTENSIONS.test(url) || FLV_EXTENSIONS.test(url);\n};\nconst canPlay = {\n    youtube: (url)=>{\n        if (url instanceof Array) {\n            return url.every((item)=>MATCH_URL_YOUTUBE.test(item));\n        }\n        return MATCH_URL_YOUTUBE.test(url);\n    },\n    soundcloud: (url)=>MATCH_URL_SOUNDCLOUD.test(url) && !AUDIO_EXTENSIONS.test(url),\n    vimeo: (url)=>MATCH_URL_VIMEO.test(url) && !VIDEO_EXTENSIONS.test(url) && !HLS_EXTENSIONS.test(url),\n    facebook: (url)=>MATCH_URL_FACEBOOK.test(url) || MATCH_URL_FACEBOOK_WATCH.test(url),\n    streamable: (url)=>MATCH_URL_STREAMABLE.test(url),\n    wistia: (url)=>MATCH_URL_WISTIA.test(url),\n    twitch: (url)=>MATCH_URL_TWITCH_VIDEO.test(url) || MATCH_URL_TWITCH_CHANNEL.test(url),\n    dailymotion: (url)=>MATCH_URL_DAILYMOTION.test(url),\n    mixcloud: (url)=>MATCH_URL_MIXCLOUD.test(url),\n    vidyard: (url)=>MATCH_URL_VIDYARD.test(url),\n    kaltura: (url)=>MATCH_URL_KALTURA.test(url),\n    file: canPlayFile\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/patterns.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/YouTube.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-player/lib/players/YouTube.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar YouTube_exports = {};\n__export(YouTube_exports, {\n    default: ()=>YouTube\n});\nmodule.exports = __toCommonJS(YouTube_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nconst SDK_URL = \"https://www.youtube.com/iframe_api\";\nconst SDK_GLOBAL = \"YT\";\nconst SDK_GLOBAL_READY = \"onYouTubeIframeAPIReady\";\nconst MATCH_PLAYLIST = /[?&](?:list|channel)=([a-zA-Z0-9_-]+)/;\nconst MATCH_USER_UPLOADS = /user\\/([a-zA-Z0-9_-]+)\\/?/;\nconst MATCH_NOCOOKIE = /youtube-nocookie\\.com/;\nconst NOCOOKIE_HOST = \"https://www.youtube-nocookie.com\";\nclass YouTube extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"callPlayer\", import_utils.callPlayer);\n        __publicField(this, \"parsePlaylist\", (url)=>{\n            if (url instanceof Array) {\n                return {\n                    listType: \"playlist\",\n                    playlist: url.map(this.getID).join(\",\")\n                };\n            }\n            if (MATCH_PLAYLIST.test(url)) {\n                const [, playlistId] = url.match(MATCH_PLAYLIST);\n                return {\n                    listType: \"playlist\",\n                    list: playlistId.replace(/^UC/, \"UU\")\n                };\n            }\n            if (MATCH_USER_UPLOADS.test(url)) {\n                const [, username] = url.match(MATCH_USER_UPLOADS);\n                return {\n                    listType: \"user_uploads\",\n                    list: username\n                };\n            }\n            return {};\n        });\n        __publicField(this, \"onStateChange\", (event)=>{\n            const { data } = event;\n            const { onPlay, onPause, onBuffer, onBufferEnd, onEnded, onReady, loop, config: { playerVars, onUnstarted } } = this.props;\n            const { UNSTARTED, PLAYING, PAUSED, BUFFERING, ENDED, CUED } = window[SDK_GLOBAL].PlayerState;\n            if (data === UNSTARTED) onUnstarted();\n            if (data === PLAYING) {\n                onPlay();\n                onBufferEnd();\n            }\n            if (data === PAUSED) onPause();\n            if (data === BUFFERING) onBuffer();\n            if (data === ENDED) {\n                const isPlaylist = !!this.callPlayer(\"getPlaylist\");\n                if (loop && !isPlaylist) {\n                    if (playerVars.start) {\n                        this.seekTo(playerVars.start);\n                    } else {\n                        this.play();\n                    }\n                }\n                onEnded();\n            }\n            if (data === CUED) onReady();\n        });\n        __publicField(this, \"mute\", ()=>{\n            this.callPlayer(\"mute\");\n        });\n        __publicField(this, \"unmute\", ()=>{\n            this.callPlayer(\"unMute\");\n        });\n        __publicField(this, \"ref\", (container)=>{\n            this.container = container;\n        });\n    }\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n    }\n    getID(url) {\n        if (!url || url instanceof Array || MATCH_PLAYLIST.test(url)) {\n            return null;\n        }\n        return url.match(import_patterns.MATCH_URL_YOUTUBE)[1];\n    }\n    load(url, isReady) {\n        const { playing, muted, playsinline, controls, loop, config, onError } = this.props;\n        const { playerVars, embedOptions } = config;\n        const id = this.getID(url);\n        if (isReady) {\n            if (MATCH_PLAYLIST.test(url) || MATCH_USER_UPLOADS.test(url) || url instanceof Array) {\n                this.player.loadPlaylist(this.parsePlaylist(url));\n                return;\n            }\n            this.player.cueVideoById({\n                videoId: id,\n                startSeconds: (0, import_utils.parseStartTime)(url) || playerVars.start,\n                endSeconds: (0, import_utils.parseEndTime)(url) || playerVars.end\n            });\n            return;\n        }\n        (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, (YT)=>YT.loaded).then((YT)=>{\n            if (!this.container) return;\n            this.player = new YT.Player(this.container, {\n                width: \"100%\",\n                height: \"100%\",\n                videoId: id,\n                playerVars: {\n                    autoplay: playing ? 1 : 0,\n                    mute: muted ? 1 : 0,\n                    controls: controls ? 1 : 0,\n                    start: (0, import_utils.parseStartTime)(url),\n                    end: (0, import_utils.parseEndTime)(url),\n                    origin: window.location.origin,\n                    playsinline: playsinline ? 1 : 0,\n                    ...this.parsePlaylist(url),\n                    ...playerVars\n                },\n                events: {\n                    onReady: ()=>{\n                        if (loop) {\n                            this.player.setLoop(true);\n                        }\n                        this.props.onReady();\n                    },\n                    onPlaybackRateChange: (event)=>this.props.onPlaybackRateChange(event.data),\n                    onPlaybackQualityChange: (event)=>this.props.onPlaybackQualityChange(event),\n                    onStateChange: this.onStateChange,\n                    onError: (event)=>onError(event.data)\n                },\n                host: MATCH_NOCOOKIE.test(url) ? NOCOOKIE_HOST : void 0,\n                ...embedOptions\n            });\n        }, onError);\n        if (embedOptions.events) {\n            console.warn(\"Using `embedOptions.events` will likely break things. Use ReactPlayer’s callback props instead, eg onReady, onPlay, onPause\");\n        }\n    }\n    play() {\n        this.callPlayer(\"playVideo\");\n    }\n    pause() {\n        this.callPlayer(\"pauseVideo\");\n    }\n    stop() {\n        if (!document.body.contains(this.callPlayer(\"getIframe\"))) return;\n        this.callPlayer(\"stopVideo\");\n    }\n    seekTo(amount, keepPlaying = false) {\n        this.callPlayer(\"seekTo\", amount);\n        if (!keepPlaying && !this.props.playing) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.callPlayer(\"setVolume\", fraction * 100);\n    }\n    setPlaybackRate(rate) {\n        this.callPlayer(\"setPlaybackRate\", rate);\n    }\n    setLoop(loop) {\n        this.callPlayer(\"setLoop\", loop);\n    }\n    getDuration() {\n        return this.callPlayer(\"getDuration\");\n    }\n    getCurrentTime() {\n        return this.callPlayer(\"getCurrentTime\");\n    }\n    getSecondsLoaded() {\n        return this.callPlayer(\"getVideoLoadedFraction\") * this.getDuration();\n    }\n    render() {\n        const { display } = this.props;\n        const style = {\n            width: \"100%\",\n            height: \"100%\",\n            display\n        };\n        return /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            style\n        }, /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            ref: this.ref\n        }));\n    }\n}\n__publicField(YouTube, \"displayName\", \"YouTube\");\n__publicField(YouTube, \"canPlay\", import_patterns.canPlay.youtube);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/YouTube.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/props.js":
/*!************************************************!*\
  !*** ./node_modules/react-player/lib/props.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar props_exports = {};\n__export(props_exports, {\n    defaultProps: ()=>defaultProps,\n    propTypes: ()=>propTypes\n});\nmodule.exports = __toCommonJS(props_exports);\nvar import_prop_types = __toESM(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nconst { string, bool, number, array, oneOfType, shape, object, func, node } = import_prop_types.default;\nconst propTypes = {\n    url: oneOfType([\n        string,\n        array,\n        object\n    ]),\n    playing: bool,\n    loop: bool,\n    controls: bool,\n    volume: number,\n    muted: bool,\n    playbackRate: number,\n    width: oneOfType([\n        string,\n        number\n    ]),\n    height: oneOfType([\n        string,\n        number\n    ]),\n    style: object,\n    progressInterval: number,\n    playsinline: bool,\n    pip: bool,\n    stopOnUnmount: bool,\n    light: oneOfType([\n        bool,\n        string,\n        object\n    ]),\n    playIcon: node,\n    previewTabIndex: number,\n    fallback: node,\n    oEmbedUrl: string,\n    wrapper: oneOfType([\n        string,\n        func,\n        shape({\n            render: func.isRequired\n        })\n    ]),\n    config: shape({\n        soundcloud: shape({\n            options: object\n        }),\n        youtube: shape({\n            playerVars: object,\n            embedOptions: object,\n            onUnstarted: func\n        }),\n        facebook: shape({\n            appId: string,\n            version: string,\n            playerId: string,\n            attributes: object\n        }),\n        dailymotion: shape({\n            params: object\n        }),\n        vimeo: shape({\n            playerOptions: object,\n            title: string\n        }),\n        file: shape({\n            attributes: object,\n            tracks: array,\n            forceVideo: bool,\n            forceAudio: bool,\n            forceHLS: bool,\n            forceSafariHLS: bool,\n            forceDisableHls: bool,\n            forceDASH: bool,\n            forceFLV: bool,\n            hlsOptions: object,\n            hlsVersion: string,\n            dashVersion: string,\n            flvVersion: string\n        }),\n        wistia: shape({\n            options: object,\n            playerId: string,\n            customControls: array\n        }),\n        mixcloud: shape({\n            options: object\n        }),\n        twitch: shape({\n            options: object,\n            playerId: string\n        }),\n        vidyard: shape({\n            options: object\n        })\n    }),\n    onReady: func,\n    onStart: func,\n    onPlay: func,\n    onPause: func,\n    onBuffer: func,\n    onBufferEnd: func,\n    onEnded: func,\n    onError: func,\n    onDuration: func,\n    onSeek: func,\n    onPlaybackRateChange: func,\n    onPlaybackQualityChange: func,\n    onProgress: func,\n    onClickPreview: func,\n    onEnablePIP: func,\n    onDisablePIP: func\n};\nconst noop = ()=>{};\nconst defaultProps = {\n    playing: false,\n    loop: false,\n    controls: false,\n    volume: null,\n    muted: false,\n    playbackRate: 1,\n    width: \"640px\",\n    height: \"360px\",\n    style: {},\n    progressInterval: 1e3,\n    playsinline: false,\n    pip: false,\n    stopOnUnmount: true,\n    light: false,\n    fallback: null,\n    wrapper: \"div\",\n    previewTabIndex: 0,\n    oEmbedUrl: \"https://noembed.com/embed?url={url}\",\n    config: {\n        soundcloud: {\n            options: {\n                visual: true,\n                // Undocumented, but makes player fill container and look better\n                buying: false,\n                liking: false,\n                download: false,\n                sharing: false,\n                show_comments: false,\n                show_playcount: false\n            }\n        },\n        youtube: {\n            playerVars: {\n                playsinline: 1,\n                showinfo: 0,\n                rel: 0,\n                iv_load_policy: 3,\n                modestbranding: 1\n            },\n            embedOptions: {},\n            onUnstarted: noop\n        },\n        facebook: {\n            appId: \"1309697205772819\",\n            version: \"v3.3\",\n            playerId: null,\n            attributes: {}\n        },\n        dailymotion: {\n            params: {\n                api: 1,\n                \"endscreen-enable\": false\n            }\n        },\n        vimeo: {\n            playerOptions: {\n                autopause: false,\n                byline: false,\n                portrait: false,\n                title: false\n            },\n            title: null\n        },\n        file: {\n            attributes: {},\n            tracks: [],\n            forceVideo: false,\n            forceAudio: false,\n            forceHLS: false,\n            forceDASH: false,\n            forceFLV: false,\n            hlsOptions: {},\n            hlsVersion: \"1.1.4\",\n            dashVersion: \"3.1.3\",\n            flvVersion: \"1.5.0\",\n            forceDisableHls: false\n        },\n        wistia: {\n            options: {},\n            playerId: null,\n            customControls: null\n        },\n        mixcloud: {\n            options: {\n                hide_cover: 1\n            }\n        },\n        twitch: {\n            options: {},\n            playerId: null\n        },\n        vidyard: {\n            options: {}\n        }\n    },\n    onReady: noop,\n    onStart: noop,\n    onPlay: noop,\n    onPause: noop,\n    onBuffer: noop,\n    onBufferEnd: noop,\n    onEnded: noop,\n    onError: noop,\n    onDuration: noop,\n    onSeek: noop,\n    onPlaybackRateChange: noop,\n    onPlaybackQualityChange: noop,\n    onProgress: noop,\n    onClickPreview: noop,\n    onEnablePIP: noop,\n    onDisablePIP: noop\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/props.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/utils.js":
/*!************************************************!*\
  !*** ./node_modules/react-player/lib/utils.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar utils_exports = {};\n__export(utils_exports, {\n    callPlayer: ()=>callPlayer,\n    getConfig: ()=>getConfig,\n    getSDK: ()=>getSDK,\n    isBlobUrl: ()=>isBlobUrl,\n    isMediaStream: ()=>isMediaStream,\n    lazy: ()=>lazy,\n    omit: ()=>omit,\n    parseEndTime: ()=>parseEndTime,\n    parseStartTime: ()=>parseStartTime,\n    queryString: ()=>queryString,\n    randomString: ()=>randomString,\n    supportsWebKitPresentationMode: ()=>supportsWebKitPresentationMode\n});\nmodule.exports = __toCommonJS(utils_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_load_script = __toESM(__webpack_require__(/*! load-script */ \"(ssr)/./node_modules/load-script/index.js\"));\nvar import_deepmerge = __toESM(__webpack_require__(/*! deepmerge */ \"(ssr)/./node_modules/deepmerge/dist/cjs.js\"));\nconst lazy = (componentImportFn)=>import_react.default.lazy(async ()=>{\n        const obj = await componentImportFn();\n        return typeof obj.default === \"function\" ? obj : obj.default;\n    });\nconst MATCH_START_QUERY = /[?&#](?:start|t)=([0-9hms]+)/;\nconst MATCH_END_QUERY = /[?&#]end=([0-9hms]+)/;\nconst MATCH_START_STAMP = /(\\d+)(h|m|s)/g;\nconst MATCH_NUMERIC = /^\\d+$/;\nfunction parseTimeParam(url, pattern) {\n    if (url instanceof Array) {\n        return void 0;\n    }\n    const match = url.match(pattern);\n    if (match) {\n        const stamp = match[1];\n        if (stamp.match(MATCH_START_STAMP)) {\n            return parseTimeString(stamp);\n        }\n        if (MATCH_NUMERIC.test(stamp)) {\n            return parseInt(stamp);\n        }\n    }\n    return void 0;\n}\nfunction parseTimeString(stamp) {\n    let seconds = 0;\n    let array = MATCH_START_STAMP.exec(stamp);\n    while(array !== null){\n        const [, count, period] = array;\n        if (period === \"h\") seconds += parseInt(count, 10) * 60 * 60;\n        if (period === \"m\") seconds += parseInt(count, 10) * 60;\n        if (period === \"s\") seconds += parseInt(count, 10);\n        array = MATCH_START_STAMP.exec(stamp);\n    }\n    return seconds;\n}\nfunction parseStartTime(url) {\n    return parseTimeParam(url, MATCH_START_QUERY);\n}\nfunction parseEndTime(url) {\n    return parseTimeParam(url, MATCH_END_QUERY);\n}\nfunction randomString() {\n    return Math.random().toString(36).substr(2, 5);\n}\nfunction queryString(object) {\n    return Object.keys(object).map((key)=>`${key}=${object[key]}`).join(\"&\");\n}\nfunction getGlobal(key) {\n    if (window[key]) {\n        return window[key];\n    }\n    if (window.exports && window.exports[key]) {\n        return window.exports[key];\n    }\n    if (window.module && window.module.exports && window.module.exports[key]) {\n        return window.module.exports[key];\n    }\n    return null;\n}\nconst requests = {};\nconst getSDK = enableStubOn(function getSDK2(url, sdkGlobal, sdkReady = null, isLoaded = ()=>true, fetchScript = import_load_script.default) {\n    const existingGlobal = getGlobal(sdkGlobal);\n    if (existingGlobal && isLoaded(existingGlobal)) {\n        return Promise.resolve(existingGlobal);\n    }\n    return new Promise((resolve, reject)=>{\n        if (requests[url]) {\n            requests[url].push({\n                resolve,\n                reject\n            });\n            return;\n        }\n        requests[url] = [\n            {\n                resolve,\n                reject\n            }\n        ];\n        const onLoaded = (sdk)=>{\n            requests[url].forEach((request)=>request.resolve(sdk));\n        };\n        if (sdkReady) {\n            const previousOnReady = window[sdkReady];\n            window[sdkReady] = function() {\n                if (previousOnReady) previousOnReady();\n                onLoaded(getGlobal(sdkGlobal));\n            };\n        }\n        fetchScript(url, (err)=>{\n            if (err) {\n                requests[url].forEach((request)=>request.reject(err));\n                requests[url] = null;\n            } else if (!sdkReady) {\n                onLoaded(getGlobal(sdkGlobal));\n            }\n        });\n    });\n});\nfunction getConfig(props, defaultProps) {\n    return (0, import_deepmerge.default)(defaultProps.config, props.config);\n}\nfunction omit(object, ...arrays) {\n    const omitKeys = [].concat(...arrays);\n    const output = {};\n    const keys = Object.keys(object);\n    for (const key of keys){\n        if (omitKeys.indexOf(key) === -1) {\n            output[key] = object[key];\n        }\n    }\n    return output;\n}\nfunction callPlayer(method, ...args) {\n    if (!this.player || !this.player[method]) {\n        let message = `ReactPlayer: ${this.constructor.displayName} player could not call %c${method}%c \\u2013 `;\n        if (!this.player) {\n            message += \"The player was not available\";\n        } else if (!this.player[method]) {\n            message += \"The method was not available\";\n        }\n        console.warn(message, \"font-weight: bold\", \"\");\n        return null;\n    }\n    return this.player[method](...args);\n}\nfunction isMediaStream(url) {\n    return  false && 0;\n}\nfunction isBlobUrl(url) {\n    return /^blob:/.test(url);\n}\nfunction supportsWebKitPresentationMode(video = document.createElement(\"video\")) {\n    const notMobile = /iPhone|iPod/.test(navigator.userAgent) === false;\n    return video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === \"function\" && notMobile;\n}\nfunction enableStubOn(fn) {\n    if (false) {}\n    return fn;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/youtube.js":
/*!**********************************************!*\
  !*** ./node_modules/react-player/youtube.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar createReactPlayer = (__webpack_require__(/*! ./lib/ReactPlayer */ \"(ssr)/./node_modules/react-player/lib/ReactPlayer.js\").createReactPlayer);\nvar Player = (__webpack_require__(/*! ./lib/players/YouTube */ \"(ssr)/./node_modules/react-player/lib/players/YouTube.js\")[\"default\"]);\nmodule.exports = createReactPlayer([\n    {\n        key: \"youtube\",\n        canPlay: Player.canPlay,\n        lazyPlayer: Player\n    }\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL3lvdXR1YmUuanMiLCJtYXBwaW5ncyI6IjtBQUNNLElBQUlBLG9CQUFvQkMsd0hBQThDO0FBQ3RFLElBQUlDLFNBQVNELHlIQUF3QztBQUNyREcsT0FBT0MsT0FBTyxHQUFHTCxrQkFBa0I7SUFBQztRQUNsQ00sS0FBSztRQUNMQyxTQUFTTCxPQUFPSyxPQUFPO1FBQ3ZCQyxZQUFZTjtJQUNkO0NBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL3lvdXR1YmUuanM/ZTgyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAgIHZhciBjcmVhdGVSZWFjdFBsYXllciA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UGxheWVyJykuY3JlYXRlUmVhY3RQbGF5ZXJcbiAgICAgIHZhciBQbGF5ZXIgPSByZXF1aXJlKCcuL2xpYi9wbGF5ZXJzL1lvdVR1YmUnKS5kZWZhdWx0XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVJlYWN0UGxheWVyKFt7XG4gICAgICAgIGtleTogJ3lvdXR1YmUnLFxuICAgICAgICBjYW5QbGF5OiBQbGF5ZXIuY2FuUGxheSxcbiAgICAgICAgbGF6eVBsYXllcjogUGxheWVyXG4gICAgICB9XSlcbiAgICAiXSwibmFtZXMiOlsiY3JlYXRlUmVhY3RQbGF5ZXIiLCJyZXF1aXJlIiwiUGxheWVyIiwiZGVmYXVsdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJrZXkiLCJjYW5QbGF5IiwibGF6eVBsYXllciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/youtube.js\n");

/***/ })

};
;
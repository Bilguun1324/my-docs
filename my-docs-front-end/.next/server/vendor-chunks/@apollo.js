"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@apollo";
exports.ids = ["vendor-chunks/@apollo"];
exports.modules = {

/***/ "(ssr)/./node_modules/@apollo/client/cache/core/cache.js":
/*!*********************************************************!*\
  !*** ./node_modules/@apollo/client/cache/core/cache.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloCache: () => (/* binding */ ApolloCache)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @wry/caches */ \"(ssr)/./node_modules/@wry/caches/lib/weak.js\");\n/* harmony import */ var _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/caching/getMemoryInternals.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n\n\n\n\n\nvar ApolloCache = /** @class */ function() {\n    function ApolloCache() {\n        this.assumeImmutableResults = false;\n        // Make sure we compute the same (===) fragment query document every\n        // time we receive the same fragment in readFragment.\n        this.getFragmentDoc = (0,optimism__WEBPACK_IMPORTED_MODULE_0__.wrap)(_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.getFragmentQueryDocument, {\n            max: _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.cacheSizes[\"cache.fragmentQueryDocuments\"] || 1000 /* defaultCacheSizes[\"cache.fragmentQueryDocuments\"] */ ,\n            cache: _wry_caches__WEBPACK_IMPORTED_MODULE_3__.WeakCache\n        });\n    }\n    // Transactional API\n    // The batch method is intended to replace/subsume both performTransaction\n    // and recordOptimisticTransaction, but performTransaction came first, so we\n    // provide a default batch implementation that's just another way of calling\n    // performTransaction. Subclasses of ApolloCache (such as InMemoryCache) can\n    // override the batch method to do more interesting things with its options.\n    ApolloCache.prototype.batch = function(options) {\n        var _this = this;\n        var optimisticId = typeof options.optimistic === \"string\" ? options.optimistic : options.optimistic === false ? null : void 0;\n        var updateResult;\n        this.performTransaction(function() {\n            return updateResult = options.update(_this);\n        }, optimisticId);\n        return updateResult;\n    };\n    ApolloCache.prototype.recordOptimisticTransaction = function(transaction, optimisticId) {\n        this.performTransaction(transaction, optimisticId);\n    };\n    // Optional API\n    // Called once per input document, allowing the cache to make static changes\n    // to the query, such as adding __typename fields.\n    ApolloCache.prototype.transformDocument = function(document) {\n        return document;\n    };\n    // Called before each ApolloLink request, allowing the cache to make dynamic\n    // changes to the query, such as filling in missing fragment definitions.\n    ApolloCache.prototype.transformForLink = function(document) {\n        return document;\n    };\n    ApolloCache.prototype.identify = function(object) {\n        return;\n    };\n    ApolloCache.prototype.gc = function() {\n        return [];\n    };\n    ApolloCache.prototype.modify = function(options) {\n        return false;\n    };\n    // DataProxy API\n    ApolloCache.prototype.readQuery = function(options, optimistic) {\n        if (optimistic === void 0) {\n            optimistic = !!options.optimistic;\n        }\n        return this.read((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, options), {\n            rootId: options.id || \"ROOT_QUERY\",\n            optimistic: optimistic\n        }));\n    };\n    ApolloCache.prototype.readFragment = function(options, optimistic) {\n        if (optimistic === void 0) {\n            optimistic = !!options.optimistic;\n        }\n        return this.read((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, options), {\n            query: this.getFragmentDoc(options.fragment, options.fragmentName),\n            rootId: options.id,\n            optimistic: optimistic\n        }));\n    };\n    ApolloCache.prototype.writeQuery = function(_a) {\n        var id = _a.id, data = _a.data, options = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__rest)(_a, [\n            \"id\",\n            \"data\"\n        ]);\n        return this.write(Object.assign(options, {\n            dataId: id || \"ROOT_QUERY\",\n            result: data\n        }));\n    };\n    ApolloCache.prototype.writeFragment = function(_a) {\n        var id = _a.id, data = _a.data, fragment = _a.fragment, fragmentName = _a.fragmentName, options = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__rest)(_a, [\n            \"id\",\n            \"data\",\n            \"fragment\",\n            \"fragmentName\"\n        ]);\n        return this.write(Object.assign(options, {\n            query: this.getFragmentDoc(fragment, fragmentName),\n            dataId: id,\n            result: data\n        }));\n    };\n    ApolloCache.prototype.updateQuery = function(options, update) {\n        return this.batch({\n            update: function(cache) {\n                var value = cache.readQuery(options);\n                var data = update(value);\n                if (data === void 0 || data === null) return value;\n                cache.writeQuery((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, options), {\n                    data: data\n                }));\n                return data;\n            }\n        });\n    };\n    ApolloCache.prototype.updateFragment = function(options, update) {\n        return this.batch({\n            update: function(cache) {\n                var value = cache.readFragment(options);\n                var data = update(value);\n                if (data === void 0 || data === null) return value;\n                cache.writeFragment((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, options), {\n                    data: data\n                }));\n                return data;\n            }\n        });\n    };\n    return ApolloCache;\n}();\n\nif (globalThis.__DEV__ !== false) {\n    ApolloCache.prototype.getMemoryInternals = _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_5__.getApolloCacheMemoryInternals;\n} //# sourceMappingURL=cache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/core/cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/core/types/common.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/core/types/common.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MissingFieldError: () => (/* binding */ MissingFieldError)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n\nvar MissingFieldError = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MissingFieldError, _super);\n    function MissingFieldError(message, path, query, variables) {\n        var _a;\n        // 'Error' breaks prototype chain here\n        var _this = _super.call(this, message) || this;\n        _this.message = message;\n        _this.path = path;\n        _this.query = query;\n        _this.variables = variables;\n        if (Array.isArray(_this.path)) {\n            _this.missing = _this.message;\n            for(var i = _this.path.length - 1; i >= 0; --i){\n                _this.missing = (_a = {}, _a[_this.path[i]] = _this.missing, _a);\n            }\n        } else {\n            _this.missing = _this.path;\n        }\n        // We're not using `Object.setPrototypeOf` here as it isn't fully supported\n        // on Android (see issue #3236).\n        _this.__proto__ = MissingFieldError.prototype;\n        return _this;\n    }\n    return MissingFieldError;\n}(Error);\n //# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY2FjaGUvY29yZS90eXBlcy9jb21tb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0M7QUFDbEMsSUFBSUMsb0JBQW9CLFdBQVcsR0FBSSxTQUFVQyxNQUFNO0lBQ25ERixnREFBU0EsQ0FBQ0MsbUJBQW1CQztJQUM3QixTQUFTRCxrQkFBa0JFLE9BQU8sRUFBRUMsSUFBSSxFQUFFQyxLQUFLLEVBQUVDLFNBQVM7UUFDdEQsSUFBSUM7UUFDSixzQ0FBc0M7UUFDdEMsSUFBSUMsUUFBUU4sT0FBT08sSUFBSSxDQUFDLElBQUksRUFBRU4sWUFBWSxJQUFJO1FBQzlDSyxNQUFNTCxPQUFPLEdBQUdBO1FBQ2hCSyxNQUFNSixJQUFJLEdBQUdBO1FBQ2JJLE1BQU1ILEtBQUssR0FBR0E7UUFDZEcsTUFBTUYsU0FBUyxHQUFHQTtRQUNsQixJQUFJSSxNQUFNQyxPQUFPLENBQUNILE1BQU1KLElBQUksR0FBRztZQUMzQkksTUFBTUksT0FBTyxHQUFHSixNQUFNTCxPQUFPO1lBQzdCLElBQUssSUFBSVUsSUFBSUwsTUFBTUosSUFBSSxDQUFDVSxNQUFNLEdBQUcsR0FBR0QsS0FBSyxHQUFHLEVBQUVBLEVBQUc7Z0JBQzdDTCxNQUFNSSxPQUFPLEdBQUlMLENBQUFBLEtBQUssQ0FBQyxHQUFHQSxFQUFFLENBQUNDLE1BQU1KLElBQUksQ0FBQ1MsRUFBRSxDQUFDLEdBQUdMLE1BQU1JLE9BQU8sRUFBRUwsRUFBQztZQUNsRTtRQUNKLE9BQ0s7WUFDREMsTUFBTUksT0FBTyxHQUFHSixNQUFNSixJQUFJO1FBQzlCO1FBQ0EsMkVBQTJFO1FBQzNFLGdDQUFnQztRQUNoQ0ksTUFBTU8sU0FBUyxHQUFHZCxrQkFBa0JlLFNBQVM7UUFDN0MsT0FBT1I7SUFDWDtJQUNBLE9BQU9QO0FBQ1gsRUFBRWdCO0FBQzJCLENBQzdCLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9jYWNoZS9jb3JlL3R5cGVzL2NvbW1vbi5qcz82YWEyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xudmFyIE1pc3NpbmdGaWVsZEVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNaXNzaW5nRmllbGRFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNaXNzaW5nRmllbGRFcnJvcihtZXNzYWdlLCBwYXRoLCBxdWVyeSwgdmFyaWFibGVzKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgLy8gJ0Vycm9yJyBicmVha3MgcHJvdG90eXBlIGNoYWluIGhlcmVcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbWVzc2FnZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIF90aGlzLnBhdGggPSBwYXRoO1xuICAgICAgICBfdGhpcy5xdWVyeSA9IHF1ZXJ5O1xuICAgICAgICBfdGhpcy52YXJpYWJsZXMgPSB2YXJpYWJsZXM7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KF90aGlzLnBhdGgpKSB7XG4gICAgICAgICAgICBfdGhpcy5taXNzaW5nID0gX3RoaXMubWVzc2FnZTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBfdGhpcy5wYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMubWlzc2luZyA9IChfYSA9IHt9LCBfYVtfdGhpcy5wYXRoW2ldXSA9IF90aGlzLm1pc3NpbmcsIF9hKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLm1pc3NpbmcgPSBfdGhpcy5wYXRoO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdlJ3JlIG5vdCB1c2luZyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBoZXJlIGFzIGl0IGlzbid0IGZ1bGx5IHN1cHBvcnRlZFxuICAgICAgICAvLyBvbiBBbmRyb2lkIChzZWUgaXNzdWUgIzMyMzYpLlxuICAgICAgICBfdGhpcy5fX3Byb3RvX18gPSBNaXNzaW5nRmllbGRFcnJvci5wcm90b3R5cGU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIE1pc3NpbmdGaWVsZEVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0IHsgTWlzc2luZ0ZpZWxkRXJyb3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1vbi5qcy5tYXAiXSwibmFtZXMiOlsiX19leHRlbmRzIiwiTWlzc2luZ0ZpZWxkRXJyb3IiLCJfc3VwZXIiLCJtZXNzYWdlIiwicGF0aCIsInF1ZXJ5IiwidmFyaWFibGVzIiwiX2EiLCJfdGhpcyIsImNhbGwiLCJBcnJheSIsImlzQXJyYXkiLCJtaXNzaW5nIiwiaSIsImxlbmd0aCIsIl9fcHJvdG9fXyIsInByb3RvdHlwZSIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/core/types/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/entityStore.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/entityStore.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EntityStore: () => (/* binding */ EntityStore),\n/* harmony export */   maybeDependOnExistenceOfEntity: () => (/* binding */ maybeDependOnExistenceOfEntity),\n/* harmony export */   supportsResultCaching: () => (/* binding */ supportsResultCaching)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n\n\n\n\n\n\n\nvar DELETE = Object.create(null);\nvar delModifier = function() {\n    return DELETE;\n};\nvar INVALIDATE = Object.create(null);\nvar EntityStore = /** @class */ function() {\n    function EntityStore(policies, group) {\n        var _this = this;\n        this.policies = policies;\n        this.group = group;\n        this.data = Object.create(null);\n        // Maps root entity IDs to the number of times they have been retained, minus\n        // the number of times they have been released. Retained entities keep other\n        // entities they reference (even indirectly) from being garbage collected.\n        this.rootIds = Object.create(null);\n        // Lazily tracks { __ref: <dataId> } strings contained by this.data[dataId].\n        this.refs = Object.create(null);\n        // Bound function that can be passed around to provide easy access to fields\n        // of Reference objects as well as ordinary objects.\n        this.getFieldValue = function(objectOrReference, storeFieldName) {\n            return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.maybeDeepFreeze)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(objectOrReference) ? _this.get(objectOrReference.__ref, storeFieldName) : objectOrReference && objectOrReference[storeFieldName]);\n        };\n        // Returns true for non-normalized StoreObjects and non-dangling\n        // References, indicating that readField(name, objOrRef) has a chance of\n        // working. Useful for filtering out dangling references from lists.\n        this.canRead = function(objOrRef) {\n            return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(objOrRef) ? _this.has(objOrRef.__ref) : typeof objOrRef === \"object\";\n        };\n        // Bound function that converts an id or an object with a __typename and\n        // primary key fields to a Reference object. If called with a Reference object,\n        // that same Reference object is returned. Pass true for mergeIntoStore to persist\n        // an object into the store.\n        this.toReference = function(objOrIdOrRef, mergeIntoStore) {\n            if (typeof objOrIdOrRef === \"string\") {\n                return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.makeReference)(objOrIdOrRef);\n            }\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(objOrIdOrRef)) {\n                return objOrIdOrRef;\n            }\n            var id = _this.policies.identify(objOrIdOrRef)[0];\n            if (id) {\n                var ref = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.makeReference)(id);\n                if (mergeIntoStore) {\n                    _this.merge(id, objOrIdOrRef);\n                }\n                return ref;\n            }\n        };\n    }\n    // Although the EntityStore class is abstract, it contains concrete\n    // implementations of the various NormalizedCache interface methods that\n    // are inherited by the Root and Layer subclasses.\n    EntityStore.prototype.toObject = function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, this.data);\n    };\n    EntityStore.prototype.has = function(dataId) {\n        return this.lookup(dataId, true) !== void 0;\n    };\n    EntityStore.prototype.get = function(dataId, fieldName) {\n        this.group.depend(dataId, fieldName);\n        if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.data, dataId)) {\n            var storeObject = this.data[dataId];\n            if (storeObject && _helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(storeObject, fieldName)) {\n                return storeObject[fieldName];\n            }\n        }\n        if (fieldName === \"__typename\" && _helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n            return this.policies.rootTypenamesById[dataId];\n        }\n        if (this instanceof Layer) {\n            return this.parent.get(dataId, fieldName);\n        }\n    };\n    EntityStore.prototype.lookup = function(dataId, dependOnExistence) {\n        // The has method (above) calls lookup with dependOnExistence = true, so\n        // that it can later be invalidated when we add or remove a StoreObject for\n        // this dataId. Any consumer who cares about the contents of the StoreObject\n        // should not rely on this dependency, since the contents could change\n        // without the object being added or removed.\n        if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n        if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.data, dataId)) {\n            return this.data[dataId];\n        }\n        if (this instanceof Layer) {\n            return this.parent.lookup(dataId, dependOnExistence);\n        }\n        if (this.policies.rootTypenamesById[dataId]) {\n            return Object.create(null);\n        }\n    };\n    EntityStore.prototype.merge = function(older, newer) {\n        var _this = this;\n        var dataId;\n        // Convert unexpected references to ID strings.\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(older)) older = older.__ref;\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(newer)) newer = newer.__ref;\n        var existing = typeof older === \"string\" ? this.lookup(dataId = older) : older;\n        var incoming = typeof newer === \"string\" ? this.lookup(dataId = newer) : newer;\n        // If newer was a string ID, but that ID was not defined in this store,\n        // then there are no fields to be merged, so we're done.\n        if (!incoming) return;\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof dataId === \"string\", 1);\n        var merged = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.DeepMerger(storeObjectReconciler).merge(existing, incoming);\n        // Even if merged === existing, existing may have come from a lower\n        // layer, so we always need to set this.data[dataId] on this level.\n        this.data[dataId] = merged;\n        if (merged !== existing) {\n            delete this.refs[dataId];\n            if (this.group.caching) {\n                var fieldsToDirty_1 = Object.create(null);\n                // If we added a new StoreObject where there was previously none, dirty\n                // anything that depended on the existence of this dataId, such as the\n                // EntityStore#has method.\n                if (!existing) fieldsToDirty_1.__exists = 1;\n                // Now invalidate dependents who called getFieldValue for any fields\n                // that are changing as a result of this merge.\n                Object.keys(incoming).forEach(function(storeFieldName) {\n                    if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n                        // Always dirty the full storeFieldName, which may include\n                        // serialized arguments following the fieldName prefix.\n                        fieldsToDirty_1[storeFieldName] = 1;\n                        // Also dirty fieldNameFromStoreName(storeFieldName) if it's\n                        // different from storeFieldName and this field does not have\n                        // keyArgs configured, because that means the cache can't make\n                        // any assumptions about how field values with the same field\n                        // name but different arguments might be interrelated, so it\n                        // must err on the side of invalidating all field values that\n                        // share the same short fieldName, regardless of arguments.\n                        var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_7__.fieldNameFromStoreName)(storeFieldName);\n                        if (fieldName !== storeFieldName && !_this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n                            fieldsToDirty_1[fieldName] = 1;\n                        }\n                        // If merged[storeFieldName] has become undefined, and this is the\n                        // Root layer, actually delete the property from the merged object,\n                        // which is guaranteed to have been created fresh in this method.\n                        if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {\n                            delete merged[storeFieldName];\n                        }\n                    }\n                });\n                if (fieldsToDirty_1.__typename && !(existing && existing.__typename) && // Since we return default root __typename strings\n                // automatically from store.get, we don't need to dirty the\n                // ROOT_QUERY.__typename field if merged.__typename is equal\n                // to the default string (usually \"Query\").\n                this.policies.rootTypenamesById[dataId] === merged.__typename) {\n                    delete fieldsToDirty_1.__typename;\n                }\n                Object.keys(fieldsToDirty_1).forEach(function(fieldName) {\n                    return _this.group.dirty(dataId, fieldName);\n                });\n            }\n        }\n    };\n    EntityStore.prototype.modify = function(dataId, fields) {\n        var _this = this;\n        var storeObject = this.lookup(dataId);\n        if (storeObject) {\n            var changedFields_1 = Object.create(null);\n            var needToMerge_1 = false;\n            var allDeleted_1 = true;\n            var sharedDetails_1 = {\n                DELETE: DELETE,\n                INVALIDATE: INVALIDATE,\n                isReference: _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference,\n                toReference: this.toReference,\n                canRead: this.canRead,\n                readField: function(fieldNameOrOptions, from) {\n                    return _this.policies.readField(typeof fieldNameOrOptions === \"string\" ? {\n                        fieldName: fieldNameOrOptions,\n                        from: from || (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.makeReference)(dataId)\n                    } : fieldNameOrOptions, {\n                        store: _this\n                    });\n                }\n            };\n            Object.keys(storeObject).forEach(function(storeFieldName) {\n                var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_7__.fieldNameFromStoreName)(storeFieldName);\n                var fieldValue = storeObject[storeFieldName];\n                if (fieldValue === void 0) return;\n                var modify = typeof fields === \"function\" ? fields : fields[storeFieldName] || fields[fieldName];\n                if (modify) {\n                    var newValue = modify === delModifier ? DELETE : modify((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.maybeDeepFreeze)(fieldValue), (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, sharedDetails_1), {\n                        fieldName: fieldName,\n                        storeFieldName: storeFieldName,\n                        storage: _this.getStorage(dataId, storeFieldName)\n                    }));\n                    if (newValue === INVALIDATE) {\n                        _this.group.dirty(dataId, storeFieldName);\n                    } else {\n                        if (newValue === DELETE) newValue = void 0;\n                        if (newValue !== fieldValue) {\n                            changedFields_1[storeFieldName] = newValue;\n                            needToMerge_1 = true;\n                            fieldValue = newValue;\n                            if (globalThis.__DEV__ !== false) {\n                                var checkReference = function(ref) {\n                                    if (_this.lookup(ref.__ref) === undefined) {\n                                        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(2, ref);\n                                        return true;\n                                    }\n                                };\n                                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(newValue)) {\n                                    checkReference(newValue);\n                                } else if (Array.isArray(newValue)) {\n                                    // Warn about writing \"mixed\" arrays of Reference and non-Reference objects\n                                    var seenReference = false;\n                                    var someNonReference = void 0;\n                                    for(var _i = 0, newValue_1 = newValue; _i < newValue_1.length; _i++){\n                                        var value = newValue_1[_i];\n                                        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(value)) {\n                                            seenReference = true;\n                                            if (checkReference(value)) break;\n                                        } else {\n                                            // Do not warn on primitive values, since those could never be represented\n                                            // by a reference. This is a valid (albeit uncommon) use case.\n                                            if (typeof value === \"object\" && !!value) {\n                                                var id = _this.policies.identify(value)[0];\n                                                // check if object could even be referenced, otherwise we are not interested in it for this warning\n                                                if (id) {\n                                                    someNonReference = value;\n                                                }\n                                            }\n                                        }\n                                        if (seenReference && someNonReference !== undefined) {\n                                            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(3, someNonReference);\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (fieldValue !== void 0) {\n                    allDeleted_1 = false;\n                }\n            });\n            if (needToMerge_1) {\n                this.merge(dataId, changedFields_1);\n                if (allDeleted_1) {\n                    if (this instanceof Layer) {\n                        this.data[dataId] = void 0;\n                    } else {\n                        delete this.data[dataId];\n                    }\n                    this.group.dirty(dataId, \"__exists\");\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n    // If called with only one argument, removes the entire entity\n    // identified by dataId. If called with a fieldName as well, removes all\n    // fields of that entity whose names match fieldName according to the\n    // fieldNameFromStoreName helper function. If called with a fieldName\n    // and variables, removes all fields of that entity whose names match fieldName\n    // and whose arguments when cached exactly match the variables passed.\n    EntityStore.prototype.delete = function(dataId, fieldName, args) {\n        var _a;\n        var storeObject = this.lookup(dataId);\n        if (storeObject) {\n            var typename = this.getFieldValue(storeObject, \"__typename\");\n            var storeFieldName = fieldName && args ? this.policies.getStoreFieldName({\n                typename: typename,\n                fieldName: fieldName,\n                args: args\n            }) : fieldName;\n            return this.modify(dataId, storeFieldName ? (_a = {}, _a[storeFieldName] = delModifier, _a) : delModifier);\n        }\n        return false;\n    };\n    EntityStore.prototype.evict = function(options, limit) {\n        var evicted = false;\n        if (options.id) {\n            if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.data, options.id)) {\n                evicted = this.delete(options.id, options.fieldName, options.args);\n            }\n            if (this instanceof Layer && this !== limit) {\n                evicted = this.parent.evict(options, limit) || evicted;\n            }\n            // Always invalidate the field to trigger rereading of watched\n            // queries, even if no cache data was modified by the eviction,\n            // because queries may depend on computed fields with custom read\n            // functions, whose values are not stored in the EntityStore.\n            if (options.fieldName || evicted) {\n                this.group.dirty(options.id, options.fieldName || \"__exists\");\n            }\n        }\n        return evicted;\n    };\n    EntityStore.prototype.clear = function() {\n        this.replace(null);\n    };\n    EntityStore.prototype.extract = function() {\n        var _this = this;\n        var obj = this.toObject();\n        var extraRootIds = [];\n        this.getRootIdSet().forEach(function(id) {\n            if (!_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(_this.policies.rootTypenamesById, id)) {\n                extraRootIds.push(id);\n            }\n        });\n        if (extraRootIds.length) {\n            obj.__META = {\n                extraRootIds: extraRootIds.sort()\n            };\n        }\n        return obj;\n    };\n    EntityStore.prototype.replace = function(newData) {\n        var _this = this;\n        Object.keys(this.data).forEach(function(dataId) {\n            if (!(newData && _helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(newData, dataId))) {\n                _this.delete(dataId);\n            }\n        });\n        if (newData) {\n            var __META = newData.__META, rest_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__rest)(newData, [\n                \"__META\"\n            ]);\n            Object.keys(rest_1).forEach(function(dataId) {\n                _this.merge(dataId, rest_1[dataId]);\n            });\n            if (__META) {\n                __META.extraRootIds.forEach(this.retain, this);\n            }\n        }\n    };\n    EntityStore.prototype.retain = function(rootId) {\n        return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n    };\n    EntityStore.prototype.release = function(rootId) {\n        if (this.rootIds[rootId] > 0) {\n            var count = --this.rootIds[rootId];\n            if (!count) delete this.rootIds[rootId];\n            return count;\n        }\n        return 0;\n    };\n    // Return a Set<string> of all the ID strings that have been retained by\n    // this layer/root *and* any layers/roots beneath it.\n    EntityStore.prototype.getRootIdSet = function(ids) {\n        if (ids === void 0) {\n            ids = new Set();\n        }\n        Object.keys(this.rootIds).forEach(ids.add, ids);\n        if (this instanceof Layer) {\n            this.parent.getRootIdSet(ids);\n        } else {\n            // Official singleton IDs like ROOT_QUERY and ROOT_MUTATION are\n            // always considered roots for garbage collection, regardless of\n            // their retainment counts in this.rootIds.\n            Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n        }\n        return ids;\n    };\n    // The goal of garbage collection is to remove IDs from the Root layer of the\n    // store that are no longer reachable starting from any IDs that have been\n    // explicitly retained (see retain and release, above). Returns an array of\n    // dataId strings that were removed from the store.\n    EntityStore.prototype.gc = function() {\n        var _this = this;\n        var ids = this.getRootIdSet();\n        var snapshot = this.toObject();\n        ids.forEach(function(id) {\n            if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(snapshot, id)) {\n                // Because we are iterating over an ECMAScript Set, the IDs we add here\n                // will be visited in later iterations of the forEach loop only if they\n                // were not previously contained by the Set.\n                Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);\n                // By removing IDs from the snapshot object here, we protect them from\n                // getting removed from the root store layer below.\n                delete snapshot[id];\n            }\n        });\n        var idsToRemove = Object.keys(snapshot);\n        if (idsToRemove.length) {\n            var root_1 = this;\n            while(root_1 instanceof Layer)root_1 = root_1.parent;\n            idsToRemove.forEach(function(id) {\n                return root_1.delete(id);\n            });\n        }\n        return idsToRemove;\n    };\n    EntityStore.prototype.findChildRefIds = function(dataId) {\n        if (!_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.refs, dataId)) {\n            var found_1 = this.refs[dataId] = Object.create(null);\n            var root = this.data[dataId];\n            if (!root) return found_1;\n            var workSet_1 = new Set([\n                root\n            ]);\n            // Within the store, only arrays and objects can contain child entity\n            // references, so we can prune the traversal using this predicate:\n            workSet_1.forEach(function(obj) {\n                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(obj)) {\n                    found_1[obj.__ref] = true;\n                // In rare cases, a { __ref } Reference object may have other fields.\n                // This often indicates a mismerging of References with StoreObjects,\n                // but garbage collection should not be fooled by a stray __ref\n                // property in a StoreObject (ignoring all the other fields just\n                // because the StoreObject looks like a Reference). To avoid this\n                // premature termination of findChildRefIds recursion, we fall through\n                // to the code below, which will handle any other properties of obj.\n                }\n                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isNonNullObject)(obj)) {\n                    Object.keys(obj).forEach(function(key) {\n                        var child = obj[key];\n                        // No need to add primitive values to the workSet, since they cannot\n                        // contain reference objects.\n                        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isNonNullObject)(child)) {\n                            workSet_1.add(child);\n                        }\n                    });\n                }\n            });\n        }\n        return this.refs[dataId];\n    };\n    EntityStore.prototype.makeCacheKey = function() {\n        return this.group.keyMaker.lookupArray(arguments);\n    };\n    return EntityStore;\n}();\n\n// A single CacheGroup represents a set of one or more EntityStore objects,\n// typically the Root store in a CacheGroup by itself, and all active Layer\n// stores in a group together. A single EntityStore object belongs to only\n// one CacheGroup, store.group. The CacheGroup is responsible for tracking\n// dependencies, so store.group is helpful for generating unique keys for\n// cached results that need to be invalidated when/if those dependencies\n// change. If we used the EntityStore objects themselves as cache keys (that\n// is, store rather than store.group), the cache would become unnecessarily\n// fragmented by all the different Layer objects. Instead, the CacheGroup\n// approach allows all optimistic Layer objects in the same linked list to\n// belong to one CacheGroup, with the non-optimistic Root object belonging\n// to another CacheGroup, allowing resultCaching dependencies to be tracked\n// separately for optimistic and non-optimistic entity data.\nvar CacheGroup = /** @class */ function() {\n    function CacheGroup(caching, parent) {\n        if (parent === void 0) {\n            parent = null;\n        }\n        this.caching = caching;\n        this.parent = parent;\n        this.d = null;\n        this.resetCaching();\n    }\n    CacheGroup.prototype.resetCaching = function() {\n        this.d = this.caching ? (0,optimism__WEBPACK_IMPORTED_MODULE_1__.dep)() : null;\n        this.keyMaker = new _wry_trie__WEBPACK_IMPORTED_MODULE_3__.Trie(_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.canUseWeakMap);\n    };\n    CacheGroup.prototype.depend = function(dataId, storeFieldName) {\n        if (this.d) {\n            this.d(makeDepKey(dataId, storeFieldName));\n            var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_7__.fieldNameFromStoreName)(storeFieldName);\n            if (fieldName !== storeFieldName) {\n                // Fields with arguments that contribute extra identifying\n                // information to the fieldName (thus forming the storeFieldName)\n                // depend not only on the full storeFieldName but also on the\n                // short fieldName, so the field can be invalidated using either\n                // level of specificity.\n                this.d(makeDepKey(dataId, fieldName));\n            }\n            if (this.parent) {\n                this.parent.depend(dataId, storeFieldName);\n            }\n        }\n    };\n    CacheGroup.prototype.dirty = function(dataId, storeFieldName) {\n        if (this.d) {\n            this.d.dirty(makeDepKey(dataId, storeFieldName), // When storeFieldName === \"__exists\", that means the entity identified\n            // by dataId has either disappeared from the cache or was newly added,\n            // so the result caching system would do well to \"forget everything it\n            // knows\" about that object. To achieve that kind of invalidation, we\n            // not only dirty the associated result cache entry, but also remove it\n            // completely from the dependency graph. For the optimism implementation\n            // details, see https://github.com/benjamn/optimism/pull/195.\n            storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\");\n        }\n    };\n    return CacheGroup;\n}();\nfunction makeDepKey(dataId, storeFieldName) {\n    // Since field names cannot have '#' characters in them, this method\n    // of joining the field name and the ID should be unambiguous, and much\n    // cheaper than JSON.stringify([dataId, fieldName]).\n    return storeFieldName + \"#\" + dataId;\n}\nfunction maybeDependOnExistenceOfEntity(store, entityId) {\n    if (supportsResultCaching(store)) {\n        // We use this pseudo-field __exists elsewhere in the EntityStore code to\n        // represent changes in the existence of the entity object identified by\n        // entityId. This dependency gets reliably dirtied whenever an object with\n        // this ID is deleted (or newly created) within this group, so any result\n        // cache entries (for example, StoreReader#executeSelectionSet results) that\n        // depend on __exists for this entityId will get dirtied as well, leading to\n        // the eventual recomputation (instead of reuse) of those result objects the\n        // next time someone reads them from the cache.\n        store.group.depend(entityId, \"__exists\");\n    }\n}\n(function(EntityStore) {\n    // Refer to this class as EntityStore.Root outside this namespace.\n    var Root = /** @class */ function(_super) {\n        (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__extends)(Root, _super);\n        function Root(_a) {\n            var policies = _a.policies, _b = _a.resultCaching, resultCaching = _b === void 0 ? true : _b, seed = _a.seed;\n            var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;\n            _this.stump = new Stump(_this);\n            _this.storageTrie = new _wry_trie__WEBPACK_IMPORTED_MODULE_3__.Trie(_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.canUseWeakMap);\n            if (seed) _this.replace(seed);\n            return _this;\n        }\n        Root.prototype.addLayer = function(layerId, replay) {\n            // Adding an optimistic Layer on top of the Root actually adds the Layer\n            // on top of the Stump, so the Stump always comes between the Root and\n            // any Layer objects that we've added.\n            return this.stump.addLayer(layerId, replay);\n        };\n        Root.prototype.removeLayer = function() {\n            // Never remove the root layer.\n            return this;\n        };\n        Root.prototype.getStorage = function() {\n            return this.storageTrie.lookupArray(arguments);\n        };\n        return Root;\n    }(EntityStore);\n    EntityStore.Root = Root;\n})(EntityStore || (EntityStore = {}));\n// Not exported, since all Layer instances are created by the addLayer method\n// of the EntityStore.Root class.\nvar Layer = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__extends)(Layer, _super);\n    function Layer(id, parent, replay, group) {\n        var _this = _super.call(this, parent.policies, group) || this;\n        _this.id = id;\n        _this.parent = parent;\n        _this.replay = replay;\n        _this.group = group;\n        replay(_this);\n        return _this;\n    }\n    Layer.prototype.addLayer = function(layerId, replay) {\n        return new Layer(layerId, this, replay, this.group);\n    };\n    Layer.prototype.removeLayer = function(layerId) {\n        var _this = this;\n        // Remove all instances of the given id, not just the first one.\n        var parent = this.parent.removeLayer(layerId);\n        if (layerId === this.id) {\n            if (this.group.caching) {\n                // Dirty every ID we're removing. Technically we might be able to avoid\n                // dirtying fields that have values in higher layers, but we don't have\n                // easy access to higher layers here, and we're about to recreate those\n                // layers anyway (see parent.addLayer below).\n                Object.keys(this.data).forEach(function(dataId) {\n                    var ownStoreObject = _this.data[dataId];\n                    var parentStoreObject = parent[\"lookup\"](dataId);\n                    if (!parentStoreObject) {\n                        // The StoreObject identified by dataId was defined in this layer\n                        // but will be undefined in the parent layer, so we can delete the\n                        // whole entity using this.delete(dataId). Since we're about to\n                        // throw this layer away, the only goal of this deletion is to dirty\n                        // the removed fields.\n                        _this.delete(dataId);\n                    } else if (!ownStoreObject) {\n                        // This layer had an entry for dataId but it was undefined, which\n                        // means the entity was deleted in this layer, and it's about to\n                        // become undeleted when we remove this layer, so we need to dirty\n                        // all fields that are about to be reexposed.\n                        _this.group.dirty(dataId, \"__exists\");\n                        Object.keys(parentStoreObject).forEach(function(storeFieldName) {\n                            _this.group.dirty(dataId, storeFieldName);\n                        });\n                    } else if (ownStoreObject !== parentStoreObject) {\n                        // If ownStoreObject is not exactly the same as parentStoreObject,\n                        // dirty any fields whose values will change as a result of this\n                        // removal.\n                        Object.keys(ownStoreObject).forEach(function(storeFieldName) {\n                            if (!(0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(ownStoreObject[storeFieldName], parentStoreObject[storeFieldName])) {\n                                _this.group.dirty(dataId, storeFieldName);\n                            }\n                        });\n                    }\n                });\n            }\n            return parent;\n        }\n        // No changes are necessary if the parent chain remains identical.\n        if (parent === this.parent) return this;\n        // Recreate this layer on top of the new parent.\n        return parent.addLayer(this.id, this.replay);\n    };\n    Layer.prototype.toObject = function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, this.parent.toObject()), this.data);\n    };\n    Layer.prototype.findChildRefIds = function(dataId) {\n        var fromParent = this.parent.findChildRefIds(dataId);\n        return _helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.data, dataId) ? (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;\n    };\n    Layer.prototype.getStorage = function() {\n        var p = this.parent;\n        while(p.parent)p = p.parent;\n        return p.getStorage.apply(p, // @ts-expect-error\n        arguments);\n    };\n    return Layer;\n}(EntityStore);\n// Represents a Layer permanently installed just above the Root, which allows\n// reading optimistically (and registering optimistic dependencies) even when\n// no optimistic layers are currently active. The stump.group CacheGroup object\n// is shared by any/all Layer objects added on top of the Stump.\nvar Stump = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__extends)(Stump, _super);\n    function Stump(root) {\n        return _super.call(this, \"EntityStore.Stump\", root, function() {}, new CacheGroup(root.group.caching, root.group)) || this;\n    }\n    Stump.prototype.removeLayer = function() {\n        // Never remove the Stump layer.\n        return this;\n    };\n    Stump.prototype.merge = function(older, newer) {\n        // We never want to write any data into the Stump, so we forward any merge\n        // calls to the Root instead. Another option here would be to throw an\n        // exception, but the toReference(object, true) function can sometimes\n        // trigger Stump writes (which used to be Root writes, before the Stump\n        // concept was introduced).\n        return this.parent.merge(older, newer);\n    };\n    return Stump;\n}(Layer);\nfunction storeObjectReconciler(existingObject, incomingObject, property) {\n    var existingValue = existingObject[property];\n    var incomingValue = incomingObject[property];\n    // Wherever there is a key collision, prefer the incoming value, unless\n    // it is deeply equal to the existing value. It's worth checking deep\n    // equality here (even though blindly returning incoming would be\n    // logically correct) because preserving the referential identity of\n    // existing data can prevent needless rereading and rerendering.\n    return (0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(existingValue, incomingValue) ? existingValue : incomingValue;\n}\nfunction supportsResultCaching(store) {\n    // When result caching is disabled, store.depend will be null.\n    return !!(store instanceof EntityStore && store.group.caching);\n} //# sourceMappingURL=entityStore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/entityStore.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js":
/*!***************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/helpers.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TypeOrFieldNameRegExp: () => (/* binding */ TypeOrFieldNameRegExp),\n/* harmony export */   defaultDataIdFromObject: () => (/* binding */ defaultDataIdFromObject),\n/* harmony export */   extractFragmentContext: () => (/* binding */ extractFragmentContext),\n/* harmony export */   fieldNameFromStoreName: () => (/* binding */ fieldNameFromStoreName),\n/* harmony export */   getTypenameFromStoreObject: () => (/* binding */ getTypenameFromStoreObject),\n/* harmony export */   hasOwn: () => (/* binding */ hasOwn),\n/* harmony export */   isArray: () => (/* reexport safe */ _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.isArray),\n/* harmony export */   isNullish: () => (/* binding */ isNullish),\n/* harmony export */   makeProcessedFieldsMerger: () => (/* binding */ makeProcessedFieldsMerger),\n/* harmony export */   normalizeConfig: () => (/* binding */ normalizeConfig),\n/* harmony export */   selectionSetMatchesResult: () => (/* binding */ selectionSetMatchesResult),\n/* harmony export */   shouldCanonizeResults: () => (/* binding */ shouldCanonizeResults),\n/* harmony export */   storeValueIsStoreObject: () => (/* binding */ storeValueIsStoreObject)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/compact.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nfunction isNullish(value) {\n    return value === null || value === void 0;\n}\n\nfunction defaultDataIdFromObject(_a, context) {\n    var __typename = _a.__typename, id = _a.id, _id = _a._id;\n    if (typeof __typename === \"string\") {\n        if (context) {\n            context.keyObject = !isNullish(id) ? {\n                id: id\n            } : !isNullish(_id) ? {\n                _id: _id\n            } : void 0;\n        }\n        // If there is no object.id, fall back to object._id.\n        if (isNullish(id) && !isNullish(_id)) {\n            id = _id;\n        }\n        if (!isNullish(id)) {\n            return \"\".concat(__typename, \":\").concat(typeof id === \"number\" || typeof id === \"string\" ? id : JSON.stringify(id));\n        }\n    }\n}\nvar defaultConfig = {\n    dataIdFromObject: defaultDataIdFromObject,\n    addTypename: true,\n    resultCaching: true,\n    // Thanks to the shouldCanonizeResults helper, this should be the only line\n    // you have to change to reenable canonization by default in the future.\n    canonizeResults: false\n};\nfunction normalizeConfig(config) {\n    return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.compact)(defaultConfig, config);\n}\nfunction shouldCanonizeResults(config) {\n    var value = config.canonizeResults;\n    return value === void 0 ? defaultConfig.canonizeResults : value;\n}\nfunction getTypenameFromStoreObject(store, objectOrReference) {\n    return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isReference)(objectOrReference) ? store.get(objectOrReference.__ref, \"__typename\") : objectOrReference && objectOrReference.__typename;\n}\nvar TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;\nfunction fieldNameFromStoreName(storeFieldName) {\n    var match = storeFieldName.match(TypeOrFieldNameRegExp);\n    return match ? match[0] : storeFieldName;\n}\nfunction selectionSetMatchesResult(selectionSet, result, variables) {\n    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.isNonNullObject)(result)) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(result) ? result.every(function(item) {\n            return selectionSetMatchesResult(selectionSet, item, variables);\n        }) : selectionSet.selections.every(function(field) {\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isField)(field) && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.shouldInclude)(field, variables)) {\n                var key = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.resultKeyNameFromField)(field);\n                return hasOwn.call(result, key) && (!field.selectionSet || selectionSetMatchesResult(field.selectionSet, result[key], variables));\n            }\n            // If the selection has been skipped with @skip(true) or\n            // @include(false), it should not count against the matching. If\n            // the selection is not a field, it must be a fragment (inline or\n            // named). We will determine if selectionSetMatchesResult for that\n            // fragment when we get to it, so for now we return true.\n            return true;\n        });\n    }\n    return false;\n}\nfunction storeValueIsStoreObject(value) {\n    return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.isNonNullObject)(value) && !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isReference)(value) && !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(value);\n}\nfunction makeProcessedFieldsMerger() {\n    return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.DeepMerger();\n}\nfunction extractFragmentContext(document, fragments) {\n    // FragmentMap consisting only of fragments defined directly in document, not\n    // including other fragments registered in the FragmentRegistry.\n    var fragmentMap = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.createFragmentMap)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.getFragmentDefinitions)(document));\n    return {\n        fragmentMap: fragmentMap,\n        lookupFragment: function(name) {\n            var def = fragmentMap[name];\n            if (!def && fragments) {\n                def = fragments.lookup(name);\n            }\n            return def || null;\n        }\n    };\n} //# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY2FjaGUvaW5tZW1vcnkvaGVscGVycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBa007QUFDM0wsSUFBSVUsU0FBU0MsT0FBT0MsU0FBUyxDQUFDQyxjQUFjLENBQUM7QUFDN0MsU0FBU0MsVUFBVUMsS0FBSztJQUMzQixPQUFPQSxVQUFVLFFBQVFBLFVBQVUsS0FBSztBQUM1QztBQUNtQjtBQUNaLFNBQVNDLHdCQUF3QkMsRUFBRSxFQUFFQyxPQUFPO0lBQy9DLElBQUlDLGFBQWFGLEdBQUdFLFVBQVUsRUFBRUMsS0FBS0gsR0FBR0csRUFBRSxFQUFFQyxNQUFNSixHQUFHSSxHQUFHO0lBQ3hELElBQUksT0FBT0YsZUFBZSxVQUFVO1FBQ2hDLElBQUlELFNBQVM7WUFDVEEsUUFBUUksU0FBUyxHQUNiLENBQUNSLFVBQVVNLE1BQU07Z0JBQUVBLElBQUlBO1lBQUcsSUFDcEIsQ0FBQ04sVUFBVU8sT0FBTztnQkFBRUEsS0FBS0E7WUFBSSxJQUN6QixLQUFLO1FBQ3ZCO1FBQ0EscURBQXFEO1FBQ3JELElBQUlQLFVBQVVNLE9BQU8sQ0FBQ04sVUFBVU8sTUFBTTtZQUNsQ0QsS0FBS0M7UUFDVDtRQUNBLElBQUksQ0FBQ1AsVUFBVU0sS0FBSztZQUNoQixPQUFPLEdBQUdHLE1BQU0sQ0FBQ0osWUFBWSxLQUFLSSxNQUFNLENBQUMsT0FBT0gsT0FBTyxZQUFZLE9BQU9BLE9BQU8sV0FDN0VBLEtBQ0VJLEtBQUtDLFNBQVMsQ0FBQ0w7UUFDekI7SUFDSjtBQUNKO0FBQ0EsSUFBSU0sZ0JBQWdCO0lBQ2hCQyxrQkFBa0JYO0lBQ2xCWSxhQUFhO0lBQ2JDLGVBQWU7SUFDZiwyRUFBMkU7SUFDM0Usd0VBQXdFO0lBQ3hFQyxpQkFBaUI7QUFDckI7QUFDTyxTQUFTQyxnQkFBZ0JDLE1BQU07SUFDbEMsT0FBTzFCLDREQUFPQSxDQUFDb0IsZUFBZU07QUFDbEM7QUFDTyxTQUFTQyxzQkFBc0JELE1BQU07SUFDeEMsSUFBSWpCLFFBQVFpQixPQUFPRixlQUFlO0lBQ2xDLE9BQU9mLFVBQVUsS0FBSyxJQUFJVyxjQUFjSSxlQUFlLEdBQUdmO0FBQzlEO0FBQ08sU0FBU21CLDJCQUEyQkMsS0FBSyxFQUFFQyxpQkFBaUI7SUFDL0QsT0FBT3BDLGdFQUFXQSxDQUFDb0MscUJBQ2ZELE1BQU1FLEdBQUcsQ0FBQ0Qsa0JBQWtCRSxLQUFLLEVBQUUsZ0JBQ2pDRixxQkFBcUJBLGtCQUFrQmpCLFVBQVU7QUFDM0Q7QUFDTyxJQUFJb0Isd0JBQXdCLHFCQUFxQjtBQUNqRCxTQUFTQyx1QkFBdUJDLGNBQWM7SUFDakQsSUFBSUMsUUFBUUQsZUFBZUMsS0FBSyxDQUFDSDtJQUNqQyxPQUFPRyxRQUFRQSxLQUFLLENBQUMsRUFBRSxHQUFHRDtBQUM5QjtBQUNPLFNBQVNFLDBCQUEwQkMsWUFBWSxFQUFFQyxNQUFNLEVBQUVDLFNBQVM7SUFDckUsSUFBSXpDLG9FQUFlQSxDQUFDd0MsU0FBUztRQUN6QixPQUFPcEMsNERBQU9BLENBQUNvQyxVQUNYQSxPQUFPRSxLQUFLLENBQUMsU0FBVUMsSUFBSTtZQUN2QixPQUFPTCwwQkFBMEJDLGNBQWNJLE1BQU1GO1FBQ3pELEtBQ0VGLGFBQWFLLFVBQVUsQ0FBQ0YsS0FBSyxDQUFDLFNBQVVHLEtBQUs7WUFDM0MsSUFBSWpELDREQUFPQSxDQUFDaUQsVUFBVTlDLGtFQUFhQSxDQUFDOEMsT0FBT0osWUFBWTtnQkFDbkQsSUFBSUssTUFBTWhELDJFQUFzQkEsQ0FBQytDO2dCQUNqQyxPQUFReEMsT0FBTzBDLElBQUksQ0FBQ1AsUUFBUU0sUUFDdkIsRUFBQ0QsTUFBTU4sWUFBWSxJQUNoQkQsMEJBQTBCTyxNQUFNTixZQUFZLEVBQUVDLE1BQU0sQ0FBQ00sSUFBSSxFQUFFTCxVQUFTO1lBQ2hGO1lBQ0Esd0RBQXdEO1lBQ3hELGdFQUFnRTtZQUNoRSxpRUFBaUU7WUFDakUsa0VBQWtFO1lBQ2xFLHlEQUF5RDtZQUN6RCxPQUFPO1FBQ1g7SUFDUjtJQUNBLE9BQU87QUFDWDtBQUNPLFNBQVNPLHdCQUF3QnRDLEtBQUs7SUFDekMsT0FBT1Ysb0VBQWVBLENBQUNVLFVBQVUsQ0FBQ2YsZ0VBQVdBLENBQUNlLFVBQVUsQ0FBQ04sNERBQU9BLENBQUNNO0FBQ3JFO0FBQ08sU0FBU3VDO0lBQ1osT0FBTyxJQUFJcEQsMkRBQVVBO0FBQ3pCO0FBQ08sU0FBU3FELHVCQUF1QkMsUUFBUSxFQUFFQyxTQUFTO0lBQ3RELDZFQUE2RTtJQUM3RSxnRUFBZ0U7SUFDaEUsSUFBSUMsY0FBY25ELHNFQUFpQkEsQ0FBQ0MsMkVBQXNCQSxDQUFDZ0Q7SUFDM0QsT0FBTztRQUNIRSxhQUFhQTtRQUNiQyxnQkFBZ0IsU0FBVUMsSUFBSTtZQUMxQixJQUFJQyxNQUFNSCxXQUFXLENBQUNFLEtBQUs7WUFDM0IsSUFBSSxDQUFDQyxPQUFPSixXQUFXO2dCQUNuQkksTUFBTUosVUFBVUssTUFBTSxDQUFDRjtZQUMzQjtZQUNBLE9BQU9DLE9BQU87UUFDbEI7SUFDSjtBQUNKLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktZG9jcy1mcm9uLWVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2NhY2hlL2lubWVtb3J5L2hlbHBlcnMuanM/MTRhOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1JlZmVyZW5jZSwgaXNGaWVsZCwgRGVlcE1lcmdlciwgcmVzdWx0S2V5TmFtZUZyb21GaWVsZCwgc2hvdWxkSW5jbHVkZSwgaXNOb25OdWxsT2JqZWN0LCBjb21wYWN0LCBjcmVhdGVGcmFnbWVudE1hcCwgZ2V0RnJhZ21lbnREZWZpbml0aW9ucywgaXNBcnJheSwgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG5leHBvcnQgdmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5leHBvcnQgZnVuY3Rpb24gaXNOdWxsaXNoKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB2b2lkIDA7XG59XG5leHBvcnQgeyBpc0FycmF5IH07XG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdERhdGFJZEZyb21PYmplY3QoX2EsIGNvbnRleHQpIHtcbiAgICB2YXIgX190eXBlbmFtZSA9IF9hLl9fdHlwZW5hbWUsIGlkID0gX2EuaWQsIF9pZCA9IF9hLl9pZDtcbiAgICBpZiAodHlwZW9mIF9fdHlwZW5hbWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgICAgIGNvbnRleHQua2V5T2JqZWN0ID1cbiAgICAgICAgICAgICAgICAhaXNOdWxsaXNoKGlkKSA/IHsgaWQ6IGlkIH1cbiAgICAgICAgICAgICAgICAgICAgOiAhaXNOdWxsaXNoKF9pZCkgPyB7IF9pZDogX2lkIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDogdm9pZCAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoZXJlIGlzIG5vIG9iamVjdC5pZCwgZmFsbCBiYWNrIHRvIG9iamVjdC5faWQuXG4gICAgICAgIGlmIChpc051bGxpc2goaWQpICYmICFpc051bGxpc2goX2lkKSkge1xuICAgICAgICAgICAgaWQgPSBfaWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc051bGxpc2goaWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJcIi5jb25jYXQoX190eXBlbmFtZSwgXCI6XCIpLmNvbmNhdCh0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIGlkID09PSBcInN0cmluZ1wiID9cbiAgICAgICAgICAgICAgICBpZFxuICAgICAgICAgICAgICAgIDogSlNPTi5zdHJpbmdpZnkoaWQpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbnZhciBkZWZhdWx0Q29uZmlnID0ge1xuICAgIGRhdGFJZEZyb21PYmplY3Q6IGRlZmF1bHREYXRhSWRGcm9tT2JqZWN0LFxuICAgIGFkZFR5cGVuYW1lOiB0cnVlLFxuICAgIHJlc3VsdENhY2hpbmc6IHRydWUsXG4gICAgLy8gVGhhbmtzIHRvIHRoZSBzaG91bGRDYW5vbml6ZVJlc3VsdHMgaGVscGVyLCB0aGlzIHNob3VsZCBiZSB0aGUgb25seSBsaW5lXG4gICAgLy8geW91IGhhdmUgdG8gY2hhbmdlIHRvIHJlZW5hYmxlIGNhbm9uaXphdGlvbiBieSBkZWZhdWx0IGluIHRoZSBmdXR1cmUuXG4gICAgY2Fub25pemVSZXN1bHRzOiBmYWxzZSxcbn07XG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplQ29uZmlnKGNvbmZpZykge1xuICAgIHJldHVybiBjb21wYWN0KGRlZmF1bHRDb25maWcsIGNvbmZpZyk7XG59XG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkQ2Fub25pemVSZXN1bHRzKGNvbmZpZykge1xuICAgIHZhciB2YWx1ZSA9IGNvbmZpZy5jYW5vbml6ZVJlc3VsdHM7XG4gICAgcmV0dXJuIHZhbHVlID09PSB2b2lkIDAgPyBkZWZhdWx0Q29uZmlnLmNhbm9uaXplUmVzdWx0cyA6IHZhbHVlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFR5cGVuYW1lRnJvbVN0b3JlT2JqZWN0KHN0b3JlLCBvYmplY3RPclJlZmVyZW5jZSkge1xuICAgIHJldHVybiBpc1JlZmVyZW5jZShvYmplY3RPclJlZmVyZW5jZSkgP1xuICAgICAgICBzdG9yZS5nZXQob2JqZWN0T3JSZWZlcmVuY2UuX19yZWYsIFwiX190eXBlbmFtZVwiKVxuICAgICAgICA6IG9iamVjdE9yUmVmZXJlbmNlICYmIG9iamVjdE9yUmVmZXJlbmNlLl9fdHlwZW5hbWU7XG59XG5leHBvcnQgdmFyIFR5cGVPckZpZWxkTmFtZVJlZ0V4cCA9IC9eW19hLXpdW18wLTlhLXpdKi9pO1xuZXhwb3J0IGZ1bmN0aW9uIGZpZWxkTmFtZUZyb21TdG9yZU5hbWUoc3RvcmVGaWVsZE5hbWUpIHtcbiAgICB2YXIgbWF0Y2ggPSBzdG9yZUZpZWxkTmFtZS5tYXRjaChUeXBlT3JGaWVsZE5hbWVSZWdFeHApO1xuICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzBdIDogc3RvcmVGaWVsZE5hbWU7XG59XG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0aW9uU2V0TWF0Y2hlc1Jlc3VsdChzZWxlY3Rpb25TZXQsIHJlc3VsdCwgdmFyaWFibGVzKSB7XG4gICAgaWYgKGlzTm9uTnVsbE9iamVjdChyZXN1bHQpKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHJlc3VsdCkgP1xuICAgICAgICAgICAgcmVzdWx0LmV2ZXJ5KGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvblNldE1hdGNoZXNSZXN1bHQoc2VsZWN0aW9uU2V0LCBpdGVtLCB2YXJpYWJsZXMpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIDogc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnMuZXZlcnkoZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzRmllbGQoZmllbGQpICYmIHNob3VsZEluY2x1ZGUoZmllbGQsIHZhcmlhYmxlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IHJlc3VsdEtleU5hbWVGcm9tRmllbGQoZmllbGQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGhhc093bi5jYWxsKHJlc3VsdCwga2V5KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKCFmaWVsZC5zZWxlY3Rpb25TZXQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb25TZXRNYXRjaGVzUmVzdWx0KGZpZWxkLnNlbGVjdGlvblNldCwgcmVzdWx0W2tleV0sIHZhcmlhYmxlcykpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHNlbGVjdGlvbiBoYXMgYmVlbiBza2lwcGVkIHdpdGggQHNraXAodHJ1ZSkgb3JcbiAgICAgICAgICAgICAgICAvLyBAaW5jbHVkZShmYWxzZSksIGl0IHNob3VsZCBub3QgY291bnQgYWdhaW5zdCB0aGUgbWF0Y2hpbmcuIElmXG4gICAgICAgICAgICAgICAgLy8gdGhlIHNlbGVjdGlvbiBpcyBub3QgYSBmaWVsZCwgaXQgbXVzdCBiZSBhIGZyYWdtZW50IChpbmxpbmUgb3JcbiAgICAgICAgICAgICAgICAvLyBuYW1lZCkuIFdlIHdpbGwgZGV0ZXJtaW5lIGlmIHNlbGVjdGlvblNldE1hdGNoZXNSZXN1bHQgZm9yIHRoYXRcbiAgICAgICAgICAgICAgICAvLyBmcmFnbWVudCB3aGVuIHdlIGdldCB0byBpdCwgc28gZm9yIG5vdyB3ZSByZXR1cm4gdHJ1ZS5cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gc3RvcmVWYWx1ZUlzU3RvcmVPYmplY3QodmFsdWUpIHtcbiAgICByZXR1cm4gaXNOb25OdWxsT2JqZWN0KHZhbHVlKSAmJiAhaXNSZWZlcmVuY2UodmFsdWUpICYmICFpc0FycmF5KHZhbHVlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYWtlUHJvY2Vzc2VkRmllbGRzTWVyZ2VyKCkge1xuICAgIHJldHVybiBuZXcgRGVlcE1lcmdlcigpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RGcmFnbWVudENvbnRleHQoZG9jdW1lbnQsIGZyYWdtZW50cykge1xuICAgIC8vIEZyYWdtZW50TWFwIGNvbnNpc3Rpbmcgb25seSBvZiBmcmFnbWVudHMgZGVmaW5lZCBkaXJlY3RseSBpbiBkb2N1bWVudCwgbm90XG4gICAgLy8gaW5jbHVkaW5nIG90aGVyIGZyYWdtZW50cyByZWdpc3RlcmVkIGluIHRoZSBGcmFnbWVudFJlZ2lzdHJ5LlxuICAgIHZhciBmcmFnbWVudE1hcCA9IGNyZWF0ZUZyYWdtZW50TWFwKGdldEZyYWdtZW50RGVmaW5pdGlvbnMoZG9jdW1lbnQpKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBmcmFnbWVudE1hcDogZnJhZ21lbnRNYXAsXG4gICAgICAgIGxvb2t1cEZyYWdtZW50OiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgdmFyIGRlZiA9IGZyYWdtZW50TWFwW25hbWVdO1xuICAgICAgICAgICAgaWYgKCFkZWYgJiYgZnJhZ21lbnRzKSB7XG4gICAgICAgICAgICAgICAgZGVmID0gZnJhZ21lbnRzLmxvb2t1cChuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkZWYgfHwgbnVsbDtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVscGVycy5qcy5tYXAiXSwibmFtZXMiOlsiaXNSZWZlcmVuY2UiLCJpc0ZpZWxkIiwiRGVlcE1lcmdlciIsInJlc3VsdEtleU5hbWVGcm9tRmllbGQiLCJzaG91bGRJbmNsdWRlIiwiaXNOb25OdWxsT2JqZWN0IiwiY29tcGFjdCIsImNyZWF0ZUZyYWdtZW50TWFwIiwiZ2V0RnJhZ21lbnREZWZpbml0aW9ucyIsImlzQXJyYXkiLCJoYXNPd24iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImlzTnVsbGlzaCIsInZhbHVlIiwiZGVmYXVsdERhdGFJZEZyb21PYmplY3QiLCJfYSIsImNvbnRleHQiLCJfX3R5cGVuYW1lIiwiaWQiLCJfaWQiLCJrZXlPYmplY3QiLCJjb25jYXQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGVmYXVsdENvbmZpZyIsImRhdGFJZEZyb21PYmplY3QiLCJhZGRUeXBlbmFtZSIsInJlc3VsdENhY2hpbmciLCJjYW5vbml6ZVJlc3VsdHMiLCJub3JtYWxpemVDb25maWciLCJjb25maWciLCJzaG91bGRDYW5vbml6ZVJlc3VsdHMiLCJnZXRUeXBlbmFtZUZyb21TdG9yZU9iamVjdCIsInN0b3JlIiwib2JqZWN0T3JSZWZlcmVuY2UiLCJnZXQiLCJfX3JlZiIsIlR5cGVPckZpZWxkTmFtZVJlZ0V4cCIsImZpZWxkTmFtZUZyb21TdG9yZU5hbWUiLCJzdG9yZUZpZWxkTmFtZSIsIm1hdGNoIiwic2VsZWN0aW9uU2V0TWF0Y2hlc1Jlc3VsdCIsInNlbGVjdGlvblNldCIsInJlc3VsdCIsInZhcmlhYmxlcyIsImV2ZXJ5IiwiaXRlbSIsInNlbGVjdGlvbnMiLCJmaWVsZCIsImtleSIsImNhbGwiLCJzdG9yZVZhbHVlSXNTdG9yZU9iamVjdCIsIm1ha2VQcm9jZXNzZWRGaWVsZHNNZXJnZXIiLCJleHRyYWN0RnJhZ21lbnRDb250ZXh0IiwiZG9jdW1lbnQiLCJmcmFnbWVudHMiLCJmcmFnbWVudE1hcCIsImxvb2t1cEZyYWdtZW50IiwibmFtZSIsImRlZiIsImxvb2t1cCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/inMemoryCache.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/inMemoryCache.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InMemoryCache: () => (/* binding */ InMemoryCache)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _core_cache_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../core/cache.js */ \"(ssr)/./node_modules/@apollo/client/cache/core/cache.js\");\n/* harmony import */ var _core_types_common_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../core/types/common.js */ \"(ssr)/./node_modules/@apollo/client/cache/core/types/common.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/DocumentTransform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/print.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _readFromStore_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./readFromStore.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/readFromStore.js\");\n/* harmony import */ var _writeToStore_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./writeToStore.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/writeToStore.js\");\n/* harmony import */ var _entityStore_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./entityStore.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/entityStore.js\");\n/* harmony import */ var _reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reactiveVars.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js\");\n/* harmony import */ var _policies_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./policies.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/policies.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n/* harmony import */ var _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../utilities/caching/getMemoryInternals.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n\n\n// Make builtins like Map and Set safe to use with non-extensible objects.\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar InMemoryCache = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(InMemoryCache, _super);\n    function InMemoryCache(config) {\n        if (config === void 0) {\n            config = {};\n        }\n        var _this = _super.call(this) || this;\n        _this.watches = new Set();\n        _this.addTypenameTransform = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.DocumentTransform(_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.addTypenameToDocument);\n        // Override the default value, since InMemoryCache result objects are frozen\n        // in development and expected to remain logically immutable in production.\n        _this.assumeImmutableResults = true;\n        _this.makeVar = _reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__.makeVar;\n        _this.txCount = 0;\n        _this.config = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_7__.normalizeConfig)(config);\n        _this.addTypename = !!_this.config.addTypename;\n        _this.policies = new _policies_js__WEBPACK_IMPORTED_MODULE_8__.Policies({\n            cache: _this,\n            dataIdFromObject: _this.config.dataIdFromObject,\n            possibleTypes: _this.config.possibleTypes,\n            typePolicies: _this.config.typePolicies\n        });\n        _this.init();\n        return _this;\n    }\n    InMemoryCache.prototype.init = function() {\n        // Passing { resultCaching: false } in the InMemoryCache constructor options\n        // will completely disable dependency tracking, which will improve memory\n        // usage but worsen the performance of repeated reads.\n        var rootStore = this.data = new _entityStore_js__WEBPACK_IMPORTED_MODULE_9__.EntityStore.Root({\n            policies: this.policies,\n            resultCaching: this.config.resultCaching\n        });\n        // When no optimistic writes are currently active, cache.optimisticData ===\n        // cache.data, so there are no additional layers on top of the actual data.\n        // When an optimistic update happens, this.optimisticData will become a\n        // linked list of EntityStore Layer objects that terminates with the\n        // original this.data cache object.\n        this.optimisticData = rootStore.stump;\n        this.resetResultCache();\n    };\n    InMemoryCache.prototype.resetResultCache = function(resetResultIdentities) {\n        var _this = this;\n        var previousReader = this.storeReader;\n        var fragments = this.config.fragments;\n        // The StoreWriter is mostly stateless and so doesn't really need to be\n        // reset, but it does need to have its writer.storeReader reference updated,\n        // so it's simpler to update this.storeWriter as well.\n        this.storeWriter = new _writeToStore_js__WEBPACK_IMPORTED_MODULE_10__.StoreWriter(this, this.storeReader = new _readFromStore_js__WEBPACK_IMPORTED_MODULE_11__.StoreReader({\n            cache: this,\n            addTypename: this.addTypename,\n            resultCacheMaxSize: this.config.resultCacheMaxSize,\n            canonizeResults: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_7__.shouldCanonizeResults)(this.config),\n            canon: resetResultIdentities ? void 0 : previousReader && previousReader.canon,\n            fragments: fragments\n        }), fragments);\n        this.maybeBroadcastWatch = (0,optimism__WEBPACK_IMPORTED_MODULE_1__.wrap)(function(c, options) {\n            return _this.broadcastWatch(c, options);\n        }, {\n            max: this.config.resultCacheMaxSize || _utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.cacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] || 5000 /* defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] */ ,\n            makeCacheKey: function(c) {\n                // Return a cache key (thus enabling result caching) only if we're\n                // currently using a data store that can track cache dependencies.\n                var store = c.optimistic ? _this.optimisticData : _this.data;\n                if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_9__.supportsResultCaching)(store)) {\n                    var optimistic = c.optimistic, id = c.id, variables = c.variables;\n                    return store.makeCacheKey(c.query, // Different watches can have the same query, optimistic\n                    // status, rootId, and variables, but if their callbacks are\n                    // different, the (identical) result needs to be delivered to\n                    // each distinct callback. The easiest way to achieve that\n                    // separation is to include c.callback in the cache key for\n                    // maybeBroadcastWatch calls. See issue #5733.\n                    c.callback, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.canonicalStringify)({\n                        optimistic: optimistic,\n                        id: id,\n                        variables: variables\n                    }));\n                }\n            }\n        });\n        // Since we have thrown away all the cached functions that depend on the\n        // CacheGroup dependencies maintained by EntityStore, we should also reset\n        // all CacheGroup dependency information.\n        new Set([\n            this.data.group,\n            this.optimisticData.group\n        ]).forEach(function(group) {\n            return group.resetCaching();\n        });\n    };\n    InMemoryCache.prototype.restore = function(data) {\n        this.init();\n        // Since calling this.init() discards/replaces the entire StoreReader, along\n        // with the result caches it maintains, this.data.replace(data) won't have\n        // to bother deleting the old data.\n        if (data) this.data.replace(data);\n        return this;\n    };\n    InMemoryCache.prototype.extract = function(optimistic) {\n        if (optimistic === void 0) {\n            optimistic = false;\n        }\n        return (optimistic ? this.optimisticData : this.data).extract();\n    };\n    InMemoryCache.prototype.read = function(options) {\n        var // Since read returns data or null, without any additional metadata\n        // about whether/where there might have been missing fields, the\n        // default behavior cannot be returnPartialData = true (like it is\n        // for the diff method), since defaulting to true would violate the\n        // integrity of the T in the return type. However, partial data may\n        // be useful in some cases, so returnPartialData:true may be\n        // specified explicitly.\n        _a = options.returnPartialData, // Since read returns data or null, without any additional metadata\n        // about whether/where there might have been missing fields, the\n        // default behavior cannot be returnPartialData = true (like it is\n        // for the diff method), since defaulting to true would violate the\n        // integrity of the T in the return type. However, partial data may\n        // be useful in some cases, so returnPartialData:true may be\n        // specified explicitly.\n        returnPartialData = _a === void 0 ? false : _a;\n        try {\n            return this.storeReader.diffQueryAgainstStore((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n                store: options.optimistic ? this.optimisticData : this.data,\n                config: this.config,\n                returnPartialData: returnPartialData\n            })).result || null;\n        } catch (e) {\n            if (e instanceof _core_types_common_js__WEBPACK_IMPORTED_MODULE_14__.MissingFieldError) {\n                // Swallow MissingFieldError and return null, so callers do not need to\n                // worry about catching \"normal\" exceptions resulting from incomplete\n                // cache data. Unexpected errors will be re-thrown. If you need more\n                // information about which fields were missing, use cache.diff instead,\n                // and examine diffResult.missing.\n                return null;\n            }\n            throw e;\n        }\n    };\n    InMemoryCache.prototype.write = function(options) {\n        try {\n            ++this.txCount;\n            return this.storeWriter.writeToStore(this.data, options);\n        } finally{\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.modify = function(options) {\n        if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(options, \"id\") && !options.id) {\n            // To my knowledge, TypeScript does not currently provide a way to\n            // enforce that an optional property?:type must *not* be undefined\n            // when present. That ability would be useful here, because we want\n            // options.id to default to ROOT_QUERY only when no options.id was\n            // provided. If the caller attempts to pass options.id with a\n            // falsy/undefined value (perhaps because cache.identify failed), we\n            // should not assume the goal was to modify the ROOT_QUERY object.\n            // We could throw, but it seems natural to return false to indicate\n            // that nothing was modified.\n            return false;\n        }\n        var store = options.optimistic // Defaults to false.\n         ? this.optimisticData : this.data;\n        try {\n            ++this.txCount;\n            return store.modify(options.id || \"ROOT_QUERY\", options.fields);\n        } finally{\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.diff = function(options) {\n        return this.storeReader.diffQueryAgainstStore((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n            store: options.optimistic ? this.optimisticData : this.data,\n            rootId: options.id || \"ROOT_QUERY\",\n            config: this.config\n        }));\n    };\n    InMemoryCache.prototype.watch = function(watch) {\n        var _this = this;\n        if (!this.watches.size) {\n            // In case we previously called forgetCache(this) because\n            // this.watches became empty (see below), reattach this cache to any\n            // reactive variables on which it previously depended. It might seem\n            // paradoxical that we're able to recall something we supposedly\n            // forgot, but the point of calling forgetCache(this) is to silence\n            // useless broadcasts while this.watches is empty, and to allow the\n            // cache to be garbage collected. If, however, we manage to call\n            // recallCache(this) here, this cache object must not have been\n            // garbage collected yet, and should resume receiving updates from\n            // reactive variables, now that it has a watcher to notify.\n            (0,_reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__.recallCache)(this);\n        }\n        this.watches.add(watch);\n        if (watch.immediate) {\n            this.maybeBroadcastWatch(watch);\n        }\n        return function() {\n            // Once we remove the last watch from this.watches, cache.broadcastWatches\n            // no longer does anything, so we preemptively tell the reactive variable\n            // system to exclude this cache from future broadcasts.\n            if (_this.watches.delete(watch) && !_this.watches.size) {\n                (0,_reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__.forgetCache)(_this);\n            }\n            // Remove this watch from the LRU cache managed by the\n            // maybeBroadcastWatch OptimisticWrapperFunction, to prevent memory\n            // leaks involving the closure of watch.callback.\n            _this.maybeBroadcastWatch.forget(watch);\n        };\n    };\n    InMemoryCache.prototype.gc = function(options) {\n        var _a;\n        _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.canonicalStringify.reset();\n        _utilities_index_js__WEBPACK_IMPORTED_MODULE_15__.print.reset();\n        this.addTypenameTransform.resetCache();\n        (_a = this.config.fragments) === null || _a === void 0 ? void 0 : _a.resetCaches();\n        var ids = this.optimisticData.gc();\n        if (options && !this.txCount) {\n            if (options.resetResultCache) {\n                this.resetResultCache(options.resetResultIdentities);\n            } else if (options.resetResultIdentities) {\n                this.storeReader.resetCanon();\n            }\n        }\n        return ids;\n    };\n    // Call this method to ensure the given root ID remains in the cache after\n    // garbage collection, along with its transitive child entities. Note that\n    // the cache automatically retains all directly written entities. By default,\n    // the retainment persists after optimistic updates are removed. Pass true\n    // for the optimistic argument if you would prefer for the retainment to be\n    // discarded when the top-most optimistic layer is removed. Returns the\n    // resulting (non-negative) retainment count.\n    InMemoryCache.prototype.retain = function(rootId, optimistic) {\n        return (optimistic ? this.optimisticData : this.data).retain(rootId);\n    };\n    // Call this method to undo the effect of the retain method, above. Once the\n    // retainment count falls to zero, the given ID will no longer be preserved\n    // during garbage collection, though it may still be preserved by other safe\n    // entities that refer to it. Returns the resulting (non-negative) retainment\n    // count, in case that's useful.\n    InMemoryCache.prototype.release = function(rootId, optimistic) {\n        return (optimistic ? this.optimisticData : this.data).release(rootId);\n    };\n    // Returns the canonical ID for a given StoreObject, obeying typePolicies\n    // and keyFields (and dataIdFromObject, if you still use that). At minimum,\n    // the object must contain a __typename and any primary key fields required\n    // to identify entities of that type. If you pass a query result object, be\n    // sure that none of the primary key fields have been renamed by aliasing.\n    // If you pass a Reference object, its __ref ID string will be returned.\n    InMemoryCache.prototype.identify = function(object) {\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_16__.isReference)(object)) return object.__ref;\n        try {\n            return this.policies.identify(object)[0];\n        } catch (e) {\n            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(e);\n        }\n    };\n    InMemoryCache.prototype.evict = function(options) {\n        if (!options.id) {\n            if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(options, \"id\")) {\n                // See comment in modify method about why we return false when\n                // options.id exists but is falsy/undefined.\n                return false;\n            }\n            options = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n                id: \"ROOT_QUERY\"\n            });\n        }\n        try {\n            // It's unlikely that the eviction will end up invoking any other\n            // cache update operations while it's running, but {in,de}crementing\n            // this.txCount still seems like a good idea, for uniformity with\n            // the other update methods.\n            ++this.txCount;\n            // Pass this.data as a limit on the depth of the eviction, so evictions\n            // during optimistic updates (when this.data is temporarily set equal to\n            // this.optimisticData) do not escape their optimistic Layer.\n            return this.optimisticData.evict(options, this.data);\n        } finally{\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.reset = function(options) {\n        var _this = this;\n        this.init();\n        _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.canonicalStringify.reset();\n        if (options && options.discardWatches) {\n            // Similar to what happens in the unsubscribe function returned by\n            // cache.watch, applied to all current watches.\n            this.watches.forEach(function(watch) {\n                return _this.maybeBroadcastWatch.forget(watch);\n            });\n            this.watches.clear();\n            (0,_reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__.forgetCache)(this);\n        } else {\n            // Calling this.init() above unblocks all maybeBroadcastWatch caching, so\n            // this.broadcastWatches() triggers a broadcast to every current watcher\n            // (letting them know their data is now missing). This default behavior is\n            // convenient because it means the watches do not have to be manually\n            // reestablished after resetting the cache. To prevent this broadcast and\n            // cancel all watches, pass true for options.discardWatches.\n            this.broadcastWatches();\n        }\n        return Promise.resolve();\n    };\n    InMemoryCache.prototype.removeOptimistic = function(idToRemove) {\n        var newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n        if (newOptimisticData !== this.optimisticData) {\n            this.optimisticData = newOptimisticData;\n            this.broadcastWatches();\n        }\n    };\n    InMemoryCache.prototype.batch = function(options) {\n        var _this = this;\n        var update = options.update, _a = options.optimistic, optimistic = _a === void 0 ? true : _a, removeOptimistic = options.removeOptimistic, onWatchUpdated = options.onWatchUpdated;\n        var updateResult;\n        var perform = function(layer) {\n            var _a = _this, data = _a.data, optimisticData = _a.optimisticData;\n            ++_this.txCount;\n            if (layer) {\n                _this.data = _this.optimisticData = layer;\n            }\n            try {\n                return updateResult = update(_this);\n            } finally{\n                --_this.txCount;\n                _this.data = data;\n                _this.optimisticData = optimisticData;\n            }\n        };\n        var alreadyDirty = new Set();\n        if (onWatchUpdated && !this.txCount) {\n            // If an options.onWatchUpdated callback is provided, we want to call it\n            // with only the Cache.WatchOptions objects affected by options.update,\n            // but there might be dirty watchers already waiting to be broadcast that\n            // have nothing to do with the update. To prevent including those watchers\n            // in the post-update broadcast, we perform this initial broadcast to\n            // collect the dirty watchers, so we can re-dirty them later, after the\n            // post-update broadcast, allowing them to receive their pending\n            // broadcasts the next time broadcastWatches is called, just as they would\n            // if we never called cache.batch.\n            this.broadcastWatches((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n                onWatchUpdated: function(watch) {\n                    alreadyDirty.add(watch);\n                    return false;\n                }\n            }));\n        }\n        if (typeof optimistic === \"string\") {\n            // Note that there can be multiple layers with the same optimistic ID.\n            // When removeOptimistic(id) is called for that id, all matching layers\n            // will be removed, and the remaining layers will be reapplied.\n            this.optimisticData = this.optimisticData.addLayer(optimistic, perform);\n        } else if (optimistic === false) {\n            // Ensure both this.data and this.optimisticData refer to the root\n            // (non-optimistic) layer of the cache during the update. Note that\n            // this.data could be a Layer if we are currently executing an optimistic\n            // update function, but otherwise will always be an EntityStore.Root\n            // instance.\n            perform(this.data);\n        } else {\n            // Otherwise, leave this.data and this.optimisticData unchanged and run\n            // the update with broadcast batching.\n            perform();\n        }\n        if (typeof removeOptimistic === \"string\") {\n            this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);\n        }\n        // Note: if this.txCount > 0, then alreadyDirty.size === 0, so this code\n        // takes the else branch and calls this.broadcastWatches(options), which\n        // does nothing when this.txCount > 0.\n        if (onWatchUpdated && alreadyDirty.size) {\n            this.broadcastWatches((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n                onWatchUpdated: function(watch, diff) {\n                    var result = onWatchUpdated.call(this, watch, diff);\n                    if (result !== false) {\n                        // Since onWatchUpdated did not return false, this diff is\n                        // about to be broadcast to watch.callback, so we don't need\n                        // to re-dirty it with the other alreadyDirty watches below.\n                        alreadyDirty.delete(watch);\n                    }\n                    return result;\n                }\n            }));\n            // Silently re-dirty any watches that were already dirty before the update\n            // was performed, and were not broadcast just now.\n            if (alreadyDirty.size) {\n                alreadyDirty.forEach(function(watch) {\n                    return _this.maybeBroadcastWatch.dirty(watch);\n                });\n            }\n        } else {\n            // If alreadyDirty is empty or we don't have an onWatchUpdated\n            // function, we don't need to go to the trouble of wrapping\n            // options.onWatchUpdated.\n            this.broadcastWatches(options);\n        }\n        return updateResult;\n    };\n    InMemoryCache.prototype.performTransaction = function(update, optimisticId) {\n        return this.batch({\n            update: update,\n            optimistic: optimisticId || optimisticId !== null\n        });\n    };\n    InMemoryCache.prototype.transformDocument = function(document) {\n        return this.addTypenameToDocument(this.addFragmentsToDocument(document));\n    };\n    InMemoryCache.prototype.broadcastWatches = function(options) {\n        var _this = this;\n        if (!this.txCount) {\n            this.watches.forEach(function(c) {\n                return _this.maybeBroadcastWatch(c, options);\n            });\n        }\n    };\n    InMemoryCache.prototype.addFragmentsToDocument = function(document) {\n        var fragments = this.config.fragments;\n        return fragments ? fragments.transform(document) : document;\n    };\n    InMemoryCache.prototype.addTypenameToDocument = function(document) {\n        if (this.addTypename) {\n            return this.addTypenameTransform.transformDocument(document);\n        }\n        return document;\n    };\n    // This method is wrapped by maybeBroadcastWatch, which is called by\n    // broadcastWatches, so that we compute and broadcast results only when\n    // the data that would be broadcast might have changed. It would be\n    // simpler to check for changes after recomputing a result but before\n    // broadcasting it, but this wrapping approach allows us to skip both\n    // the recomputation and the broadcast, in most cases.\n    InMemoryCache.prototype.broadcastWatch = function(c, options) {\n        var lastDiff = c.lastDiff;\n        // Both WatchOptions and DiffOptions extend ReadOptions, and DiffOptions\n        // currently requires no additional properties, so we can use c (a\n        // WatchOptions object) as DiffOptions, without having to allocate a new\n        // object, and without having to enumerate the relevant properties (query,\n        // variables, etc.) explicitly. There will be some additional properties\n        // (lastDiff, callback, etc.), but cache.diff ignores them.\n        var diff = this.diff(c);\n        if (options) {\n            if (c.optimistic && typeof options.optimistic === \"string\") {\n                diff.fromOptimisticTransaction = true;\n            }\n            if (options.onWatchUpdated && options.onWatchUpdated.call(this, c, diff, lastDiff) === false) {\n                // Returning false from the onWatchUpdated callback will prevent\n                // calling c.callback(diff) for this watcher.\n                return;\n            }\n        }\n        if (!lastDiff || !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(lastDiff.result, diff.result)) {\n            c.callback(c.lastDiff = diff, lastDiff);\n        }\n    };\n    return InMemoryCache;\n}(_core_cache_js__WEBPACK_IMPORTED_MODULE_17__.ApolloCache);\n\nif (globalThis.__DEV__ !== false) {\n    InMemoryCache.prototype.getMemoryInternals = _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_18__.getInMemoryCacheMemoryInternals;\n} //# sourceMappingURL=inMemoryCache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/inMemoryCache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/key-extractor.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/key-extractor.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   collectSpecifierPaths: () => (/* binding */ collectSpecifierPaths),\n/* harmony export */   extractKeyPath: () => (/* binding */ extractKeyPath),\n/* harmony export */   getSpecifierPaths: () => (/* binding */ getSpecifierPaths),\n/* harmony export */   keyArgsFnFromSpecifier: () => (/* binding */ keyArgsFnFromSpecifier),\n/* harmony export */   keyFieldsFnFromSpecifier: () => (/* binding */ keyFieldsFnFromSpecifier)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n\n\n\n// Mapping from JSON-encoded KeySpecifier strings to associated information.\nvar specifierInfoCache = Object.create(null);\nfunction lookupSpecifierInfo(spec) {\n    // It's safe to encode KeySpecifier arrays with JSON.stringify, since they're\n    // just arrays of strings or nested KeySpecifier arrays, and the order of the\n    // array elements is important (and suitably preserved by JSON.stringify).\n    var cacheKey = JSON.stringify(spec);\n    return specifierInfoCache[cacheKey] || (specifierInfoCache[cacheKey] = Object.create(null));\n}\nfunction keyFieldsFnFromSpecifier(specifier) {\n    var info = lookupSpecifierInfo(specifier);\n    return info.keyFieldsFn || (info.keyFieldsFn = function(object, context) {\n        var extract = function(from, key) {\n            return context.readField(key, from);\n        };\n        var keyObject = context.keyObject = collectSpecifierPaths(specifier, function(schemaKeyPath) {\n            var extracted = extractKeyPath(context.storeObject, schemaKeyPath, // Using context.readField to extract paths from context.storeObject\n            // allows the extraction to see through Reference objects and respect\n            // custom read functions.\n            extract);\n            if (extracted === void 0 && object !== context.storeObject && _helpers_js__WEBPACK_IMPORTED_MODULE_1__.hasOwn.call(object, schemaKeyPath[0])) {\n                // If context.storeObject fails to provide a value for the requested\n                // path, fall back to the raw result object, if it has a top-level key\n                // matching the first key in the path (schemaKeyPath[0]). This allows\n                // key fields included in the written data to be saved in the cache\n                // even if they are not selected explicitly in context.selectionSet.\n                // Not being mentioned by context.selectionSet is convenient here,\n                // since it means these extra fields cannot be affected by field\n                // aliasing, which is why we can use extractKey instead of\n                // context.readField for this extraction.\n                extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n            }\n            (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(extracted !== void 0, 4, schemaKeyPath.join(\".\"), object);\n            return extracted;\n        });\n        return \"\".concat(context.typename, \":\").concat(JSON.stringify(keyObject));\n    });\n}\n// The keyArgs extraction process is roughly analogous to keyFields extraction,\n// but there are no aliases involved, missing fields are tolerated (by merely\n// omitting them from the key), and drawing from field.directives or variables\n// is allowed (in addition to drawing from the field's arguments object).\n// Concretely, these differences mean passing a different key path extractor\n// function to collectSpecifierPaths, reusing the shared extractKeyPath helper\n// wherever possible.\nfunction keyArgsFnFromSpecifier(specifier) {\n    var info = lookupSpecifierInfo(specifier);\n    return info.keyArgsFn || (info.keyArgsFn = function(args, _a) {\n        var field = _a.field, variables = _a.variables, fieldName = _a.fieldName;\n        var collected = collectSpecifierPaths(specifier, function(keyPath) {\n            var firstKey = keyPath[0];\n            var firstChar = firstKey.charAt(0);\n            if (firstChar === \"@\") {\n                if (field && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isNonEmptyArray)(field.directives)) {\n                    var directiveName_1 = firstKey.slice(1);\n                    // If the directive appears multiple times, only the first\n                    // occurrence's arguments will be used. TODO Allow repetition?\n                    // TODO Cache this work somehow, a la aliasMap?\n                    var d = field.directives.find(function(d) {\n                        return d.name.value === directiveName_1;\n                    });\n                    // Fortunately argumentsObjectFromField works for DirectiveNode!\n                    var directiveArgs = d && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.argumentsObjectFromField)(d, variables);\n                    // For directives without arguments (d defined, but directiveArgs ===\n                    // null), the presence or absence of the directive still counts as\n                    // part of the field key, so we return null in those cases. If no\n                    // directive with this name was found for this field (d undefined and\n                    // thus directiveArgs undefined), we return undefined, which causes\n                    // this value to be omitted from the key object returned by\n                    // collectSpecifierPaths.\n                    return directiveArgs && extractKeyPath(directiveArgs, // If keyPath.length === 1, this code calls extractKeyPath with an\n                    // empty path, which works because it uses directiveArgs as the\n                    // extracted value.\n                    keyPath.slice(1));\n                }\n                // If the key started with @ but there was no corresponding directive,\n                // we want to omit this value from the key object, not fall through to\n                // treating @whatever as a normal argument name.\n                return;\n            }\n            if (firstChar === \"$\") {\n                var variableName = firstKey.slice(1);\n                if (variables && _helpers_js__WEBPACK_IMPORTED_MODULE_1__.hasOwn.call(variables, variableName)) {\n                    var varKeyPath = keyPath.slice(0);\n                    varKeyPath[0] = variableName;\n                    return extractKeyPath(variables, varKeyPath);\n                }\n                // If the key started with $ but there was no corresponding variable, we\n                // want to omit this value from the key object, not fall through to\n                // treating $whatever as a normal argument name.\n                return;\n            }\n            if (args) {\n                return extractKeyPath(args, keyPath);\n            }\n        });\n        var suffix = JSON.stringify(collected);\n        // If no arguments were passed to this field, and it didn't have any other\n        // field key contributions from directives or variables, hide the empty\n        // :{} suffix from the field key. However, a field passed no arguments can\n        // still end up with a non-empty :{...} suffix if its key configuration\n        // refers to directives or variables.\n        if (args || suffix !== \"{}\") {\n            fieldName += \":\" + suffix;\n        }\n        return fieldName;\n    });\n}\nfunction collectSpecifierPaths(specifier, extractor) {\n    // For each path specified by specifier, invoke the extractor, and repeatedly\n    // merge the results together, with appropriate ancestor context.\n    var merger = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.DeepMerger();\n    return getSpecifierPaths(specifier).reduce(function(collected, path) {\n        var _a;\n        var toMerge = extractor(path);\n        if (toMerge !== void 0) {\n            // This path is not expected to contain array indexes, so the toMerge\n            // reconstruction will not contain arrays. TODO Fix this?\n            for(var i = path.length - 1; i >= 0; --i){\n                toMerge = (_a = {}, _a[path[i]] = toMerge, _a);\n            }\n            collected = merger.merge(collected, toMerge);\n        }\n        return collected;\n    }, Object.create(null));\n}\nfunction getSpecifierPaths(spec) {\n    var info = lookupSpecifierInfo(spec);\n    if (!info.paths) {\n        var paths_1 = info.paths = [];\n        var currentPath_1 = [];\n        spec.forEach(function(s, i) {\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(s)) {\n                getSpecifierPaths(s).forEach(function(p) {\n                    return paths_1.push(currentPath_1.concat(p));\n                });\n                currentPath_1.length = 0;\n            } else {\n                currentPath_1.push(s);\n                if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(spec[i + 1])) {\n                    paths_1.push(currentPath_1.slice(0));\n                    currentPath_1.length = 0;\n                }\n            }\n        });\n    }\n    return info.paths;\n}\nfunction extractKey(object, key) {\n    return object[key];\n}\nfunction extractKeyPath(object, path, extract) {\n    // For each key in path, extract the corresponding child property from obj,\n    // flattening arrays if encountered (uncommon for keyFields and keyArgs, but\n    // possible). The final result of path.reduce is normalized so unexpected leaf\n    // objects have their keys safely sorted. That final result is difficult to\n    // type as anything other than any. You're welcome to try to improve the\n    // return type, but keep in mind extractKeyPath is not a public function\n    // (exported only for testing), so the effort may not be worthwhile unless the\n    // limited set of actual callers (see above) pass arguments that TypeScript\n    // can statically type. If we know only that path is some array of strings\n    // (and not, say, a specific tuple of statically known strings), any (or\n    // possibly unknown) is the honest answer.\n    extract = extract || extractKey;\n    return normalize(path.reduce(function reducer(obj, key) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(obj) ? obj.map(function(child) {\n            return reducer(child, key);\n        }) : obj && extract(obj, key);\n    }, object));\n}\nfunction normalize(value) {\n    // Usually the extracted value will be a scalar value, since most primary\n    // key fields are scalar, but just in case we get an object or an array, we\n    // need to do some normalization of the order of (nested) keys.\n    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isNonNullObject)(value)) {\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(value)) {\n            return value.map(normalize);\n        }\n        return collectSpecifierPaths(Object.keys(value).sort(), function(path) {\n            return extractKeyPath(value, path);\n        });\n    }\n    return value;\n} //# sourceMappingURL=key-extractor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/key-extractor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/object-canon.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/object-canon.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ObjectCanon: () => (/* binding */ ObjectCanon)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n\n\n\n\nfunction shallowCopy(value) {\n    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value)) {\n        return (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(value) ? value.slice(0) : (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n            __proto__: Object.getPrototypeOf(value)\n        }, value);\n    }\n    return value;\n}\n// When programmers talk about the \"canonical form\" of an object, they\n// usually have the following meaning in mind, which I've copied from\n// https://en.wiktionary.org/wiki/canonical_form:\n//\n// 1. A standard or normal presentation of a mathematical entity [or\n//    object]. A canonical form is an element of a set of representatives\n//    of equivalence classes of forms such that there is a function or\n//    procedure which projects every element of each equivalence class\n//    onto that one element, the canonical form of that equivalence\n//    class. The canonical form is expected to be simpler than the rest of\n//    the forms in some way.\n//\n// That's a long-winded way of saying any two objects that have the same\n// canonical form may be considered equivalent, even if they are !==,\n// which usually means the objects are structurally equivalent (deeply\n// equal), but don't necessarily use the same memory.\n//\n// Like a literary or musical canon, this ObjectCanon class represents a\n// collection of unique canonical items (JavaScript objects), with the\n// important property that canon.admit(a) === canon.admit(b) if a and b\n// are deeply equal to each other. In terms of the definition above, the\n// canon.admit method is the \"function or procedure which projects every\"\n// object \"onto that one element, the canonical form.\"\n//\n// In the worst case, the canonicalization process may involve looking at\n// every property in the provided object tree, so it takes the same order\n// of time as deep equality checking. Fortunately, already-canonicalized\n// objects are returned immediately from canon.admit, so the presence of\n// canonical subtrees tends to speed up canonicalization.\n//\n// Since consumers of canonical objects can check for deep equality in\n// constant time, canonicalizing cache results can massively improve the\n// performance of application code that skips re-rendering unchanged\n// results, such as \"pure\" UI components in a framework like React.\n//\n// Of course, since canonical objects may be shared widely between\n// unrelated consumers, it's important to think of them as immutable, even\n// though they are not actually frozen with Object.freeze in production,\n// due to the extra performance overhead that comes with frozen objects.\n//\n// Custom scalar objects whose internal class name is neither Array nor\n// Object can be included safely in the admitted tree, but they will not\n// be replaced with a canonical version (to put it another way, they are\n// assumed to be canonical already).\n//\n// If we ignore custom objects, no detection of cycles or repeated object\n// references is currently required by the StoreReader class, since\n// GraphQL result objects are JSON-serializable trees (and thus contain\n// neither cycles nor repeated subtrees), so we can avoid the complexity\n// of keeping track of objects we've already seen during the recursion of\n// the admit method.\n//\n// In the future, we may consider adding additional cases to the switch\n// statement to handle other common object types, such as \"[object Date]\"\n// objects, as needed.\nvar ObjectCanon = /** @class */ function() {\n    function ObjectCanon() {\n        // Set of all canonical objects this ObjectCanon has admitted, allowing\n        // canon.admit to return previously-canonicalized objects immediately.\n        this.known = new (_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.canUseWeakSet ? WeakSet : Set)();\n        // Efficient storage/lookup structure for canonical objects.\n        this.pool = new _wry_trie__WEBPACK_IMPORTED_MODULE_0__.Trie(_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.canUseWeakMap);\n        // Make the ObjectCanon assume this value has already been\n        // canonicalized.\n        this.passes = new WeakMap();\n        // Arrays that contain the same elements in a different order can share\n        // the same SortedKeysInfo object, to save memory.\n        this.keysByJSON = new Map();\n        // This has to come last because it depends on keysByJSON.\n        this.empty = this.admit({});\n    }\n    ObjectCanon.prototype.isKnown = function(value) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value) && this.known.has(value);\n    };\n    ObjectCanon.prototype.pass = function(value) {\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value)) {\n            var copy = shallowCopy(value);\n            this.passes.set(copy, value);\n            return copy;\n        }\n        return value;\n    };\n    ObjectCanon.prototype.admit = function(value) {\n        var _this = this;\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value)) {\n            var original = this.passes.get(value);\n            if (original) return original;\n            var proto = Object.getPrototypeOf(value);\n            switch(proto){\n                case Array.prototype:\n                    {\n                        if (this.known.has(value)) return value;\n                        var array = value.map(this.admit, this);\n                        // Arrays are looked up in the Trie using their recursively\n                        // canonicalized elements, and the known version of the array is\n                        // preserved as node.array.\n                        var node = this.pool.lookupArray(array);\n                        if (!node.array) {\n                            this.known.add(node.array = array);\n                            // Since canonical arrays may be shared widely between\n                            // unrelated consumers, it's important to regard them as\n                            // immutable, even if they are not frozen in production.\n                            if (globalThis.__DEV__ !== false) {\n                                Object.freeze(array);\n                            }\n                        }\n                        return node.array;\n                    }\n                case null:\n                case Object.prototype:\n                    {\n                        if (this.known.has(value)) return value;\n                        var proto_1 = Object.getPrototypeOf(value);\n                        var array_1 = [\n                            proto_1\n                        ];\n                        var keys = this.sortedKeys(value);\n                        array_1.push(keys.json);\n                        var firstValueIndex_1 = array_1.length;\n                        keys.sorted.forEach(function(key) {\n                            array_1.push(_this.admit(value[key]));\n                        });\n                        // Objects are looked up in the Trie by their prototype (which\n                        // is *not* recursively canonicalized), followed by a JSON\n                        // representation of their (sorted) keys, followed by the\n                        // sequence of recursively canonicalized values corresponding to\n                        // those keys. To keep the final results unambiguous with other\n                        // sequences (such as arrays that just happen to contain [proto,\n                        // keys.json, value1, value2, ...]), the known version of the\n                        // object is stored as node.object.\n                        var node = this.pool.lookupArray(array_1);\n                        if (!node.object) {\n                            var obj_1 = node.object = Object.create(proto_1);\n                            this.known.add(obj_1);\n                            keys.sorted.forEach(function(key, i) {\n                                obj_1[key] = array_1[firstValueIndex_1 + i];\n                            });\n                            // Since canonical objects may be shared widely between\n                            // unrelated consumers, it's important to regard them as\n                            // immutable, even if they are not frozen in production.\n                            if (globalThis.__DEV__ !== false) {\n                                Object.freeze(obj_1);\n                            }\n                        }\n                        return node.object;\n                    }\n            }\n        }\n        return value;\n    };\n    // It's worthwhile to cache the sorting of arrays of strings, since the\n    // same initial unsorted arrays tend to be encountered many times.\n    // Fortunately, we can reuse the Trie machinery to look up the sorted\n    // arrays in linear time (which is faster than sorting large arrays).\n    ObjectCanon.prototype.sortedKeys = function(obj) {\n        var keys = Object.keys(obj);\n        var node = this.pool.lookupArray(keys);\n        if (!node.keys) {\n            keys.sort();\n            var json = JSON.stringify(keys);\n            if (!(node.keys = this.keysByJSON.get(json))) {\n                this.keysByJSON.set(json, node.keys = {\n                    sorted: keys,\n                    json: json\n                });\n            }\n        }\n        return node.keys;\n    };\n    return ObjectCanon;\n}();\n //# sourceMappingURL=object-canon.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/object-canon.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/policies.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/policies.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Policies: () => (/* binding */ Policies),\n/* harmony export */   normalizeReadFieldOptions: () => (/* binding */ normalizeReadFieldOptions)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reactiveVars.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js\");\n/* harmony import */ var _key_extractor_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./key-extractor.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/key-extractor.js\");\n\n\n\n\n\n\nfunction argsFromFieldSpecifier(spec) {\n    return spec.args !== void 0 ? spec.args : spec.field ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.argumentsObjectFromField)(spec.field, spec.variables) : null;\n}\nvar nullKeyFieldsFn = function() {\n    return void 0;\n};\nvar simpleKeyArgsFn = function(_args, context) {\n    return context.fieldName;\n};\n// These merge functions can be selected by specifying merge:true or\n// merge:false in a field policy.\nvar mergeTrueFn = function(existing, incoming, _a) {\n    var mergeObjects = _a.mergeObjects;\n    return mergeObjects(existing, incoming);\n};\nvar mergeFalseFn = function(_, incoming) {\n    return incoming;\n};\nvar Policies = /** @class */ function() {\n    function Policies(config) {\n        this.config = config;\n        this.typePolicies = Object.create(null);\n        this.toBeAdded = Object.create(null);\n        // Map from subtype names to sets of supertype names. Note that this\n        // representation inverts the structure of possibleTypes (whose keys are\n        // supertypes and whose values are arrays of subtypes) because it tends\n        // to be much more efficient to search upwards than downwards.\n        this.supertypeMap = new Map();\n        // Any fuzzy subtypes specified by possibleTypes will be converted to\n        // RegExp objects and recorded here. Every key of this map can also be\n        // found in supertypeMap. In many cases this Map will be empty, which\n        // means no fuzzy subtype checking will happen in fragmentMatches.\n        this.fuzzySubtypes = new Map();\n        this.rootIdsByTypename = Object.create(null);\n        this.rootTypenamesById = Object.create(null);\n        this.usingPossibleTypes = false;\n        this.config = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n            dataIdFromObject: _helpers_js__WEBPACK_IMPORTED_MODULE_3__.defaultDataIdFromObject\n        }, config);\n        this.cache = this.config.cache;\n        this.setRootTypename(\"Query\");\n        this.setRootTypename(\"Mutation\");\n        this.setRootTypename(\"Subscription\");\n        if (config.possibleTypes) {\n            this.addPossibleTypes(config.possibleTypes);\n        }\n        if (config.typePolicies) {\n            this.addTypePolicies(config.typePolicies);\n        }\n    }\n    Policies.prototype.identify = function(object, partialContext) {\n        var _a;\n        var policies = this;\n        var typename = partialContext && (partialContext.typename || ((_a = partialContext.storeObject) === null || _a === void 0 ? void 0 : _a.__typename)) || object.__typename;\n        // It should be possible to write root Query fields with writeFragment,\n        // using { __typename: \"Query\", ... } as the data, but it does not make\n        // sense to allow the same identification behavior for the Mutation and\n        // Subscription types, since application code should never be writing\n        // directly to (or reading directly from) those root objects.\n        if (typename === this.rootTypenamesById.ROOT_QUERY) {\n            return [\n                \"ROOT_QUERY\"\n            ];\n        }\n        // Default context.storeObject to object if not otherwise provided.\n        var storeObject = partialContext && partialContext.storeObject || object;\n        var context = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, partialContext), {\n            typename: typename,\n            storeObject: storeObject,\n            readField: partialContext && partialContext.readField || function() {\n                var options = normalizeReadFieldOptions(arguments, storeObject);\n                return policies.readField(options, {\n                    store: policies.cache[\"data\"],\n                    variables: options.variables\n                });\n            }\n        });\n        var id;\n        var policy = typename && this.getTypePolicy(typename);\n        var keyFn = policy && policy.keyFn || this.config.dataIdFromObject;\n        while(keyFn){\n            var specifierOrId = keyFn((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, object), storeObject), context);\n            if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(specifierOrId)) {\n                keyFn = (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_5__.keyFieldsFnFromSpecifier)(specifierOrId);\n            } else {\n                id = specifierOrId;\n                break;\n            }\n        }\n        id = id ? String(id) : void 0;\n        return context.keyObject ? [\n            id,\n            context.keyObject\n        ] : [\n            id\n        ];\n    };\n    Policies.prototype.addTypePolicies = function(typePolicies) {\n        var _this = this;\n        Object.keys(typePolicies).forEach(function(typename) {\n            var _a = typePolicies[typename], queryType = _a.queryType, mutationType = _a.mutationType, subscriptionType = _a.subscriptionType, incoming = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__rest)(_a, [\n                \"queryType\",\n                \"mutationType\",\n                \"subscriptionType\"\n            ]);\n            // Though {query,mutation,subscription}Type configurations are rare,\n            // it's important to call setRootTypename as early as possible,\n            // since these configurations should apply consistently for the\n            // entire lifetime of the cache. Also, since only one __typename can\n            // qualify as one of these root types, these three properties cannot\n            // be inherited, unlike the rest of the incoming properties. That\n            // restriction is convenient, because the purpose of this.toBeAdded\n            // is to delay the processing of type/field policies until the first\n            // time they're used, allowing policies to be added in any order as\n            // long as all relevant policies (including policies for supertypes)\n            // have been added by the time a given policy is used for the first\n            // time. In other words, since inheritance doesn't matter for these\n            // properties, there's also no need to delay their processing using\n            // the this.toBeAdded queue.\n            if (queryType) _this.setRootTypename(\"Query\", typename);\n            if (mutationType) _this.setRootTypename(\"Mutation\", typename);\n            if (subscriptionType) _this.setRootTypename(\"Subscription\", typename);\n            if (_helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(_this.toBeAdded, typename)) {\n                _this.toBeAdded[typename].push(incoming);\n            } else {\n                _this.toBeAdded[typename] = [\n                    incoming\n                ];\n            }\n        });\n    };\n    Policies.prototype.updateTypePolicy = function(typename, incoming) {\n        var _this = this;\n        var existing = this.getTypePolicy(typename);\n        var keyFields = incoming.keyFields, fields = incoming.fields;\n        function setMerge(existing, merge) {\n            existing.merge = typeof merge === \"function\" ? merge : merge === true ? mergeTrueFn : merge === false ? mergeFalseFn : existing.merge;\n        }\n        // Type policies can define merge functions, as an alternative to\n        // using field policies to merge child objects.\n        setMerge(existing, incoming.merge);\n        existing.keyFn = // Pass false to disable normalization for this typename.\n        keyFields === false ? nullKeyFieldsFn : (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(keyFields) ? (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_5__.keyFieldsFnFromSpecifier)(keyFields) : typeof keyFields === \"function\" ? keyFields : existing.keyFn;\n        if (fields) {\n            Object.keys(fields).forEach(function(fieldName) {\n                var existing = _this.getFieldPolicy(typename, fieldName, true);\n                var incoming = fields[fieldName];\n                if (typeof incoming === \"function\") {\n                    existing.read = incoming;\n                } else {\n                    var keyArgs = incoming.keyArgs, read = incoming.read, merge = incoming.merge;\n                    existing.keyFn = // Pass false to disable argument-based differentiation of\n                    // field identities.\n                    keyArgs === false ? simpleKeyArgsFn : (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(keyArgs) ? (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_5__.keyArgsFnFromSpecifier)(keyArgs) : typeof keyArgs === \"function\" ? keyArgs : existing.keyFn;\n                    if (typeof read === \"function\") {\n                        existing.read = read;\n                    }\n                    setMerge(existing, merge);\n                }\n                if (existing.read && existing.merge) {\n                    // If we have both a read and a merge function, assume\n                    // keyArgs:false, because read and merge together can take\n                    // responsibility for interpreting arguments in and out. This\n                    // default assumption can always be overridden by specifying\n                    // keyArgs explicitly in the FieldPolicy.\n                    existing.keyFn = existing.keyFn || simpleKeyArgsFn;\n                }\n            });\n        }\n    };\n    Policies.prototype.setRootTypename = function(which, typename) {\n        if (typename === void 0) {\n            typename = which;\n        }\n        var rootId = \"ROOT_\" + which.toUpperCase();\n        var old = this.rootTypenamesById[rootId];\n        if (typename !== old) {\n            (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!old || old === which, 5, which);\n            // First, delete any old __typename associated with this rootId from\n            // rootIdsByTypename.\n            if (old) delete this.rootIdsByTypename[old];\n            // Now make this the only __typename that maps to this rootId.\n            this.rootIdsByTypename[typename] = rootId;\n            // Finally, update the __typename associated with this rootId.\n            this.rootTypenamesById[rootId] = typename;\n        }\n    };\n    Policies.prototype.addPossibleTypes = function(possibleTypes) {\n        var _this = this;\n        this.usingPossibleTypes = true;\n        Object.keys(possibleTypes).forEach(function(supertype) {\n            // Make sure all types have an entry in this.supertypeMap, even if\n            // their supertype set is empty, so we can return false immediately\n            // from policies.fragmentMatches for unknown supertypes.\n            _this.getSupertypeSet(supertype, true);\n            possibleTypes[supertype].forEach(function(subtype) {\n                _this.getSupertypeSet(subtype, true).add(supertype);\n                var match = subtype.match(_helpers_js__WEBPACK_IMPORTED_MODULE_3__.TypeOrFieldNameRegExp);\n                if (!match || match[0] !== subtype) {\n                    // TODO Don't interpret just any invalid typename as a RegExp.\n                    _this.fuzzySubtypes.set(subtype, new RegExp(subtype));\n                }\n            });\n        });\n    };\n    Policies.prototype.getTypePolicy = function(typename) {\n        var _this = this;\n        if (!_helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(this.typePolicies, typename)) {\n            var policy_1 = this.typePolicies[typename] = Object.create(null);\n            policy_1.fields = Object.create(null);\n            // When the TypePolicy for typename is first accessed, instead of\n            // starting with an empty policy object, inherit any properties or\n            // fields from the type policies of the supertypes of typename.\n            //\n            // Any properties or fields defined explicitly within the TypePolicy\n            // for typename will take precedence, and if there are multiple\n            // supertypes, the properties of policies whose types were added\n            // later via addPossibleTypes will take precedence over those of\n            // earlier supertypes. TODO Perhaps we should warn about these\n            // conflicts in development, and recommend defining the property\n            // explicitly in the subtype policy?\n            //\n            // Field policy inheritance is atomic/shallow: you can't inherit a\n            // field policy and then override just its read function, since read\n            // and merge functions often need to cooperate, so changing only one\n            // of them would be a recipe for inconsistency.\n            //\n            // Once the TypePolicy for typename has been accessed, its properties can\n            // still be updated directly using addTypePolicies, but future changes to\n            // inherited supertype policies will not be reflected in this subtype\n            // policy, because this code runs at most once per typename.\n            var supertypes_1 = this.supertypeMap.get(typename);\n            if (!supertypes_1 && this.fuzzySubtypes.size) {\n                // To make the inheritance logic work for unknown typename strings that\n                // may have fuzzy supertypes, we give this typename an empty supertype\n                // set and then populate it with any fuzzy supertypes that match.\n                supertypes_1 = this.getSupertypeSet(typename, true);\n                // This only works for typenames that are directly matched by a fuzzy\n                // supertype. What if there is an intermediate chain of supertypes?\n                // While possible, that situation can only be solved effectively by\n                // specifying the intermediate relationships via possibleTypes, manually\n                // and in a non-fuzzy way.\n                this.fuzzySubtypes.forEach(function(regExp, fuzzy) {\n                    if (regExp.test(typename)) {\n                        // The fuzzy parameter is just the original string version of regExp\n                        // (not a valid __typename string), but we can look up the\n                        // associated supertype(s) in this.supertypeMap.\n                        var fuzzySupertypes = _this.supertypeMap.get(fuzzy);\n                        if (fuzzySupertypes) {\n                            fuzzySupertypes.forEach(function(supertype) {\n                                return supertypes_1.add(supertype);\n                            });\n                        }\n                    }\n                });\n            }\n            if (supertypes_1 && supertypes_1.size) {\n                supertypes_1.forEach(function(supertype) {\n                    var _a = _this.getTypePolicy(supertype), fields = _a.fields, rest = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__rest)(_a, [\n                        \"fields\"\n                    ]);\n                    Object.assign(policy_1, rest);\n                    Object.assign(policy_1.fields, fields);\n                });\n            }\n        }\n        var inbox = this.toBeAdded[typename];\n        if (inbox && inbox.length) {\n            // Merge the pending policies into this.typePolicies, in the order they\n            // were originally passed to addTypePolicy.\n            inbox.splice(0).forEach(function(policy) {\n                _this.updateTypePolicy(typename, policy);\n            });\n        }\n        return this.typePolicies[typename];\n    };\n    Policies.prototype.getFieldPolicy = function(typename, fieldName, createIfMissing) {\n        if (typename) {\n            var fieldPolicies = this.getTypePolicy(typename).fields;\n            return fieldPolicies[fieldName] || createIfMissing && (fieldPolicies[fieldName] = Object.create(null));\n        }\n    };\n    Policies.prototype.getSupertypeSet = function(subtype, createIfMissing) {\n        var supertypeSet = this.supertypeMap.get(subtype);\n        if (!supertypeSet && createIfMissing) {\n            this.supertypeMap.set(subtype, supertypeSet = new Set());\n        }\n        return supertypeSet;\n    };\n    Policies.prototype.fragmentMatches = function(fragment, typename, result, variables) {\n        var _this = this;\n        if (!fragment.typeCondition) return true;\n        // If the fragment has a type condition but the object we're matching\n        // against does not have a __typename, the fragment cannot match.\n        if (!typename) return false;\n        var supertype = fragment.typeCondition.name.value;\n        // Common case: fragment type condition and __typename are the same.\n        if (typename === supertype) return true;\n        if (this.usingPossibleTypes && this.supertypeMap.has(supertype)) {\n            var typenameSupertypeSet = this.getSupertypeSet(typename, true);\n            var workQueue_1 = [\n                typenameSupertypeSet\n            ];\n            var maybeEnqueue_1 = function(subtype) {\n                var supertypeSet = _this.getSupertypeSet(subtype, false);\n                if (supertypeSet && supertypeSet.size && workQueue_1.indexOf(supertypeSet) < 0) {\n                    workQueue_1.push(supertypeSet);\n                }\n            };\n            // We need to check fuzzy subtypes only if we encountered fuzzy\n            // subtype strings in addPossibleTypes, and only while writing to\n            // the cache, since that's when selectionSetMatchesResult gives a\n            // strong signal of fragment matching. The StoreReader class calls\n            // policies.fragmentMatches without passing a result object, so\n            // needToCheckFuzzySubtypes is always false while reading.\n            var needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);\n            var checkingFuzzySubtypes = false;\n            // It's important to keep evaluating workQueue.length each time through\n            // the loop, because the queue can grow while we're iterating over it.\n            for(var i = 0; i < workQueue_1.length; ++i){\n                var supertypeSet = workQueue_1[i];\n                if (supertypeSet.has(supertype)) {\n                    if (!typenameSupertypeSet.has(supertype)) {\n                        if (checkingFuzzySubtypes) {\n                            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(6, typename, supertype);\n                        }\n                        // Record positive results for faster future lookup.\n                        // Unfortunately, we cannot safely cache negative results,\n                        // because new possibleTypes data could always be added to the\n                        // Policies class.\n                        typenameSupertypeSet.add(supertype);\n                    }\n                    return true;\n                }\n                supertypeSet.forEach(maybeEnqueue_1);\n                if (needToCheckFuzzySubtypes && // Start checking fuzzy subtypes only after exhausting all\n                // non-fuzzy subtypes (after the final iteration of the loop).\n                i === workQueue_1.length - 1 && // We could wait to compare fragment.selectionSet to result\n                // after we verify the supertype, but this check is often less\n                // expensive than that search, and we will have to do the\n                // comparison anyway whenever we find a potential match.\n                (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.selectionSetMatchesResult)(fragment.selectionSet, result, variables)) {\n                    // We don't always need to check fuzzy subtypes (if no result\n                    // was provided, or !this.fuzzySubtypes.size), but, when we do,\n                    // we only want to check them once.\n                    needToCheckFuzzySubtypes = false;\n                    checkingFuzzySubtypes = true;\n                    // If we find any fuzzy subtypes that match typename, extend the\n                    // workQueue to search through the supertypes of those fuzzy\n                    // subtypes. Otherwise the for-loop will terminate and we'll\n                    // return false below.\n                    this.fuzzySubtypes.forEach(function(regExp, fuzzyString) {\n                        var match = typename.match(regExp);\n                        if (match && match[0] === typename) {\n                            maybeEnqueue_1(fuzzyString);\n                        }\n                    });\n                }\n            }\n        }\n        return false;\n    };\n    Policies.prototype.hasKeyArgs = function(typename, fieldName) {\n        var policy = this.getFieldPolicy(typename, fieldName, false);\n        return !!(policy && policy.keyFn);\n    };\n    Policies.prototype.getStoreFieldName = function(fieldSpec) {\n        var typename = fieldSpec.typename, fieldName = fieldSpec.fieldName;\n        var policy = this.getFieldPolicy(typename, fieldName, false);\n        var storeFieldName;\n        var keyFn = policy && policy.keyFn;\n        if (keyFn && typename) {\n            var context = {\n                typename: typename,\n                fieldName: fieldName,\n                field: fieldSpec.field || null,\n                variables: fieldSpec.variables\n            };\n            var args = argsFromFieldSpecifier(fieldSpec);\n            while(keyFn){\n                var specifierOrString = keyFn(args, context);\n                if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(specifierOrString)) {\n                    keyFn = (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_5__.keyArgsFnFromSpecifier)(specifierOrString);\n                } else {\n                    // If the custom keyFn returns a falsy value, fall back to\n                    // fieldName instead.\n                    storeFieldName = specifierOrString || fieldName;\n                    break;\n                }\n            }\n        }\n        if (storeFieldName === void 0) {\n            storeFieldName = fieldSpec.field ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.storeKeyNameFromField)(fieldSpec.field, fieldSpec.variables) : (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.getStoreKeyName)(fieldName, argsFromFieldSpecifier(fieldSpec));\n        }\n        // Returning false from a keyArgs function is like configuring\n        // keyArgs: false, but more dynamic.\n        if (storeFieldName === false) {\n            return fieldName;\n        }\n        // Make sure custom field names start with the actual field.name.value\n        // of the field, so we can always figure out which properties of a\n        // StoreObject correspond to which original field names.\n        return fieldName === (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.fieldNameFromStoreName)(storeFieldName) ? storeFieldName : fieldName + \":\" + storeFieldName;\n    };\n    Policies.prototype.readField = function(options, context) {\n        var objectOrReference = options.from;\n        if (!objectOrReference) return;\n        var nameOrField = options.field || options.fieldName;\n        if (!nameOrField) return;\n        if (options.typename === void 0) {\n            var typename = context.store.getFieldValue(objectOrReference, \"__typename\");\n            if (typename) options.typename = typename;\n        }\n        var storeFieldName = this.getStoreFieldName(options);\n        var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.fieldNameFromStoreName)(storeFieldName);\n        var existing = context.store.getFieldValue(objectOrReference, storeFieldName);\n        var policy = this.getFieldPolicy(options.typename, fieldName, false);\n        var read = policy && policy.read;\n        if (read) {\n            var readOptions = makeFieldFunctionOptions(this, objectOrReference, options, context, context.store.getStorage((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isReference)(objectOrReference) ? objectOrReference.__ref : objectOrReference, storeFieldName));\n            // Call read(existing, readOptions) with cacheSlot holding this.cache.\n            return _reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__.cacheSlot.withValue(this.cache, read, [\n                existing,\n                readOptions\n            ]);\n        }\n        return existing;\n    };\n    Policies.prototype.getReadFunction = function(typename, fieldName) {\n        var policy = this.getFieldPolicy(typename, fieldName, false);\n        return policy && policy.read;\n    };\n    Policies.prototype.getMergeFunction = function(parentTypename, fieldName, childTypename) {\n        var policy = this.getFieldPolicy(parentTypename, fieldName, false);\n        var merge = policy && policy.merge;\n        if (!merge && childTypename) {\n            policy = this.getTypePolicy(childTypename);\n            merge = policy && policy.merge;\n        }\n        return merge;\n    };\n    Policies.prototype.runMergeFunction = function(existing, incoming, _a, context, storage) {\n        var field = _a.field, typename = _a.typename, merge = _a.merge;\n        if (merge === mergeTrueFn) {\n            // Instead of going to the trouble of creating a full\n            // FieldFunctionOptions object and calling mergeTrueFn, we can\n            // simply call mergeObjects, as mergeTrueFn would.\n            return makeMergeObjectsFunction(context.store)(existing, incoming);\n        }\n        if (merge === mergeFalseFn) {\n            // Likewise for mergeFalseFn, whose implementation is even simpler.\n            return incoming;\n        }\n        // If cache.writeQuery or cache.writeFragment was called with\n        // options.overwrite set to true, we still call merge functions, but\n        // the existing data is always undefined, so the merge function will\n        // not attempt to combine the incoming data with the existing data.\n        if (context.overwrite) {\n            existing = void 0;\n        }\n        return merge(existing, incoming, makeFieldFunctionOptions(this, // Unlike options.readField for read functions, we do not fall\n        // back to the current object if no foreignObjOrRef is provided,\n        // because it's not clear what the current object should be for\n        // merge functions: the (possibly undefined) existing object, or\n        // the incoming object? If you think your merge function needs\n        // to read sibling fields in order to produce a new value for\n        // the current field, you might want to rethink your strategy,\n        // because that's a recipe for making merge behavior sensitive\n        // to the order in which fields are written into the cache.\n        // However, readField(name, ref) is useful for merge functions\n        // that need to deduplicate child objects and references.\n        void 0, {\n            typename: typename,\n            fieldName: field.name.value,\n            field: field,\n            variables: context.variables\n        }, context, storage || Object.create(null)));\n    };\n    return Policies;\n}();\n\nfunction makeFieldFunctionOptions(policies, objectOrReference, fieldSpec, context, storage) {\n    var storeFieldName = policies.getStoreFieldName(fieldSpec);\n    var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.fieldNameFromStoreName)(storeFieldName);\n    var variables = fieldSpec.variables || context.variables;\n    var _a = context.store, toReference = _a.toReference, canRead = _a.canRead;\n    return {\n        args: argsFromFieldSpecifier(fieldSpec),\n        field: fieldSpec.field || null,\n        fieldName: fieldName,\n        storeFieldName: storeFieldName,\n        variables: variables,\n        isReference: _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isReference,\n        toReference: toReference,\n        storage: storage,\n        cache: policies.cache,\n        canRead: canRead,\n        readField: function() {\n            return policies.readField(normalizeReadFieldOptions(arguments, objectOrReference, variables), context);\n        },\n        mergeObjects: makeMergeObjectsFunction(context.store)\n    };\n}\nfunction normalizeReadFieldOptions(readFieldArgs, objectOrReference, variables) {\n    var fieldNameOrOptions = readFieldArgs[0], from = readFieldArgs[1], argc = readFieldArgs.length;\n    var options;\n    if (typeof fieldNameOrOptions === \"string\") {\n        options = {\n            fieldName: fieldNameOrOptions,\n            // Default to objectOrReference only when no second argument was\n            // passed for the from parameter, not when undefined is explicitly\n            // passed as the second argument.\n            from: argc > 1 ? from : objectOrReference\n        };\n    } else {\n        options = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, fieldNameOrOptions);\n        // Default to objectOrReference only when fieldNameOrOptions.from is\n        // actually omitted, rather than just undefined.\n        if (!_helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(options, \"from\")) {\n            options.from = objectOrReference;\n        }\n    }\n    if (globalThis.__DEV__ !== false && options.from === void 0) {\n        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(7, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.stringifyForDisplay)(Array.from(readFieldArgs)));\n    }\n    if (void 0 === options.variables) {\n        options.variables = variables;\n    }\n    return options;\n}\nfunction makeMergeObjectsFunction(store) {\n    return function mergeObjects(existing, incoming) {\n        if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(existing) || (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(incoming)) {\n            throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(8);\n        }\n        // These dynamic checks are necessary because the parameters of a\n        // custom merge function can easily have the any type, so the type\n        // system cannot always enforce the StoreObject | Reference parameter\n        // types of options.mergeObjects.\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.isNonNullObject)(existing) && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.isNonNullObject)(incoming)) {\n            var eType = store.getFieldValue(existing, \"__typename\");\n            var iType = store.getFieldValue(incoming, \"__typename\");\n            var typesDiffer = eType && iType && eType !== iType;\n            if (typesDiffer) {\n                return incoming;\n            }\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isReference)(existing) && (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.storeValueIsStoreObject)(incoming)) {\n                // Update the normalized EntityStore for the entity identified by\n                // existing.__ref, preferring/overwriting any fields contributed by the\n                // newer incoming StoreObject.\n                store.merge(existing.__ref, incoming);\n                return existing;\n            }\n            if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.storeValueIsStoreObject)(existing) && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isReference)(incoming)) {\n                // Update the normalized EntityStore for the entity identified by\n                // incoming.__ref, taking fields from the older existing object only if\n                // those fields are not already present in the newer StoreObject\n                // identified by incoming.__ref.\n                store.merge(existing, incoming.__ref);\n                return incoming;\n            }\n            if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.storeValueIsStoreObject)(existing) && (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.storeValueIsStoreObject)(incoming)) {\n                return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, existing), incoming);\n            }\n        }\n        return incoming;\n    };\n} //# sourceMappingURL=policies.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/policies.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/reactiveVars.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cacheSlot: () => (/* binding */ cacheSlot),\n/* harmony export */   forgetCache: () => (/* binding */ forgetCache),\n/* harmony export */   makeVar: () => (/* binding */ makeVar),\n/* harmony export */   recallCache: () => (/* binding */ recallCache)\n/* harmony export */ });\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n\n// Contextual Slot that acquires its value when custom read functions are\n// called in Policies#readField.\nvar cacheSlot = new optimism__WEBPACK_IMPORTED_MODULE_0__.Slot();\nvar cacheInfoMap = new WeakMap();\nfunction getCacheInfo(cache) {\n    var info = cacheInfoMap.get(cache);\n    if (!info) {\n        cacheInfoMap.set(cache, info = {\n            vars: new Set(),\n            dep: (0,optimism__WEBPACK_IMPORTED_MODULE_0__.dep)()\n        });\n    }\n    return info;\n}\nfunction forgetCache(cache) {\n    getCacheInfo(cache).vars.forEach(function(rv) {\n        return rv.forgetCache(cache);\n    });\n}\n// Calling forgetCache(cache) serves to silence broadcasts and allows the\n// cache to be garbage collected. However, the varsByCache WeakMap\n// preserves the set of reactive variables that were previously associated\n// with this cache, which makes it possible to \"recall\" the cache at a\n// later time, by reattaching it to those variables. If the cache has been\n// garbage collected in the meantime, because it is no longer reachable,\n// you won't be able to call recallCache(cache), and the cache will\n// automatically disappear from the varsByCache WeakMap.\nfunction recallCache(cache) {\n    getCacheInfo(cache).vars.forEach(function(rv) {\n        return rv.attachCache(cache);\n    });\n}\nfunction makeVar(value) {\n    var caches = new Set();\n    var listeners = new Set();\n    var rv = function(newValue) {\n        if (arguments.length > 0) {\n            if (value !== newValue) {\n                value = newValue;\n                caches.forEach(function(cache) {\n                    // Invalidate any fields with custom read functions that\n                    // consumed this variable, so query results involving those\n                    // fields will be recomputed the next time we read them.\n                    getCacheInfo(cache).dep.dirty(rv);\n                    // Broadcast changes to any caches that have previously read\n                    // from this variable.\n                    broadcast(cache);\n                });\n                // Finally, notify any listeners added via rv.onNextChange.\n                var oldListeners = Array.from(listeners);\n                listeners.clear();\n                oldListeners.forEach(function(listener) {\n                    return listener(value);\n                });\n            }\n        } else {\n            // When reading from the variable, obtain the current cache from\n            // context via cacheSlot. This isn't entirely foolproof, but it's\n            // the same system that powers varDep.\n            var cache = cacheSlot.getValue();\n            if (cache) {\n                attach(cache);\n                getCacheInfo(cache).dep(rv);\n            }\n        }\n        return value;\n    };\n    rv.onNextChange = function(listener) {\n        listeners.add(listener);\n        return function() {\n            listeners.delete(listener);\n        };\n    };\n    var attach = rv.attachCache = function(cache) {\n        caches.add(cache);\n        getCacheInfo(cache).vars.add(rv);\n        return rv;\n    };\n    rv.forgetCache = function(cache) {\n        return caches.delete(cache);\n    };\n    return rv;\n}\nfunction broadcast(cache) {\n    if (cache.broadcastWatches) {\n        cache.broadcastWatches();\n    }\n} //# sourceMappingURL=reactiveVars.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY2FjaGUvaW5tZW1vcnkvcmVhY3RpdmVWYXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXFDO0FBQ3JDLHlFQUF5RTtBQUN6RSxnQ0FBZ0M7QUFDekIsSUFBSUUsWUFBWSxJQUFJRCwwQ0FBSUEsR0FBRztBQUNsQyxJQUFJRSxlQUFlLElBQUlDO0FBQ3ZCLFNBQVNDLGFBQWFDLEtBQUs7SUFDdkIsSUFBSUMsT0FBT0osYUFBYUssR0FBRyxDQUFDRjtJQUM1QixJQUFJLENBQUNDLE1BQU07UUFDUEosYUFBYU0sR0FBRyxDQUFDSCxPQUFRQyxPQUFPO1lBQzVCRyxNQUFNLElBQUlDO1lBQ1ZYLEtBQUtBLDZDQUFHQTtRQUNaO0lBQ0o7SUFDQSxPQUFPTztBQUNYO0FBQ08sU0FBU0ssWUFBWU4sS0FBSztJQUM3QkQsYUFBYUMsT0FBT0ksSUFBSSxDQUFDRyxPQUFPLENBQUMsU0FBVUMsRUFBRTtRQUFJLE9BQU9BLEdBQUdGLFdBQVcsQ0FBQ047SUFBUTtBQUNuRjtBQUNBLHlFQUF5RTtBQUN6RSxrRUFBa0U7QUFDbEUsMEVBQTBFO0FBQzFFLHNFQUFzRTtBQUN0RSwwRUFBMEU7QUFDMUUsd0VBQXdFO0FBQ3hFLG1FQUFtRTtBQUNuRSx3REFBd0Q7QUFDakQsU0FBU1MsWUFBWVQsS0FBSztJQUM3QkQsYUFBYUMsT0FBT0ksSUFBSSxDQUFDRyxPQUFPLENBQUMsU0FBVUMsRUFBRTtRQUFJLE9BQU9BLEdBQUdFLFdBQVcsQ0FBQ1Y7SUFBUTtBQUNuRjtBQUNPLFNBQVNXLFFBQVFDLEtBQUs7SUFDekIsSUFBSUMsU0FBUyxJQUFJUjtJQUNqQixJQUFJUyxZQUFZLElBQUlUO0lBQ3BCLElBQUlHLEtBQUssU0FBVU8sUUFBUTtRQUN2QixJQUFJQyxVQUFVQyxNQUFNLEdBQUcsR0FBRztZQUN0QixJQUFJTCxVQUFVRyxVQUFVO2dCQUNwQkgsUUFBUUc7Z0JBQ1JGLE9BQU9OLE9BQU8sQ0FBQyxTQUFVUCxLQUFLO29CQUMxQix3REFBd0Q7b0JBQ3hELDJEQUEyRDtvQkFDM0Qsd0RBQXdEO29CQUN4REQsYUFBYUMsT0FBT04sR0FBRyxDQUFDd0IsS0FBSyxDQUFDVjtvQkFDOUIsNERBQTREO29CQUM1RCxzQkFBc0I7b0JBQ3RCVyxVQUFVbkI7Z0JBQ2Q7Z0JBQ0EsMkRBQTJEO2dCQUMzRCxJQUFJb0IsZUFBZUMsTUFBTUMsSUFBSSxDQUFDUjtnQkFDOUJBLFVBQVVTLEtBQUs7Z0JBQ2ZILGFBQWFiLE9BQU8sQ0FBQyxTQUFVaUIsUUFBUTtvQkFBSSxPQUFPQSxTQUFTWjtnQkFBUTtZQUN2RTtRQUNKLE9BQ0s7WUFDRCxnRUFBZ0U7WUFDaEUsaUVBQWlFO1lBQ2pFLHNDQUFzQztZQUN0QyxJQUFJWixRQUFRSixVQUFVNkIsUUFBUTtZQUM5QixJQUFJekIsT0FBTztnQkFDUDBCLE9BQU8xQjtnQkFDUEQsYUFBYUMsT0FBT04sR0FBRyxDQUFDYztZQUM1QjtRQUNKO1FBQ0EsT0FBT0k7SUFDWDtJQUNBSixHQUFHbUIsWUFBWSxHQUFHLFNBQVVILFFBQVE7UUFDaENWLFVBQVVjLEdBQUcsQ0FBQ0o7UUFDZCxPQUFPO1lBQ0hWLFVBQVVlLE1BQU0sQ0FBQ0w7UUFDckI7SUFDSjtJQUNBLElBQUlFLFNBQVVsQixHQUFHRSxXQUFXLEdBQUcsU0FBVVYsS0FBSztRQUMxQ2EsT0FBT2UsR0FBRyxDQUFDNUI7UUFDWEQsYUFBYUMsT0FBT0ksSUFBSSxDQUFDd0IsR0FBRyxDQUFDcEI7UUFDN0IsT0FBT0E7SUFDWDtJQUNBQSxHQUFHRixXQUFXLEdBQUcsU0FBVU4sS0FBSztRQUFJLE9BQU9hLE9BQU9nQixNQUFNLENBQUM3QjtJQUFRO0lBQ2pFLE9BQU9RO0FBQ1g7QUFDQSxTQUFTVyxVQUFVbkIsS0FBSztJQUNwQixJQUFJQSxNQUFNOEIsZ0JBQWdCLEVBQUU7UUFDeEI5QixNQUFNOEIsZ0JBQWdCO0lBQzFCO0FBQ0osRUFDQSx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY2FjaGUvaW5tZW1vcnkvcmVhY3RpdmVWYXJzLmpzP2Q3M2IiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVwLCBTbG90IH0gZnJvbSBcIm9wdGltaXNtXCI7XG4vLyBDb250ZXh0dWFsIFNsb3QgdGhhdCBhY3F1aXJlcyBpdHMgdmFsdWUgd2hlbiBjdXN0b20gcmVhZCBmdW5jdGlvbnMgYXJlXG4vLyBjYWxsZWQgaW4gUG9saWNpZXMjcmVhZEZpZWxkLlxuZXhwb3J0IHZhciBjYWNoZVNsb3QgPSBuZXcgU2xvdCgpO1xudmFyIGNhY2hlSW5mb01hcCA9IG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiBnZXRDYWNoZUluZm8oY2FjaGUpIHtcbiAgICB2YXIgaW5mbyA9IGNhY2hlSW5mb01hcC5nZXQoY2FjaGUpO1xuICAgIGlmICghaW5mbykge1xuICAgICAgICBjYWNoZUluZm9NYXAuc2V0KGNhY2hlLCAoaW5mbyA9IHtcbiAgICAgICAgICAgIHZhcnM6IG5ldyBTZXQoKSxcbiAgICAgICAgICAgIGRlcDogZGVwKCksXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGluZm87XG59XG5leHBvcnQgZnVuY3Rpb24gZm9yZ2V0Q2FjaGUoY2FjaGUpIHtcbiAgICBnZXRDYWNoZUluZm8oY2FjaGUpLnZhcnMuZm9yRWFjaChmdW5jdGlvbiAocnYpIHsgcmV0dXJuIHJ2LmZvcmdldENhY2hlKGNhY2hlKTsgfSk7XG59XG4vLyBDYWxsaW5nIGZvcmdldENhY2hlKGNhY2hlKSBzZXJ2ZXMgdG8gc2lsZW5jZSBicm9hZGNhc3RzIGFuZCBhbGxvd3MgdGhlXG4vLyBjYWNoZSB0byBiZSBnYXJiYWdlIGNvbGxlY3RlZC4gSG93ZXZlciwgdGhlIHZhcnNCeUNhY2hlIFdlYWtNYXBcbi8vIHByZXNlcnZlcyB0aGUgc2V0IG9mIHJlYWN0aXZlIHZhcmlhYmxlcyB0aGF0IHdlcmUgcHJldmlvdXNseSBhc3NvY2lhdGVkXG4vLyB3aXRoIHRoaXMgY2FjaGUsIHdoaWNoIG1ha2VzIGl0IHBvc3NpYmxlIHRvIFwicmVjYWxsXCIgdGhlIGNhY2hlIGF0IGFcbi8vIGxhdGVyIHRpbWUsIGJ5IHJlYXR0YWNoaW5nIGl0IHRvIHRob3NlIHZhcmlhYmxlcy4gSWYgdGhlIGNhY2hlIGhhcyBiZWVuXG4vLyBnYXJiYWdlIGNvbGxlY3RlZCBpbiB0aGUgbWVhbnRpbWUsIGJlY2F1c2UgaXQgaXMgbm8gbG9uZ2VyIHJlYWNoYWJsZSxcbi8vIHlvdSB3b24ndCBiZSBhYmxlIHRvIGNhbGwgcmVjYWxsQ2FjaGUoY2FjaGUpLCBhbmQgdGhlIGNhY2hlIHdpbGxcbi8vIGF1dG9tYXRpY2FsbHkgZGlzYXBwZWFyIGZyb20gdGhlIHZhcnNCeUNhY2hlIFdlYWtNYXAuXG5leHBvcnQgZnVuY3Rpb24gcmVjYWxsQ2FjaGUoY2FjaGUpIHtcbiAgICBnZXRDYWNoZUluZm8oY2FjaGUpLnZhcnMuZm9yRWFjaChmdW5jdGlvbiAocnYpIHsgcmV0dXJuIHJ2LmF0dGFjaENhY2hlKGNhY2hlKTsgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFrZVZhcih2YWx1ZSkge1xuICAgIHZhciBjYWNoZXMgPSBuZXcgU2V0KCk7XG4gICAgdmFyIGxpc3RlbmVycyA9IG5ldyBTZXQoKTtcbiAgICB2YXIgcnYgPSBmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICBjYWNoZXMuZm9yRWFjaChmdW5jdGlvbiAoY2FjaGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSW52YWxpZGF0ZSBhbnkgZmllbGRzIHdpdGggY3VzdG9tIHJlYWQgZnVuY3Rpb25zIHRoYXRcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc3VtZWQgdGhpcyB2YXJpYWJsZSwgc28gcXVlcnkgcmVzdWx0cyBpbnZvbHZpbmcgdGhvc2VcbiAgICAgICAgICAgICAgICAgICAgLy8gZmllbGRzIHdpbGwgYmUgcmVjb21wdXRlZCB0aGUgbmV4dCB0aW1lIHdlIHJlYWQgdGhlbS5cbiAgICAgICAgICAgICAgICAgICAgZ2V0Q2FjaGVJbmZvKGNhY2hlKS5kZXAuZGlydHkocnYpO1xuICAgICAgICAgICAgICAgICAgICAvLyBCcm9hZGNhc3QgY2hhbmdlcyB0byBhbnkgY2FjaGVzIHRoYXQgaGF2ZSBwcmV2aW91c2x5IHJlYWRcbiAgICAgICAgICAgICAgICAgICAgLy8gZnJvbSB0aGlzIHZhcmlhYmxlLlxuICAgICAgICAgICAgICAgICAgICBicm9hZGNhc3QoY2FjaGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIEZpbmFsbHksIG5vdGlmeSBhbnkgbGlzdGVuZXJzIGFkZGVkIHZpYSBydi5vbk5leHRDaGFuZ2UuXG4gICAgICAgICAgICAgICAgdmFyIG9sZExpc3RlbmVycyA9IEFycmF5LmZyb20obGlzdGVuZXJzKTtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICBvbGRMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHsgcmV0dXJuIGxpc3RlbmVyKHZhbHVlKTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBXaGVuIHJlYWRpbmcgZnJvbSB0aGUgdmFyaWFibGUsIG9idGFpbiB0aGUgY3VycmVudCBjYWNoZSBmcm9tXG4gICAgICAgICAgICAvLyBjb250ZXh0IHZpYSBjYWNoZVNsb3QuIFRoaXMgaXNuJ3QgZW50aXJlbHkgZm9vbHByb29mLCBidXQgaXQnc1xuICAgICAgICAgICAgLy8gdGhlIHNhbWUgc3lzdGVtIHRoYXQgcG93ZXJzIHZhckRlcC5cbiAgICAgICAgICAgIHZhciBjYWNoZSA9IGNhY2hlU2xvdC5nZXRWYWx1ZSgpO1xuICAgICAgICAgICAgaWYgKGNhY2hlKSB7XG4gICAgICAgICAgICAgICAgYXR0YWNoKGNhY2hlKTtcbiAgICAgICAgICAgICAgICBnZXRDYWNoZUluZm8oY2FjaGUpLmRlcChydik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgcnYub25OZXh0Q2hhbmdlID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVycy5hZGQobGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgYXR0YWNoID0gKHJ2LmF0dGFjaENhY2hlID0gZnVuY3Rpb24gKGNhY2hlKSB7XG4gICAgICAgIGNhY2hlcy5hZGQoY2FjaGUpO1xuICAgICAgICBnZXRDYWNoZUluZm8oY2FjaGUpLnZhcnMuYWRkKHJ2KTtcbiAgICAgICAgcmV0dXJuIHJ2O1xuICAgIH0pO1xuICAgIHJ2LmZvcmdldENhY2hlID0gZnVuY3Rpb24gKGNhY2hlKSB7IHJldHVybiBjYWNoZXMuZGVsZXRlKGNhY2hlKTsgfTtcbiAgICByZXR1cm4gcnY7XG59XG5mdW5jdGlvbiBicm9hZGNhc3QoY2FjaGUpIHtcbiAgICBpZiAoY2FjaGUuYnJvYWRjYXN0V2F0Y2hlcykge1xuICAgICAgICBjYWNoZS5icm9hZGNhc3RXYXRjaGVzKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3RpdmVWYXJzLmpzLm1hcCJdLCJuYW1lcyI6WyJkZXAiLCJTbG90IiwiY2FjaGVTbG90IiwiY2FjaGVJbmZvTWFwIiwiV2Vha01hcCIsImdldENhY2hlSW5mbyIsImNhY2hlIiwiaW5mbyIsImdldCIsInNldCIsInZhcnMiLCJTZXQiLCJmb3JnZXRDYWNoZSIsImZvckVhY2giLCJydiIsInJlY2FsbENhY2hlIiwiYXR0YWNoQ2FjaGUiLCJtYWtlVmFyIiwidmFsdWUiLCJjYWNoZXMiLCJsaXN0ZW5lcnMiLCJuZXdWYWx1ZSIsImFyZ3VtZW50cyIsImxlbmd0aCIsImRpcnR5IiwiYnJvYWRjYXN0Iiwib2xkTGlzdGVuZXJzIiwiQXJyYXkiLCJmcm9tIiwiY2xlYXIiLCJsaXN0ZW5lciIsImdldFZhbHVlIiwiYXR0YWNoIiwib25OZXh0Q2hhbmdlIiwiYWRkIiwiZGVsZXRlIiwiYnJvYWRjYXN0V2F0Y2hlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/readFromStore.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/readFromStore.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StoreReader: () => (/* binding */ StoreReader)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/compact.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _entityStore_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./entityStore.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/entityStore.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _core_types_common_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../core/types/common.js */ \"(ssr)/./node_modules/@apollo/client/cache/core/types/common.js\");\n/* harmony import */ var _object_canon_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./object-canon.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/object-canon.js\");\n\n\n\n\n\n\n\n\n\nfunction execSelectionSetKeyArgs(options) {\n    return [\n        options.selectionSet,\n        options.objectOrReference,\n        options.context,\n        // We split out this property so we can pass different values\n        // independently without modifying options.context itself.\n        options.context.canonizeResults\n    ];\n}\nvar StoreReader = /** @class */ function() {\n    function StoreReader(config) {\n        var _this = this;\n        this.knownResults = new (_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.canUseWeakMap ? WeakMap : Map)();\n        this.config = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.compact)(config, {\n            addTypename: config.addTypename !== false,\n            canonizeResults: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.shouldCanonizeResults)(config)\n        });\n        this.canon = config.canon || new _object_canon_js__WEBPACK_IMPORTED_MODULE_5__.ObjectCanon();\n        // memoized functions in this class will be \"garbage-collected\"\n        // by recreating the whole `StoreReader` in\n        // `InMemoryCache.resetResultsCache`\n        // (triggered from `InMemoryCache.gc` with `resetResultCache: true`)\n        this.executeSelectionSet = (0,optimism__WEBPACK_IMPORTED_MODULE_1__.wrap)(function(options) {\n            var _a;\n            var canonizeResults = options.context.canonizeResults;\n            var peekArgs = execSelectionSetKeyArgs(options);\n            // Negate this boolean option so we can find out if we've already read\n            // this result using the other boolean value.\n            peekArgs[3] = !canonizeResults;\n            var other = (_a = _this.executeSelectionSet).peek.apply(_a, peekArgs);\n            if (other) {\n                if (canonizeResults) {\n                    return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, other), {\n                        // If we previously read this result without canonizing it, we can\n                        // reuse that result simply by canonizing it now.\n                        result: _this.canon.admit(other.result)\n                    });\n                }\n                // If we previously read this result with canonization enabled, we can\n                // return that canonized result as-is.\n                return other;\n            }\n            (0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.maybeDependOnExistenceOfEntity)(options.context.store, options.enclosingRef.__ref);\n            // Finally, if we didn't find any useful previous results, run the real\n            // execSelectionSetImpl method with the given options.\n            return _this.execSelectionSetImpl(options);\n        }, {\n            max: this.config.resultCacheMaxSize || _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.cacheSizes[\"inMemoryCache.executeSelectionSet\"] || 50000 /* defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"] */ ,\n            keyArgs: execSelectionSetKeyArgs,\n            // Note that the parameters of makeCacheKey are determined by the\n            // array returned by keyArgs.\n            makeCacheKey: function(selectionSet, parent, context, canonizeResults) {\n                if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.supportsResultCaching)(context.store)) {\n                    return context.store.makeCacheKey(selectionSet, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(parent) ? parent.__ref : parent, context.varString, canonizeResults);\n                }\n            }\n        });\n        this.executeSubSelectedArray = (0,optimism__WEBPACK_IMPORTED_MODULE_1__.wrap)(function(options) {\n            (0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.maybeDependOnExistenceOfEntity)(options.context.store, options.enclosingRef.__ref);\n            return _this.execSubSelectedArrayImpl(options);\n        }, {\n            max: this.config.resultCacheMaxSize || _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.cacheSizes[\"inMemoryCache.executeSubSelectedArray\"] || 10000 /* defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"] */ ,\n            makeCacheKey: function(_a) {\n                var field = _a.field, array = _a.array, context = _a.context;\n                if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.supportsResultCaching)(context.store)) {\n                    return context.store.makeCacheKey(field, array, context.varString);\n                }\n            }\n        });\n    }\n    StoreReader.prototype.resetCanon = function() {\n        this.canon = new _object_canon_js__WEBPACK_IMPORTED_MODULE_5__.ObjectCanon();\n    };\n    /**\n     * Given a store and a query, return as much of the result as possible and\n     * identify if any data was missing from the store.\n     */ StoreReader.prototype.diffQueryAgainstStore = function(_a) {\n        var store = _a.store, query = _a.query, _b = _a.rootId, rootId = _b === void 0 ? \"ROOT_QUERY\" : _b, variables = _a.variables, _c = _a.returnPartialData, returnPartialData = _c === void 0 ? true : _c, _d = _a.canonizeResults, canonizeResults = _d === void 0 ? this.config.canonizeResults : _d;\n        var policies = this.config.cache.policies;\n        variables = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.getDefaultValues)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.getQueryDefinition)(query))), variables);\n        var rootRef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.makeReference)(rootId);\n        var execResult = this.executeSelectionSet({\n            selectionSet: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.getMainDefinition)(query).selectionSet,\n            objectOrReference: rootRef,\n            enclosingRef: rootRef,\n            context: (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({\n                store: store,\n                query: query,\n                policies: policies,\n                variables: variables,\n                varString: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.canonicalStringify)(variables),\n                canonizeResults: canonizeResults\n            }, (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.extractFragmentContext)(query, this.config.fragments))\n        });\n        var missing;\n        if (execResult.missing) {\n            // For backwards compatibility we still report an array of\n            // MissingFieldError objects, even though there will only ever be at most\n            // one of them, now that all missing field error messages are grouped\n            // together in the execResult.missing tree.\n            missing = [\n                new _core_types_common_js__WEBPACK_IMPORTED_MODULE_12__.MissingFieldError(firstMissing(execResult.missing), execResult.missing, query, variables)\n            ];\n            if (!returnPartialData) {\n                throw missing[0];\n            }\n        }\n        return {\n            result: execResult.result,\n            complete: !missing,\n            missing: missing\n        };\n    };\n    StoreReader.prototype.isFresh = function(result, parent, selectionSet, context) {\n        if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.supportsResultCaching)(context.store) && this.knownResults.get(result) === selectionSet) {\n            var latest = this.executeSelectionSet.peek(selectionSet, parent, context, // If result is canonical, then it could only have been previously\n            // cached by the canonizing version of executeSelectionSet, so we can\n            // avoid checking both possibilities here.\n            this.canon.isKnown(result));\n            if (latest && result === latest.result) {\n                return true;\n            }\n        }\n        return false;\n    };\n    // Uncached version of executeSelectionSet.\n    StoreReader.prototype.execSelectionSetImpl = function(_a) {\n        var _this = this;\n        var selectionSet = _a.selectionSet, objectOrReference = _a.objectOrReference, enclosingRef = _a.enclosingRef, context = _a.context;\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(objectOrReference) && !context.policies.rootTypenamesById[objectOrReference.__ref] && !context.store.has(objectOrReference.__ref)) {\n            return {\n                result: this.canon.empty,\n                missing: \"Dangling reference to missing \".concat(objectOrReference.__ref, \" object\")\n            };\n        }\n        var variables = context.variables, policies = context.policies, store = context.store;\n        var typename = store.getFieldValue(objectOrReference, \"__typename\");\n        var objectsToMerge = [];\n        var missing;\n        var missingMerger = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.DeepMerger();\n        if (this.config.addTypename && typeof typename === \"string\" && !policies.rootIdsByTypename[typename]) {\n            // Ensure we always include a default value for the __typename\n            // field, if we have one, and this.config.addTypename is true. Note\n            // that this field can be overridden by other merged objects.\n            objectsToMerge.push({\n                __typename: typename\n            });\n        }\n        function handleMissing(result, resultName) {\n            var _a;\n            if (result.missing) {\n                missing = missingMerger.merge(missing, (_a = {}, _a[resultName] = result.missing, _a));\n            }\n            return result.result;\n        }\n        var workSet = new Set(selectionSet.selections);\n        workSet.forEach(function(selection) {\n            var _a, _b;\n            // Omit fields with directives @skip(if: <truthy value>) or\n            // @include(if: <falsy value>).\n            if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.shouldInclude)(selection, variables)) return;\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isField)(selection)) {\n                var fieldValue = policies.readField({\n                    fieldName: selection.name.value,\n                    field: selection,\n                    variables: context.variables,\n                    from: objectOrReference\n                }, context);\n                var resultName = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.resultKeyNameFromField)(selection);\n                if (fieldValue === void 0) {\n                    if (!_utilities_index_js__WEBPACK_IMPORTED_MODULE_15__.addTypenameToDocument.added(selection)) {\n                        missing = missingMerger.merge(missing, (_a = {}, _a[resultName] = \"Can't find field '\".concat(selection.name.value, \"' on \").concat((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(objectOrReference) ? objectOrReference.__ref + \" object\" : \"object \" + JSON.stringify(objectOrReference, null, 2)), _a));\n                    }\n                } else if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_16__.isArray)(fieldValue)) {\n                    fieldValue = handleMissing(_this.executeSubSelectedArray({\n                        field: selection,\n                        array: fieldValue,\n                        enclosingRef: enclosingRef,\n                        context: context\n                    }), resultName);\n                } else if (!selection.selectionSet) {\n                    // If the field does not have a selection set, then we handle it\n                    // as a scalar value. To keep this.canon from canonicalizing\n                    // this value, we use this.canon.pass to wrap fieldValue in a\n                    // Pass object that this.canon.admit will later unwrap as-is.\n                    if (context.canonizeResults) {\n                        fieldValue = _this.canon.pass(fieldValue);\n                    }\n                } else if (fieldValue != null) {\n                    // In this case, because we know the field has a selection set,\n                    // it must be trying to query a GraphQLObjectType, which is why\n                    // fieldValue must be != null.\n                    fieldValue = handleMissing(_this.executeSelectionSet({\n                        selectionSet: selection.selectionSet,\n                        objectOrReference: fieldValue,\n                        enclosingRef: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(fieldValue) ? fieldValue : enclosingRef,\n                        context: context\n                    }), resultName);\n                }\n                if (fieldValue !== void 0) {\n                    objectsToMerge.push((_b = {}, _b[resultName] = fieldValue, _b));\n                }\n            } else {\n                var fragment = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_17__.getFragmentFromSelection)(selection, context.lookupFragment);\n                if (!fragment && selection.kind === graphql__WEBPACK_IMPORTED_MODULE_18__.Kind.FRAGMENT_SPREAD) {\n                    throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(9, selection.name.value);\n                }\n                if (fragment && policies.fragmentMatches(fragment, typename)) {\n                    fragment.selectionSet.selections.forEach(workSet.add, workSet);\n                }\n            }\n        });\n        var result = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.mergeDeepArray)(objectsToMerge);\n        var finalResult = {\n            result: result,\n            missing: missing\n        };\n        var frozen = context.canonizeResults ? this.canon.admit(finalResult) : (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_19__.maybeDeepFreeze)(finalResult);\n        // Store this result with its selection set so that we can quickly\n        // recognize it again in the StoreReader#isFresh method.\n        if (frozen.result) {\n            this.knownResults.set(frozen.result, selectionSet);\n        }\n        return frozen;\n    };\n    // Uncached version of executeSubSelectedArray.\n    StoreReader.prototype.execSubSelectedArrayImpl = function(_a) {\n        var _this = this;\n        var field = _a.field, array = _a.array, enclosingRef = _a.enclosingRef, context = _a.context;\n        var missing;\n        var missingMerger = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.DeepMerger();\n        function handleMissing(childResult, i) {\n            var _a;\n            if (childResult.missing) {\n                missing = missingMerger.merge(missing, (_a = {}, _a[i] = childResult.missing, _a));\n            }\n            return childResult.result;\n        }\n        if (field.selectionSet) {\n            array = array.filter(context.store.canRead);\n        }\n        array = array.map(function(item, i) {\n            // null value in array\n            if (item === null) {\n                return null;\n            }\n            // This is a nested array, recurse\n            if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_16__.isArray)(item)) {\n                return handleMissing(_this.executeSubSelectedArray({\n                    field: field,\n                    array: item,\n                    enclosingRef: enclosingRef,\n                    context: context\n                }), i);\n            }\n            // This is an object, run the selection set on it\n            if (field.selectionSet) {\n                return handleMissing(_this.executeSelectionSet({\n                    selectionSet: field.selectionSet,\n                    objectOrReference: item,\n                    enclosingRef: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(item) ? item : enclosingRef,\n                    context: context\n                }), i);\n            }\n            if (globalThis.__DEV__ !== false) {\n                assertSelectionSetForIdValue(context.store, field, item);\n            }\n            return item;\n        });\n        return {\n            result: context.canonizeResults ? this.canon.admit(array) : array,\n            missing: missing\n        };\n    };\n    return StoreReader;\n}();\n\nfunction firstMissing(tree) {\n    try {\n        JSON.stringify(tree, function(_, value) {\n            if (typeof value === \"string\") throw value;\n            return value;\n        });\n    } catch (result) {\n        return result;\n    }\n}\nfunction assertSelectionSetForIdValue(store, field, fieldValue) {\n    if (!field.selectionSet) {\n        var workSet_1 = new Set([\n            fieldValue\n        ]);\n        workSet_1.forEach(function(value) {\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_20__.isNonNullObject)(value)) {\n                (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(value), 10, (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.getTypenameFromStoreObject)(store, value), field.name.value);\n                Object.values(value).forEach(workSet_1.add, workSet_1);\n            }\n        });\n    }\n} //# sourceMappingURL=readFromStore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/readFromStore.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/cache/inmemory/writeToStore.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/writeToStore.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StoreWriter: () => (/* binding */ StoreWriter)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/cloneDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n/* harmony import */ var _policies_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./policies.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/policies.js\");\n\n\n\n\n\n\n\n\n// Since there are only four possible combinations of context.clientOnly and\n// context.deferred values, we should need at most four \"flavors\" of any given\n// WriteContext. To avoid creating multiple copies of the same context, we cache\n// the contexts in the context.flavors Map (shared by all flavors) according to\n// their clientOnly and deferred values (always in that order).\nfunction getContextFlavor(context, clientOnly, deferred) {\n    var key = \"\".concat(clientOnly).concat(deferred);\n    var flavored = context.flavors.get(key);\n    if (!flavored) {\n        context.flavors.set(key, flavored = context.clientOnly === clientOnly && context.deferred === deferred ? context : (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, context), {\n            clientOnly: clientOnly,\n            deferred: deferred\n        }));\n    }\n    return flavored;\n}\nvar StoreWriter = /** @class */ function() {\n    function StoreWriter(cache, reader, fragments) {\n        this.cache = cache;\n        this.reader = reader;\n        this.fragments = fragments;\n    }\n    StoreWriter.prototype.writeToStore = function(store, _a) {\n        var _this = this;\n        var query = _a.query, result = _a.result, dataId = _a.dataId, variables = _a.variables, overwrite = _a.overwrite;\n        var operationDefinition = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.getOperationDefinition)(query);\n        var merger = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.makeProcessedFieldsMerger)();\n        variables = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.getDefaultValues)(operationDefinition)), variables);\n        var context = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n            store: store,\n            written: Object.create(null),\n            merge: function(existing, incoming) {\n                return merger.merge(existing, incoming);\n            },\n            variables: variables,\n            varString: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.canonicalStringify)(variables)\n        }, (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.extractFragmentContext)(query, this.fragments)), {\n            overwrite: !!overwrite,\n            incomingById: new Map(),\n            clientOnly: false,\n            deferred: false,\n            flavors: new Map()\n        });\n        var ref = this.processSelectionSet({\n            result: result || Object.create(null),\n            dataId: dataId,\n            selectionSet: operationDefinition.selectionSet,\n            mergeTree: {\n                map: new Map()\n            },\n            context: context\n        });\n        if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(ref)) {\n            throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(11, result);\n        }\n        // So far, the store has not been modified, so now it's time to process\n        // context.incomingById and merge those incoming fields into context.store.\n        context.incomingById.forEach(function(_a, dataId) {\n            var storeObject = _a.storeObject, mergeTree = _a.mergeTree, fieldNodeSet = _a.fieldNodeSet;\n            var entityRef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.makeReference)(dataId);\n            if (mergeTree && mergeTree.map.size) {\n                var applied = _this.applyMerges(mergeTree, entityRef, storeObject, context);\n                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(applied)) {\n                    // Assume References returned by applyMerges have already been merged\n                    // into the store. See makeMergeObjectsFunction in policies.ts for an\n                    // example of how this can happen.\n                    return;\n                }\n                // Otherwise, applyMerges returned a StoreObject, whose fields we should\n                // merge into the store (see store.merge statement below).\n                storeObject = applied;\n            }\n            if (globalThis.__DEV__ !== false && !context.overwrite) {\n                var fieldsWithSelectionSets_1 = Object.create(null);\n                fieldNodeSet.forEach(function(field) {\n                    if (field.selectionSet) {\n                        fieldsWithSelectionSets_1[field.name.value] = true;\n                    }\n                });\n                var hasSelectionSet_1 = function(storeFieldName) {\n                    return fieldsWithSelectionSets_1[(0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.fieldNameFromStoreName)(storeFieldName)] === true;\n                };\n                var hasMergeFunction_1 = function(storeFieldName) {\n                    var childTree = mergeTree && mergeTree.map.get(storeFieldName);\n                    return Boolean(childTree && childTree.info && childTree.info.merge);\n                };\n                Object.keys(storeObject).forEach(function(storeFieldName) {\n                    // If a merge function was defined for this field, trust that it\n                    // did the right thing about (not) clobbering data. If the field\n                    // has no selection set, it's a scalar field, so it doesn't need\n                    // a merge function (even if it's an object, like JSON data).\n                    if (hasSelectionSet_1(storeFieldName) && !hasMergeFunction_1(storeFieldName)) {\n                        warnAboutDataLoss(entityRef, storeObject, storeFieldName, context.store);\n                    }\n                });\n            }\n            store.merge(dataId, storeObject);\n        });\n        // Any IDs written explicitly to the cache will be retained as\n        // reachable root IDs for garbage collection purposes. Although this\n        // logic includes root IDs like ROOT_QUERY and ROOT_MUTATION, their\n        // retainment counts are effectively ignored because cache.gc() always\n        // includes them in its root ID set.\n        store.retain(ref.__ref);\n        return ref;\n    };\n    StoreWriter.prototype.processSelectionSet = function(_a) {\n        var _this = this;\n        var dataId = _a.dataId, result = _a.result, selectionSet = _a.selectionSet, context = _a.context, // This object allows processSelectionSet to report useful information\n        // to its callers without explicitly returning that information.\n        mergeTree = _a.mergeTree;\n        var policies = this.cache.policies;\n        // This variable will be repeatedly updated using context.merge to\n        // accumulate all fields that need to be written into the store.\n        var incoming = Object.create(null);\n        // If typename was not passed in, infer it. Note that typename is\n        // always passed in for tricky-to-infer cases such as \"Query\" for\n        // ROOT_QUERY.\n        var typename = dataId && policies.rootTypenamesById[dataId] || (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.getTypenameFromResult)(result, selectionSet, context.fragmentMap) || dataId && context.store.get(dataId, \"__typename\");\n        if (\"string\" === typeof typename) {\n            incoming.__typename = typename;\n        }\n        // This readField function will be passed as context.readField in the\n        // KeyFieldsContext object created within policies.identify (called below).\n        // In addition to reading from the existing context.store (thanks to the\n        // policies.readField(options, context) line at the very bottom), this\n        // version of readField can read from Reference objects that are currently\n        // pending in context.incomingById, which is important whenever keyFields\n        // need to be extracted from a child object that processSelectionSet has\n        // turned into a Reference.\n        var readField = function() {\n            var options = (0,_policies_js__WEBPACK_IMPORTED_MODULE_8__.normalizeReadFieldOptions)(arguments, incoming, context.variables);\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(options.from)) {\n                var info = context.incomingById.get(options.from.__ref);\n                if (info) {\n                    var result_1 = policies.readField((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n                        from: info.storeObject\n                    }), context);\n                    if (result_1 !== void 0) {\n                        return result_1;\n                    }\n                }\n            }\n            return policies.readField(options, context);\n        };\n        var fieldNodeSet = new Set();\n        this.flattenFields(selectionSet, result, // This WriteContext will be the default context value for fields returned\n        // by the flattenFields method, but some fields may be assigned a modified\n        // context, depending on the presence of @client and other directives.\n        context, typename).forEach(function(context, field) {\n            var _a;\n            var resultFieldKey = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.resultKeyNameFromField)(field);\n            var value = result[resultFieldKey];\n            fieldNodeSet.add(field);\n            if (value !== void 0) {\n                var storeFieldName = policies.getStoreFieldName({\n                    typename: typename,\n                    fieldName: field.name.value,\n                    field: field,\n                    variables: context.variables\n                });\n                var childTree = getChildMergeTree(mergeTree, storeFieldName);\n                var incomingValue = _this.processFieldValue(value, field, // Reset context.clientOnly and context.deferred to their default\n                // values before processing nested selection sets.\n                field.selectionSet ? getContextFlavor(context, false, false) : context, childTree);\n                // To determine if this field holds a child object with a merge function\n                // defined in its type policy (see PR #7070), we need to figure out the\n                // child object's __typename.\n                var childTypename = void 0;\n                // The field's value can be an object that has a __typename only if the\n                // field has a selection set. Otherwise incomingValue is scalar.\n                if (field.selectionSet && ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(incomingValue) || (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.storeValueIsStoreObject)(incomingValue))) {\n                    childTypename = readField(\"__typename\", incomingValue);\n                }\n                var merge = policies.getMergeFunction(typename, field.name.value, childTypename);\n                if (merge) {\n                    childTree.info = {\n                        // TODO Check compatibility against any existing childTree.field?\n                        field: field,\n                        typename: typename,\n                        merge: merge\n                    };\n                } else {\n                    maybeRecycleChildMergeTree(mergeTree, storeFieldName);\n                }\n                incoming = context.merge(incoming, (_a = {}, _a[storeFieldName] = incomingValue, _a));\n            } else if (globalThis.__DEV__ !== false && !context.clientOnly && !context.deferred && !_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.addTypenameToDocument.added(field) && // If the field has a read function, it may be a synthetic field or\n            // provide a default value, so its absence from the written data should\n            // not be cause for alarm.\n            !policies.getReadFunction(typename, field.name.value)) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(12, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.resultKeyNameFromField)(field), result);\n            }\n        });\n        // Identify the result object, even if dataId was already provided,\n        // since we always need keyObject below.\n        try {\n            var _b = policies.identify(result, {\n                typename: typename,\n                selectionSet: selectionSet,\n                fragmentMap: context.fragmentMap,\n                storeObject: incoming,\n                readField: readField\n            }), id = _b[0], keyObject = _b[1];\n            // If dataId was not provided, fall back to the id just generated by\n            // policies.identify.\n            dataId = dataId || id;\n            // Write any key fields that were used during identification, even if\n            // they were not mentioned in the original query.\n            if (keyObject) {\n                // TODO Reverse the order of the arguments?\n                incoming = context.merge(incoming, keyObject);\n            }\n        } catch (e) {\n            // If dataId was provided, tolerate failure of policies.identify.\n            if (!dataId) throw e;\n        }\n        if (\"string\" === typeof dataId) {\n            var dataRef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.makeReference)(dataId);\n            // Avoid processing the same entity object using the same selection\n            // set more than once. We use an array instead of a Set since most\n            // entity IDs will be written using only one selection set, so the\n            // size of this array is likely to be very small, meaning indexOf is\n            // likely to be faster than Set.prototype.has.\n            var sets = context.written[dataId] || (context.written[dataId] = []);\n            if (sets.indexOf(selectionSet) >= 0) return dataRef;\n            sets.push(selectionSet);\n            // If we're about to write a result object into the store, but we\n            // happen to know that the exact same (===) result object would be\n            // returned if we were to reread the result with the same inputs,\n            // then we can skip the rest of the processSelectionSet work for\n            // this object, and immediately return a Reference to it.\n            if (this.reader && this.reader.isFresh(result, dataRef, selectionSet, context)) {\n                return dataRef;\n            }\n            var previous_1 = context.incomingById.get(dataId);\n            if (previous_1) {\n                previous_1.storeObject = context.merge(previous_1.storeObject, incoming);\n                previous_1.mergeTree = mergeMergeTrees(previous_1.mergeTree, mergeTree);\n                fieldNodeSet.forEach(function(field) {\n                    return previous_1.fieldNodeSet.add(field);\n                });\n            } else {\n                context.incomingById.set(dataId, {\n                    storeObject: incoming,\n                    // Save a reference to mergeTree only if it is not empty, because\n                    // empty MergeTrees may be recycled by maybeRecycleChildMergeTree and\n                    // reused for entirely different parts of the result tree.\n                    mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,\n                    fieldNodeSet: fieldNodeSet\n                });\n            }\n            return dataRef;\n        }\n        return incoming;\n    };\n    StoreWriter.prototype.processFieldValue = function(value, field, context, mergeTree) {\n        var _this = this;\n        if (!field.selectionSet || value === null) {\n            // In development, we need to clone scalar values so that they can be\n            // safely frozen with maybeDeepFreeze in readFromStore.ts. In production,\n            // it's cheaper to store the scalar values directly in the cache.\n            return globalThis.__DEV__ !== false ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.cloneDeep)(value) : value;\n        }\n        if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(value)) {\n            return value.map(function(item, i) {\n                var value = _this.processFieldValue(item, field, context, getChildMergeTree(mergeTree, i));\n                maybeRecycleChildMergeTree(mergeTree, i);\n                return value;\n            });\n        }\n        return this.processSelectionSet({\n            result: value,\n            selectionSet: field.selectionSet,\n            context: context,\n            mergeTree: mergeTree\n        });\n    };\n    // Implements https://spec.graphql.org/draft/#sec-Field-Collection, but with\n    // some additions for tracking @client and @defer directives.\n    StoreWriter.prototype.flattenFields = function(selectionSet, result, context, typename) {\n        if (typename === void 0) {\n            typename = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.getTypenameFromResult)(result, selectionSet, context.fragmentMap);\n        }\n        var fieldMap = new Map();\n        var policies = this.cache.policies;\n        var limitingTrie = new _wry_trie__WEBPACK_IMPORTED_MODULE_2__.Trie(false); // No need for WeakMap, since limitingTrie does not escape.\n        (function flatten(selectionSet, inheritedContext) {\n            var visitedNode = limitingTrie.lookup(selectionSet, // Because we take inheritedClientOnly and inheritedDeferred into\n            // consideration here (in addition to selectionSet), it's possible for\n            // the same selection set to be flattened more than once, if it appears\n            // in the query with different @client and/or @directive configurations.\n            inheritedContext.clientOnly, inheritedContext.deferred);\n            if (visitedNode.visited) return;\n            visitedNode.visited = true;\n            selectionSet.selections.forEach(function(selection) {\n                if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.shouldInclude)(selection, context.variables)) return;\n                var clientOnly = inheritedContext.clientOnly, deferred = inheritedContext.deferred;\n                if (// Since the presence of @client or @defer on this field can only\n                // cause clientOnly or deferred to become true, we can skip the\n                // forEach loop if both clientOnly and deferred are already true.\n                !(clientOnly && deferred) && (0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isNonEmptyArray)(selection.directives)) {\n                    selection.directives.forEach(function(dir) {\n                        var name = dir.name.value;\n                        if (name === \"client\") clientOnly = true;\n                        if (name === \"defer\") {\n                            var args = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.argumentsObjectFromField)(dir, context.variables);\n                            // The @defer directive takes an optional args.if boolean\n                            // argument, similar to @include(if: boolean). Note that\n                            // @defer(if: false) does not make context.deferred false, but\n                            // instead behaves as if there was no @defer directive.\n                            if (!args || args.if !== false) {\n                                deferred = true;\n                            }\n                        // TODO In the future, we may want to record args.label using\n                        // context.deferred, if a label is specified.\n                        }\n                    });\n                }\n                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isField)(selection)) {\n                    var existing = fieldMap.get(selection);\n                    if (existing) {\n                        // If this field has been visited along another recursive path\n                        // before, the final context should have clientOnly or deferred set\n                        // to true only if *all* paths have the directive (hence the &&).\n                        clientOnly = clientOnly && existing.clientOnly;\n                        deferred = deferred && existing.deferred;\n                    }\n                    fieldMap.set(selection, getContextFlavor(context, clientOnly, deferred));\n                } else {\n                    var fragment = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.getFragmentFromSelection)(selection, context.lookupFragment);\n                    if (!fragment && selection.kind === graphql__WEBPACK_IMPORTED_MODULE_14__.Kind.FRAGMENT_SPREAD) {\n                        throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(13, selection.name.value);\n                    }\n                    if (fragment && policies.fragmentMatches(fragment, typename, result, context.variables)) {\n                        flatten(fragment.selectionSet, getContextFlavor(context, clientOnly, deferred));\n                    }\n                }\n            });\n        })(selectionSet, context);\n        return fieldMap;\n    };\n    StoreWriter.prototype.applyMerges = function(mergeTree, existing, incoming, context, getStorageArgs) {\n        var _a;\n        var _this = this;\n        if (mergeTree.map.size && !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(incoming)) {\n            var e_1 = // Items in the same position in different arrays are not\n            // necessarily related to each other, so when incoming is an array\n            // we process its elements as if there was no existing data.\n            !(0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(incoming) && // Likewise, existing must be either a Reference or a StoreObject\n            // in order for its fields to be safe to merge with the fields of\n            // the incoming object.\n            ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(existing) || (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.storeValueIsStoreObject)(existing)) ? existing : void 0;\n            // This narrowing is implied by mergeTree.map.size > 0 and\n            // !isReference(incoming), though TypeScript understandably cannot\n            // hope to infer this type.\n            var i_1 = incoming;\n            // The options.storage objects provided to read and merge functions\n            // are derived from the identity of the parent object plus a\n            // sequence of storeFieldName strings/numbers identifying the nested\n            // field name path of each field value to be merged.\n            if (e_1 && !getStorageArgs) {\n                getStorageArgs = [\n                    (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(e_1) ? e_1.__ref : e_1\n                ];\n            }\n            // It's possible that applying merge functions to this subtree will\n            // not change the incoming data, so this variable tracks the fields\n            // that did change, so we can create a new incoming object when (and\n            // only when) at least one incoming field has changed. We use a Map\n            // to preserve the type of numeric keys.\n            var changedFields_1;\n            var getValue_1 = function(from, name) {\n                return (0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(from) ? typeof name === \"number\" ? from[name] : void 0 : context.store.getFieldValue(from, String(name));\n            };\n            mergeTree.map.forEach(function(childTree, storeFieldName) {\n                var eVal = getValue_1(e_1, storeFieldName);\n                var iVal = getValue_1(i_1, storeFieldName);\n                // If we have no incoming data, leave any existing data untouched.\n                if (void 0 === iVal) return;\n                if (getStorageArgs) {\n                    getStorageArgs.push(storeFieldName);\n                }\n                var aVal = _this.applyMerges(childTree, eVal, iVal, context, getStorageArgs);\n                if (aVal !== iVal) {\n                    changedFields_1 = changedFields_1 || new Map();\n                    changedFields_1.set(storeFieldName, aVal);\n                }\n                if (getStorageArgs) {\n                    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(getStorageArgs.pop() === storeFieldName);\n                }\n            });\n            if (changedFields_1) {\n                // Shallow clone i so we can add changed fields to it.\n                incoming = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(i_1) ? i_1.slice(0) : (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, i_1);\n                changedFields_1.forEach(function(value, name) {\n                    incoming[name] = value;\n                });\n            }\n        }\n        if (mergeTree.info) {\n            return this.cache.policies.runMergeFunction(existing, incoming, mergeTree.info, context, getStorageArgs && (_a = context.store).getStorage.apply(_a, getStorageArgs));\n        }\n        return incoming;\n    };\n    return StoreWriter;\n}();\n\nvar emptyMergeTreePool = [];\nfunction getChildMergeTree(_a, name) {\n    var map = _a.map;\n    if (!map.has(name)) {\n        map.set(name, emptyMergeTreePool.pop() || {\n            map: new Map()\n        });\n    }\n    return map.get(name);\n}\nfunction mergeMergeTrees(left, right) {\n    if (left === right || !right || mergeTreeIsEmpty(right)) return left;\n    if (!left || mergeTreeIsEmpty(left)) return right;\n    var info = left.info && right.info ? (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, left.info), right.info) : left.info || right.info;\n    var needToMergeMaps = left.map.size && right.map.size;\n    var map = needToMergeMaps ? new Map() : left.map.size ? left.map : right.map;\n    var merged = {\n        info: info,\n        map: map\n    };\n    if (needToMergeMaps) {\n        var remainingRightKeys_1 = new Set(right.map.keys());\n        left.map.forEach(function(leftTree, key) {\n            merged.map.set(key, mergeMergeTrees(leftTree, right.map.get(key)));\n            remainingRightKeys_1.delete(key);\n        });\n        remainingRightKeys_1.forEach(function(key) {\n            merged.map.set(key, mergeMergeTrees(right.map.get(key), left.map.get(key)));\n        });\n    }\n    return merged;\n}\nfunction mergeTreeIsEmpty(tree) {\n    return !tree || !(tree.info || tree.map.size);\n}\nfunction maybeRecycleChildMergeTree(_a, name) {\n    var map = _a.map;\n    var childTree = map.get(name);\n    if (childTree && mergeTreeIsEmpty(childTree)) {\n        emptyMergeTreePool.push(childTree);\n        map.delete(name);\n    }\n}\nvar warnings = new Set();\n// Note that this function is unused in production, and thus should be\n// pruned by any well-configured minifier.\nfunction warnAboutDataLoss(existingRef, incomingObj, storeFieldName, store) {\n    var getChild = function(objOrRef) {\n        var child = store.getFieldValue(objOrRef, storeFieldName);\n        return typeof child === \"object\" && child;\n    };\n    var existing = getChild(existingRef);\n    if (!existing) return;\n    var incoming = getChild(incomingObj);\n    if (!incoming) return;\n    // It's always safe to replace a reference, since it refers to data\n    // safely stored elsewhere.\n    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(existing)) return;\n    // If the values are structurally equivalent, we do not need to worry\n    // about incoming replacing existing.\n    if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(existing, incoming)) return;\n    // If we're replacing every key of the existing object, then the\n    // existing data would be overwritten even if the objects were\n    // normalized, so warning would not be helpful here.\n    if (Object.keys(existing).every(function(key) {\n        return store.getFieldValue(incoming, key) !== void 0;\n    })) {\n        return;\n    }\n    var parentType = store.getFieldValue(existingRef, \"__typename\") || store.getFieldValue(incomingObj, \"__typename\");\n    var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.fieldNameFromStoreName)(storeFieldName);\n    var typeDotName = \"\".concat(parentType, \".\").concat(fieldName);\n    // Avoid warning more than once for the same type and field name.\n    if (warnings.has(typeDotName)) return;\n    warnings.add(typeDotName);\n    var childTypenames = [];\n    // Arrays do not have __typename fields, and always need a custom merge\n    // function, even if their elements are normalized entities.\n    if (!(0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(existing) && !(0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(incoming)) {\n        [\n            existing,\n            incoming\n        ].forEach(function(child) {\n            var typename = store.getFieldValue(child, \"__typename\");\n            if (typeof typename === \"string\" && !childTypenames.includes(typename)) {\n                childTypenames.push(typename);\n            }\n        });\n    }\n    globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(14, fieldName, parentType, childTypenames.length ? \"either ensure all objects of type \" + childTypenames.join(\" and \") + \" have an ID or a custom merge function, or \" : \"\", typeDotName, existing, incoming);\n} //# sourceMappingURL=writeToStore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/cache/inmemory/writeToStore.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/ApolloClient.js":
/*!**********************************************************!*\
  !*** ./node_modules/@apollo/client/core/ApolloClient.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloClient: () => (/* binding */ ApolloClient),\n/* harmony export */   mergeOptions: () => (/* reexport safe */ _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeOptions)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _link_core_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../link/core/index.js */ \"(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js\");\n/* harmony import */ var _link_core_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../link/core/index.js */ \"(ssr)/./node_modules/@apollo/client/link/core/execute.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../version.js */ \"(ssr)/./node_modules/@apollo/client/version.js\");\n/* harmony import */ var _link_http_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../link/http/index.js */ \"(ssr)/./node_modules/@apollo/client/link/http/HttpLink.js\");\n/* harmony import */ var _QueryManager_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./QueryManager.js */ \"(ssr)/./node_modules/@apollo/client/core/QueryManager.js\");\n/* harmony import */ var _LocalState_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./LocalState.js */ \"(ssr)/./node_modules/@apollo/client/core/LocalState.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeOptions.js\");\n/* harmony import */ var _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utilities/caching/getMemoryInternals.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n\n\n\n\n\n\n\nvar hasSuggestedDevtools = false;\n// Though mergeOptions now resides in @apollo/client/utilities, it was\n// previously declared and exported from this module, and then reexported from\n// @apollo/client/core. Since we need to preserve that API anyway, the easiest\n// solution is to reexport mergeOptions where it was previously declared (here).\n\n\n\n/**\n * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries\n * and mutations) to a GraphQL spec-compliant server over an {@link ApolloLink} instance,\n * receive results from the server and cache the results in a store. It also delivers updates\n * to GraphQL queries through {@link Observable} instances.\n */ var ApolloClient = /** @class */ function() {\n    /**\n     * Constructs an instance of {@link ApolloClient}.\n     *\n     * @example\n     * ```js\n     * import { ApolloClient, InMemoryCache } from '@apollo/client';\n     *\n     * const cache = new InMemoryCache();\n     *\n     * const client = new ApolloClient({\n     *   // Provide required constructor fields\n     *   cache: cache,\n     *   uri: 'http://localhost:4000/',\n     *\n     *   // Provide some optional constructor fields\n     *   name: 'react-web-client',\n     *   version: '1.3',\n     *   queryDeduplication: false,\n     *   defaultOptions: {\n     *     watchQuery: {\n     *       fetchPolicy: 'cache-and-network',\n     *     },\n     *   },\n     * });\n     * ```\n     */ function ApolloClient(options) {\n        var _this = this;\n        this.resetStoreCallbacks = [];\n        this.clearStoreCallbacks = [];\n        if (!options.cache) {\n            throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(15);\n        }\n        var uri = options.uri, credentials = options.credentials, headers = options.headers, cache = options.cache, documentTransform = options.documentTransform, _a = options.ssrMode, ssrMode = _a === void 0 ? false : _a, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, // Expose the client instance as window.__APOLLO_CLIENT__ and call\n        // onBroadcast in queryManager.broadcastQueries to enable browser\n        // devtools, but disable them by default in production.\n        _c = options.connectToDevTools, // Expose the client instance as window.__APOLLO_CLIENT__ and call\n        // onBroadcast in queryManager.broadcastQueries to enable browser\n        // devtools, but disable them by default in production.\n        connectToDevTools = _c === void 0 ?  false && 0 : _c, _d = options.queryDeduplication, queryDeduplication = _d === void 0 ? true : _d, defaultOptions = options.defaultOptions, defaultContext = options.defaultContext, _e = options.assumeImmutableResults, assumeImmutableResults = _e === void 0 ? cache.assumeImmutableResults : _e, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwarenessName = options.name, clientAwarenessVersion = options.version;\n        var link = options.link;\n        if (!link) {\n            link = uri ? new _link_http_index_js__WEBPACK_IMPORTED_MODULE_2__.HttpLink({\n                uri: uri,\n                credentials: credentials,\n                headers: headers\n            }) : _link_core_index_js__WEBPACK_IMPORTED_MODULE_3__.ApolloLink.empty();\n        }\n        this.link = link;\n        this.cache = cache;\n        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n        this.queryDeduplication = queryDeduplication;\n        this.defaultOptions = defaultOptions || Object.create(null);\n        this.typeDefs = typeDefs;\n        if (ssrForceFetchDelay) {\n            setTimeout(function() {\n                return _this.disableNetworkFetches = false;\n            }, ssrForceFetchDelay);\n        }\n        this.watchQuery = this.watchQuery.bind(this);\n        this.query = this.query.bind(this);\n        this.mutate = this.mutate.bind(this);\n        this.resetStore = this.resetStore.bind(this);\n        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n        this.version = _version_js__WEBPACK_IMPORTED_MODULE_4__.version;\n        this.localState = new _LocalState_js__WEBPACK_IMPORTED_MODULE_5__.LocalState({\n            cache: cache,\n            client: this,\n            resolvers: resolvers,\n            fragmentMatcher: fragmentMatcher\n        });\n        this.queryManager = new _QueryManager_js__WEBPACK_IMPORTED_MODULE_6__.QueryManager({\n            cache: this.cache,\n            link: this.link,\n            defaultOptions: this.defaultOptions,\n            defaultContext: defaultContext,\n            documentTransform: documentTransform,\n            queryDeduplication: queryDeduplication,\n            ssrMode: ssrMode,\n            clientAwareness: {\n                name: clientAwarenessName,\n                version: clientAwarenessVersion\n            },\n            localState: this.localState,\n            assumeImmutableResults: assumeImmutableResults,\n            onBroadcast: connectToDevTools ? function() {\n                if (_this.devToolsHookCb) {\n                    _this.devToolsHookCb({\n                        action: {},\n                        state: {\n                            queries: _this.queryManager.getQueryStore(),\n                            mutations: _this.queryManager.mutationStore || {}\n                        },\n                        dataWithOptimisticResults: _this.cache.extract(true)\n                    });\n                }\n            } : void 0\n        });\n        if (connectToDevTools) this.connectToDevTools();\n    }\n    ApolloClient.prototype.connectToDevTools = function() {\n        if (false) { var devtoolsSymbol, windowWithDevTools; }\n        /**\n         * Suggest installing the devtools for developers who don't have them\n         */ if (!hasSuggestedDevtools && globalThis.__DEV__ !== false) {\n            hasSuggestedDevtools = true;\n            setTimeout(function() {\n                if (false) { var url, ua, nav; }\n            }, 10000);\n        }\n    };\n    Object.defineProperty(ApolloClient.prototype, \"documentTransform\", {\n        /**\n         * The `DocumentTransform` used to modify GraphQL documents before a request\n         * is made. If a custom `DocumentTransform` is not provided, this will be the\n         * default document transform.\n         */ get: function() {\n            return this.queryManager.documentTransform;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Call this method to terminate any active client processes, making it safe\n     * to dispose of this `ApolloClient` instance.\n     */ ApolloClient.prototype.stop = function() {\n        this.queryManager.stop();\n    };\n    /**\n     * This watches the cache store of the query according to the options specified and\n     * returns an {@link ObservableQuery}. We can subscribe to this {@link ObservableQuery} and\n     * receive updated results through a GraphQL observer when the cache store changes.\n     *\n     * Note that this method is not an implementation of GraphQL subscriptions. Rather,\n     * it uses Apollo's store in order to reactively deliver updates to your query results.\n     *\n     * For example, suppose you call watchQuery on a GraphQL query that fetches a person's\n     * first and last name and this person has a particular object identifier, provided by\n     * dataIdFromObject. Later, a different query fetches that same person's\n     * first and last name and the first name has now changed. Then, any observers associated\n     * with the results of the first query will be updated with a new result object.\n     *\n     * Note that if the cache does not change, the subscriber will *not* be notified.\n     *\n     * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for\n     * a description of store reactivity.\n     */ ApolloClient.prototype.watchQuery = function(options) {\n        if (this.defaultOptions.watchQuery) {\n            options = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeOptions)(this.defaultOptions.watchQuery, options);\n        }\n        // XXX Overwriting options is probably not the best way to do this long term...\n        if (this.disableNetworkFetches && (options.fetchPolicy === \"network-only\" || options.fetchPolicy === \"cache-and-network\")) {\n            options = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, options), {\n                fetchPolicy: \"cache-first\"\n            });\n        }\n        return this.queryManager.watchQuery(options);\n    };\n    /**\n     * This resolves a single query according to the options specified and\n     * returns a `Promise` which is either resolved with the resulting data\n     * or rejected with an error.\n     *\n     * @param options - An object of type {@link QueryOptions} that allows us to\n     * describe how this query should be treated e.g. whether it should hit the\n     * server at all or just resolve from the cache, etc.\n     */ ApolloClient.prototype.query = function(options) {\n        if (this.defaultOptions.query) {\n            options = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeOptions)(this.defaultOptions.query, options);\n        }\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(options.fetchPolicy !== \"cache-and-network\", 16);\n        if (this.disableNetworkFetches && options.fetchPolicy === \"network-only\") {\n            options = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, options), {\n                fetchPolicy: \"cache-first\"\n            });\n        }\n        return this.queryManager.query(options);\n    };\n    /**\n     * This resolves a single mutation according to the options specified and returns a\n     * Promise which is either resolved with the resulting data or rejected with an\n     * error.\n     *\n     * It takes options as an object with the following keys and values:\n     */ ApolloClient.prototype.mutate = function(options) {\n        if (this.defaultOptions.mutate) {\n            options = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeOptions)(this.defaultOptions.mutate, options);\n        }\n        return this.queryManager.mutate(options);\n    };\n    /**\n     * This subscribes to a graphql subscription according to the options specified and returns an\n     * {@link Observable} which either emits received data or an error.\n     */ ApolloClient.prototype.subscribe = function(options) {\n        return this.queryManager.startGraphQLSubscription(options);\n    };\n    /**\n     * Tries to read some data from the store in the shape of the provided\n     * GraphQL query without making a network request. This method will start at\n     * the root query. To start at a specific id returned by `dataIdFromObject`\n     * use `readFragment`.\n     *\n     * @param optimistic - Set to `true` to allow `readQuery` to return\n     * optimistic results. Is `false` by default.\n     */ ApolloClient.prototype.readQuery = function(options, optimistic) {\n        if (optimistic === void 0) {\n            optimistic = false;\n        }\n        return this.cache.readQuery(options, optimistic);\n    };\n    /**\n     * Tries to read some data from the store in the shape of the provided\n     * GraphQL fragment without making a network request. This method will read a\n     * GraphQL fragment from any arbitrary id that is currently cached, unlike\n     * `readQuery` which will only read from the root query.\n     *\n     * You must pass in a GraphQL document with a single fragment or a document\n     * with multiple fragments that represent what you are reading. If you pass\n     * in a document with multiple fragments then you must also specify a\n     * `fragmentName`.\n     *\n     * @param optimistic - Set to `true` to allow `readFragment` to return\n     * optimistic results. Is `false` by default.\n     */ ApolloClient.prototype.readFragment = function(options, optimistic) {\n        if (optimistic === void 0) {\n            optimistic = false;\n        }\n        return this.cache.readFragment(options, optimistic);\n    };\n    /**\n     * Writes some data in the shape of the provided GraphQL query directly to\n     * the store. This method will start at the root query. To start at a\n     * specific id returned by `dataIdFromObject` then use `writeFragment`.\n     */ ApolloClient.prototype.writeQuery = function(options) {\n        var ref = this.cache.writeQuery(options);\n        if (options.broadcast !== false) {\n            this.queryManager.broadcastQueries();\n        }\n        return ref;\n    };\n    /**\n     * Writes some data in the shape of the provided GraphQL fragment directly to\n     * the store. This method will write to a GraphQL fragment from any arbitrary\n     * id that is currently cached, unlike `writeQuery` which will only write\n     * from the root query.\n     *\n     * You must pass in a GraphQL document with a single fragment or a document\n     * with multiple fragments that represent what you are writing. If you pass\n     * in a document with multiple fragments then you must also specify a\n     * `fragmentName`.\n     */ ApolloClient.prototype.writeFragment = function(options) {\n        var ref = this.cache.writeFragment(options);\n        if (options.broadcast !== false) {\n            this.queryManager.broadcastQueries();\n        }\n        return ref;\n    };\n    ApolloClient.prototype.__actionHookForDevTools = function(cb) {\n        this.devToolsHookCb = cb;\n    };\n    ApolloClient.prototype.__requestRaw = function(payload) {\n        return (0,_link_core_index_js__WEBPACK_IMPORTED_MODULE_8__.execute)(this.link, payload);\n    };\n    /**\n     * Resets your entire store by clearing out your cache and then re-executing\n     * all of your active queries. This makes it so that you may guarantee that\n     * there is no data left in your store from a time before you called this\n     * method.\n     *\n     * `resetStore()` is useful when your user just logged out. You’ve removed the\n     * user session, and you now want to make sure that any references to data you\n     * might have fetched while the user session was active is gone.\n     *\n     * It is important to remember that `resetStore()` *will* refetch any active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     */ ApolloClient.prototype.resetStore = function() {\n        var _this = this;\n        return Promise.resolve().then(function() {\n            return _this.queryManager.clearStore({\n                discardWatches: false\n            });\n        }).then(function() {\n            return Promise.all(_this.resetStoreCallbacks.map(function(fn) {\n                return fn();\n            }));\n        }).then(function() {\n            return _this.reFetchObservableQueries();\n        });\n    };\n    /**\n     * Remove all data from the store. Unlike `resetStore`, `clearStore` will\n     * not refetch any active queries.\n     */ ApolloClient.prototype.clearStore = function() {\n        var _this = this;\n        return Promise.resolve().then(function() {\n            return _this.queryManager.clearStore({\n                discardWatches: true\n            });\n        }).then(function() {\n            return Promise.all(_this.clearStoreCallbacks.map(function(fn) {\n                return fn();\n            }));\n        });\n    };\n    /**\n     * Allows callbacks to be registered that are executed when the store is\n     * reset. `onResetStore` returns an unsubscribe function that can be used\n     * to remove registered callbacks.\n     */ ApolloClient.prototype.onResetStore = function(cb) {\n        var _this = this;\n        this.resetStoreCallbacks.push(cb);\n        return function() {\n            _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function(c) {\n                return c !== cb;\n            });\n        };\n    };\n    /**\n     * Allows callbacks to be registered that are executed when the store is\n     * cleared. `onClearStore` returns an unsubscribe function that can be used\n     * to remove registered callbacks.\n     */ ApolloClient.prototype.onClearStore = function(cb) {\n        var _this = this;\n        this.clearStoreCallbacks.push(cb);\n        return function() {\n            _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function(c) {\n                return c !== cb;\n            });\n        };\n    };\n    /**\n     * Refetches all of your active queries.\n     *\n     * `reFetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage\n     *\n     * It is important to remember that `reFetchObservableQueries()` *will* refetch any active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.\n     */ ApolloClient.prototype.reFetchObservableQueries = function(includeStandby) {\n        return this.queryManager.reFetchObservableQueries(includeStandby);\n    };\n    /**\n     * Refetches specified active queries. Similar to \"reFetchObservableQueries()\" but with a specific list of queries.\n     *\n     * `refetchQueries()` is useful for use cases to imperatively refresh a selection of queries.\n     *\n     * It is important to remember that `refetchQueries()` *will* refetch specified active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     */ ApolloClient.prototype.refetchQueries = function(options) {\n        var map = this.queryManager.refetchQueries(options);\n        var queries = [];\n        var results = [];\n        map.forEach(function(result, obsQuery) {\n            queries.push(obsQuery);\n            results.push(result);\n        });\n        var result = Promise.all(results);\n        // In case you need the raw results immediately, without awaiting\n        // Promise.all(results):\n        result.queries = queries;\n        result.results = results;\n        // If you decide to ignore the result Promise because you're using\n        // result.queries and result.results instead, you shouldn't have to worry\n        // about preventing uncaught rejections for the Promise.all result.\n        result.catch(function(error) {\n            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.debug(17, error);\n        });\n        return result;\n    };\n    /**\n     * Get all currently active `ObservableQuery` objects, in a `Map` keyed by\n     * query ID strings.\n     *\n     * An \"active\" query is one that has observers and a `fetchPolicy` other than\n     * \"standby\" or \"cache-only\".\n     *\n     * You can include all `ObservableQuery` objects (including the inactive ones)\n     * by passing \"all\" instead of \"active\", or you can include just a subset of\n     * active queries by passing an array of query names or DocumentNode objects.\n     */ ApolloClient.prototype.getObservableQueries = function(include) {\n        if (include === void 0) {\n            include = \"active\";\n        }\n        return this.queryManager.getObservableQueries(include);\n    };\n    /**\n     * Exposes the cache's complete state, in a serializable format for later restoration.\n     */ ApolloClient.prototype.extract = function(optimistic) {\n        return this.cache.extract(optimistic);\n    };\n    /**\n     * Replaces existing state in the cache (if any) with the values expressed by\n     * `serializedState`.\n     *\n     * Called when hydrating a cache (server side rendering, or offline storage),\n     * and also (potentially) during hot reloads.\n     */ ApolloClient.prototype.restore = function(serializedState) {\n        return this.cache.restore(serializedState);\n    };\n    /**\n     * Add additional local resolvers.\n     */ ApolloClient.prototype.addResolvers = function(resolvers) {\n        this.localState.addResolvers(resolvers);\n    };\n    /**\n     * Set (override existing) local resolvers.\n     */ ApolloClient.prototype.setResolvers = function(resolvers) {\n        this.localState.setResolvers(resolvers);\n    };\n    /**\n     * Get all registered local resolvers.\n     */ ApolloClient.prototype.getResolvers = function() {\n        return this.localState.getResolvers();\n    };\n    /**\n     * Set a custom local state fragment matcher.\n     */ ApolloClient.prototype.setLocalStateFragmentMatcher = function(fragmentMatcher) {\n        this.localState.setFragmentMatcher(fragmentMatcher);\n    };\n    /**\n     * Define a new ApolloLink (or link chain) that Apollo Client will use.\n     */ ApolloClient.prototype.setLink = function(newLink) {\n        this.link = this.queryManager.link = newLink;\n    };\n    Object.defineProperty(ApolloClient.prototype, \"defaultContext\", {\n        get: function() {\n            return this.queryManager.defaultContext;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return ApolloClient;\n}();\n\nif (globalThis.__DEV__ !== false) {\n    ApolloClient.prototype.getMemoryInternals = _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_9__.getApolloClientMemoryInternals;\n} //# sourceMappingURL=ApolloClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/ApolloClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/LocalState.js":
/*!********************************************************!*\
  !*** ./node_modules/@apollo/client/core/LocalState.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LocalState: () => (/* binding */ LocalState)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/visitor.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/predicates.mjs\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _cache_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../cache/index.js */ \"(ssr)/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js\");\n\n\n\n\n\nvar LocalState = /** @class */ function() {\n    function LocalState(_a) {\n        var cache = _a.cache, client = _a.client, resolvers = _a.resolvers, fragmentMatcher = _a.fragmentMatcher;\n        this.selectionsToResolveCache = new WeakMap();\n        this.cache = cache;\n        if (client) {\n            this.client = client;\n        }\n        if (resolvers) {\n            this.addResolvers(resolvers);\n        }\n        if (fragmentMatcher) {\n            this.setFragmentMatcher(fragmentMatcher);\n        }\n    }\n    LocalState.prototype.addResolvers = function(resolvers) {\n        var _this = this;\n        this.resolvers = this.resolvers || {};\n        if (Array.isArray(resolvers)) {\n            resolvers.forEach(function(resolverGroup) {\n                _this.resolvers = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)(_this.resolvers, resolverGroup);\n            });\n        } else {\n            this.resolvers = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)(this.resolvers, resolvers);\n        }\n    };\n    LocalState.prototype.setResolvers = function(resolvers) {\n        this.resolvers = {};\n        this.addResolvers(resolvers);\n    };\n    LocalState.prototype.getResolvers = function() {\n        return this.resolvers || {};\n    };\n    // Run local client resolvers against the incoming query and remote data.\n    // Locally resolved field values are merged with the incoming remote data,\n    // and returned. Note that locally resolved fields will overwrite\n    // remote data using the same field name.\n    LocalState.prototype.runResolvers = function(_a) {\n        var document = _a.document, remoteResult = _a.remoteResult, context = _a.context, variables = _a.variables, _b = _a.onlyRunForcedResolvers, onlyRunForcedResolvers = _b === void 0 ? false : _b;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function() {\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_c) {\n                if (document) {\n                    return [\n                        2 /*return*/ ,\n                        this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function(localResult) {\n                            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, remoteResult), {\n                                data: localResult.result\n                            });\n                        })\n                    ];\n                }\n                return [\n                    2 /*return*/ ,\n                    remoteResult\n                ];\n            });\n        });\n    };\n    LocalState.prototype.setFragmentMatcher = function(fragmentMatcher) {\n        this.fragmentMatcher = fragmentMatcher;\n    };\n    LocalState.prototype.getFragmentMatcher = function() {\n        return this.fragmentMatcher;\n    };\n    // Client queries contain everything in the incoming document (if a @client\n    // directive is found).\n    LocalState.prototype.clientQuery = function(document) {\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.hasDirectives)([\n            \"client\"\n        ], document)) {\n            if (this.resolvers) {\n                return document;\n            }\n        }\n        return null;\n    };\n    // Server queries are stripped of all @client based selection sets.\n    LocalState.prototype.serverQuery = function(document) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.removeClientSetsFromDocument)(document);\n    };\n    LocalState.prototype.prepareContext = function(context) {\n        var cache = this.cache;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, context), {\n            cache: cache,\n            // Getting an entry's cache key is useful for local state resolvers.\n            getCacheKey: function(obj) {\n                return cache.identify(obj);\n            }\n        });\n    };\n    // To support `@client @export(as: \"someVar\")` syntax, we'll first resolve\n    // @client @export fields locally, then pass the resolved values back to be\n    // used alongside the original operation variables.\n    LocalState.prototype.addExportedVariables = function(document, variables, context) {\n        if (variables === void 0) {\n            variables = {};\n        }\n        if (context === void 0) {\n            context = {};\n        }\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function() {\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_a) {\n                if (document) {\n                    return [\n                        2 /*return*/ ,\n                        this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function(data) {\n                            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, variables), data.exportedVariables);\n                        })\n                    ];\n                }\n                return [\n                    2 /*return*/ ,\n                    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, variables)\n                ];\n            });\n        });\n    };\n    LocalState.prototype.shouldForceResolvers = function(document) {\n        var forceResolvers = false;\n        (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(document, {\n            Directive: {\n                enter: function(node) {\n                    if (node.name.value === \"client\" && node.arguments) {\n                        forceResolvers = node.arguments.some(function(arg) {\n                            return arg.name.value === \"always\" && arg.value.kind === \"BooleanValue\" && arg.value.value === true;\n                        });\n                        if (forceResolvers) {\n                            return graphql__WEBPACK_IMPORTED_MODULE_5__.BREAK;\n                        }\n                    }\n                }\n            }\n        });\n        return forceResolvers;\n    };\n    // Query the cache and return matching data.\n    LocalState.prototype.buildRootValueFromCache = function(document, variables) {\n        return this.cache.diff({\n            query: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.buildQueryFromSelectionSet)(document),\n            variables: variables,\n            returnPartialData: true,\n            optimistic: false\n        }).result;\n    };\n    LocalState.prototype.resolveDocument = function(document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n        if (context === void 0) {\n            context = {};\n        }\n        if (variables === void 0) {\n            variables = {};\n        }\n        if (fragmentMatcher === void 0) {\n            fragmentMatcher = function() {\n                return true;\n            };\n        }\n        if (onlyRunForcedResolvers === void 0) {\n            onlyRunForcedResolvers = false;\n        }\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function() {\n            var mainDefinition, fragments, fragmentMap, selectionsToResolve, definitionOperation, defaultOperationType, _a, cache, client, execContext, isClientFieldDescendant;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_b) {\n                mainDefinition = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.getMainDefinition)(document);\n                fragments = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.getFragmentDefinitions)(document);\n                fragmentMap = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.createFragmentMap)(fragments);\n                selectionsToResolve = this.collectSelectionsToResolve(mainDefinition, fragmentMap);\n                definitionOperation = mainDefinition.operation;\n                defaultOperationType = definitionOperation ? definitionOperation.charAt(0).toUpperCase() + definitionOperation.slice(1) : \"Query\";\n                _a = this, cache = _a.cache, client = _a.client;\n                execContext = {\n                    fragmentMap: fragmentMap,\n                    context: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, context), {\n                        cache: cache,\n                        client: client\n                    }),\n                    variables: variables,\n                    fragmentMatcher: fragmentMatcher,\n                    defaultOperationType: defaultOperationType,\n                    exportedVariables: {},\n                    selectionsToResolve: selectionsToResolve,\n                    onlyRunForcedResolvers: onlyRunForcedResolvers\n                };\n                isClientFieldDescendant = false;\n                return [\n                    2 /*return*/ ,\n                    this.resolveSelectionSet(mainDefinition.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function(result) {\n                        return {\n                            result: result,\n                            exportedVariables: execContext.exportedVariables\n                        };\n                    })\n                ];\n            });\n        });\n    };\n    LocalState.prototype.resolveSelectionSet = function(selectionSet, isClientFieldDescendant, rootValue, execContext) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function() {\n            var fragmentMap, context, variables, resultsToMerge, execute;\n            var _this = this;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_a) {\n                fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n                resultsToMerge = [\n                    rootValue\n                ];\n                execute = function(selection) {\n                    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(_this, void 0, void 0, function() {\n                        var fragment, typeCondition;\n                        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_a) {\n                            if (!isClientFieldDescendant && !execContext.selectionsToResolve.has(selection)) {\n                                // Skip selections without @client directives\n                                // (still processing if one of the ancestors or one of the child fields has @client directive)\n                                return [\n                                    2 /*return*/ \n                                ];\n                            }\n                            if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.shouldInclude)(selection, variables)) {\n                                // Skip this entirely.\n                                return [\n                                    2 /*return*/ \n                                ];\n                            }\n                            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.isField)(selection)) {\n                                return [\n                                    2 /*return*/ ,\n                                    this.resolveField(selection, isClientFieldDescendant, rootValue, execContext).then(function(fieldResult) {\n                                        var _a;\n                                        if (typeof fieldResult !== \"undefined\") {\n                                            resultsToMerge.push((_a = {}, _a[(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.resultKeyNameFromField)(selection)] = fieldResult, _a));\n                                        }\n                                    })\n                                ];\n                            }\n                            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.isInlineFragment)(selection)) {\n                                fragment = selection;\n                            } else {\n                                // This is a named fragment.\n                                fragment = fragmentMap[selection.name.value];\n                                (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragment, 18, selection.name.value);\n                            }\n                            if (fragment && fragment.typeCondition) {\n                                typeCondition = fragment.typeCondition.name.value;\n                                if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                                    return [\n                                        2 /*return*/ ,\n                                        this.resolveSelectionSet(fragment.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function(fragmentResult) {\n                                            resultsToMerge.push(fragmentResult);\n                                        })\n                                    ];\n                                }\n                            }\n                            return [\n                                2 /*return*/ \n                            ];\n                        });\n                    });\n                };\n                return [\n                    2 /*return*/ ,\n                    Promise.all(selectionSet.selections.map(execute)).then(function() {\n                        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeDeepArray)(resultsToMerge);\n                    })\n                ];\n            });\n        });\n    };\n    LocalState.prototype.resolveField = function(field, isClientFieldDescendant, rootValue, execContext) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function() {\n            var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n            var _this = this;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_a) {\n                if (!rootValue) {\n                    return [\n                        2 /*return*/ ,\n                        null\n                    ];\n                }\n                variables = execContext.variables;\n                fieldName = field.name.value;\n                aliasedFieldName = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.resultKeyNameFromField)(field);\n                aliasUsed = fieldName !== aliasedFieldName;\n                defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n                resultPromise = Promise.resolve(defaultResult);\n                // Usually all local resolvers are run when passing through here, but\n                // if we've specifically identified that we only want to run forced\n                // resolvers (that is, resolvers for fields marked with\n                // `@client(always: true)`), then we'll skip running non-forced resolvers.\n                if (!execContext.onlyRunForcedResolvers || this.shouldForceResolvers(field)) {\n                    resolverType = rootValue.__typename || execContext.defaultOperationType;\n                    resolverMap = this.resolvers && this.resolvers[resolverType];\n                    if (resolverMap) {\n                        resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n                        if (resolve) {\n                            resultPromise = Promise.resolve(// In case the resolve function accesses reactive variables,\n                            // set cacheSlot to the current cache instance.\n                            _cache_index_js__WEBPACK_IMPORTED_MODULE_9__.cacheSlot.withValue(this.cache, resolve, [\n                                rootValue,\n                                (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.argumentsObjectFromField)(field, variables),\n                                execContext.context,\n                                {\n                                    field: field,\n                                    fragmentMap: execContext.fragmentMap\n                                }\n                            ]));\n                        }\n                    }\n                }\n                return [\n                    2 /*return*/ ,\n                    resultPromise.then(function(result) {\n                        var _a, _b;\n                        if (result === void 0) {\n                            result = defaultResult;\n                        }\n                        // If an @export directive is associated with the current field, store\n                        // the `as` export variable name and current result for later use.\n                        if (field.directives) {\n                            field.directives.forEach(function(directive) {\n                                if (directive.name.value === \"export\" && directive.arguments) {\n                                    directive.arguments.forEach(function(arg) {\n                                        if (arg.name.value === \"as\" && arg.value.kind === \"StringValue\") {\n                                            execContext.exportedVariables[arg.value.value] = result;\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                        // Handle all scalar types here.\n                        if (!field.selectionSet) {\n                            return result;\n                        }\n                        // From here down, the field has a selection set, which means it's trying\n                        // to query a GraphQLObjectType.\n                        if (result == null) {\n                            // Basically any field in a GraphQL response can be null, or missing\n                            return result;\n                        }\n                        var isClientField = (_b = (_a = field.directives) === null || _a === void 0 ? void 0 : _a.some(function(d) {\n                            return d.name.value === \"client\";\n                        })) !== null && _b !== void 0 ? _b : false;\n                        if (Array.isArray(result)) {\n                            return _this.resolveSubSelectedArray(field, isClientFieldDescendant || isClientField, result, execContext);\n                        }\n                        // Returned value is an object, and the query has a sub-selection. Recurse.\n                        if (field.selectionSet) {\n                            return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant || isClientField, result, execContext);\n                        }\n                    })\n                ];\n            });\n        });\n    };\n    LocalState.prototype.resolveSubSelectedArray = function(field, isClientFieldDescendant, result, execContext) {\n        var _this = this;\n        return Promise.all(result.map(function(item) {\n            if (item === null) {\n                return null;\n            }\n            // This is a nested array, recurse.\n            if (Array.isArray(item)) {\n                return _this.resolveSubSelectedArray(field, isClientFieldDescendant, item, execContext);\n            }\n            // This is an object, run the selection set on it.\n            if (field.selectionSet) {\n                return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant, item, execContext);\n            }\n        }));\n    };\n    // Collect selection nodes on paths from document root down to all @client directives.\n    // This function takes into account transitive fragment spreads.\n    // Complexity equals to a single `visit` over the full document.\n    LocalState.prototype.collectSelectionsToResolve = function(mainDefinition, fragmentMap) {\n        var isSingleASTNode = function(node) {\n            return !Array.isArray(node);\n        };\n        var selectionsToResolveCache = this.selectionsToResolveCache;\n        function collectByDefinition(definitionNode) {\n            if (!selectionsToResolveCache.has(definitionNode)) {\n                var matches_1 = new Set();\n                selectionsToResolveCache.set(definitionNode, matches_1);\n                (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(definitionNode, {\n                    Directive: function(node, _, __, ___, ancestors) {\n                        if (node.name.value === \"client\") {\n                            ancestors.forEach(function(node) {\n                                if (isSingleASTNode(node) && (0,graphql__WEBPACK_IMPORTED_MODULE_10__.isSelectionNode)(node)) {\n                                    matches_1.add(node);\n                                }\n                            });\n                        }\n                    },\n                    FragmentSpread: function(spread, _, __, ___, ancestors) {\n                        var fragment = fragmentMap[spread.name.value];\n                        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragment, 19, spread.name.value);\n                        var fragmentSelections = collectByDefinition(fragment);\n                        if (fragmentSelections.size > 0) {\n                            // Fragment for this spread contains @client directive (either directly or transitively)\n                            // Collect selection nodes on paths from the root down to fields with the @client directive\n                            ancestors.forEach(function(node) {\n                                if (isSingleASTNode(node) && (0,graphql__WEBPACK_IMPORTED_MODULE_10__.isSelectionNode)(node)) {\n                                    matches_1.add(node);\n                                }\n                            });\n                            matches_1.add(spread);\n                            fragmentSelections.forEach(function(selection) {\n                                matches_1.add(selection);\n                            });\n                        }\n                    }\n                });\n            }\n            return selectionsToResolveCache.get(definitionNode);\n        }\n        return collectByDefinition(mainDefinition);\n    };\n    return LocalState;\n}();\n //# sourceMappingURL=LocalState.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/LocalState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/ObservableQuery.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/client/core/ObservableQuery.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ObservableQuery: () => (/* binding */ ObservableQuery),\n/* harmony export */   logMissingFieldErrors: () => (/* binding */ logMissingFieldErrors),\n/* harmony export */   reobserveCacheFirst: () => (/* binding */ reobserveCacheFirst)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./networkStatus.js */ \"(ssr)/./node_modules/@apollo/client/core/networkStatus.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/compact.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/cloneDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/iteration.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/subclassing.js\");\n/* harmony import */ var _equalByQuery_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./equalByQuery.js */ \"(ssr)/./node_modules/@apollo/client/core/equalByQuery.js\");\n\n\n\n\n\n\nvar assign = Object.assign, hasOwnProperty = Object.hasOwnProperty;\nvar ObservableQuery = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(ObservableQuery, _super);\n    function ObservableQuery(_a) {\n        var queryManager = _a.queryManager, queryInfo = _a.queryInfo, options = _a.options;\n        var _this = _super.call(this, function(observer) {\n            // Zen Observable has its own error function, so in order to log correctly\n            // we need to provide a custom error callback.\n            try {\n                var subObserver = observer._subscription._observer;\n                if (subObserver && !subObserver.error) {\n                    subObserver.error = defaultSubscriptionObserverErrorCallback;\n                }\n            } catch (_a) {}\n            var first = !_this.observers.size;\n            _this.observers.add(observer);\n            // Deliver most recent error or result.\n            var last = _this.last;\n            if (last && last.error) {\n                observer.error && observer.error(last.error);\n            } else if (last && last.result) {\n                observer.next && observer.next(last.result);\n            }\n            // Initiate observation of this query if it hasn't been reported to\n            // the QueryManager yet.\n            if (first) {\n                // Blindly catching here prevents unhandled promise rejections,\n                // and is safe because the ObservableQuery handles this error with\n                // this.observer.error, so we're not just swallowing the error by\n                // ignoring it here.\n                _this.reobserve().catch(function() {});\n            }\n            return function() {\n                if (_this.observers.delete(observer) && !_this.observers.size) {\n                    _this.tearDownQuery();\n                }\n            };\n        }) || this;\n        _this.observers = new Set();\n        _this.subscriptions = new Set();\n        // related classes\n        _this.queryInfo = queryInfo;\n        _this.queryManager = queryManager;\n        // active state\n        _this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);\n        _this.isTornDown = false;\n        var _b = queryManager.defaultOptions.watchQuery, _c = _b === void 0 ? {} : _b, _d = _c.fetchPolicy, defaultFetchPolicy = _d === void 0 ? \"cache-first\" : _d;\n        var _e = options.fetchPolicy, fetchPolicy = _e === void 0 ? defaultFetchPolicy : _e, // Make sure we don't store \"standby\" as the initialFetchPolicy.\n        _f = options.initialFetchPolicy, // Make sure we don't store \"standby\" as the initialFetchPolicy.\n        initialFetchPolicy = _f === void 0 ? fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy : _f;\n        _this.options = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {\n            // Remember the initial options.fetchPolicy so we can revert back to this\n            // policy when variables change. This information can also be specified\n            // (or overridden) by providing options.initialFetchPolicy explicitly.\n            initialFetchPolicy: initialFetchPolicy,\n            // This ensures this.options.fetchPolicy always has a string value, in\n            // case options.fetchPolicy was not provided.\n            fetchPolicy: fetchPolicy\n        });\n        _this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n        var opDef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.getOperationDefinition)(_this.query);\n        _this.queryName = opDef && opDef.name && opDef.name.value;\n        return _this;\n    }\n    Object.defineProperty(ObservableQuery.prototype, \"query\", {\n        // The `query` computed property will always reflect the document transformed\n        // by the last run query. `this.options.query` will always reflect the raw\n        // untransformed query to ensure document transforms with runtime conditionals\n        // are run on the original document.\n        get: function() {\n            return this.lastQuery || this.options.query;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n        // Computed shorthand for this.options.variables, preserved for\n        // backwards compatibility.\n        /**\n         * An object containing the variables that were provided for the query.\n         */ get: function() {\n            return this.options.variables;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ObservableQuery.prototype.result = function() {\n        var _this = this;\n        return new Promise(function(resolve, reject) {\n            // TODO: this code doesn’t actually make sense insofar as the observer\n            // will never exist in this.observers due how zen-observable wraps observables.\n            // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169\n            var observer = {\n                next: function(result) {\n                    resolve(result);\n                    // Stop the query within the QueryManager if we can before\n                    // this function returns.\n                    //\n                    // We do this in order to prevent observers piling up within\n                    // the QueryManager. Notice that we only fully unsubscribe\n                    // from the subscription in a setTimeout(..., 0)  call. This call can\n                    // actually be handled by the browser at a much later time. If queries\n                    // are fired in the meantime, observers that should have been removed\n                    // from the QueryManager will continue to fire, causing an unnecessary\n                    // performance hit.\n                    _this.observers.delete(observer);\n                    if (!_this.observers.size) {\n                        _this.queryManager.removeQuery(_this.queryId);\n                    }\n                    setTimeout(function() {\n                        subscription.unsubscribe();\n                    }, 0);\n                },\n                error: reject\n            };\n            var subscription = _this.subscribe(observer);\n        });\n    };\n    /** @internal */ ObservableQuery.prototype.resetDiff = function() {\n        this.queryInfo.resetDiff();\n    };\n    ObservableQuery.prototype.getCurrentResult = function(saveAsLastResult) {\n        if (saveAsLastResult === void 0) {\n            saveAsLastResult = true;\n        }\n        // Use the last result as long as the variables match this.variables.\n        var lastResult = this.getLastResult(true);\n        var networkStatus = this.queryInfo.networkStatus || lastResult && lastResult.networkStatus || _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.ready;\n        var result = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, lastResult), {\n            loading: (0,_networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.isNetworkRequestInFlight)(networkStatus),\n            networkStatus: networkStatus\n        });\n        var _a = this.options.fetchPolicy, fetchPolicy = _a === void 0 ? \"cache-first\" : _a;\n        if (// These fetch policies should never deliver data from the cache, unless\n        // redelivering a previously delivered result.\n        skipCacheDataFor(fetchPolicy) || // If this.options.query has @client(always: true) fields, we cannot\n        // trust diff.result, since it was read from the cache without running\n        // local resolvers (and it's too late to run resolvers now, since we must\n        // return a result synchronously).\n        this.queryManager.getDocumentInfo(this.query).hasForcedResolvers) {\n        // Fall through.\n        } else if (this.waitForOwnResult) {\n            // This would usually be a part of `QueryInfo.getDiff()`.\n            // which we skip in the waitForOwnResult case since we are not\n            // interested in the diff.\n            this.queryInfo[\"updateWatch\"]();\n        } else {\n            var diff = this.queryInfo.getDiff();\n            if (diff.complete || this.options.returnPartialData) {\n                result.data = diff.result;\n            }\n            if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(result.data, {})) {\n                result.data = void 0;\n            }\n            if (diff.complete) {\n                // Similar to setting result.partial to false, but taking advantage of the\n                // falsiness of missing fields.\n                delete result.partial;\n                // If the diff is complete, and we're using a FetchPolicy that\n                // terminates after a complete cache read, we can assume the next result\n                // we receive will have NetworkStatus.ready and !loading.\n                if (diff.complete && result.networkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.loading && (fetchPolicy === \"cache-first\" || fetchPolicy === \"cache-only\")) {\n                    result.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.ready;\n                    result.loading = false;\n                }\n            } else {\n                result.partial = true;\n            }\n            if (globalThis.__DEV__ !== false && !diff.complete && !this.options.partialRefetch && !result.loading && !result.data && !result.error) {\n                logMissingFieldErrors(diff.missing);\n            }\n        }\n        if (saveAsLastResult) {\n            this.updateLastResult(result);\n        }\n        return result;\n    };\n    // Compares newResult to the snapshot we took of this.lastResult when it was\n    // first received.\n    ObservableQuery.prototype.isDifferentFromLastResult = function(newResult, variables) {\n        if (!this.last) {\n            return true;\n        }\n        var resultIsDifferent = this.queryManager.getDocumentInfo(this.query).hasNonreactiveDirective ? !(0,_equalByQuery_js__WEBPACK_IMPORTED_MODULE_5__.equalByQuery)(this.query, this.last.result, newResult, this.variables) : !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(this.last.result, newResult);\n        return resultIsDifferent || variables && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(this.last.variables, variables);\n    };\n    ObservableQuery.prototype.getLast = function(key, variablesMustMatch) {\n        var last = this.last;\n        if (last && last[key] && (!variablesMustMatch || (0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(last.variables, this.variables))) {\n            return last[key];\n        }\n    };\n    ObservableQuery.prototype.getLastResult = function(variablesMustMatch) {\n        return this.getLast(\"result\", variablesMustMatch);\n    };\n    ObservableQuery.prototype.getLastError = function(variablesMustMatch) {\n        return this.getLast(\"error\", variablesMustMatch);\n    };\n    ObservableQuery.prototype.resetLastResults = function() {\n        delete this.last;\n        this.isTornDown = false;\n    };\n    ObservableQuery.prototype.resetQueryStoreErrors = function() {\n        this.queryManager.resetErrors(this.queryId);\n    };\n    /**\n     * Update the variables of this observable query, and fetch the new results.\n     * This method should be preferred over `setVariables` in most use cases.\n     *\n     * @param variables - The new set of variables. If there are missing variables,\n     * the previous values of those variables will be used.\n     */ ObservableQuery.prototype.refetch = function(variables) {\n        var _a;\n        var reobserveOptions = {\n            // Always disable polling for refetches.\n            pollInterval: 0\n        };\n        // Unless the provided fetchPolicy always consults the network\n        // (no-cache, network-only, or cache-and-network), override it with\n        // network-only to force the refetch for this fetchQuery call.\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy === \"cache-and-network\") {\n            reobserveOptions.fetchPolicy = fetchPolicy;\n        } else if (fetchPolicy === \"no-cache\") {\n            reobserveOptions.fetchPolicy = \"no-cache\";\n        } else {\n            reobserveOptions.fetchPolicy = \"network-only\";\n        }\n        if (globalThis.__DEV__ !== false && variables && hasOwnProperty.call(variables, \"variables\")) {\n            var queryDef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.getQueryDefinition)(this.query);\n            var vars = queryDef.variableDefinitions;\n            if (!vars || !vars.some(function(v) {\n                return v.variable.name.value === \"variables\";\n            })) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(20, variables, ((_a = queryDef.name) === null || _a === void 0 ? void 0 : _a.value) || queryDef);\n            }\n        }\n        if (variables && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(this.options.variables, variables)) {\n            // Update the existing options with new variables\n            reobserveOptions.variables = this.options.variables = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, this.options.variables), variables);\n        }\n        this.queryInfo.resetLastWrite();\n        return this.reobserve(reobserveOptions, _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.refetch);\n    };\n    /**\n     * A function that helps you fetch the next set of results for a [paginated list field](https://www.apollographql.com/docs/react/pagination/core-api/).\n     */ ObservableQuery.prototype.fetchMore = function(fetchMoreOptions) {\n        var _this = this;\n        var combinedOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, fetchMoreOptions.query ? fetchMoreOptions : (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, this.options), {\n            query: this.options.query\n        }), fetchMoreOptions), {\n            variables: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, this.options.variables), fetchMoreOptions.variables)\n        })), {\n            // The fetchMore request goes immediately to the network and does\n            // not automatically write its result to the cache (hence no-cache\n            // instead of network-only), because we allow the caller of\n            // fetchMore to provide an updateQuery callback that determines how\n            // the data gets written to the cache.\n            fetchPolicy: \"no-cache\"\n        });\n        combinedOptions.query = this.transformDocument(combinedOptions.query);\n        var qid = this.queryManager.generateQueryId();\n        // If a temporary query is passed to `fetchMore`, we don't want to store\n        // it as the last query result since it may be an optimized query for\n        // pagination. We will however run the transforms on the original document\n        // as well as the document passed in `fetchMoreOptions` to ensure the cache\n        // uses the most up-to-date document which may rely on runtime conditionals.\n        this.lastQuery = fetchMoreOptions.query ? this.transformDocument(this.options.query) : combinedOptions.query;\n        // Simulate a loading result for the original query with\n        // result.networkStatus === NetworkStatus.fetchMore.\n        var queryInfo = this.queryInfo;\n        var originalNetworkStatus = queryInfo.networkStatus;\n        queryInfo.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.fetchMore;\n        if (combinedOptions.notifyOnNetworkStatusChange) {\n            this.observe();\n        }\n        var updatedQuerySet = new Set();\n        return this.queryManager.fetchQuery(qid, combinedOptions, _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.fetchMore).then(function(fetchMoreResult) {\n            _this.queryManager.removeQuery(qid);\n            if (queryInfo.networkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.fetchMore) {\n                queryInfo.networkStatus = originalNetworkStatus;\n            }\n            // Performing this cache update inside a cache.batch transaction ensures\n            // any affected cache.watch watchers are notified at most once about any\n            // updates. Most watchers will be using the QueryInfo class, which\n            // responds to notifications by calling reobserveCacheFirst to deliver\n            // fetchMore cache results back to this ObservableQuery.\n            _this.queryManager.cache.batch({\n                update: function(cache) {\n                    var updateQuery = fetchMoreOptions.updateQuery;\n                    if (updateQuery) {\n                        cache.updateQuery({\n                            query: _this.query,\n                            variables: _this.variables,\n                            returnPartialData: true,\n                            optimistic: false\n                        }, function(previous) {\n                            return updateQuery(previous, {\n                                fetchMoreResult: fetchMoreResult.data,\n                                variables: combinedOptions.variables\n                            });\n                        });\n                    } else {\n                        // If we're using a field policy instead of updateQuery, the only\n                        // thing we need to do is write the new data to the cache using\n                        // combinedOptions.variables (instead of this.variables, which is\n                        // what this.updateQuery uses, because it works by abusing the\n                        // original field value, keyed by the original variables).\n                        cache.writeQuery({\n                            query: combinedOptions.query,\n                            variables: combinedOptions.variables,\n                            data: fetchMoreResult.data\n                        });\n                    }\n                },\n                onWatchUpdated: function(watch) {\n                    // Record the DocumentNode associated with any watched query whose\n                    // data were updated by the cache writes above.\n                    updatedQuerySet.add(watch.query);\n                }\n            });\n            return fetchMoreResult;\n        }).finally(function() {\n            // In case the cache writes above did not generate a broadcast\n            // notification (which would have been intercepted by onWatchUpdated),\n            // likely because the written data were the same as what was already in\n            // the cache, we still want fetchMore to deliver its final loading:false\n            // result with the unchanged data.\n            if (!updatedQuerySet.has(_this.query)) {\n                reobserveCacheFirst(_this);\n            }\n        });\n    };\n    // XXX the subscription variables are separate from the query variables.\n    // if you want to update subscription variables, right now you have to do that separately,\n    // and you can only do it by stopping the subscription and then subscribing again with new variables.\n    /**\n     * A function that enables you to execute a [subscription](https://www.apollographql.com/docs/react/data/subscriptions/), usually to subscribe to specific fields that were included in the query.\n     *\n     * This function returns _another_ function that you can call to terminate the subscription.\n     */ ObservableQuery.prototype.subscribeToMore = function(options) {\n        var _this = this;\n        var subscription = this.queryManager.startGraphQLSubscription({\n            query: options.document,\n            variables: options.variables,\n            context: options.context\n        }).subscribe({\n            next: function(subscriptionData) {\n                var updateQuery = options.updateQuery;\n                if (updateQuery) {\n                    _this.updateQuery(function(previous, _a) {\n                        var variables = _a.variables;\n                        return updateQuery(previous, {\n                            subscriptionData: subscriptionData,\n                            variables: variables\n                        });\n                    });\n                }\n            },\n            error: function(err) {\n                if (options.onError) {\n                    options.onError(err);\n                    return;\n                }\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(21, err);\n            }\n        });\n        this.subscriptions.add(subscription);\n        return function() {\n            if (_this.subscriptions.delete(subscription)) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n    ObservableQuery.prototype.setOptions = function(newOptions) {\n        return this.reobserve(newOptions);\n    };\n    ObservableQuery.prototype.silentSetOptions = function(newOptions) {\n        var mergedOptions = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.compact)(this.options, newOptions || {});\n        assign(this.options, mergedOptions);\n    };\n    /**\n     * Update the variables of this observable query, and fetch the new results\n     * if they've changed. Most users should prefer `refetch` instead of\n     * `setVariables` in order to to be properly notified of results even when\n     * they come from the cache.\n     *\n     * Note: the `next` callback will *not* fire if the variables have not changed\n     * or if the result is coming from cache.\n     *\n     * Note: the promise will return the old results immediately if the variables\n     * have not changed.\n     *\n     * Note: the promise will return null immediately if the query is not active\n     * (there are no subscribers).\n     *\n     * @param variables - The new set of variables. If there are missing variables,\n     * the previous values of those variables will be used.\n     */ ObservableQuery.prototype.setVariables = function(variables) {\n        if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(this.variables, variables)) {\n            // If we have no observers, then we don't actually want to make a network\n            // request. As soon as someone observes the query, the request will kick\n            // off. For now, we just store any changes. (See #1077)\n            return this.observers.size ? this.result() : Promise.resolve();\n        }\n        this.options.variables = variables;\n        // See comment above\n        if (!this.observers.size) {\n            return Promise.resolve();\n        }\n        return this.reobserve({\n            // Reset options.fetchPolicy to its original value.\n            fetchPolicy: this.options.initialFetchPolicy,\n            variables: variables\n        }, _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.setVariables);\n    };\n    /**\n     * A function that enables you to update the query's cached result without executing a followup GraphQL operation.\n     *\n     * See [using updateQuery and updateFragment](https://www.apollographql.com/docs/react/caching/cache-interaction/#using-updatequery-and-updatefragment) for additional information.\n     */ ObservableQuery.prototype.updateQuery = function(mapFn) {\n        var queryManager = this.queryManager;\n        var result = queryManager.cache.diff({\n            query: this.options.query,\n            variables: this.variables,\n            returnPartialData: true,\n            optimistic: false\n        }).result;\n        var newResult = mapFn(result, {\n            variables: this.variables\n        });\n        if (newResult) {\n            queryManager.cache.writeQuery({\n                query: this.options.query,\n                data: newResult,\n                variables: this.variables\n            });\n            queryManager.broadcastQueries();\n        }\n    };\n    /**\n     * A function that instructs the query to begin re-executing at a specified interval (in milliseconds).\n     */ ObservableQuery.prototype.startPolling = function(pollInterval) {\n        this.options.pollInterval = pollInterval;\n        this.updatePolling();\n    };\n    /**\n     * A function that instructs the query to stop polling after a previous call to `startPolling`.\n     */ ObservableQuery.prototype.stopPolling = function() {\n        this.options.pollInterval = 0;\n        this.updatePolling();\n    };\n    // Update options.fetchPolicy according to options.nextFetchPolicy.\n    ObservableQuery.prototype.applyNextFetchPolicy = function(reason, // It's possible to use this method to apply options.nextFetchPolicy to\n    // options.fetchPolicy even if options !== this.options, though that happens\n    // most often when the options are temporary, used for only one request and\n    // then thrown away, so nextFetchPolicy may not end up mattering.\n    options) {\n        if (options.nextFetchPolicy) {\n            var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? \"cache-first\" : _a, _b = options.initialFetchPolicy, initialFetchPolicy = _b === void 0 ? fetchPolicy : _b;\n            if (fetchPolicy === \"standby\") {\n            // Do nothing, leaving options.fetchPolicy unchanged.\n            } else if (typeof options.nextFetchPolicy === \"function\") {\n                // When someone chooses \"cache-and-network\" or \"network-only\" as their\n                // initial FetchPolicy, they often do not want future cache updates to\n                // trigger unconditional network requests, which is what repeatedly\n                // applying the \"cache-and-network\" or \"network-only\" policies would\n                // seem to imply. Instead, when the cache reports an update after the\n                // initial network request, it may be desirable for subsequent network\n                // requests to be triggered only if the cache result is incomplete. To\n                // that end, the options.nextFetchPolicy option provides an easy way to\n                // update options.fetchPolicy after the initial network request, without\n                // having to call observableQuery.setOptions.\n                options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n                    reason: reason,\n                    options: options,\n                    observable: this,\n                    initialFetchPolicy: initialFetchPolicy\n                });\n            } else if (reason === \"variables-changed\") {\n                options.fetchPolicy = initialFetchPolicy;\n            } else {\n                options.fetchPolicy = options.nextFetchPolicy;\n            }\n        }\n        return options.fetchPolicy;\n    };\n    ObservableQuery.prototype.fetch = function(options, newNetworkStatus, query) {\n        // TODO Make sure we update the networkStatus (and infer fetchVariables)\n        // before actually committing to the fetch.\n        this.queryManager.setObservableQuery(this);\n        return this.queryManager[\"fetchConcastWithInfo\"](this.queryId, options, newNetworkStatus, query);\n    };\n    // Turns polling on or off based on this.options.pollInterval.\n    ObservableQuery.prototype.updatePolling = function() {\n        var _this = this;\n        // Avoid polling in SSR mode\n        if (this.queryManager.ssrMode) {\n            return;\n        }\n        var _a = this, pollingInfo = _a.pollingInfo, pollInterval = _a.options.pollInterval;\n        if (!pollInterval) {\n            if (pollingInfo) {\n                clearTimeout(pollingInfo.timeout);\n                delete this.pollingInfo;\n            }\n            return;\n        }\n        if (pollingInfo && pollingInfo.interval === pollInterval) {\n            return;\n        }\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(pollInterval, 22);\n        var info = pollingInfo || (this.pollingInfo = {});\n        info.interval = pollInterval;\n        var maybeFetch = function() {\n            var _a, _b;\n            if (_this.pollingInfo) {\n                if (!(0,_networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.isNetworkRequestInFlight)(_this.queryInfo.networkStatus) && !((_b = (_a = _this.options).skipPollAttempt) === null || _b === void 0 ? void 0 : _b.call(_a))) {\n                    _this.reobserve({\n                        // Most fetchPolicy options don't make sense to use in a polling context, as\n                        // users wouldn't want to be polling the cache directly. However, network-only and\n                        // no-cache are both useful for when the user wants to control whether or not the\n                        // polled results are written to the cache.\n                        fetchPolicy: _this.options.initialFetchPolicy === \"no-cache\" ? \"no-cache\" : \"network-only\"\n                    }, _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.poll).then(poll, poll);\n                } else {\n                    poll();\n                }\n            }\n        };\n        var poll = function() {\n            var info = _this.pollingInfo;\n            if (info) {\n                clearTimeout(info.timeout);\n                info.timeout = setTimeout(maybeFetch, info.interval);\n            }\n        };\n        poll();\n    };\n    ObservableQuery.prototype.updateLastResult = function(newResult, variables) {\n        if (variables === void 0) {\n            variables = this.variables;\n        }\n        var error = this.getLastError();\n        // Preserve this.last.error unless the variables have changed.\n        if (error && this.last && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(variables, this.last.variables)) {\n            error = void 0;\n        }\n        return this.last = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n            result: this.queryManager.assumeImmutableResults ? newResult : (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.cloneDeep)(newResult),\n            variables: variables\n        }, error ? {\n            error: error\n        } : null);\n    };\n    ObservableQuery.prototype.reobserveAsConcast = function(newOptions, newNetworkStatus) {\n        var _this = this;\n        this.isTornDown = false;\n        var useDisposableConcast = // Refetching uses a disposable Concast to allow refetches using different\n        // options/variables, without permanently altering the options of the\n        // original ObservableQuery.\n        newNetworkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.refetch || // The fetchMore method does not actually call the reobserve method, but,\n        // if it did, it would definitely use a disposable Concast.\n        newNetworkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.fetchMore || // Polling uses a disposable Concast so the polling options (which force\n        // fetchPolicy to be \"network-only\" or \"no-cache\") won't override the original options.\n        newNetworkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.poll;\n        // Save the old variables, since Object.assign may modify them below.\n        var oldVariables = this.options.variables;\n        var oldFetchPolicy = this.options.fetchPolicy;\n        var mergedOptions = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.compact)(this.options, newOptions || {});\n        var options = useDisposableConcast ? // Disposable Concast fetches receive a shallow copy of this.options\n        // (merged with newOptions), leaving this.options unmodified.\n        mergedOptions : assign(this.options, mergedOptions);\n        // Don't update options.query with the transformed query to avoid\n        // overwriting this.options.query when we aren't using a disposable concast.\n        // We want to ensure we can re-run the custom document transforms the next\n        // time a request is made against the original query.\n        var query = this.transformDocument(options.query);\n        this.lastQuery = query;\n        if (!useDisposableConcast) {\n            // We can skip calling updatePolling if we're not changing this.options.\n            this.updatePolling();\n            // Reset options.fetchPolicy to its original value when variables change,\n            // unless a new fetchPolicy was provided by newOptions.\n            if (newOptions && newOptions.variables && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(newOptions.variables, oldVariables) && // Don't mess with the fetchPolicy if it's currently \"standby\".\n            options.fetchPolicy !== \"standby\" && // If we're changing the fetchPolicy anyway, don't try to change it here\n            // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.\n            options.fetchPolicy === oldFetchPolicy) {\n                this.applyNextFetchPolicy(\"variables-changed\", options);\n                if (newNetworkStatus === void 0) {\n                    newNetworkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.setVariables;\n                }\n            }\n        }\n        this.waitForOwnResult && (this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy));\n        var finishWaitingForOwnResult = function() {\n            if (_this.concast === concast) {\n                _this.waitForOwnResult = false;\n            }\n        };\n        var variables = options.variables && (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options.variables);\n        var _a = this.fetch(options, newNetworkStatus, query), concast = _a.concast, fromLink = _a.fromLink;\n        var observer = {\n            next: function(result) {\n                if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(_this.variables, variables)) {\n                    finishWaitingForOwnResult();\n                    _this.reportResult(result, variables);\n                }\n            },\n            error: function(error) {\n                if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(_this.variables, variables)) {\n                    finishWaitingForOwnResult();\n                    _this.reportError(error, variables);\n                }\n            }\n        };\n        if (!useDisposableConcast && (fromLink || !this.concast)) {\n            // We use the {add,remove}Observer methods directly to avoid wrapping\n            // observer with an unnecessary SubscriptionObserver object.\n            if (this.concast && this.observer) {\n                this.concast.removeObserver(this.observer);\n            }\n            this.concast = concast;\n            this.observer = observer;\n        }\n        concast.addObserver(observer);\n        return concast;\n    };\n    ObservableQuery.prototype.reobserve = function(newOptions, newNetworkStatus) {\n        return this.reobserveAsConcast(newOptions, newNetworkStatus).promise;\n    };\n    ObservableQuery.prototype.resubscribeAfterError = function() {\n        var args = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            args[_i] = arguments[_i];\n        }\n        // If `lastError` is set in the current when the subscription is re-created,\n        // the subscription will immediately receive the error, which will\n        // cause it to terminate again. To avoid this, we first clear\n        // the last error/result from the `observableQuery` before re-starting\n        // the subscription, and restore the last value afterwards so that the\n        // subscription has a chance to stay open.\n        var last = this.last;\n        this.resetLastResults();\n        var subscription = this.subscribe.apply(this, args);\n        this.last = last;\n        return subscription;\n    };\n    // (Re)deliver the current result to this.observers without applying fetch\n    // policies or making network requests.\n    ObservableQuery.prototype.observe = function() {\n        this.reportResult(// Passing false is important so that this.getCurrentResult doesn't\n        // save the fetchMore result as this.lastResult, causing it to be\n        // ignored due to the this.isDifferentFromLastResult check in\n        // this.reportResult.\n        this.getCurrentResult(false), this.variables);\n    };\n    ObservableQuery.prototype.reportResult = function(result, variables) {\n        var lastError = this.getLastError();\n        var isDifferent = this.isDifferentFromLastResult(result, variables);\n        // Update the last result even when isDifferentFromLastResult returns false,\n        // because the query may be using the @nonreactive directive, and we want to\n        // save the the latest version of any nonreactive subtrees (in case\n        // getCurrentResult is called), even though we skip broadcasting changes.\n        if (lastError || !result.partial || this.options.returnPartialData) {\n            this.updateLastResult(result, variables);\n        }\n        if (lastError || isDifferent) {\n            (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.iterateObserversSafely)(this.observers, \"next\", result);\n        }\n    };\n    ObservableQuery.prototype.reportError = function(error, variables) {\n        // Since we don't get the current result on errors, only the error, we\n        // must mirror the updates that occur in QueryStore.markQueryError here\n        var errorResult = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, this.getLastResult()), {\n            error: error,\n            errors: error.graphQLErrors,\n            networkStatus: _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.error,\n            loading: false\n        });\n        this.updateLastResult(errorResult, variables);\n        (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.iterateObserversSafely)(this.observers, \"error\", this.last.error = error);\n    };\n    ObservableQuery.prototype.hasObservers = function() {\n        return this.observers.size > 0;\n    };\n    ObservableQuery.prototype.tearDownQuery = function() {\n        if (this.isTornDown) return;\n        if (this.concast && this.observer) {\n            this.concast.removeObserver(this.observer);\n            delete this.concast;\n            delete this.observer;\n        }\n        this.stopPolling();\n        // stop all active GraphQL subscriptions\n        this.subscriptions.forEach(function(sub) {\n            return sub.unsubscribe();\n        });\n        this.subscriptions.clear();\n        this.queryManager.stopQuery(this.queryId);\n        this.observers.clear();\n        this.isTornDown = true;\n    };\n    ObservableQuery.prototype.transformDocument = function(document) {\n        return this.queryManager.transform(document);\n    };\n    return ObservableQuery;\n}(_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.Observable);\n\n// Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\n(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.fixObservableSubclass)(ObservableQuery);\n// Reobserve with fetchPolicy effectively set to \"cache-first\", triggering\n// delivery of any new data from the cache, possibly falling back to the network\n// if any cache data are missing. This allows _complete_ cache results to be\n// delivered without also kicking off unnecessary network requests when\n// this.options.fetchPolicy is \"cache-and-network\" or \"network-only\". When\n// this.options.fetchPolicy is any other policy (\"cache-first\", \"cache-only\",\n// \"standby\", or \"no-cache\"), we call this.reobserve() as usual.\nfunction reobserveCacheFirst(obsQuery) {\n    var _a = obsQuery.options, fetchPolicy = _a.fetchPolicy, nextFetchPolicy = _a.nextFetchPolicy;\n    if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n        return obsQuery.reobserve({\n            fetchPolicy: \"cache-first\",\n            // Use a temporary nextFetchPolicy function that replaces itself with the\n            // previous nextFetchPolicy value and returns the original fetchPolicy.\n            nextFetchPolicy: function(currentFetchPolicy, context) {\n                // Replace this nextFetchPolicy function in the options object with the\n                // original this.options.nextFetchPolicy value.\n                this.nextFetchPolicy = nextFetchPolicy;\n                // If the original nextFetchPolicy value was a function, give it a\n                // chance to decide what happens here.\n                if (typeof this.nextFetchPolicy === \"function\") {\n                    return this.nextFetchPolicy(currentFetchPolicy, context);\n                }\n                // Otherwise go back to the original this.options.fetchPolicy.\n                return fetchPolicy;\n            }\n        });\n    }\n    return obsQuery.reobserve();\n}\nfunction defaultSubscriptionObserverErrorCallback(error) {\n    globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(23, error.message, error.stack);\n}\nfunction logMissingFieldErrors(missing) {\n    if (globalThis.__DEV__ !== false && missing) {\n        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.debug(24, missing);\n    }\n}\nfunction skipCacheDataFor(fetchPolicy /* `undefined` would mean `\"cache-first\"` */ ) {\n    return fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\" || fetchPolicy === \"standby\";\n} //# sourceMappingURL=ObservableQuery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/ObservableQuery.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/QueryInfo.js":
/*!*******************************************************!*\
  !*** ./node_modules/@apollo/client/core/QueryInfo.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryInfo: () => (/* binding */ QueryInfo),\n/* harmony export */   shouldWriteResult: () => (/* binding */ shouldWriteResult)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/incrementalResult.js\");\n/* harmony import */ var _ObservableQuery_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ObservableQuery.js */ \"(ssr)/./node_modules/@apollo/client/core/ObservableQuery.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/errorHandling.js\");\n/* harmony import */ var _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./networkStatus.js */ \"(ssr)/./node_modules/@apollo/client/core/networkStatus.js\");\n\n\n\n\n\n\n\nvar destructiveMethodCounts = new (_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.canUseWeakMap ? WeakMap : Map)();\nfunction wrapDestructiveCacheMethod(cache, methodName) {\n    var original = cache[methodName];\n    if (typeof original === \"function\") {\n        // @ts-expect-error this is just too generic to be typed correctly\n        cache[methodName] = function() {\n            destructiveMethodCounts.set(cache, // The %1e15 allows the count to wrap around to 0 safely every\n            // quadrillion evictions, so there's no risk of overflow. To be\n            // clear, this is more of a pedantic principle than something\n            // that matters in any conceivable practical scenario.\n            (destructiveMethodCounts.get(cache) + 1) % 1e15);\n            // @ts-expect-error this is just too generic to be typed correctly\n            return original.apply(this, arguments);\n        };\n    }\n}\nfunction cancelNotifyTimeout(info) {\n    if (info[\"notifyTimeout\"]) {\n        clearTimeout(info[\"notifyTimeout\"]);\n        info[\"notifyTimeout\"] = void 0;\n    }\n}\n// A QueryInfo object represents a single query managed by the\n// QueryManager, which tracks all QueryInfo objects by queryId in its\n// this.queries Map. QueryInfo objects store the latest results and errors\n// for the given query, and are responsible for reporting those results to\n// the corresponding ObservableQuery, via the QueryInfo.notify method.\n// Results are reported asynchronously whenever setDiff marks the\n// QueryInfo object as dirty, though a call to the QueryManager's\n// broadcastQueries method may trigger the notification before it happens\n// automatically. This class used to be a simple interface type without\n// any field privacy or meaningful methods, which is why it still has so\n// many public fields. The effort to lock down and simplify the QueryInfo\n// interface is ongoing, and further improvements are welcome.\nvar QueryInfo = /** @class */ function() {\n    function QueryInfo(queryManager, queryId) {\n        if (queryId === void 0) {\n            queryId = queryManager.generateQueryId();\n        }\n        this.queryId = queryId;\n        this.listeners = new Set();\n        this.document = null;\n        this.lastRequestId = 1;\n        this.stopped = false;\n        this.dirty = false;\n        this.observableQuery = null;\n        var cache = this.cache = queryManager.cache;\n        // Track how often cache.evict is called, since we want eviction to\n        // override the feud-stopping logic in the markResult method, by\n        // causing shouldWrite to return true. Wrapping the cache.evict method\n        // is a bit of a hack, but it saves us from having to make eviction\n        // counting an official part of the ApolloCache API.\n        if (!destructiveMethodCounts.has(cache)) {\n            destructiveMethodCounts.set(cache, 0);\n            wrapDestructiveCacheMethod(cache, \"evict\");\n            wrapDestructiveCacheMethod(cache, \"modify\");\n            wrapDestructiveCacheMethod(cache, \"reset\");\n        }\n    }\n    QueryInfo.prototype.init = function(query) {\n        var networkStatus = query.networkStatus || _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.NetworkStatus.loading;\n        if (this.variables && this.networkStatus !== _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.NetworkStatus.loading && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(this.variables, query.variables)) {\n            networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.NetworkStatus.setVariables;\n        }\n        if (!(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(query.variables, this.variables)) {\n            this.lastDiff = void 0;\n        }\n        Object.assign(this, {\n            document: query.document,\n            variables: query.variables,\n            networkError: null,\n            graphQLErrors: this.graphQLErrors || [],\n            networkStatus: networkStatus\n        });\n        if (query.observableQuery) {\n            this.setObservableQuery(query.observableQuery);\n        }\n        if (query.lastRequestId) {\n            this.lastRequestId = query.lastRequestId;\n        }\n        return this;\n    };\n    QueryInfo.prototype.reset = function() {\n        cancelNotifyTimeout(this);\n        this.dirty = false;\n    };\n    QueryInfo.prototype.resetDiff = function() {\n        this.lastDiff = void 0;\n    };\n    QueryInfo.prototype.getDiff = function() {\n        var options = this.getDiffOptions();\n        if (this.lastDiff && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(options, this.lastDiff.options)) {\n            return this.lastDiff.diff;\n        }\n        this.updateWatch(this.variables);\n        var oq = this.observableQuery;\n        if (oq && oq.options.fetchPolicy === \"no-cache\") {\n            return {\n                complete: false\n            };\n        }\n        var diff = this.cache.diff(options);\n        this.updateLastDiff(diff, options);\n        return diff;\n    };\n    QueryInfo.prototype.updateLastDiff = function(diff, options) {\n        this.lastDiff = diff ? {\n            diff: diff,\n            options: options || this.getDiffOptions()\n        } : void 0;\n    };\n    QueryInfo.prototype.getDiffOptions = function(variables) {\n        var _a;\n        if (variables === void 0) {\n            variables = this.variables;\n        }\n        return {\n            query: this.document,\n            variables: variables,\n            returnPartialData: true,\n            optimistic: true,\n            canonizeResults: (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a.options.canonizeResults\n        };\n    };\n    QueryInfo.prototype.setDiff = function(diff) {\n        var _this = this;\n        var oldDiff = this.lastDiff && this.lastDiff.diff;\n        this.updateLastDiff(diff);\n        if (!this.dirty && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(oldDiff && oldDiff.result, diff && diff.result)) {\n            this.dirty = true;\n            if (!this.notifyTimeout) {\n                this.notifyTimeout = setTimeout(function() {\n                    return _this.notify();\n                }, 0);\n            }\n        }\n    };\n    QueryInfo.prototype.setObservableQuery = function(oq) {\n        var _this = this;\n        if (oq === this.observableQuery) return;\n        if (this.oqListener) {\n            this.listeners.delete(this.oqListener);\n        }\n        this.observableQuery = oq;\n        if (oq) {\n            oq[\"queryInfo\"] = this;\n            this.listeners.add(this.oqListener = function() {\n                var diff = _this.getDiff();\n                if (diff.fromOptimisticTransaction) {\n                    // If this diff came from an optimistic transaction, deliver the\n                    // current cache data to the ObservableQuery, but don't perform a\n                    // reobservation, since oq.reobserveCacheFirst might make a network\n                    // request, and we never want to trigger network requests in the\n                    // middle of optimistic updates.\n                    oq[\"observe\"]();\n                } else {\n                    // Otherwise, make the ObservableQuery \"reobserve\" the latest data\n                    // using a temporary fetch policy of \"cache-first\", so complete cache\n                    // results have a chance to be delivered without triggering additional\n                    // network requests, even when options.fetchPolicy is \"network-only\"\n                    // or \"cache-and-network\". All other fetch policies are preserved by\n                    // this method, and are handled by calling oq.reobserve(). If this\n                    // reobservation is spurious, isDifferentFromLastResult still has a\n                    // chance to catch it before delivery to ObservableQuery subscribers.\n                    (0,_ObservableQuery_js__WEBPACK_IMPORTED_MODULE_3__.reobserveCacheFirst)(oq);\n                }\n            });\n        } else {\n            delete this.oqListener;\n        }\n    };\n    QueryInfo.prototype.notify = function() {\n        var _this = this;\n        cancelNotifyTimeout(this);\n        if (this.shouldNotify()) {\n            this.listeners.forEach(function(listener) {\n                return listener(_this);\n            });\n        }\n        this.dirty = false;\n    };\n    QueryInfo.prototype.shouldNotify = function() {\n        if (!this.dirty || !this.listeners.size) {\n            return false;\n        }\n        if ((0,_networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.isNetworkRequestInFlight)(this.networkStatus) && this.observableQuery) {\n            var fetchPolicy = this.observableQuery.options.fetchPolicy;\n            if (fetchPolicy !== \"cache-only\" && fetchPolicy !== \"cache-and-network\") {\n                return false;\n            }\n        }\n        return true;\n    };\n    QueryInfo.prototype.stop = function() {\n        if (!this.stopped) {\n            this.stopped = true;\n            // Cancel the pending notify timeout\n            this.reset();\n            this.cancel();\n            // Revert back to the no-op version of cancel inherited from\n            // QueryInfo.prototype.\n            this.cancel = QueryInfo.prototype.cancel;\n            var oq = this.observableQuery;\n            if (oq) oq.stopPolling();\n        }\n    };\n    // This method is a no-op by default, until/unless overridden by the\n    // updateWatch method.\n    QueryInfo.prototype.cancel = function() {};\n    QueryInfo.prototype.updateWatch = function(variables) {\n        var _this = this;\n        if (variables === void 0) {\n            variables = this.variables;\n        }\n        var oq = this.observableQuery;\n        if (oq && oq.options.fetchPolicy === \"no-cache\") {\n            return;\n        }\n        var watchOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, this.getDiffOptions(variables)), {\n            watcher: this,\n            callback: function(diff) {\n                return _this.setDiff(diff);\n            }\n        });\n        if (!this.lastWatch || !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(watchOptions, this.lastWatch)) {\n            this.cancel();\n            this.cancel = this.cache.watch(this.lastWatch = watchOptions);\n        }\n    };\n    QueryInfo.prototype.resetLastWrite = function() {\n        this.lastWrite = void 0;\n    };\n    QueryInfo.prototype.shouldWrite = function(result, variables) {\n        var lastWrite = this.lastWrite;\n        return !(lastWrite && // If cache.evict has been called since the last time we wrote this\n        // data into the cache, there's a chance writing this result into\n        // the cache will repair what was evicted.\n        lastWrite.dmCount === destructiveMethodCounts.get(this.cache) && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(variables, lastWrite.variables) && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(result.data, lastWrite.result.data));\n    };\n    QueryInfo.prototype.markResult = function(result, document, options, cacheWriteBehavior) {\n        var _this = this;\n        result = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, result);\n        var merger = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.DeepMerger();\n        var graphQLErrors = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.isNonEmptyArray)(result.errors) ? result.errors.slice(0) : [];\n        // Cancel the pending notify timeout (if it exists) to prevent extraneous network\n        // requests. To allow future notify timeouts, diff and dirty are reset as well.\n        this.reset();\n        if (\"incremental\" in result && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.isNonEmptyArray)(result.incremental)) {\n            var mergedData = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.mergeIncrementalData)(this.getDiff().result, result);\n            result.data = mergedData;\n        // Detect the first chunk of a deferred query and merge it with existing\n        // cache data. This ensures a `cache-first` fetch policy that returns\n        // partial cache data or a `cache-and-network` fetch policy that already\n        // has full data in the cache does not complain when trying to merge the\n        // initial deferred server data with existing cache data.\n        } else if (\"hasNext\" in result && result.hasNext) {\n            var diff = this.getDiff();\n            result.data = merger.merge(diff.result, result.data);\n        }\n        this.graphQLErrors = graphQLErrors;\n        if (options.fetchPolicy === \"no-cache\") {\n            this.updateLastDiff({\n                result: result.data,\n                complete: true\n            }, this.getDiffOptions(options.variables));\n        } else if (cacheWriteBehavior !== 0 /* CacheWriteBehavior.FORBID */ ) {\n            if (shouldWriteResult(result, options.errorPolicy)) {\n                // Using a transaction here so we have a chance to read the result\n                // back from the cache before the watch callback fires as a result\n                // of writeQuery, so we can store the new diff quietly and ignore\n                // it when we receive it redundantly from the watch callback.\n                this.cache.performTransaction(function(cache) {\n                    if (_this.shouldWrite(result, options.variables)) {\n                        cache.writeQuery({\n                            query: document,\n                            data: result.data,\n                            variables: options.variables,\n                            overwrite: cacheWriteBehavior === 1 /* CacheWriteBehavior.OVERWRITE */ \n                        });\n                        _this.lastWrite = {\n                            // Make a shallow defensive copy of the result object, in case we\n                            // later later modify result.data in place, since we don't want\n                            // that mutation affecting the saved lastWrite.result.data.\n                            result: (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, result),\n                            variables: options.variables,\n                            dmCount: destructiveMethodCounts.get(_this.cache)\n                        };\n                    } else {\n                        // If result is the same as the last result we received from\n                        // the network (and the variables match too), avoid writing\n                        // result into the cache again. The wisdom of skipping this\n                        // cache write is far from obvious, since any cache write\n                        // could be the one that puts the cache back into a desired\n                        // state, fixing corruption or missing data. However, if we\n                        // always write every network result into the cache, we enable\n                        // feuds between queries competing to update the same data in\n                        // incompatible ways, which can lead to an endless cycle of\n                        // cache broadcasts and useless network requests. As with any\n                        // feud, eventually one side must step back from the brink,\n                        // letting the other side(s) have the last word(s). There may\n                        // be other points where we could break this cycle, such as\n                        // silencing the broadcast for cache.writeQuery (not a good\n                        // idea, since it just delays the feud a bit) or somehow\n                        // avoiding the network request that just happened (also bad,\n                        // because the server could return useful new data). All\n                        // options considered, skipping this cache write seems to be\n                        // the least damaging place to break the cycle, because it\n                        // reflects the intuition that we recently wrote this exact\n                        // result into the cache, so the cache *should* already/still\n                        // contain this data. If some other query has clobbered that\n                        // data in the meantime, that's too bad, but there will be no\n                        // winners if every query blindly reverts to its own version\n                        // of the data. This approach also gives the network a chance\n                        // to return new data, which will be written into the cache as\n                        // usual, notifying only those queries that are directly\n                        // affected by the cache updates, as usual. In the future, an\n                        // even more sophisticated cache could perhaps prevent or\n                        // mitigate the clobbering somehow, but that would make this\n                        // particular cache write even less important, and thus\n                        // skipping it would be even safer than it is today.\n                        if (_this.lastDiff && _this.lastDiff.diff.complete) {\n                            // Reuse data from the last good (complete) diff that we\n                            // received, when possible.\n                            result.data = _this.lastDiff.diff.result;\n                            return;\n                        }\n                    // If the previous this.diff was incomplete, fall through to\n                    // re-reading the latest data with cache.diff, below.\n                    }\n                    var diffOptions = _this.getDiffOptions(options.variables);\n                    var diff = cache.diff(diffOptions);\n                    // In case the QueryManager stops this QueryInfo before its\n                    // results are delivered, it's important to avoid restarting the\n                    // cache watch when markResult is called. We also avoid updating\n                    // the watch if we are writing a result that doesn't match the current\n                    // variables to avoid race conditions from broadcasting the wrong\n                    // result.\n                    if (!_this.stopped && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(_this.variables, options.variables)) {\n                        // Any time we're about to update this.diff, we need to make\n                        // sure we've started watching the cache.\n                        _this.updateWatch(options.variables);\n                    }\n                    // If we're allowed to write to the cache, update result.data to be\n                    // the result as re-read from the cache, rather than the raw network\n                    // result. Set without setDiff to avoid triggering a notify call,\n                    // since we have other ways of notifying for this result.\n                    _this.updateLastDiff(diff, diffOptions);\n                    result.data = diff.result;\n                });\n            } else {\n                this.lastWrite = void 0;\n            }\n        }\n        return result;\n    };\n    QueryInfo.prototype.markReady = function() {\n        this.networkError = null;\n        return this.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.NetworkStatus.ready;\n    };\n    QueryInfo.prototype.markError = function(error) {\n        this.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.NetworkStatus.error;\n        this.lastWrite = void 0;\n        this.reset();\n        if (error.graphQLErrors) {\n            this.graphQLErrors = error.graphQLErrors;\n        }\n        if (error.networkError) {\n            this.networkError = error.networkError;\n        }\n        return error;\n    };\n    return QueryInfo;\n}();\n\nfunction shouldWriteResult(result, errorPolicy) {\n    if (errorPolicy === void 0) {\n        errorPolicy = \"none\";\n    }\n    var ignoreErrors = errorPolicy === \"ignore\" || errorPolicy === \"all\";\n    var writeWithErrors = !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.graphQLResultHasError)(result);\n    if (!writeWithErrors && ignoreErrors && result.data) {\n        writeWithErrors = true;\n    }\n    return writeWithErrors;\n} //# sourceMappingURL=QueryInfo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/QueryInfo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/QueryManager.js":
/*!**********************************************************!*\
  !*** ./node_modules/@apollo/client/core/QueryManager.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryManager: () => (/* binding */ QueryManager)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _link_core_index_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../link/core/index.js */ \"(ssr)/./node_modules/@apollo/client/link/core/execute.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../utilities/common/incrementalResult.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/incrementalResult.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _cache_index_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../cache/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/DocumentTransform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/asyncMap.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/errorHandling.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/makeUniqueId.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/Concast.js\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../errors/index.js */ \"(ssr)/./node_modules/@apollo/client/errors/index.js\");\n/* harmony import */ var _ObservableQuery_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./ObservableQuery.js */ \"(ssr)/./node_modules/@apollo/client/core/ObservableQuery.js\");\n/* harmony import */ var _networkStatus_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./networkStatus.js */ \"(ssr)/./node_modules/@apollo/client/core/networkStatus.js\");\n/* harmony import */ var _LocalState_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./LocalState.js */ \"(ssr)/./node_modules/@apollo/client/core/LocalState.js\");\n/* harmony import */ var _QueryInfo_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./QueryInfo.js */ \"(ssr)/./node_modules/@apollo/client/core/QueryInfo.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/print.js\");\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/caches.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar IGNORE = Object.create(null);\n\n\nvar QueryManager = /** @class */ function() {\n    function QueryManager(_a) {\n        var cache = _a.cache, link = _a.link, defaultOptions = _a.defaultOptions, documentTransform = _a.documentTransform, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, onBroadcast = _a.onBroadcast, _c = _a.ssrMode, ssrMode = _c === void 0 ? false : _c, _d = _a.clientAwareness, clientAwareness = _d === void 0 ? {} : _d, localState = _a.localState, _e = _a.assumeImmutableResults, assumeImmutableResults = _e === void 0 ? !!cache.assumeImmutableResults : _e, defaultContext = _a.defaultContext;\n        var _this = this;\n        this.clientAwareness = {};\n        // All the queries that the QueryManager is currently managing (not\n        // including mutations and subscriptions).\n        this.queries = new Map();\n        // Maps from queryId strings to Promise rejection functions for\n        // currently active queries and fetches.\n        // Use protected instead of private field so\n        // @apollo/experimental-nextjs-app-support can access type info.\n        this.fetchCancelFns = new Map();\n        this.transformCache = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.AutoCleanedWeakCache(_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.cacheSizes[\"queryManager.getDocumentInfo\"] || 2000 /* defaultCacheSizes[\"queryManager.getDocumentInfo\"] */ );\n        this.queryIdCounter = 1;\n        this.requestIdCounter = 1;\n        this.mutationIdCounter = 1;\n        // Use protected instead of private field so\n        // @apollo/experimental-nextjs-app-support can access type info.\n        this.inFlightLinkObservables = new _wry_trie__WEBPACK_IMPORTED_MODULE_2__.Trie(false);\n        var defaultDocumentTransform = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.DocumentTransform(function(document) {\n            return _this.cache.transformDocument(document);\n        }, // Allow the apollo cache to manage its own transform caches\n        {\n            cache: false\n        });\n        this.cache = cache;\n        this.link = link;\n        this.defaultOptions = defaultOptions || Object.create(null);\n        this.queryDeduplication = queryDeduplication;\n        this.clientAwareness = clientAwareness;\n        this.localState = localState || new _LocalState_js__WEBPACK_IMPORTED_MODULE_6__.LocalState({\n            cache: cache\n        });\n        this.ssrMode = ssrMode;\n        this.assumeImmutableResults = assumeImmutableResults;\n        this.documentTransform = documentTransform ? defaultDocumentTransform.concat(documentTransform)// The custom document transform may add new fragment spreads or new\n        // field selections, so we want to give the cache a chance to run\n        // again. For example, the InMemoryCache adds __typename to field\n        // selections and fragments from the fragment registry.\n        .concat(defaultDocumentTransform) : defaultDocumentTransform;\n        this.defaultContext = defaultContext || Object.create(null);\n        if (this.onBroadcast = onBroadcast) {\n            this.mutationStore = Object.create(null);\n        }\n        // TODO: remove before we release 3.9\n        Object.defineProperty(this.inFlightLinkObservables, \"get\", {\n            value: function() {\n                throw new Error(\"This version of Apollo Client requires at least @apollo/experimental-nextjs-app-support version 0.5.2.\");\n            }\n        });\n    }\n    /**\n     * Call this method to terminate any active query processes, making it safe\n     * to dispose of this QueryManager instance.\n     */ QueryManager.prototype.stop = function() {\n        var _this = this;\n        this.queries.forEach(function(_info, queryId) {\n            _this.stopQueryNoBroadcast(queryId);\n        });\n        this.cancelPendingFetches((0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(25));\n    };\n    QueryManager.prototype.cancelPendingFetches = function(error) {\n        this.fetchCancelFns.forEach(function(cancel) {\n            return cancel(error);\n        });\n        this.fetchCancelFns.clear();\n    };\n    QueryManager.prototype.mutate = function(_a) {\n        var _b, _c;\n        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueries = _a.updateQueries, _d = _a.refetchQueries, refetchQueries = _d === void 0 ? [] : _d, _e = _a.awaitRefetchQueries, awaitRefetchQueries = _e === void 0 ? false : _e, updateWithProxyFn = _a.update, onQueryUpdated = _a.onQueryUpdated, _f = _a.fetchPolicy, fetchPolicy = _f === void 0 ? ((_b = this.defaultOptions.mutate) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || \"network-only\" : _f, _g = _a.errorPolicy, errorPolicy = _g === void 0 ? ((_c = this.defaultOptions.mutate) === null || _c === void 0 ? void 0 : _c.errorPolicy) || \"none\" : _g, keepRootFields = _a.keepRootFields, context = _a.context;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function() {\n            var mutationId, hasClientExports, mutationStoreValue, isOptimistic, self;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__generator)(this, function(_h) {\n                switch(_h.label){\n                    case 0:\n                        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(mutation, 26);\n                        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\", 27);\n                        mutationId = this.generateMutationId();\n                        mutation = this.cache.transformForLink(this.transform(mutation));\n                        hasClientExports = this.getDocumentInfo(mutation).hasClientExports;\n                        variables = this.getVariables(mutation, variables);\n                        if (!hasClientExports) return [\n                            3 /*break*/ ,\n                            2\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            this.localState.addExportedVariables(mutation, variables, context)\n                        ];\n                    case 1:\n                        variables = _h.sent();\n                        _h.label = 2;\n                    case 2:\n                        mutationStoreValue = this.mutationStore && (this.mutationStore[mutationId] = {\n                            mutation: mutation,\n                            variables: variables,\n                            loading: true,\n                            error: null\n                        });\n                        isOptimistic = optimisticResponse && this.markMutationOptimistic(optimisticResponse, {\n                            mutationId: mutationId,\n                            document: mutation,\n                            variables: variables,\n                            fetchPolicy: fetchPolicy,\n                            errorPolicy: errorPolicy,\n                            context: context,\n                            updateQueries: updateQueries,\n                            update: updateWithProxyFn,\n                            keepRootFields: keepRootFields\n                        });\n                        this.broadcastQueries();\n                        self = this;\n                        return [\n                            2 /*return*/ ,\n                            new Promise(function(resolve, reject) {\n                                return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.asyncMap)(self.getObservableFromLink(mutation, (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, context), {\n                                    optimisticResponse: isOptimistic ? optimisticResponse : void 0\n                                }), variables, false), function(result) {\n                                    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.graphQLResultHasError)(result) && errorPolicy === \"none\") {\n                                        throw new _errors_index_js__WEBPACK_IMPORTED_MODULE_10__.ApolloError({\n                                            graphQLErrors: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.getGraphQLErrorsFromResult)(result)\n                                        });\n                                    }\n                                    if (mutationStoreValue) {\n                                        mutationStoreValue.loading = false;\n                                        mutationStoreValue.error = null;\n                                    }\n                                    var storeResult = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, result);\n                                    if (typeof refetchQueries === \"function\") {\n                                        refetchQueries = refetchQueries(storeResult);\n                                    }\n                                    if (errorPolicy === \"ignore\" && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.graphQLResultHasError)(storeResult)) {\n                                        delete storeResult.errors;\n                                    }\n                                    return self.markMutationResult({\n                                        mutationId: mutationId,\n                                        result: storeResult,\n                                        document: mutation,\n                                        variables: variables,\n                                        fetchPolicy: fetchPolicy,\n                                        errorPolicy: errorPolicy,\n                                        context: context,\n                                        update: updateWithProxyFn,\n                                        updateQueries: updateQueries,\n                                        awaitRefetchQueries: awaitRefetchQueries,\n                                        refetchQueries: refetchQueries,\n                                        removeOptimistic: isOptimistic ? mutationId : void 0,\n                                        onQueryUpdated: onQueryUpdated,\n                                        keepRootFields: keepRootFields\n                                    });\n                                }).subscribe({\n                                    next: function(storeResult) {\n                                        self.broadcastQueries();\n                                        // Since mutations might receive multiple payloads from the\n                                        // ApolloLink chain (e.g. when used with @defer),\n                                        // we resolve with a SingleExecutionResult or after the final\n                                        // ExecutionPatchResult has arrived and we have assembled the\n                                        // multipart response into a single result.\n                                        if (!(\"hasNext\" in storeResult) || storeResult.hasNext === false) {\n                                            resolve(storeResult);\n                                        }\n                                    },\n                                    error: function(err) {\n                                        if (mutationStoreValue) {\n                                            mutationStoreValue.loading = false;\n                                            mutationStoreValue.error = err;\n                                        }\n                                        if (isOptimistic) {\n                                            self.cache.removeOptimistic(mutationId);\n                                        }\n                                        self.broadcastQueries();\n                                        reject(err instanceof _errors_index_js__WEBPACK_IMPORTED_MODULE_10__.ApolloError ? err : new _errors_index_js__WEBPACK_IMPORTED_MODULE_10__.ApolloError({\n                                            networkError: err\n                                        }));\n                                    }\n                                });\n                            })\n                        ];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.markMutationResult = function(mutation, cache) {\n        var _this = this;\n        if (cache === void 0) {\n            cache = this.cache;\n        }\n        var result = mutation.result;\n        var cacheWrites = [];\n        var skipCache = mutation.fetchPolicy === \"no-cache\";\n        if (!skipCache && (0,_QueryInfo_js__WEBPACK_IMPORTED_MODULE_11__.shouldWriteResult)(result, mutation.errorPolicy)) {\n            if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.isExecutionPatchIncrementalResult)(result)) {\n                cacheWrites.push({\n                    result: result.data,\n                    dataId: \"ROOT_MUTATION\",\n                    query: mutation.document,\n                    variables: mutation.variables\n                });\n            }\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.isExecutionPatchIncrementalResult)(result) && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.isNonEmptyArray)(result.incremental)) {\n                var diff = cache.diff({\n                    id: \"ROOT_MUTATION\",\n                    // The cache complains if passed a mutation where it expects a\n                    // query, so we transform mutations and subscriptions to queries\n                    // (only once, thanks to this.transformCache).\n                    query: this.getDocumentInfo(mutation.document).asQuery,\n                    variables: mutation.variables,\n                    optimistic: false,\n                    returnPartialData: true\n                });\n                var mergedData = void 0;\n                if (diff.result) {\n                    mergedData = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.mergeIncrementalData)(diff.result, result);\n                }\n                if (typeof mergedData !== \"undefined\") {\n                    // cast the ExecutionPatchResult to FetchResult here since\n                    // ExecutionPatchResult never has `data` when returned from the server\n                    result.data = mergedData;\n                    cacheWrites.push({\n                        result: mergedData,\n                        dataId: \"ROOT_MUTATION\",\n                        query: mutation.document,\n                        variables: mutation.variables\n                    });\n                }\n            }\n            var updateQueries_1 = mutation.updateQueries;\n            if (updateQueries_1) {\n                this.queries.forEach(function(_a, queryId) {\n                    var observableQuery = _a.observableQuery;\n                    var queryName = observableQuery && observableQuery.queryName;\n                    if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n                        return;\n                    }\n                    var updater = updateQueries_1[queryName];\n                    var _b = _this.queries.get(queryId), document = _b.document, variables = _b.variables;\n                    // Read the current query result from the store.\n                    var _c = cache.diff({\n                        query: document,\n                        variables: variables,\n                        returnPartialData: true,\n                        optimistic: false\n                    }), currentQueryResult = _c.result, complete = _c.complete;\n                    if (complete && currentQueryResult) {\n                        // Run our reducer using the current query result and the mutation result.\n                        var nextQueryResult = updater(currentQueryResult, {\n                            mutationResult: result,\n                            queryName: document && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.getOperationName)(document) || void 0,\n                            queryVariables: variables\n                        });\n                        // Write the modified result back into the store if we got a new result.\n                        if (nextQueryResult) {\n                            cacheWrites.push({\n                                result: nextQueryResult,\n                                dataId: \"ROOT_QUERY\",\n                                query: document,\n                                variables: variables\n                            });\n                        }\n                    }\n                });\n            }\n        }\n        if (cacheWrites.length > 0 || mutation.refetchQueries || mutation.update || mutation.onQueryUpdated || mutation.removeOptimistic) {\n            var results_1 = [];\n            this.refetchQueries({\n                updateCache: function(cache) {\n                    if (!skipCache) {\n                        cacheWrites.forEach(function(write) {\n                            return cache.write(write);\n                        });\n                    }\n                    // If the mutation has some writes associated with it then we need to\n                    // apply those writes to the store by running this reducer again with\n                    // a write action.\n                    var update = mutation.update;\n                    // Determine whether result is a SingleExecutionResult,\n                    // or the final ExecutionPatchResult.\n                    var isFinalResult = !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.isExecutionPatchResult)(result) || (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.isExecutionPatchIncrementalResult)(result) && !result.hasNext;\n                    if (update) {\n                        if (!skipCache) {\n                            // Re-read the ROOT_MUTATION data we just wrote into the cache\n                            // (the first cache.write call in the cacheWrites.forEach loop\n                            // above), so field read functions have a chance to run for\n                            // fields within mutation result objects.\n                            var diff = cache.diff({\n                                id: \"ROOT_MUTATION\",\n                                // The cache complains if passed a mutation where it expects a\n                                // query, so we transform mutations and subscriptions to queries\n                                // (only once, thanks to this.transformCache).\n                                query: _this.getDocumentInfo(mutation.document).asQuery,\n                                variables: mutation.variables,\n                                optimistic: false,\n                                returnPartialData: true\n                            });\n                            if (diff.complete) {\n                                result = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, result), {\n                                    data: diff.result\n                                });\n                                if (\"incremental\" in result) {\n                                    delete result.incremental;\n                                }\n                                if (\"hasNext\" in result) {\n                                    delete result.hasNext;\n                                }\n                            }\n                        }\n                        // If we've received the whole response,\n                        // either a SingleExecutionResult or the final ExecutionPatchResult,\n                        // call the update function.\n                        if (isFinalResult) {\n                            update(cache, result, {\n                                context: mutation.context,\n                                variables: mutation.variables\n                            });\n                        }\n                    }\n                    // TODO Do this with cache.evict({ id: 'ROOT_MUTATION' }) but make it\n                    // shallow to allow rolling back optimistic evictions.\n                    if (!skipCache && !mutation.keepRootFields && isFinalResult) {\n                        cache.modify({\n                            id: \"ROOT_MUTATION\",\n                            fields: function(value, _a) {\n                                var fieldName = _a.fieldName, DELETE = _a.DELETE;\n                                return fieldName === \"__typename\" ? value : DELETE;\n                            }\n                        });\n                    }\n                },\n                include: mutation.refetchQueries,\n                // Write the final mutation.result to the root layer of the cache.\n                optimistic: false,\n                // Remove the corresponding optimistic layer at the same time as we\n                // write the final non-optimistic result.\n                removeOptimistic: mutation.removeOptimistic,\n                // Let the caller of client.mutate optionally determine the refetching\n                // behavior for watched queries after the mutation.update function runs.\n                // If no onQueryUpdated function was provided for this mutation, pass\n                // null instead of undefined to disable the default refetching behavior.\n                onQueryUpdated: mutation.onQueryUpdated || null\n            }).forEach(function(result) {\n                return results_1.push(result);\n            });\n            if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n                // Returning a promise here makes the mutation await that promise, so we\n                // include results in that promise's work if awaitRefetchQueries or an\n                // onQueryUpdated function was specified.\n                return Promise.all(results_1).then(function() {\n                    return result;\n                });\n            }\n        }\n        return Promise.resolve(result);\n    };\n    QueryManager.prototype.markMutationOptimistic = function(optimisticResponse, mutation) {\n        var _this = this;\n        var data = typeof optimisticResponse === \"function\" ? optimisticResponse(mutation.variables, {\n            IGNORE: IGNORE\n        }) : optimisticResponse;\n        if (data === IGNORE) {\n            return false;\n        }\n        this.cache.recordOptimisticTransaction(function(cache) {\n            try {\n                _this.markMutationResult((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, mutation), {\n                    result: {\n                        data: data\n                    }\n                }), cache);\n            } catch (error) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(error);\n            }\n        }, mutation.mutationId);\n        return true;\n    };\n    QueryManager.prototype.fetchQuery = function(queryId, options, networkStatus) {\n        return this.fetchConcastWithInfo(queryId, options, networkStatus).concast.promise;\n    };\n    QueryManager.prototype.getQueryStore = function() {\n        var store = Object.create(null);\n        this.queries.forEach(function(info, queryId) {\n            store[queryId] = {\n                variables: info.variables,\n                networkStatus: info.networkStatus,\n                networkError: info.networkError,\n                graphQLErrors: info.graphQLErrors\n            };\n        });\n        return store;\n    };\n    QueryManager.prototype.resetErrors = function(queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo) {\n            queryInfo.networkError = undefined;\n            queryInfo.graphQLErrors = [];\n        }\n    };\n    QueryManager.prototype.transform = function(document) {\n        return this.documentTransform.transformDocument(document);\n    };\n    QueryManager.prototype.getDocumentInfo = function(document) {\n        var transformCache = this.transformCache;\n        if (!transformCache.has(document)) {\n            var cacheEntry = {\n                // TODO These three calls (hasClientExports, shouldForceResolvers, and\n                // usesNonreactiveDirective) are performing independent full traversals\n                // of the transformed document. We should consider merging these\n                // traversals into a single pass in the future, though the work is\n                // cached after the first time.\n                hasClientExports: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_15__.hasClientExports)(document),\n                hasForcedResolvers: this.localState.shouldForceResolvers(document),\n                hasNonreactiveDirective: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_15__.hasDirectives)([\n                    \"nonreactive\"\n                ], document),\n                clientQuery: this.localState.clientQuery(document),\n                serverQuery: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_16__.removeDirectivesFromDocument)([\n                    {\n                        name: \"client\",\n                        remove: true\n                    },\n                    {\n                        name: \"connection\"\n                    },\n                    {\n                        name: \"nonreactive\"\n                    }\n                ], document),\n                defaultVars: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.getDefaultValues)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.getOperationDefinition)(document)),\n                // Transform any mutation or subscription operations to query operations\n                // so we can read/write them from/to the cache.\n                asQuery: (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, document), {\n                    definitions: document.definitions.map(function(def) {\n                        if (def.kind === \"OperationDefinition\" && def.operation !== \"query\") {\n                            return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, def), {\n                                operation: \"query\"\n                            });\n                        }\n                        return def;\n                    })\n                })\n            };\n            transformCache.set(document, cacheEntry);\n        }\n        return transformCache.get(document);\n    };\n    QueryManager.prototype.getVariables = function(document, variables) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, this.getDocumentInfo(document).defaultVars), variables);\n    };\n    QueryManager.prototype.watchQuery = function(options) {\n        var query = this.transform(options.query);\n        // assign variable default values if supplied\n        // NOTE: We don't modify options.query here with the transformed query to\n        // ensure observable.options.query is set to the raw untransformed query.\n        options = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, options), {\n            variables: this.getVariables(query, options.variables)\n        });\n        if (typeof options.notifyOnNetworkStatusChange === \"undefined\") {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var queryInfo = new _QueryInfo_js__WEBPACK_IMPORTED_MODULE_11__.QueryInfo(this);\n        var observable = new _ObservableQuery_js__WEBPACK_IMPORTED_MODULE_17__.ObservableQuery({\n            queryManager: this,\n            queryInfo: queryInfo,\n            options: options\n        });\n        observable[\"lastQuery\"] = query;\n        this.queries.set(observable.queryId, queryInfo);\n        // We give queryInfo the transformed query to ensure the first cache diff\n        // uses the transformed query instead of the raw query\n        queryInfo.init({\n            document: query,\n            observableQuery: observable,\n            variables: observable.variables\n        });\n        return observable;\n    };\n    QueryManager.prototype.query = function(options, queryId) {\n        var _this = this;\n        if (queryId === void 0) {\n            queryId = this.generateQueryId();\n        }\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(options.query, 28);\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(options.query.kind === \"Document\", 29);\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!options.returnPartialData, 30);\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!options.pollInterval, 31);\n        return this.fetchQuery(queryId, (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, options), {\n            query: this.transform(options.query)\n        })).finally(function() {\n            return _this.stopQuery(queryId);\n        });\n    };\n    QueryManager.prototype.generateQueryId = function() {\n        return String(this.queryIdCounter++);\n    };\n    QueryManager.prototype.generateRequestId = function() {\n        return this.requestIdCounter++;\n    };\n    QueryManager.prototype.generateMutationId = function() {\n        return String(this.mutationIdCounter++);\n    };\n    QueryManager.prototype.stopQueryInStore = function(queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function(queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo) queryInfo.stop();\n    };\n    QueryManager.prototype.clearStore = function(options) {\n        if (options === void 0) {\n            options = {\n                discardWatches: true\n            };\n        }\n        // Before we have sent the reset action to the store, we can no longer\n        // rely on the results returned by in-flight requests since these may\n        // depend on values that previously existed in the data portion of the\n        // store. So, we cancel the promises and observers that we have issued\n        // so far and not yet resolved (in the case of queries).\n        this.cancelPendingFetches((0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(32));\n        this.queries.forEach(function(queryInfo) {\n            if (queryInfo.observableQuery) {\n                // Set loading to true so listeners don't trigger unless they want\n                // results with partial data.\n                queryInfo.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_18__.NetworkStatus.loading;\n            } else {\n                queryInfo.stop();\n            }\n        });\n        if (this.mutationStore) {\n            this.mutationStore = Object.create(null);\n        }\n        // begin removing data from the store\n        return this.cache.reset(options);\n    };\n    QueryManager.prototype.getObservableQueries = function(include) {\n        var _this = this;\n        if (include === void 0) {\n            include = \"active\";\n        }\n        var queries = new Map();\n        var queryNamesAndDocs = new Map();\n        var legacyQueryOptions = new Set();\n        if (Array.isArray(include)) {\n            include.forEach(function(desc) {\n                if (typeof desc === \"string\") {\n                    queryNamesAndDocs.set(desc, false);\n                } else if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_19__.isDocumentNode)(desc)) {\n                    queryNamesAndDocs.set(_this.transform(desc), false);\n                } else if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_20__.isNonNullObject)(desc) && desc.query) {\n                    legacyQueryOptions.add(desc);\n                }\n            });\n        }\n        this.queries.forEach(function(_a, queryId) {\n            var oq = _a.observableQuery, document = _a.document;\n            if (oq) {\n                if (include === \"all\") {\n                    queries.set(queryId, oq);\n                    return;\n                }\n                var queryName = oq.queryName, fetchPolicy = oq.options.fetchPolicy;\n                if (fetchPolicy === \"standby\" || include === \"active\" && !oq.hasObservers()) {\n                    return;\n                }\n                if (include === \"active\" || queryName && queryNamesAndDocs.has(queryName) || document && queryNamesAndDocs.has(document)) {\n                    queries.set(queryId, oq);\n                    if (queryName) queryNamesAndDocs.set(queryName, true);\n                    if (document) queryNamesAndDocs.set(document, true);\n                }\n            }\n        });\n        if (legacyQueryOptions.size) {\n            legacyQueryOptions.forEach(function(options) {\n                // We will be issuing a fresh network request for this query, so we\n                // pre-allocate a new query ID here, using a special prefix to enable\n                // cleaning up these temporary queries later, after fetching.\n                var queryId = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_21__.makeUniqueId)(\"legacyOneTimeQuery\");\n                var queryInfo = _this.getQuery(queryId).init({\n                    document: options.query,\n                    variables: options.variables\n                });\n                var oq = new _ObservableQuery_js__WEBPACK_IMPORTED_MODULE_17__.ObservableQuery({\n                    queryManager: _this,\n                    queryInfo: queryInfo,\n                    options: (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, options), {\n                        fetchPolicy: \"network-only\"\n                    })\n                });\n                (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(oq.queryId === queryId);\n                queryInfo.setObservableQuery(oq);\n                queries.set(queryId, oq);\n            });\n        }\n        if (globalThis.__DEV__ !== false && queryNamesAndDocs.size) {\n            queryNamesAndDocs.forEach(function(included, nameOrDoc) {\n                if (!included) {\n                    globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(typeof nameOrDoc === \"string\" ? 33 : 34, nameOrDoc);\n                }\n            });\n        }\n        return queries;\n    };\n    QueryManager.prototype.reFetchObservableQueries = function(includeStandby) {\n        var _this = this;\n        if (includeStandby === void 0) {\n            includeStandby = false;\n        }\n        var observableQueryPromises = [];\n        this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function(observableQuery, queryId) {\n            var fetchPolicy = observableQuery.options.fetchPolicy;\n            observableQuery.resetLastResults();\n            if (includeStandby || fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\") {\n                observableQueryPromises.push(observableQuery.refetch());\n            }\n            _this.getQuery(queryId).setDiff(null);\n        });\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.setObservableQuery = function(observableQuery) {\n        this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n    };\n    QueryManager.prototype.startGraphQLSubscription = function(_a) {\n        var _this = this;\n        var query = _a.query, fetchPolicy = _a.fetchPolicy, _b = _a.errorPolicy, errorPolicy = _b === void 0 ? \"none\" : _b, variables = _a.variables, _c = _a.context, context = _c === void 0 ? {} : _c;\n        query = this.transform(query);\n        variables = this.getVariables(query, variables);\n        var makeObservable = function(variables) {\n            return _this.getObservableFromLink(query, context, variables).map(function(result) {\n                if (fetchPolicy !== \"no-cache\") {\n                    // the subscription interface should handle not sending us results we no longer subscribe to.\n                    // XXX I don't think we ever send in an object with errors, but we might in the future...\n                    if ((0,_QueryInfo_js__WEBPACK_IMPORTED_MODULE_11__.shouldWriteResult)(result, errorPolicy)) {\n                        _this.cache.write({\n                            query: query,\n                            result: result.data,\n                            dataId: \"ROOT_SUBSCRIPTION\",\n                            variables: variables\n                        });\n                    }\n                    _this.broadcastQueries();\n                }\n                var hasErrors = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.graphQLResultHasError)(result);\n                var hasProtocolErrors = (0,_errors_index_js__WEBPACK_IMPORTED_MODULE_10__.graphQLResultHasProtocolErrors)(result);\n                if (hasErrors || hasProtocolErrors) {\n                    var errors = {};\n                    if (hasErrors) {\n                        errors.graphQLErrors = result.errors;\n                    }\n                    if (hasProtocolErrors) {\n                        errors.protocolErrors = result.extensions[_errors_index_js__WEBPACK_IMPORTED_MODULE_10__.PROTOCOL_ERRORS_SYMBOL];\n                    }\n                    // `errorPolicy` is a mechanism for handling GraphQL errors, according\n                    // to our documentation, so we throw protocol errors regardless of the\n                    // set error policy.\n                    if (errorPolicy === \"none\" || hasProtocolErrors) {\n                        throw new _errors_index_js__WEBPACK_IMPORTED_MODULE_10__.ApolloError(errors);\n                    }\n                }\n                if (errorPolicy === \"ignore\") {\n                    delete result.errors;\n                }\n                return result;\n            });\n        };\n        if (this.getDocumentInfo(query).hasClientExports) {\n            var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n            return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_22__.Observable(function(observer) {\n                var sub = null;\n                observablePromise_1.then(function(observable) {\n                    return sub = observable.subscribe(observer);\n                }, observer.error);\n                return function() {\n                    return sub && sub.unsubscribe();\n                };\n            });\n        }\n        return makeObservable(variables);\n    };\n    QueryManager.prototype.stopQuery = function(queryId) {\n        this.stopQueryNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryNoBroadcast = function(queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function(queryId) {\n        // teardown all links\n        // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n        // that each add their reject functions to fetchCancelFns.\n        // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n        // The same queryId could have two rejection fns for two promises\n        this.fetchCancelFns.delete(queryId);\n        if (this.queries.has(queryId)) {\n            this.getQuery(queryId).stop();\n            this.queries.delete(queryId);\n        }\n    };\n    QueryManager.prototype.broadcastQueries = function() {\n        if (this.onBroadcast) this.onBroadcast();\n        this.queries.forEach(function(info) {\n            return info.notify();\n        });\n    };\n    QueryManager.prototype.getLocalState = function() {\n        return this.localState;\n    };\n    QueryManager.prototype.getObservableFromLink = function(query, context, variables, // Prefer context.queryDeduplication if specified.\n    deduplication) {\n        var _this = this;\n        var _a;\n        if (deduplication === void 0) {\n            deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication;\n        }\n        var observable;\n        var _b = this.getDocumentInfo(query), serverQuery = _b.serverQuery, clientQuery = _b.clientQuery;\n        if (serverQuery) {\n            var _c = this, inFlightLinkObservables_1 = _c.inFlightLinkObservables, link = _c.link;\n            var operation = {\n                query: serverQuery,\n                variables: variables,\n                operationName: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.getOperationName)(serverQuery) || void 0,\n                context: this.prepareContext((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, context), {\n                    forceFetch: !deduplication\n                }))\n            };\n            context = operation.context;\n            if (deduplication) {\n                var printedServerQuery_1 = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_23__.print)(serverQuery);\n                var varJson_1 = (0,_cache_index_js__WEBPACK_IMPORTED_MODULE_24__.canonicalStringify)(variables);\n                var entry = inFlightLinkObservables_1.lookup(printedServerQuery_1, varJson_1);\n                observable = entry.observable;\n                if (!observable) {\n                    var concast = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_25__.Concast([\n                        (0,_link_core_index_js__WEBPACK_IMPORTED_MODULE_26__.execute)(link, operation)\n                    ]);\n                    observable = entry.observable = concast;\n                    concast.beforeNext(function() {\n                        inFlightLinkObservables_1.remove(printedServerQuery_1, varJson_1);\n                    });\n                }\n            } else {\n                observable = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_25__.Concast([\n                    (0,_link_core_index_js__WEBPACK_IMPORTED_MODULE_26__.execute)(link, operation)\n                ]);\n            }\n        } else {\n            observable = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_25__.Concast([\n                _utilities_index_js__WEBPACK_IMPORTED_MODULE_22__.Observable.of({\n                    data: {}\n                })\n            ]);\n            context = this.prepareContext(context);\n        }\n        if (clientQuery) {\n            observable = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.asyncMap)(observable, function(result) {\n                return _this.localState.runResolvers({\n                    document: clientQuery,\n                    remoteResult: result,\n                    context: context,\n                    variables: variables\n                });\n            });\n        }\n        return observable;\n    };\n    QueryManager.prototype.getResultsFromLink = function(queryInfo, cacheWriteBehavior, options) {\n        var requestId = queryInfo.lastRequestId = this.generateRequestId();\n        // Performing transformForLink here gives this.cache a chance to fill in\n        // missing fragment definitions (for example) before sending this document\n        // through the link chain.\n        var linkDocument = this.cache.transformForLink(options.query);\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.asyncMap)(this.getObservableFromLink(linkDocument, options.context, options.variables), function(result) {\n            var graphQLErrors = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.getGraphQLErrorsFromResult)(result);\n            var hasErrors = graphQLErrors.length > 0;\n            // If we interrupted this request by calling getResultsFromLink again\n            // with the same QueryInfo object, we ignore the old results.\n            if (requestId >= queryInfo.lastRequestId) {\n                if (hasErrors && options.errorPolicy === \"none\") {\n                    // Throwing here effectively calls observer.error.\n                    throw queryInfo.markError(new _errors_index_js__WEBPACK_IMPORTED_MODULE_10__.ApolloError({\n                        graphQLErrors: graphQLErrors\n                    }));\n                }\n                // Use linkDocument rather than queryInfo.document so the\n                // operation/fragments used to write the result are the same as the\n                // ones used to obtain it from the link.\n                result = queryInfo.markResult(result, linkDocument, options, cacheWriteBehavior);\n                queryInfo.markReady();\n            }\n            var aqr = {\n                data: result.data,\n                loading: false,\n                networkStatus: _networkStatus_js__WEBPACK_IMPORTED_MODULE_18__.NetworkStatus.ready\n            };\n            if (hasErrors && options.errorPolicy !== \"ignore\") {\n                aqr.errors = graphQLErrors;\n                aqr.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_18__.NetworkStatus.error;\n            }\n            return aqr;\n        }, function(networkError) {\n            var error = (0,_errors_index_js__WEBPACK_IMPORTED_MODULE_10__.isApolloError)(networkError) ? networkError : new _errors_index_js__WEBPACK_IMPORTED_MODULE_10__.ApolloError({\n                networkError: networkError\n            });\n            // Avoid storing errors from older interrupted queries.\n            if (requestId >= queryInfo.lastRequestId) {\n                queryInfo.markError(error);\n            }\n            throw error;\n        });\n    };\n    QueryManager.prototype.fetchConcastWithInfo = function(queryId, options, // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus, query) {\n        var _this = this;\n        if (networkStatus === void 0) {\n            networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_18__.NetworkStatus.loading;\n        }\n        if (query === void 0) {\n            query = options.query;\n        }\n        var variables = this.getVariables(query, options.variables);\n        var queryInfo = this.getQuery(queryId);\n        var defaults = this.defaultOptions.watchQuery;\n        var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? defaults && defaults.fetchPolicy || \"cache-first\" : _a, _b = options.errorPolicy, errorPolicy = _b === void 0 ? defaults && defaults.errorPolicy || \"none\" : _b, _c = options.returnPartialData, returnPartialData = _c === void 0 ? false : _c, _d = options.notifyOnNetworkStatusChange, notifyOnNetworkStatusChange = _d === void 0 ? false : _d, _e = options.context, context = _e === void 0 ? {} : _e;\n        var normalized = Object.assign({}, options, {\n            query: query,\n            variables: variables,\n            fetchPolicy: fetchPolicy,\n            errorPolicy: errorPolicy,\n            returnPartialData: returnPartialData,\n            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n            context: context\n        });\n        var fromVariables = function(variables) {\n            // Since normalized is always a fresh copy of options, it's safe to\n            // modify its properties here, rather than creating yet another new\n            // WatchQueryOptions object.\n            normalized.variables = variables;\n            var sourcesWithInfo = _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n            if (// If we're in standby, postpone advancing options.fetchPolicy using\n            // applyNextFetchPolicy.\n            normalized.fetchPolicy !== \"standby\" && // The \"standby\" policy currently returns [] from fetchQueryByPolicy, so\n            // this is another way to detect when nothing was done/fetched.\n            sourcesWithInfo.sources.length > 0 && queryInfo.observableQuery) {\n                queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n            }\n            return sourcesWithInfo;\n        };\n        // This cancel function needs to be set before the concast is created,\n        // in case concast creation synchronously cancels the request.\n        var cleanupCancelFn = function() {\n            return _this.fetchCancelFns.delete(queryId);\n        };\n        this.fetchCancelFns.set(queryId, function(reason) {\n            cleanupCancelFn();\n            // This delay ensures the concast variable has been initialized.\n            setTimeout(function() {\n                return concast.cancel(reason);\n            });\n        });\n        var concast, containsDataFromLink;\n        // If the query has @export(as: ...) directives, then we need to\n        // process those directives asynchronously. When there are no\n        // @export directives (the common case), we deliberately avoid\n        // wrapping the result of this.fetchQueryByPolicy in a Promise,\n        // since the timing of result delivery is (unfortunately) important\n        // for backwards compatibility. TODO This code could be simpler if\n        // we deprecated and removed LocalState.\n        if (this.getDocumentInfo(normalized.query).hasClientExports) {\n            concast = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_25__.Concast(this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables).then(function(sourcesWithInfo) {\n                return sourcesWithInfo.sources;\n            }));\n            // there is just no way we can synchronously get the *right* value here,\n            // so we will assume `true`, which is the behaviour before the bug fix in\n            // #10597. This means that bug is not fixed in that case, and is probably\n            // un-fixable with reasonable effort for the edge case of @export as\n            // directives.\n            containsDataFromLink = true;\n        } else {\n            var sourcesWithInfo = fromVariables(normalized.variables);\n            containsDataFromLink = sourcesWithInfo.fromLink;\n            concast = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_25__.Concast(sourcesWithInfo.sources);\n        }\n        concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n        return {\n            concast: concast,\n            fromLink: containsDataFromLink\n        };\n    };\n    QueryManager.prototype.refetchQueries = function(_a) {\n        var _this = this;\n        var updateCache = _a.updateCache, include = _a.include, _b = _a.optimistic, optimistic = _b === void 0 ? false : _b, _c = _a.removeOptimistic, removeOptimistic = _c === void 0 ? optimistic ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_21__.makeUniqueId)(\"refetchQueries\") : void 0 : _c, onQueryUpdated = _a.onQueryUpdated;\n        var includedQueriesById = new Map();\n        if (include) {\n            this.getObservableQueries(include).forEach(function(oq, queryId) {\n                includedQueriesById.set(queryId, {\n                    oq: oq,\n                    lastDiff: _this.getQuery(queryId).getDiff()\n                });\n            });\n        }\n        var results = new Map();\n        if (updateCache) {\n            this.cache.batch({\n                update: updateCache,\n                // Since you can perform any combination of cache reads and/or writes in\n                // the cache.batch update function, its optimistic option can be either\n                // a boolean or a string, representing three distinct modes of\n                // operation:\n                //\n                // * false: read/write only the root layer\n                // * true: read/write the topmost layer\n                // * string: read/write a fresh optimistic layer with that ID string\n                //\n                // When typeof optimistic === \"string\", a new optimistic layer will be\n                // temporarily created within cache.batch with that string as its ID. If\n                // we then pass that same string as the removeOptimistic option, we can\n                // make cache.batch immediately remove the optimistic layer after\n                // running the updateCache function, triggering only one broadcast.\n                //\n                // However, the refetchQueries method accepts only true or false for its\n                // optimistic option (not string). We interpret true to mean a temporary\n                // optimistic layer should be created, to allow efficiently rolling back\n                // the effect of the updateCache function, which involves passing a\n                // string instead of true as the optimistic option to cache.batch, when\n                // refetchQueries receives optimistic: true.\n                //\n                // In other words, we are deliberately not supporting the use case of\n                // writing to an *existing* optimistic layer (using the refetchQueries\n                // updateCache function), since that would potentially interfere with\n                // other optimistic updates in progress. Instead, you can read/write\n                // only the root layer by passing optimistic: false to refetchQueries,\n                // or you can read/write a brand new optimistic layer that will be\n                // automatically removed by passing optimistic: true.\n                optimistic: optimistic && removeOptimistic || false,\n                // The removeOptimistic option can also be provided by itself, even if\n                // optimistic === false, to remove some previously-added optimistic\n                // layer safely and efficiently, like we do in markMutationResult.\n                //\n                // If an explicit removeOptimistic string is provided with optimistic:\n                // true, the removeOptimistic string will determine the ID of the\n                // temporary optimistic layer, in case that ever matters.\n                removeOptimistic: removeOptimistic,\n                onWatchUpdated: function(watch, diff, lastDiff) {\n                    var oq = watch.watcher instanceof _QueryInfo_js__WEBPACK_IMPORTED_MODULE_11__.QueryInfo && watch.watcher.observableQuery;\n                    if (oq) {\n                        if (onQueryUpdated) {\n                            // Since we're about to handle this query now, remove it from\n                            // includedQueriesById, in case it was added earlier because of\n                            // options.include.\n                            includedQueriesById.delete(oq.queryId);\n                            var result = onQueryUpdated(oq, diff, lastDiff);\n                            if (result === true) {\n                                // The onQueryUpdated function requested the default refetching\n                                // behavior by returning true.\n                                result = oq.refetch();\n                            }\n                            // Record the result in the results Map, as long as onQueryUpdated\n                            // did not return false to skip/ignore this result.\n                            if (result !== false) {\n                                results.set(oq, result);\n                            }\n                            // Allow the default cache broadcast to happen, except when\n                            // onQueryUpdated returns false.\n                            return result;\n                        }\n                        if (onQueryUpdated !== null) {\n                            // If we don't have an onQueryUpdated function, and onQueryUpdated\n                            // was not disabled by passing null, make sure this query is\n                            // \"included\" like any other options.include-specified query.\n                            includedQueriesById.set(oq.queryId, {\n                                oq: oq,\n                                lastDiff: lastDiff,\n                                diff: diff\n                            });\n                        }\n                    }\n                }\n            });\n        }\n        if (includedQueriesById.size) {\n            includedQueriesById.forEach(function(_a, queryId) {\n                var oq = _a.oq, lastDiff = _a.lastDiff, diff = _a.diff;\n                var result;\n                // If onQueryUpdated is provided, we want to use it for all included\n                // queries, even the QueryOptions ones.\n                if (onQueryUpdated) {\n                    if (!diff) {\n                        var info = oq[\"queryInfo\"];\n                        info.reset(); // Force info.getDiff() to read from cache.\n                        diff = info.getDiff();\n                    }\n                    result = onQueryUpdated(oq, diff, lastDiff);\n                }\n                // Otherwise, we fall back to refetching.\n                if (!onQueryUpdated || result === true) {\n                    result = oq.refetch();\n                }\n                if (result !== false) {\n                    results.set(oq, result);\n                }\n                if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n                    _this.stopQueryNoBroadcast(queryId);\n                }\n            });\n        }\n        if (removeOptimistic) {\n            // In case no updateCache callback was provided (so cache.batch was not\n            // called above, and thus did not already remove the optimistic layer),\n            // remove it here. Since this is a no-op when the layer has already been\n            // removed, we do it even if we called cache.batch above, since it's\n            // possible this.cache is an instance of some ApolloCache subclass other\n            // than InMemoryCache, and does not fully support the removeOptimistic\n            // option for cache.batch.\n            this.cache.removeOptimistic(removeOptimistic);\n        }\n        return results;\n    };\n    QueryManager.prototype.fetchQueryByPolicy = function(queryInfo, _a, // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus) {\n        var _this = this;\n        var query = _a.query, variables = _a.variables, fetchPolicy = _a.fetchPolicy, refetchWritePolicy = _a.refetchWritePolicy, errorPolicy = _a.errorPolicy, returnPartialData = _a.returnPartialData, context = _a.context, notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n        var oldNetworkStatus = queryInfo.networkStatus;\n        queryInfo.init({\n            document: query,\n            variables: variables,\n            networkStatus: networkStatus\n        });\n        var readCache = function() {\n            return queryInfo.getDiff();\n        };\n        var resultsFromCache = function(diff, networkStatus) {\n            if (networkStatus === void 0) {\n                networkStatus = queryInfo.networkStatus || _networkStatus_js__WEBPACK_IMPORTED_MODULE_18__.NetworkStatus.loading;\n            }\n            var data = diff.result;\n            if (globalThis.__DEV__ !== false && !returnPartialData && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(data, {})) {\n                (0,_ObservableQuery_js__WEBPACK_IMPORTED_MODULE_17__.logMissingFieldErrors)(diff.missing);\n            }\n            var fromData = function(data) {\n                return _utilities_index_js__WEBPACK_IMPORTED_MODULE_22__.Observable.of((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({\n                    data: data,\n                    loading: (0,_networkStatus_js__WEBPACK_IMPORTED_MODULE_18__.isNetworkRequestInFlight)(networkStatus),\n                    networkStatus: networkStatus\n                }, diff.complete ? null : {\n                    partial: true\n                }));\n            };\n            if (data && _this.getDocumentInfo(query).hasForcedResolvers) {\n                return _this.localState.runResolvers({\n                    document: query,\n                    remoteResult: {\n                        data: data\n                    },\n                    context: context,\n                    variables: variables,\n                    onlyRunForcedResolvers: true\n                }).then(function(resolved) {\n                    return fromData(resolved.data || void 0);\n                });\n            }\n            // Resolves https://github.com/apollographql/apollo-client/issues/10317.\n            // If errorPolicy is 'none' and notifyOnNetworkStatusChange is true,\n            // data was incorrectly returned from the cache on refetch:\n            // if diff.missing exists, we should not return cache data.\n            if (errorPolicy === \"none\" && networkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_18__.NetworkStatus.refetch && Array.isArray(diff.missing)) {\n                return fromData(void 0);\n            }\n            return fromData(data);\n        };\n        var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 /* CacheWriteBehavior.FORBID */  : networkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_18__.NetworkStatus.refetch && refetchWritePolicy !== \"merge\" ? 1 /* CacheWriteBehavior.OVERWRITE */  : 2 /* CacheWriteBehavior.MERGE */ ;\n        var resultsFromLink = function() {\n            return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n                query: query,\n                variables: variables,\n                context: context,\n                fetchPolicy: fetchPolicy,\n                errorPolicy: errorPolicy\n            });\n        };\n        var shouldNotify = notifyOnNetworkStatusChange && typeof oldNetworkStatus === \"number\" && oldNetworkStatus !== networkStatus && (0,_networkStatus_js__WEBPACK_IMPORTED_MODULE_18__.isNetworkRequestInFlight)(networkStatus);\n        switch(fetchPolicy){\n            default:\n            case \"cache-first\":\n                {\n                    var diff = readCache();\n                    if (diff.complete) {\n                        return {\n                            fromLink: false,\n                            sources: [\n                                resultsFromCache(diff, queryInfo.markReady())\n                            ]\n                        };\n                    }\n                    if (returnPartialData || shouldNotify) {\n                        return {\n                            fromLink: true,\n                            sources: [\n                                resultsFromCache(diff),\n                                resultsFromLink()\n                            ]\n                        };\n                    }\n                    return {\n                        fromLink: true,\n                        sources: [\n                            resultsFromLink()\n                        ]\n                    };\n                }\n            case \"cache-and-network\":\n                {\n                    var diff = readCache();\n                    if (diff.complete || returnPartialData || shouldNotify) {\n                        return {\n                            fromLink: true,\n                            sources: [\n                                resultsFromCache(diff),\n                                resultsFromLink()\n                            ]\n                        };\n                    }\n                    return {\n                        fromLink: true,\n                        sources: [\n                            resultsFromLink()\n                        ]\n                    };\n                }\n            case \"cache-only\":\n                return {\n                    fromLink: false,\n                    sources: [\n                        resultsFromCache(readCache(), queryInfo.markReady())\n                    ]\n                };\n            case \"network-only\":\n                if (shouldNotify) {\n                    return {\n                        fromLink: true,\n                        sources: [\n                            resultsFromCache(readCache()),\n                            resultsFromLink()\n                        ]\n                    };\n                }\n                return {\n                    fromLink: true,\n                    sources: [\n                        resultsFromLink()\n                    ]\n                };\n            case \"no-cache\":\n                if (shouldNotify) {\n                    return {\n                        fromLink: true,\n                        // Note that queryInfo.getDiff() for no-cache queries does not call\n                        // cache.diff, but instead returns a { complete: false } stub result\n                        // when there is no queryInfo.diff already defined.\n                        sources: [\n                            resultsFromCache(queryInfo.getDiff()),\n                            resultsFromLink()\n                        ]\n                    };\n                }\n                return {\n                    fromLink: true,\n                    sources: [\n                        resultsFromLink()\n                    ]\n                };\n            case \"standby\":\n                return {\n                    fromLink: false,\n                    sources: []\n                };\n        }\n    };\n    QueryManager.prototype.getQuery = function(queryId) {\n        if (queryId && !this.queries.has(queryId)) {\n            this.queries.set(queryId, new _QueryInfo_js__WEBPACK_IMPORTED_MODULE_11__.QueryInfo(this, queryId));\n        }\n        return this.queries.get(queryId);\n    };\n    QueryManager.prototype.prepareContext = function(context) {\n        if (context === void 0) {\n            context = {};\n        }\n        var newContext = this.localState.prepareContext(context);\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, this.defaultContext), newContext), {\n            clientAwareness: this.clientAwareness\n        });\n    };\n    return QueryManager;\n}();\n //# sourceMappingURL=QueryManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/QueryManager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/equalByQuery.js":
/*!**********************************************************!*\
  !*** ./node_modules/@apollo/client/core/equalByQuery.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   equalByQuery: () => (/* binding */ equalByQuery)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n\n\n\n// Returns true if aResult and bResult are deeply equal according to the fields\n// selected by the given query, ignoring any fields marked as @nonreactive.\nfunction equalByQuery(query, _a, _b, variables) {\n    var aData = _a.data, aRest = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__rest)(_a, [\n        \"data\"\n    ]);\n    var bData = _b.data, bRest = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__rest)(_b, [\n        \"data\"\n    ]);\n    return (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(aRest, bRest) && equalBySelectionSet((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.getMainDefinition)(query).selectionSet, aData, bData, {\n        fragmentMap: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.createFragmentMap)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.getFragmentDefinitions)(query)),\n        variables: variables\n    });\n}\nfunction equalBySelectionSet(selectionSet, aResult, bResult, context) {\n    if (aResult === bResult) {\n        return true;\n    }\n    var seenSelections = new Set();\n    // Returning true from this Array.prototype.every callback function skips the\n    // current field/subtree. Returning false aborts the entire traversal\n    // immediately, causing equalBySelectionSet to return false.\n    return selectionSet.selections.every(function(selection) {\n        // Avoid re-processing the same selection at the same level of recursion, in\n        // case the same field gets included via multiple indirect fragment spreads.\n        if (seenSelections.has(selection)) return true;\n        seenSelections.add(selection);\n        // Ignore @skip(if: true) and @include(if: false) fields.\n        if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.shouldInclude)(selection, context.variables)) return true;\n        // If the field or (named) fragment spread has a @nonreactive directive on\n        // it, we don't care if it's different, so we pretend it's the same.\n        if (selectionHasNonreactiveDirective(selection)) return true;\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isField)(selection)) {\n            var resultKey = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.resultKeyNameFromField)(selection);\n            var aResultChild = aResult && aResult[resultKey];\n            var bResultChild = bResult && bResult[resultKey];\n            var childSelectionSet = selection.selectionSet;\n            if (!childSelectionSet) {\n                // These are scalar values, so we can compare them with deep equal\n                // without redoing the main recursive work.\n                return (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(aResultChild, bResultChild);\n            }\n            var aChildIsArray = Array.isArray(aResultChild);\n            var bChildIsArray = Array.isArray(bResultChild);\n            if (aChildIsArray !== bChildIsArray) return false;\n            if (aChildIsArray && bChildIsArray) {\n                var length_1 = aResultChild.length;\n                if (bResultChild.length !== length_1) {\n                    return false;\n                }\n                for(var i = 0; i < length_1; ++i){\n                    if (!equalBySelectionSet(childSelectionSet, aResultChild[i], bResultChild[i], context)) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return equalBySelectionSet(childSelectionSet, aResultChild, bResultChild, context);\n        } else {\n            var fragment = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.getFragmentFromSelection)(selection, context.fragmentMap);\n            if (fragment) {\n                // The fragment might === selection if it's an inline fragment, but\n                // could be !== if it's a named fragment ...spread.\n                if (selectionHasNonreactiveDirective(fragment)) return true;\n                return equalBySelectionSet(fragment.selectionSet, // Notice that we reuse the same aResult and bResult values here,\n                // since the fragment ...spread does not specify a field name, but\n                // consists of multiple fields (within the fragment's selection set)\n                // that should be applied to the current result value(s).\n                aResult, bResult, context);\n            }\n        }\n    });\n}\nfunction selectionHasNonreactiveDirective(selection) {\n    return !!selection.directives && selection.directives.some(directiveIsNonreactive);\n}\nfunction directiveIsNonreactive(dir) {\n    return dir.name.value === \"nonreactive\";\n} //# sourceMappingURL=equalByQuery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/equalByQuery.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/core/networkStatus.js":
/*!***********************************************************!*\
  !*** ./node_modules/@apollo/client/core/networkStatus.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NetworkStatus: () => (/* binding */ NetworkStatus),\n/* harmony export */   isNetworkRequestInFlight: () => (/* binding */ isNetworkRequestInFlight),\n/* harmony export */   isNetworkRequestSettled: () => (/* binding */ isNetworkRequestSettled)\n/* harmony export */ });\n/**\n * The current status of a query’s execution in our system.\n */ var NetworkStatus;\n(function(NetworkStatus) {\n    /**\n     * The query has never been run before and the query is now currently running. A query will still\n     * have this network status even if a partial data result was returned from the cache, but a\n     * query was dispatched anyway.\n     */ NetworkStatus[NetworkStatus[\"loading\"] = 1] = \"loading\";\n    /**\n     * If `setVariables` was called and a query was fired because of that then the network status\n     * will be `setVariables` until the result of that query comes back.\n     */ NetworkStatus[NetworkStatus[\"setVariables\"] = 2] = \"setVariables\";\n    /**\n     * Indicates that `fetchMore` was called on this query and that the query created is currently in\n     * flight.\n     */ NetworkStatus[NetworkStatus[\"fetchMore\"] = 3] = \"fetchMore\";\n    /**\n     * Similar to the `setVariables` network status. It means that `refetch` was called on a query\n     * and the refetch request is currently in flight.\n     */ NetworkStatus[NetworkStatus[\"refetch\"] = 4] = \"refetch\";\n    /**\n     * Indicates that a polling query is currently in flight. So for example if you are polling a\n     * query every 10 seconds then the network status will switch to `poll` every 10 seconds whenever\n     * a poll request has been sent but not resolved.\n     */ NetworkStatus[NetworkStatus[\"poll\"] = 6] = \"poll\";\n    /**\n     * No request is in flight for this query, and no errors happened. Everything is OK.\n     */ NetworkStatus[NetworkStatus[\"ready\"] = 7] = \"ready\";\n    /**\n     * No request is in flight for this query, but one or more errors were detected.\n     */ NetworkStatus[NetworkStatus[\"error\"] = 8] = \"error\";\n})(NetworkStatus || (NetworkStatus = {}));\n/**\n * Returns true if there is currently a network request in flight according to a given network\n * status.\n */ function isNetworkRequestInFlight(networkStatus) {\n    return networkStatus ? networkStatus < 7 : false;\n}\n/**\n * Returns true if the network request is in ready or error state according to a given network\n * status.\n */ function isNetworkRequestSettled(networkStatus) {\n    return networkStatus === 7 || networkStatus === 8;\n} //# sourceMappingURL=networkStatus.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY29yZS9uZXR3b3JrU3RhdHVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztDQUVDLEdBQ00sSUFBSUEsY0FBYztBQUN4QixVQUFVQSxhQUFhO0lBQ3BCOzs7O0tBSUMsR0FDREEsYUFBYSxDQUFDQSxhQUFhLENBQUMsVUFBVSxHQUFHLEVBQUUsR0FBRztJQUM5Qzs7O0tBR0MsR0FDREEsYUFBYSxDQUFDQSxhQUFhLENBQUMsZUFBZSxHQUFHLEVBQUUsR0FBRztJQUNuRDs7O0tBR0MsR0FDREEsYUFBYSxDQUFDQSxhQUFhLENBQUMsWUFBWSxHQUFHLEVBQUUsR0FBRztJQUNoRDs7O0tBR0MsR0FDREEsYUFBYSxDQUFDQSxhQUFhLENBQUMsVUFBVSxHQUFHLEVBQUUsR0FBRztJQUM5Qzs7OztLQUlDLEdBQ0RBLGFBQWEsQ0FBQ0EsYUFBYSxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUc7SUFDM0M7O0tBRUMsR0FDREEsYUFBYSxDQUFDQSxhQUFhLENBQUMsUUFBUSxHQUFHLEVBQUUsR0FBRztJQUM1Qzs7S0FFQyxHQUNEQSxhQUFhLENBQUNBLGFBQWEsQ0FBQyxRQUFRLEdBQUcsRUFBRSxHQUFHO0FBQ2hELEdBQUdBLGlCQUFrQkEsQ0FBQUEsZ0JBQWdCLENBQUM7QUFDdEM7OztDQUdDLEdBQ00sU0FBU0MseUJBQXlCQyxhQUFhO0lBQ2xELE9BQU9BLGdCQUFnQkEsZ0JBQWdCLElBQUk7QUFDL0M7QUFDQTs7O0NBR0MsR0FDTSxTQUFTQyx3QkFBd0JELGFBQWE7SUFDakQsT0FBT0Esa0JBQWtCLEtBQUtBLGtCQUFrQjtBQUNwRCxFQUNBLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9jb3JlL25ldHdvcmtTdGF0dXMuanM/MDJkMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBjdXJyZW50IHN0YXR1cyBvZiBhIHF1ZXJ54oCZcyBleGVjdXRpb24gaW4gb3VyIHN5c3RlbS5cbiAqL1xuZXhwb3J0IHZhciBOZXR3b3JrU3RhdHVzO1xuKGZ1bmN0aW9uIChOZXR3b3JrU3RhdHVzKSB7XG4gICAgLyoqXG4gICAgICogVGhlIHF1ZXJ5IGhhcyBuZXZlciBiZWVuIHJ1biBiZWZvcmUgYW5kIHRoZSBxdWVyeSBpcyBub3cgY3VycmVudGx5IHJ1bm5pbmcuIEEgcXVlcnkgd2lsbCBzdGlsbFxuICAgICAqIGhhdmUgdGhpcyBuZXR3b3JrIHN0YXR1cyBldmVuIGlmIGEgcGFydGlhbCBkYXRhIHJlc3VsdCB3YXMgcmV0dXJuZWQgZnJvbSB0aGUgY2FjaGUsIGJ1dCBhXG4gICAgICogcXVlcnkgd2FzIGRpc3BhdGNoZWQgYW55d2F5LlxuICAgICAqL1xuICAgIE5ldHdvcmtTdGF0dXNbTmV0d29ya1N0YXR1c1tcImxvYWRpbmdcIl0gPSAxXSA9IFwibG9hZGluZ1wiO1xuICAgIC8qKlxuICAgICAqIElmIGBzZXRWYXJpYWJsZXNgIHdhcyBjYWxsZWQgYW5kIGEgcXVlcnkgd2FzIGZpcmVkIGJlY2F1c2Ugb2YgdGhhdCB0aGVuIHRoZSBuZXR3b3JrIHN0YXR1c1xuICAgICAqIHdpbGwgYmUgYHNldFZhcmlhYmxlc2AgdW50aWwgdGhlIHJlc3VsdCBvZiB0aGF0IHF1ZXJ5IGNvbWVzIGJhY2suXG4gICAgICovXG4gICAgTmV0d29ya1N0YXR1c1tOZXR3b3JrU3RhdHVzW1wic2V0VmFyaWFibGVzXCJdID0gMl0gPSBcInNldFZhcmlhYmxlc1wiO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGF0IGBmZXRjaE1vcmVgIHdhcyBjYWxsZWQgb24gdGhpcyBxdWVyeSBhbmQgdGhhdCB0aGUgcXVlcnkgY3JlYXRlZCBpcyBjdXJyZW50bHkgaW5cbiAgICAgKiBmbGlnaHQuXG4gICAgICovXG4gICAgTmV0d29ya1N0YXR1c1tOZXR3b3JrU3RhdHVzW1wiZmV0Y2hNb3JlXCJdID0gM10gPSBcImZldGNoTW9yZVwiO1xuICAgIC8qKlxuICAgICAqIFNpbWlsYXIgdG8gdGhlIGBzZXRWYXJpYWJsZXNgIG5ldHdvcmsgc3RhdHVzLiBJdCBtZWFucyB0aGF0IGByZWZldGNoYCB3YXMgY2FsbGVkIG9uIGEgcXVlcnlcbiAgICAgKiBhbmQgdGhlIHJlZmV0Y2ggcmVxdWVzdCBpcyBjdXJyZW50bHkgaW4gZmxpZ2h0LlxuICAgICAqL1xuICAgIE5ldHdvcmtTdGF0dXNbTmV0d29ya1N0YXR1c1tcInJlZmV0Y2hcIl0gPSA0XSA9IFwicmVmZXRjaFwiO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGF0IGEgcG9sbGluZyBxdWVyeSBpcyBjdXJyZW50bHkgaW4gZmxpZ2h0LiBTbyBmb3IgZXhhbXBsZSBpZiB5b3UgYXJlIHBvbGxpbmcgYVxuICAgICAqIHF1ZXJ5IGV2ZXJ5IDEwIHNlY29uZHMgdGhlbiB0aGUgbmV0d29yayBzdGF0dXMgd2lsbCBzd2l0Y2ggdG8gYHBvbGxgIGV2ZXJ5IDEwIHNlY29uZHMgd2hlbmV2ZXJcbiAgICAgKiBhIHBvbGwgcmVxdWVzdCBoYXMgYmVlbiBzZW50IGJ1dCBub3QgcmVzb2x2ZWQuXG4gICAgICovXG4gICAgTmV0d29ya1N0YXR1c1tOZXR3b3JrU3RhdHVzW1wicG9sbFwiXSA9IDZdID0gXCJwb2xsXCI7XG4gICAgLyoqXG4gICAgICogTm8gcmVxdWVzdCBpcyBpbiBmbGlnaHQgZm9yIHRoaXMgcXVlcnksIGFuZCBubyBlcnJvcnMgaGFwcGVuZWQuIEV2ZXJ5dGhpbmcgaXMgT0suXG4gICAgICovXG4gICAgTmV0d29ya1N0YXR1c1tOZXR3b3JrU3RhdHVzW1wicmVhZHlcIl0gPSA3XSA9IFwicmVhZHlcIjtcbiAgICAvKipcbiAgICAgKiBObyByZXF1ZXN0IGlzIGluIGZsaWdodCBmb3IgdGhpcyBxdWVyeSwgYnV0IG9uZSBvciBtb3JlIGVycm9ycyB3ZXJlIGRldGVjdGVkLlxuICAgICAqL1xuICAgIE5ldHdvcmtTdGF0dXNbTmV0d29ya1N0YXR1c1tcImVycm9yXCJdID0gOF0gPSBcImVycm9yXCI7XG59KShOZXR3b3JrU3RhdHVzIHx8IChOZXR3b3JrU3RhdHVzID0ge30pKTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZXJlIGlzIGN1cnJlbnRseSBhIG5ldHdvcmsgcmVxdWVzdCBpbiBmbGlnaHQgYWNjb3JkaW5nIHRvIGEgZ2l2ZW4gbmV0d29ya1xuICogc3RhdHVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNOZXR3b3JrUmVxdWVzdEluRmxpZ2h0KG5ldHdvcmtTdGF0dXMpIHtcbiAgICByZXR1cm4gbmV0d29ya1N0YXR1cyA/IG5ldHdvcmtTdGF0dXMgPCA3IDogZmFsc2U7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgbmV0d29yayByZXF1ZXN0IGlzIGluIHJlYWR5IG9yIGVycm9yIHN0YXRlIGFjY29yZGluZyB0byBhIGdpdmVuIG5ldHdvcmtcbiAqIHN0YXR1cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTmV0d29ya1JlcXVlc3RTZXR0bGVkKG5ldHdvcmtTdGF0dXMpIHtcbiAgICByZXR1cm4gbmV0d29ya1N0YXR1cyA9PT0gNyB8fCBuZXR3b3JrU3RhdHVzID09PSA4O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmV0d29ya1N0YXR1cy5qcy5tYXAiXSwibmFtZXMiOlsiTmV0d29ya1N0YXR1cyIsImlzTmV0d29ya1JlcXVlc3RJbkZsaWdodCIsIm5ldHdvcmtTdGF0dXMiLCJpc05ldHdvcmtSZXF1ZXN0U2V0dGxlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/core/networkStatus.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/errors/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@apollo/client/errors/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloError: () => (/* binding */ ApolloError),\n/* harmony export */   PROTOCOL_ERRORS_SYMBOL: () => (/* binding */ PROTOCOL_ERRORS_SYMBOL),\n/* harmony export */   graphQLResultHasProtocolErrors: () => (/* binding */ graphQLResultHasProtocolErrors),\n/* harmony export */   isApolloError: () => (/* binding */ isApolloError)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n\n\n\n// This Symbol allows us to pass transport-specific errors from the link chain\n// into QueryManager/client internals without risking a naming collision within\n// extensions (which implementers can use as they see fit).\nvar PROTOCOL_ERRORS_SYMBOL = Symbol();\nfunction graphQLResultHasProtocolErrors(result) {\n    if (result.extensions) {\n        return Array.isArray(result.extensions[PROTOCOL_ERRORS_SYMBOL]);\n    }\n    return false;\n}\nfunction isApolloError(err) {\n    return err.hasOwnProperty(\"graphQLErrors\");\n}\n// Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\nvar generateErrorMessage = function(err) {\n    var errors = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], err.graphQLErrors, true), err.clientErrors, true), err.protocolErrors, true);\n    if (err.networkError) errors.push(err.networkError);\n    return errors// The rest of the code sometimes unsafely types non-Error objects as GraphQLErrors\n    .map(function(err) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isNonNullObject)(err) && err.message || \"Error message not found.\";\n    }).join(\"\\n\");\n};\nvar ApolloError = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__extends)(ApolloError, _super);\n    // Constructs an instance of ApolloError given a GraphQLError\n    // or a network error. Note that one of these has to be a valid\n    // value or the constructed error will be meaningless.\n    function ApolloError(_a) {\n        var graphQLErrors = _a.graphQLErrors, protocolErrors = _a.protocolErrors, clientErrors = _a.clientErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;\n        var _this = _super.call(this, errorMessage) || this;\n        _this.name = \"ApolloError\";\n        _this.graphQLErrors = graphQLErrors || [];\n        _this.protocolErrors = protocolErrors || [];\n        _this.clientErrors = clientErrors || [];\n        _this.networkError = networkError || null;\n        _this.message = errorMessage || generateErrorMessage(_this);\n        _this.extraInfo = extraInfo;\n        // We're not using `Object.setPrototypeOf` here as it isn't fully\n        // supported on Android (see issue #3236).\n        _this.__proto__ = ApolloError.prototype;\n        return _this;\n    }\n    return ApolloError;\n}(Error);\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvZXJyb3JzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBaUQ7QUFDVjtBQUNpQjtBQUN4RCw4RUFBOEU7QUFDOUUsK0VBQStFO0FBQy9FLDJEQUEyRDtBQUNwRCxJQUFJRyx5QkFBeUJDLFNBQVM7QUFDdEMsU0FBU0MsK0JBQStCQyxNQUFNO0lBQ2pELElBQUlBLE9BQU9DLFVBQVUsRUFBRTtRQUNuQixPQUFPQyxNQUFNQyxPQUFPLENBQUNILE9BQU9DLFVBQVUsQ0FBQ0osdUJBQXVCO0lBQ2xFO0lBQ0EsT0FBTztBQUNYO0FBQ08sU0FBU08sY0FBY0MsR0FBRztJQUM3QixPQUFPQSxJQUFJQyxjQUFjLENBQUM7QUFDOUI7QUFDQSx3REFBd0Q7QUFDeEQsbURBQW1EO0FBQ25ELHdEQUF3RDtBQUN4RCxvREFBb0Q7QUFDcEQsSUFBSUMsdUJBQXVCLFNBQVVGLEdBQUc7SUFDcEMsSUFBSUcsU0FBU2Isb0RBQWFBLENBQUNBLG9EQUFhQSxDQUFDQSxvREFBYUEsQ0FBQyxFQUFFLEVBQUVVLElBQUlJLGFBQWEsRUFBRSxPQUFPSixJQUFJSyxZQUFZLEVBQUUsT0FBT0wsSUFBSU0sY0FBYyxFQUFFO0lBQ2xJLElBQUlOLElBQUlPLFlBQVksRUFDaEJKLE9BQU9LLElBQUksQ0FBQ1IsSUFBSU8sWUFBWTtJQUNoQyxPQUFRSixNQUNKLG1GQUFtRjtLQUNsRk0sR0FBRyxDQUFDLFNBQVVULEdBQUc7UUFDbEIsT0FBTyxxRUFBaUJBLFFBQVFBLElBQUlVLE9BQU8sSUFBSztJQUNwRCxHQUNLQyxJQUFJLENBQUM7QUFDZDtBQUNBLElBQUlDLGNBQWMsV0FBVyxHQUFJLFNBQVVDLE1BQU07SUFDN0N4QixnREFBU0EsQ0FBQ3VCLGFBQWFDO0lBQ3ZCLDZEQUE2RDtJQUM3RCwrREFBK0Q7SUFDL0Qsc0RBQXNEO0lBQ3RELFNBQVNELFlBQVlFLEVBQUU7UUFDbkIsSUFBSVYsZ0JBQWdCVSxHQUFHVixhQUFhLEVBQUVFLGlCQUFpQlEsR0FBR1IsY0FBYyxFQUFFRCxlQUFlUyxHQUFHVCxZQUFZLEVBQUVFLGVBQWVPLEdBQUdQLFlBQVksRUFBRVEsZUFBZUQsR0FBR0MsWUFBWSxFQUFFQyxZQUFZRixHQUFHRSxTQUFTO1FBQ2xNLElBQUlDLFFBQVFKLE9BQU9LLElBQUksQ0FBQyxJQUFJLEVBQUVILGlCQUFpQixJQUFJO1FBQ25ERSxNQUFNRSxJQUFJLEdBQUc7UUFDYkYsTUFBTWIsYUFBYSxHQUFHQSxpQkFBaUIsRUFBRTtRQUN6Q2EsTUFBTVgsY0FBYyxHQUFHQSxrQkFBa0IsRUFBRTtRQUMzQ1csTUFBTVosWUFBWSxHQUFHQSxnQkFBZ0IsRUFBRTtRQUN2Q1ksTUFBTVYsWUFBWSxHQUFHQSxnQkFBZ0I7UUFDckNVLE1BQU1QLE9BQU8sR0FBR0ssZ0JBQWdCYixxQkFBcUJlO1FBQ3JEQSxNQUFNRCxTQUFTLEdBQUdBO1FBQ2xCLGlFQUFpRTtRQUNqRSwwQ0FBMEM7UUFDMUNDLE1BQU1HLFNBQVMsR0FBR1IsWUFBWVMsU0FBUztRQUN2QyxPQUFPSjtJQUNYO0lBQ0EsT0FBT0w7QUFDWCxFQUFFVTtBQUNxQixDQUN2QixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvZXJyb3JzL2luZGV4LmpzPzI5NTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19leHRlbmRzLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgXCIuLi91dGlsaXRpZXMvZ2xvYmFscy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgaXNOb25OdWxsT2JqZWN0IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xuLy8gVGhpcyBTeW1ib2wgYWxsb3dzIHVzIHRvIHBhc3MgdHJhbnNwb3J0LXNwZWNpZmljIGVycm9ycyBmcm9tIHRoZSBsaW5rIGNoYWluXG4vLyBpbnRvIFF1ZXJ5TWFuYWdlci9jbGllbnQgaW50ZXJuYWxzIHdpdGhvdXQgcmlza2luZyBhIG5hbWluZyBjb2xsaXNpb24gd2l0aGluXG4vLyBleHRlbnNpb25zICh3aGljaCBpbXBsZW1lbnRlcnMgY2FuIHVzZSBhcyB0aGV5IHNlZSBmaXQpLlxuZXhwb3J0IHZhciBQUk9UT0NPTF9FUlJPUlNfU1lNQk9MID0gU3ltYm9sKCk7XG5leHBvcnQgZnVuY3Rpb24gZ3JhcGhRTFJlc3VsdEhhc1Byb3RvY29sRXJyb3JzKHJlc3VsdCkge1xuICAgIGlmIChyZXN1bHQuZXh0ZW5zaW9ucykge1xuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShyZXN1bHQuZXh0ZW5zaW9uc1tQUk9UT0NPTF9FUlJPUlNfU1lNQk9MXSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0Fwb2xsb0Vycm9yKGVycikge1xuICAgIHJldHVybiBlcnIuaGFzT3duUHJvcGVydHkoXCJncmFwaFFMRXJyb3JzXCIpO1xufVxuLy8gU2V0cyB0aGUgZXJyb3IgbWVzc2FnZSBvbiB0aGlzIGVycm9yIGFjY29yZGluZyB0byB0aGVcbi8vIHRoZSBHcmFwaFFMIGFuZCBuZXR3b3JrIGVycm9ycyB0aGF0IGFyZSBwcmVzZW50LlxuLy8gSWYgdGhlIGVycm9yIG1lc3NhZ2UgaGFzIGFscmVhZHkgYmVlbiBzZXQgdGhyb3VnaCB0aGVcbi8vIGNvbnN0cnVjdG9yIG9yIG90aGVyd2lzZSwgdGhpcyBmdW5jdGlvbiBpcyBhIG5vcC5cbnZhciBnZW5lcmF0ZUVycm9yTWVzc2FnZSA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICB2YXIgZXJyb3JzID0gX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoW10sIGVyci5ncmFwaFFMRXJyb3JzLCB0cnVlKSwgZXJyLmNsaWVudEVycm9ycywgdHJ1ZSksIGVyci5wcm90b2NvbEVycm9ycywgdHJ1ZSk7XG4gICAgaWYgKGVyci5uZXR3b3JrRXJyb3IpXG4gICAgICAgIGVycm9ycy5wdXNoKGVyci5uZXR3b3JrRXJyb3IpO1xuICAgIHJldHVybiAoZXJyb3JzXG4gICAgICAgIC8vIFRoZSByZXN0IG9mIHRoZSBjb2RlIHNvbWV0aW1lcyB1bnNhZmVseSB0eXBlcyBub24tRXJyb3Igb2JqZWN0cyBhcyBHcmFwaFFMRXJyb3JzXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGVycikge1xuICAgICAgICByZXR1cm4gKGlzTm9uTnVsbE9iamVjdChlcnIpICYmIGVyci5tZXNzYWdlKSB8fCBcIkVycm9yIG1lc3NhZ2Ugbm90IGZvdW5kLlwiO1xuICAgIH0pXG4gICAgICAgIC5qb2luKFwiXFxuXCIpKTtcbn07XG52YXIgQXBvbGxvRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFwb2xsb0Vycm9yLCBfc3VwZXIpO1xuICAgIC8vIENvbnN0cnVjdHMgYW4gaW5zdGFuY2Ugb2YgQXBvbGxvRXJyb3IgZ2l2ZW4gYSBHcmFwaFFMRXJyb3JcbiAgICAvLyBvciBhIG5ldHdvcmsgZXJyb3IuIE5vdGUgdGhhdCBvbmUgb2YgdGhlc2UgaGFzIHRvIGJlIGEgdmFsaWRcbiAgICAvLyB2YWx1ZSBvciB0aGUgY29uc3RydWN0ZWQgZXJyb3Igd2lsbCBiZSBtZWFuaW5nbGVzcy5cbiAgICBmdW5jdGlvbiBBcG9sbG9FcnJvcihfYSkge1xuICAgICAgICB2YXIgZ3JhcGhRTEVycm9ycyA9IF9hLmdyYXBoUUxFcnJvcnMsIHByb3RvY29sRXJyb3JzID0gX2EucHJvdG9jb2xFcnJvcnMsIGNsaWVudEVycm9ycyA9IF9hLmNsaWVudEVycm9ycywgbmV0d29ya0Vycm9yID0gX2EubmV0d29ya0Vycm9yLCBlcnJvck1lc3NhZ2UgPSBfYS5lcnJvck1lc3NhZ2UsIGV4dHJhSW5mbyA9IF9hLmV4dHJhSW5mbztcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZXJyb3JNZXNzYWdlKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5uYW1lID0gXCJBcG9sbG9FcnJvclwiO1xuICAgICAgICBfdGhpcy5ncmFwaFFMRXJyb3JzID0gZ3JhcGhRTEVycm9ycyB8fCBbXTtcbiAgICAgICAgX3RoaXMucHJvdG9jb2xFcnJvcnMgPSBwcm90b2NvbEVycm9ycyB8fCBbXTtcbiAgICAgICAgX3RoaXMuY2xpZW50RXJyb3JzID0gY2xpZW50RXJyb3JzIHx8IFtdO1xuICAgICAgICBfdGhpcy5uZXR3b3JrRXJyb3IgPSBuZXR3b3JrRXJyb3IgfHwgbnVsbDtcbiAgICAgICAgX3RoaXMubWVzc2FnZSA9IGVycm9yTWVzc2FnZSB8fCBnZW5lcmF0ZUVycm9yTWVzc2FnZShfdGhpcyk7XG4gICAgICAgIF90aGlzLmV4dHJhSW5mbyA9IGV4dHJhSW5mbztcbiAgICAgICAgLy8gV2UncmUgbm90IHVzaW5nIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIGhlcmUgYXMgaXQgaXNuJ3QgZnVsbHlcbiAgICAgICAgLy8gc3VwcG9ydGVkIG9uIEFuZHJvaWQgKHNlZSBpc3N1ZSAjMzIzNikuXG4gICAgICAgIF90aGlzLl9fcHJvdG9fXyA9IEFwb2xsb0Vycm9yLnByb3RvdHlwZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gQXBvbGxvRXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnQgeyBBcG9sbG9FcnJvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIl9fZXh0ZW5kcyIsIl9fc3ByZWFkQXJyYXkiLCJpc05vbk51bGxPYmplY3QiLCJQUk9UT0NPTF9FUlJPUlNfU1lNQk9MIiwiU3ltYm9sIiwiZ3JhcGhRTFJlc3VsdEhhc1Byb3RvY29sRXJyb3JzIiwicmVzdWx0IiwiZXh0ZW5zaW9ucyIsIkFycmF5IiwiaXNBcnJheSIsImlzQXBvbGxvRXJyb3IiLCJlcnIiLCJoYXNPd25Qcm9wZXJ0eSIsImdlbmVyYXRlRXJyb3JNZXNzYWdlIiwiZXJyb3JzIiwiZ3JhcGhRTEVycm9ycyIsImNsaWVudEVycm9ycyIsInByb3RvY29sRXJyb3JzIiwibmV0d29ya0Vycm9yIiwicHVzaCIsIm1hcCIsIm1lc3NhZ2UiLCJqb2luIiwiQXBvbGxvRXJyb3IiLCJfc3VwZXIiLCJfYSIsImVycm9yTWVzc2FnZSIsImV4dHJhSW5mbyIsIl90aGlzIiwiY2FsbCIsIm5hbWUiLCJfX3Byb3RvX18iLCJwcm90b3R5cGUiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/errors/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/client/link/core/ApolloLink.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloLink: () => (/* binding */ ApolloLink)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/createOperation.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/transformOperation.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/validateOperation.js\");\n\n\n\nfunction passthrough(op, forward) {\n    return forward ? forward(op) : _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n}\nfunction toLink(handler) {\n    return typeof handler === \"function\" ? new ApolloLink(handler) : handler;\n}\nfunction isTerminating(link) {\n    return link.request.length <= 1;\n}\nvar ApolloLink = /** @class */ function() {\n    function ApolloLink(request) {\n        if (request) this.request = request;\n    }\n    ApolloLink.empty = function() {\n        return new ApolloLink(function() {\n            return _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n        });\n    };\n    ApolloLink.from = function(links) {\n        if (links.length === 0) return ApolloLink.empty();\n        return links.map(toLink).reduce(function(x, y) {\n            return x.concat(y);\n        });\n    };\n    ApolloLink.split = function(test, left, right) {\n        var leftLink = toLink(left);\n        var rightLink = toLink(right || new ApolloLink(passthrough));\n        var ret;\n        if (isTerminating(leftLink) && isTerminating(rightLink)) {\n            ret = new ApolloLink(function(operation) {\n                return test(operation) ? leftLink.request(operation) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of() : rightLink.request(operation) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n            });\n        } else {\n            ret = new ApolloLink(function(operation, forward) {\n                return test(operation) ? leftLink.request(operation, forward) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of() : rightLink.request(operation, forward) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n            });\n        }\n        return Object.assign(ret, {\n            left: leftLink,\n            right: rightLink\n        });\n    };\n    ApolloLink.execute = function(link, operation) {\n        return link.request((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.createOperation)(operation.context, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.transformOperation)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.validateOperation)(operation)))) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n    };\n    ApolloLink.concat = function(first, second) {\n        var firstLink = toLink(first);\n        if (isTerminating(firstLink)) {\n            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(35, firstLink);\n            return firstLink;\n        }\n        var nextLink = toLink(second);\n        var ret;\n        if (isTerminating(nextLink)) {\n            ret = new ApolloLink(function(operation) {\n                return firstLink.request(operation, function(op) {\n                    return nextLink.request(op) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n                }) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n            });\n        } else {\n            ret = new ApolloLink(function(operation, forward) {\n                return firstLink.request(operation, function(op) {\n                    return nextLink.request(op, forward) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n                }) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n            });\n        }\n        return Object.assign(ret, {\n            left: firstLink,\n            right: nextLink\n        });\n    };\n    ApolloLink.prototype.split = function(test, left, right) {\n        return this.concat(ApolloLink.split(test, left, right || new ApolloLink(passthrough)));\n    };\n    ApolloLink.prototype.concat = function(next) {\n        return ApolloLink.concat(this, next);\n    };\n    ApolloLink.prototype.request = function(operation, forward) {\n        throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(36);\n    };\n    ApolloLink.prototype.onError = function(error, observer) {\n        if (observer && observer.error) {\n            observer.error(error);\n            // Returning false indicates that observer.error does not need to be\n            // called again, since it was already called (on the previous line).\n            // Calling observer.error again would not cause any real problems,\n            // since only the first call matters, but custom onError functions\n            // might have other reasons for wanting to prevent the default\n            // behavior by returning false.\n            return false;\n        }\n        // Throw errors will be passed to observer.error.\n        throw error;\n    };\n    ApolloLink.prototype.setOnError = function(fn) {\n        this.onError = fn;\n        return this;\n    };\n    return ApolloLink;\n}();\n //# sourceMappingURL=ApolloLink.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/core/execute.js":
/*!**********************************************************!*\
  !*** ./node_modules/@apollo/client/link/core/execute.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   execute: () => (/* binding */ execute)\n/* harmony export */ });\n/* harmony import */ var _ApolloLink_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ApolloLink.js */ \"(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js\");\n\nvar execute = _ApolloLink_js__WEBPACK_IMPORTED_MODULE_0__.ApolloLink.execute; //# sourceMappingURL=execute.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9jb3JlL2V4ZWN1dGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNkM7QUFDdEMsSUFBSUMsVUFBVUQsc0RBQVVBLENBQUNDLE9BQU8sQ0FBQyxDQUN4QyxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9jb3JlL2V4ZWN1dGUuanM/MjM1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcG9sbG9MaW5rIH0gZnJvbSBcIi4vQXBvbGxvTGluay5qc1wiO1xuZXhwb3J0IHZhciBleGVjdXRlID0gQXBvbGxvTGluay5leGVjdXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhlY3V0ZS5qcy5tYXAiXSwibmFtZXMiOlsiQXBvbGxvTGluayIsImV4ZWN1dGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/core/execute.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/HttpLink.js":
/*!***********************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/HttpLink.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpLink: () => (/* binding */ HttpLink)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/index.js */ \"(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js\");\n/* harmony import */ var _createHttpLink_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./createHttpLink.js */ \"(ssr)/./node_modules/@apollo/client/link/http/createHttpLink.js\");\n\n\n\nvar HttpLink = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(HttpLink, _super);\n    function HttpLink(options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var _this = _super.call(this, (0,_createHttpLink_js__WEBPACK_IMPORTED_MODULE_1__.createHttpLink)(options).request) || this;\n        _this.options = options;\n        return _this;\n    }\n    return HttpLink;\n}(_core_index_js__WEBPACK_IMPORTED_MODULE_2__.ApolloLink);\n //# sourceMappingURL=HttpLink.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL0h0dHBMaW5rLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBa0M7QUFDWTtBQUNPO0FBQ3JELElBQUlHLFdBQVcsV0FBVyxHQUFJLFNBQVVDLE1BQU07SUFDMUNKLGdEQUFTQSxDQUFDRyxVQUFVQztJQUNwQixTQUFTRCxTQUFTRSxPQUFPO1FBQ3JCLElBQUlBLFlBQVksS0FBSyxHQUFHO1lBQUVBLFVBQVUsQ0FBQztRQUFHO1FBQ3hDLElBQUlDLFFBQVFGLE9BQU9HLElBQUksQ0FBQyxJQUFJLEVBQUVMLGtFQUFjQSxDQUFDRyxTQUFTRyxPQUFPLEtBQUssSUFBSTtRQUN0RUYsTUFBTUQsT0FBTyxHQUFHQTtRQUNoQixPQUFPQztJQUNYO0lBQ0EsT0FBT0g7QUFDWCxFQUFFRixzREFBVUE7QUFDUSxDQUNwQixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL0h0dHBMaW5rLmpzP2VjNDciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBBcG9sbG9MaW5rIH0gZnJvbSBcIi4uL2NvcmUvaW5kZXguanNcIjtcbmltcG9ydCB7IGNyZWF0ZUh0dHBMaW5rIH0gZnJvbSBcIi4vY3JlYXRlSHR0cExpbmsuanNcIjtcbnZhciBIdHRwTGluayA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSHR0cExpbmssIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSHR0cExpbmsob3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBjcmVhdGVIdHRwTGluayhvcHRpb25zKS5yZXF1ZXN0KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gSHR0cExpbms7XG59KEFwb2xsb0xpbmspKTtcbmV4cG9ydCB7IEh0dHBMaW5rIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1IdHRwTGluay5qcy5tYXAiXSwibmFtZXMiOlsiX19leHRlbmRzIiwiQXBvbGxvTGluayIsImNyZWF0ZUh0dHBMaW5rIiwiSHR0cExpbmsiLCJfc3VwZXIiLCJvcHRpb25zIiwiX3RoaXMiLCJjYWxsIiwicmVxdWVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/HttpLink.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/checkFetcher.js":
/*!***************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/checkFetcher.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkFetcher: () => (/* binding */ checkFetcher)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\nvar checkFetcher = function(fetcher) {\n    if (!fetcher && typeof fetch === \"undefined\") {\n        throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(37);\n    }\n}; //# sourceMappingURL=checkFetcher.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2NoZWNrRmV0Y2hlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxRTtBQUM5RCxJQUFJQyxlQUFlLFNBQVVDLE9BQU87SUFDdkMsSUFBSSxDQUFDQSxXQUFXLE9BQU9DLFVBQVUsYUFBYTtRQUMxQyxNQUFNSCw4RUFBaUJBLENBQUM7SUFDNUI7QUFDSixFQUFFLENBQ0Ysd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktZG9jcy1mcm9uLWVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2xpbmsvaHR0cC9jaGVja0ZldGNoZXIuanM/NDBjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuZXdJbnZhcmlhbnRFcnJvciB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvZ2xvYmFscy9pbmRleC5qc1wiO1xuZXhwb3J0IHZhciBjaGVja0ZldGNoZXIgPSBmdW5jdGlvbiAoZmV0Y2hlcikge1xuICAgIGlmICghZmV0Y2hlciAmJiB0eXBlb2YgZmV0Y2ggPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3SW52YXJpYW50RXJyb3IoMzcpO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGVja0ZldGNoZXIuanMubWFwIl0sIm5hbWVzIjpbIm5ld0ludmFyaWFudEVycm9yIiwiY2hlY2tGZXRjaGVyIiwiZmV0Y2hlciIsImZldGNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/checkFetcher.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/createHttpLink.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/createHttpLink.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHttpLink: () => (/* binding */ createHttpLink)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/index.js */ \"(ssr)/./node_modules/@apollo/client/link/core/ApolloLink.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./serializeFetchParameter.js */ \"(ssr)/./node_modules/@apollo/client/link/http/serializeFetchParameter.js\");\n/* harmony import */ var _selectURI_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./selectURI.js */ \"(ssr)/./node_modules/@apollo/client/link/http/selectURI.js\");\n/* harmony import */ var _parseAndCheckHttpResponse_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./parseAndCheckHttpResponse.js */ \"(ssr)/./node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js\");\n/* harmony import */ var _checkFetcher_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./checkFetcher.js */ \"(ssr)/./node_modules/@apollo/client/link/http/checkFetcher.js\");\n/* harmony import */ var _selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selectHttpOptionsAndBody.js */ \"(ssr)/./node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js\");\n/* harmony import */ var _rewriteURIForGET_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./rewriteURIForGET.js */ \"(ssr)/./node_modules/@apollo/client/link/http/rewriteURIForGET.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/fromError.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/filterOperationVariables.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nvar backupFetch = (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return fetch;\n});\nvar createHttpLink = function(linkOptions) {\n    if (linkOptions === void 0) {\n        linkOptions = {};\n    }\n    var _a = linkOptions.uri, uri = _a === void 0 ? \"/graphql\" : _a, // use default global fetch if nothing passed in\n    preferredFetch = linkOptions.fetch, _b = linkOptions.print, print = _b === void 0 ? _selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_1__.defaultPrinter : _b, includeExtensions = linkOptions.includeExtensions, preserveHeaderCase = linkOptions.preserveHeaderCase, useGETForQueries = linkOptions.useGETForQueries, _c = linkOptions.includeUnusedVariables, includeUnusedVariables = _c === void 0 ? false : _c, requestOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__rest)(linkOptions, [\n        \"uri\",\n        \"fetch\",\n        \"print\",\n        \"includeExtensions\",\n        \"preserveHeaderCase\",\n        \"useGETForQueries\",\n        \"includeUnusedVariables\"\n    ]);\n    if (globalThis.__DEV__ !== false) {\n        // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n        // defined, so requests won't fail at runtime.\n        (0,_checkFetcher_js__WEBPACK_IMPORTED_MODULE_3__.checkFetcher)(preferredFetch || backupFetch);\n    }\n    var linkConfig = {\n        http: {\n            includeExtensions: includeExtensions,\n            preserveHeaderCase: preserveHeaderCase\n        },\n        options: requestOptions.fetchOptions,\n        credentials: requestOptions.credentials,\n        headers: requestOptions.headers\n    };\n    return new _core_index_js__WEBPACK_IMPORTED_MODULE_4__.ApolloLink(function(operation) {\n        var chosenURI = (0,_selectURI_js__WEBPACK_IMPORTED_MODULE_5__.selectURI)(operation, uri);\n        var context = operation.getContext();\n        // `apollographql-client-*` headers are automatically set if a\n        // `clientAwareness` object is found in the context. These headers are\n        // set first, followed by the rest of the headers pulled from\n        // `context.headers`. If desired, `apollographql-client-*` headers set by\n        // the `clientAwareness` object can be overridden by\n        // `apollographql-client-*` headers set in `context.headers`.\n        var clientAwarenessHeaders = {};\n        if (context.clientAwareness) {\n            var _a = context.clientAwareness, name_1 = _a.name, version = _a.version;\n            if (name_1) {\n                clientAwarenessHeaders[\"apollographql-client-name\"] = name_1;\n            }\n            if (version) {\n                clientAwarenessHeaders[\"apollographql-client-version\"] = version;\n            }\n        }\n        var contextHeaders = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, clientAwarenessHeaders), context.headers);\n        var contextConfig = {\n            http: context.http,\n            options: context.fetchOptions,\n            credentials: context.credentials,\n            headers: contextHeaders\n        };\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.hasDirectives)([\n            \"client\"\n        ], operation.query)) {\n            var transformedQuery = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.removeClientSetsFromDocument)(operation.query);\n            if (!transformedQuery) {\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.fromError)(new Error(\"HttpLink: Trying to send a client-only query to the server. To send to the server, ensure a non-client field is added to the query or set the `transformOptions.removeClientFields` option to `true`.\"));\n            }\n            operation.query = transformedQuery;\n        }\n        //uses fallback, link, and then context to build options\n        var _b = (0,_selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_1__.selectHttpOptionsAndBodyInternal)(operation, print, _selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_1__.fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;\n        if (body.variables && !includeUnusedVariables) {\n            body.variables = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_9__.filterOperationVariables)(body.variables, operation.query);\n        }\n        var controller;\n        if (!options.signal && typeof AbortController !== \"undefined\") {\n            controller = new AbortController();\n            options.signal = controller.signal;\n        }\n        // If requested, set method to GET if there are no mutations.\n        var definitionIsMutation = function(d) {\n            return d.kind === \"OperationDefinition\" && d.operation === \"mutation\";\n        };\n        var definitionIsSubscription = function(d) {\n            return d.kind === \"OperationDefinition\" && d.operation === \"subscription\";\n        };\n        var isSubscription = definitionIsSubscription((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.getMainDefinition)(operation.query));\n        // does not match custom directives beginning with @defer\n        var hasDefer = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.hasDirectives)([\n            \"defer\"\n        ], operation.query);\n        if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {\n            options.method = \"GET\";\n        }\n        if (hasDefer || isSubscription) {\n            options.headers = options.headers || {};\n            var acceptHeader = \"multipart/mixed;\";\n            // Omit defer-specific headers if the user attempts to defer a selection\n            // set on a subscription and log a warning.\n            if (isSubscription && hasDefer) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(38);\n            }\n            if (isSubscription) {\n                acceptHeader += \"boundary=graphql;subscriptionSpec=1.0,application/json\";\n            } else if (hasDefer) {\n                acceptHeader += \"deferSpec=20220824,application/json\";\n            }\n            options.headers.accept = acceptHeader;\n        }\n        if (options.method === \"GET\") {\n            var _c = (0,_rewriteURIForGET_js__WEBPACK_IMPORTED_MODULE_11__.rewriteURIForGET)(chosenURI, body), newURI = _c.newURI, parseError = _c.parseError;\n            if (parseError) {\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.fromError)(parseError);\n            }\n            chosenURI = newURI;\n        } else {\n            try {\n                options.body = (0,_serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_12__.serializeFetchParameter)(body, \"Payload\");\n            } catch (parseError) {\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.fromError)(parseError);\n            }\n        }\n        return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.Observable(function(observer) {\n            // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n            // fall back to the *current* global window.fetch function (see issue\n            // #7832), or (if all else fails) the backupFetch function we saved when\n            // this module was first evaluated. This last option protects against the\n            // removal of window.fetch, which is unlikely but not impossible.\n            var currentFetch = preferredFetch || (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n                return fetch;\n            }) || backupFetch;\n            var observerNext = observer.next.bind(observer);\n            currentFetch(chosenURI, options).then(function(response) {\n                var _a;\n                operation.setContext({\n                    response: response\n                });\n                var ctype = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get(\"content-type\");\n                if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n                    return (0,_parseAndCheckHttpResponse_js__WEBPACK_IMPORTED_MODULE_14__.readMultipartBody)(response, observerNext);\n                } else {\n                    return (0,_parseAndCheckHttpResponse_js__WEBPACK_IMPORTED_MODULE_14__.parseAndCheckHttpResponse)(operation)(response).then(observerNext);\n                }\n            }).then(function() {\n                controller = undefined;\n                observer.complete();\n            }).catch(function(err) {\n                controller = undefined;\n                (0,_parseAndCheckHttpResponse_js__WEBPACK_IMPORTED_MODULE_14__.handleError)(err, observer);\n            });\n            return function() {\n                // XXX support canceling this request\n                // https://developers.google.com/web/updates/2017/09/abortable-fetch\n                if (controller) controller.abort();\n            };\n        });\n    });\n}; //# sourceMappingURL=createHttpLink.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/createHttpLink.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/iterators/async.js":
/*!******************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/iterators/async.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ asyncIterator)\n/* harmony export */ });\n/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/async.ts\n */ function asyncIterator(source) {\n    var _a;\n    var iterator = source[Symbol.asyncIterator]();\n    return _a = {\n        next: function() {\n            return iterator.next();\n        }\n    }, _a[Symbol.asyncIterator] = function() {\n        return this;\n    }, _a;\n} //# sourceMappingURL=async.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9hc3luYy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7OztDQUdDLEdBQ2MsU0FBU0EsY0FBY0MsTUFBTTtJQUN4QyxJQUFJQztJQUNKLElBQUlDLFdBQVdGLE1BQU0sQ0FBQ0csT0FBT0osYUFBYSxDQUFDO0lBQzNDLE9BQU9FLEtBQUs7UUFDSkcsTUFBTTtZQUNGLE9BQU9GLFNBQVNFLElBQUk7UUFDeEI7SUFDSixHQUNBSCxFQUFFLENBQUNFLE9BQU9KLGFBQWEsQ0FBQyxHQUFHO1FBQ3ZCLE9BQU8sSUFBSTtJQUNmLEdBQ0FFO0FBQ1IsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9hc3luYy5qcz84MzZjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogT3JpZ2luYWwgc291cmNlOlxuICogaHR0cHM6Ly9naXRodWIuY29tL2ttYWxha29mZi9yZXNwb25zZS1pdGVyYXRvci9ibG9iL21hc3Rlci9zcmMvaXRlcmF0b3JzL2FzeW5jLnRzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFzeW5jSXRlcmF0b3Ioc291cmNlKSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciBpdGVyYXRvciA9IHNvdXJjZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICByZXR1cm4gX2EgPSB7XG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX2FbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIF9hO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXN5bmMuanMubWFwIl0sIm5hbWVzIjpbImFzeW5jSXRlcmF0b3IiLCJzb3VyY2UiLCJfYSIsIml0ZXJhdG9yIiwiU3ltYm9sIiwibmV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/iterators/async.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/iterators/nodeStream.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/iterators/nodeStream.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ nodeStreamIterator)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/nodeStream.ts\n */ \nfunction nodeStreamIterator(stream) {\n    var cleanup = null;\n    var error = null;\n    var done = false;\n    var data = [];\n    var waiting = [];\n    function onData(chunk) {\n        if (error) return;\n        if (waiting.length) {\n            var shiftedArr = waiting.shift();\n            if (Array.isArray(shiftedArr) && shiftedArr[0]) {\n                return shiftedArr[0]({\n                    value: chunk,\n                    done: false\n                });\n            }\n        }\n        data.push(chunk);\n    }\n    function onError(err) {\n        error = err;\n        var all = waiting.slice();\n        all.forEach(function(pair) {\n            pair[1](err);\n        });\n        !cleanup || cleanup();\n    }\n    function onEnd() {\n        done = true;\n        var all = waiting.slice();\n        all.forEach(function(pair) {\n            pair[0]({\n                value: undefined,\n                done: true\n            });\n        });\n        !cleanup || cleanup();\n    }\n    cleanup = function() {\n        cleanup = null;\n        stream.removeListener(\"data\", onData);\n        stream.removeListener(\"error\", onError);\n        stream.removeListener(\"end\", onEnd);\n        stream.removeListener(\"finish\", onEnd);\n        stream.removeListener(\"close\", onEnd);\n    };\n    stream.on(\"data\", onData);\n    stream.on(\"error\", onError);\n    stream.on(\"end\", onEnd);\n    stream.on(\"finish\", onEnd);\n    stream.on(\"close\", onEnd);\n    function getNext() {\n        return new Promise(function(resolve, reject) {\n            if (error) return reject(error);\n            if (data.length) return resolve({\n                value: data.shift(),\n                done: false\n            });\n            if (done) return resolve({\n                value: undefined,\n                done: true\n            });\n            waiting.push([\n                resolve,\n                reject\n            ]);\n        });\n    }\n    var iterator = {\n        next: function() {\n            return getNext();\n        }\n    };\n    if (_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function() {\n            return this;\n        };\n    }\n    return iterator;\n} //# sourceMappingURL=nodeStream.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9ub2RlU3RyZWFtLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7OztDQUdDLEdBQ3VFO0FBQ3pELFNBQVNDLG1CQUFtQkMsTUFBTTtJQUM3QyxJQUFJQyxVQUFVO0lBQ2QsSUFBSUMsUUFBUTtJQUNaLElBQUlDLE9BQU87SUFDWCxJQUFJQyxPQUFPLEVBQUU7SUFDYixJQUFJQyxVQUFVLEVBQUU7SUFDaEIsU0FBU0MsT0FBT0MsS0FBSztRQUNqQixJQUFJTCxPQUNBO1FBQ0osSUFBSUcsUUFBUUcsTUFBTSxFQUFFO1lBQ2hCLElBQUlDLGFBQWFKLFFBQVFLLEtBQUs7WUFDOUIsSUFBSUMsTUFBTUMsT0FBTyxDQUFDSCxlQUFlQSxVQUFVLENBQUMsRUFBRSxFQUFFO2dCQUM1QyxPQUFPQSxVQUFVLENBQUMsRUFBRSxDQUFDO29CQUFFSSxPQUFPTjtvQkFBT0osTUFBTTtnQkFBTTtZQUNyRDtRQUNKO1FBQ0FDLEtBQUtVLElBQUksQ0FBQ1A7SUFDZDtJQUNBLFNBQVNRLFFBQVFDLEdBQUc7UUFDaEJkLFFBQVFjO1FBQ1IsSUFBSUMsTUFBTVosUUFBUWEsS0FBSztRQUN2QkQsSUFBSUUsT0FBTyxDQUFDLFNBQVVDLElBQUk7WUFDdEJBLElBQUksQ0FBQyxFQUFFLENBQUNKO1FBQ1o7UUFDQSxDQUFDZixXQUFXQTtJQUNoQjtJQUNBLFNBQVNvQjtRQUNMbEIsT0FBTztRQUNQLElBQUljLE1BQU1aLFFBQVFhLEtBQUs7UUFDdkJELElBQUlFLE9BQU8sQ0FBQyxTQUFVQyxJQUFJO1lBQ3RCQSxJQUFJLENBQUMsRUFBRSxDQUFDO2dCQUFFUCxPQUFPUztnQkFBV25CLE1BQU07WUFBSztRQUMzQztRQUNBLENBQUNGLFdBQVdBO0lBQ2hCO0lBQ0FBLFVBQVU7UUFDTkEsVUFBVTtRQUNWRCxPQUFPdUIsY0FBYyxDQUFDLFFBQVFqQjtRQUM5Qk4sT0FBT3VCLGNBQWMsQ0FBQyxTQUFTUjtRQUMvQmYsT0FBT3VCLGNBQWMsQ0FBQyxPQUFPRjtRQUM3QnJCLE9BQU91QixjQUFjLENBQUMsVUFBVUY7UUFDaENyQixPQUFPdUIsY0FBYyxDQUFDLFNBQVNGO0lBQ25DO0lBQ0FyQixPQUFPd0IsRUFBRSxDQUFDLFFBQVFsQjtJQUNsQk4sT0FBT3dCLEVBQUUsQ0FBQyxTQUFTVDtJQUNuQmYsT0FBT3dCLEVBQUUsQ0FBQyxPQUFPSDtJQUNqQnJCLE9BQU93QixFQUFFLENBQUMsVUFBVUg7SUFDcEJyQixPQUFPd0IsRUFBRSxDQUFDLFNBQVNIO0lBQ25CLFNBQVNJO1FBQ0wsT0FBTyxJQUFJQyxRQUFRLFNBQVVDLE9BQU8sRUFBRUMsTUFBTTtZQUN4QyxJQUFJMUIsT0FDQSxPQUFPMEIsT0FBTzFCO1lBQ2xCLElBQUlFLEtBQUtJLE1BQU0sRUFDWCxPQUFPbUIsUUFBUTtnQkFBRWQsT0FBT1QsS0FBS00sS0FBSztnQkFBSVAsTUFBTTtZQUFNO1lBQ3RELElBQUlBLE1BQ0EsT0FBT3dCLFFBQVE7Z0JBQUVkLE9BQU9TO2dCQUFXbkIsTUFBTTtZQUFLO1lBQ2xERSxRQUFRUyxJQUFJLENBQUM7Z0JBQUNhO2dCQUFTQzthQUFPO1FBQ2xDO0lBQ0o7SUFDQSxJQUFJQyxXQUFXO1FBQ1hDLE1BQU07WUFDRixPQUFPTDtRQUNYO0lBQ0o7SUFDQSxJQUFJM0IsMEVBQXlCQSxFQUFFO1FBQzNCK0IsUUFBUSxDQUFDRSxPQUFPQyxhQUFhLENBQUMsR0FBRztZQUM3QixPQUFPLElBQUk7UUFDZjtJQUNKO0lBQ0EsT0FBT0g7QUFDWCxFQUNBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL2h0dHAvaXRlcmF0b3JzL25vZGVTdHJlYW0uanM/MjcyNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE9yaWdpbmFsIHNvdXJjZTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9rbWFsYWtvZmYvcmVzcG9uc2UtaXRlcmF0b3IvYmxvYi9tYXN0ZXIvc3JjL2l0ZXJhdG9ycy9ub2RlU3RyZWFtLnRzXG4gKi9cbmltcG9ydCB7IGNhblVzZUFzeW5jSXRlcmF0b3JTeW1ib2wgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub2RlU3RyZWFtSXRlcmF0b3Ioc3RyZWFtKSB7XG4gICAgdmFyIGNsZWFudXAgPSBudWxsO1xuICAgIHZhciBlcnJvciA9IG51bGw7XG4gICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICB2YXIgZGF0YSA9IFtdO1xuICAgIHZhciB3YWl0aW5nID0gW107XG4gICAgZnVuY3Rpb24gb25EYXRhKGNodW5rKSB7XG4gICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHdhaXRpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgc2hpZnRlZEFyciA9IHdhaXRpbmcuc2hpZnQoKTtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNoaWZ0ZWRBcnIpICYmIHNoaWZ0ZWRBcnJbMF0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2hpZnRlZEFyclswXSh7IHZhbHVlOiBjaHVuaywgZG9uZTogZmFsc2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZGF0YS5wdXNoKGNodW5rKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25FcnJvcihlcnIpIHtcbiAgICAgICAgZXJyb3IgPSBlcnI7XG4gICAgICAgIHZhciBhbGwgPSB3YWl0aW5nLnNsaWNlKCk7XG4gICAgICAgIGFsbC5mb3JFYWNoKGZ1bmN0aW9uIChwYWlyKSB7XG4gICAgICAgICAgICBwYWlyWzFdKGVycik7XG4gICAgICAgIH0pO1xuICAgICAgICAhY2xlYW51cCB8fCBjbGVhbnVwKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uRW5kKCkge1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgdmFyIGFsbCA9IHdhaXRpbmcuc2xpY2UoKTtcbiAgICAgICAgYWxsLmZvckVhY2goZnVuY3Rpb24gKHBhaXIpIHtcbiAgICAgICAgICAgIHBhaXJbMF0oeyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgIWNsZWFudXAgfHwgY2xlYW51cCgpO1xuICAgIH1cbiAgICBjbGVhbnVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhbnVwID0gbnVsbDtcbiAgICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiZGF0YVwiLCBvbkRhdGEpO1xuICAgICAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLCBvbkVycm9yKTtcbiAgICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiZW5kXCIsIG9uRW5kKTtcbiAgICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiZmluaXNoXCIsIG9uRW5kKTtcbiAgICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIiwgb25FbmQpO1xuICAgIH07XG4gICAgc3RyZWFtLm9uKFwiZGF0YVwiLCBvbkRhdGEpO1xuICAgIHN0cmVhbS5vbihcImVycm9yXCIsIG9uRXJyb3IpO1xuICAgIHN0cmVhbS5vbihcImVuZFwiLCBvbkVuZCk7XG4gICAgc3RyZWFtLm9uKFwiZmluaXNoXCIsIG9uRW5kKTtcbiAgICBzdHJlYW0ub24oXCJjbG9zZVwiLCBvbkVuZCk7XG4gICAgZnVuY3Rpb24gZ2V0TmV4dCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIGlmIChkYXRhLmxlbmd0aClcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh7IHZhbHVlOiBkYXRhLnNoaWZ0KCksIGRvbmU6IGZhbHNlIH0pO1xuICAgICAgICAgICAgaWYgKGRvbmUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoeyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH0pO1xuICAgICAgICAgICAgd2FpdGluZy5wdXNoKFtyZXNvbHZlLCByZWplY3RdKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBpdGVyYXRvciA9IHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldE5leHQoKTtcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIGlmIChjYW5Vc2VBc3luY0l0ZXJhdG9yU3ltYm9sKSB7XG4gICAgICAgIGl0ZXJhdG9yW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gaXRlcmF0b3I7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlU3RyZWFtLmpzLm1hcCJdLCJuYW1lcyI6WyJjYW5Vc2VBc3luY0l0ZXJhdG9yU3ltYm9sIiwibm9kZVN0cmVhbUl0ZXJhdG9yIiwic3RyZWFtIiwiY2xlYW51cCIsImVycm9yIiwiZG9uZSIsImRhdGEiLCJ3YWl0aW5nIiwib25EYXRhIiwiY2h1bmsiLCJsZW5ndGgiLCJzaGlmdGVkQXJyIiwic2hpZnQiLCJBcnJheSIsImlzQXJyYXkiLCJ2YWx1ZSIsInB1c2giLCJvbkVycm9yIiwiZXJyIiwiYWxsIiwic2xpY2UiLCJmb3JFYWNoIiwicGFpciIsIm9uRW5kIiwidW5kZWZpbmVkIiwicmVtb3ZlTGlzdGVuZXIiLCJvbiIsImdldE5leHQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIml0ZXJhdG9yIiwibmV4dCIsIlN5bWJvbCIsImFzeW5jSXRlcmF0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/iterators/nodeStream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/iterators/promise.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/iterators/promise.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ promiseIterator)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/promise.ts\n */ \nfunction promiseIterator(promise) {\n    var resolved = false;\n    var iterator = {\n        next: function() {\n            if (resolved) return Promise.resolve({\n                value: undefined,\n                done: true\n            });\n            resolved = true;\n            return new Promise(function(resolve, reject) {\n                promise.then(function(value) {\n                    resolve({\n                        value: value,\n                        done: false\n                    });\n                }).catch(reject);\n            });\n        }\n    };\n    if (_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function() {\n            return this;\n        };\n    }\n    return iterator;\n} //# sourceMappingURL=promise.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9wcm9taXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7OztDQUdDLEdBQ3VFO0FBQ3pELFNBQVNDLGdCQUFnQkMsT0FBTztJQUMzQyxJQUFJQyxXQUFXO0lBQ2YsSUFBSUMsV0FBVztRQUNYQyxNQUFNO1lBQ0YsSUFBSUYsVUFDQSxPQUFPRyxRQUFRQyxPQUFPLENBQUM7Z0JBQ25CQyxPQUFPQztnQkFDUEMsTUFBTTtZQUNWO1lBQ0pQLFdBQVc7WUFDWCxPQUFPLElBQUlHLFFBQVEsU0FBVUMsT0FBTyxFQUFFSSxNQUFNO2dCQUN4Q1QsUUFDS1UsSUFBSSxDQUFDLFNBQVVKLEtBQUs7b0JBQ3JCRCxRQUFRO3dCQUFFQyxPQUFPQTt3QkFBT0UsTUFBTTtvQkFBTTtnQkFDeEMsR0FDS0csS0FBSyxDQUFDRjtZQUNmO1FBQ0o7SUFDSjtJQUNBLElBQUlYLDBFQUF5QkEsRUFBRTtRQUMzQkksUUFBUSxDQUFDVSxPQUFPQyxhQUFhLENBQUMsR0FBRztZQUM3QixPQUFPLElBQUk7UUFDZjtJQUNKO0lBQ0EsT0FBT1g7QUFDWCxFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL2h0dHAvaXRlcmF0b3JzL3Byb21pc2UuanM/MDk3OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE9yaWdpbmFsIHNvdXJjZTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9rbWFsYWtvZmYvcmVzcG9uc2UtaXRlcmF0b3IvYmxvYi9tYXN0ZXIvc3JjL2l0ZXJhdG9ycy9wcm9taXNlLnRzXG4gKi9cbmltcG9ydCB7IGNhblVzZUFzeW5jSXRlcmF0b3JTeW1ib2wgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcm9taXNlSXRlcmF0b3IocHJvbWlzZSkge1xuICAgIHZhciByZXNvbHZlZCA9IGZhbHNlO1xuICAgIHZhciBpdGVyYXRvciA9IHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHJlc29sdmVkKVxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBkb25lOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHsgdmFsdWU6IHZhbHVlLCBkb25lOiBmYWxzZSB9KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2gocmVqZWN0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgIH07XG4gICAgaWYgKGNhblVzZUFzeW5jSXRlcmF0b3JTeW1ib2wpIHtcbiAgICAgICAgaXRlcmF0b3JbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBpdGVyYXRvcjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb21pc2UuanMubWFwIl0sIm5hbWVzIjpbImNhblVzZUFzeW5jSXRlcmF0b3JTeW1ib2wiLCJwcm9taXNlSXRlcmF0b3IiLCJwcm9taXNlIiwicmVzb2x2ZWQiLCJpdGVyYXRvciIsIm5leHQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInZhbHVlIiwidW5kZWZpbmVkIiwiZG9uZSIsInJlamVjdCIsInRoZW4iLCJjYXRjaCIsIlN5bWJvbCIsImFzeW5jSXRlcmF0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/iterators/promise.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/iterators/reader.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/iterators/reader.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ readerIterator)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/reader.ts\n */ \nfunction readerIterator(reader) {\n    var iterator = {\n        next: function() {\n            return reader.read();\n        }\n    };\n    if (_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function() {\n            return this;\n        };\n    }\n    return iterator;\n} //# sourceMappingURL=reader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9yZWFkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7O0NBR0MsR0FDdUU7QUFDekQsU0FBU0MsZUFBZUMsTUFBTTtJQUN6QyxJQUFJQyxXQUFXO1FBQ1hDLE1BQU07WUFDRixPQUFPRixPQUFPRyxJQUFJO1FBQ3RCO0lBQ0o7SUFDQSxJQUFJTCwwRUFBeUJBLEVBQUU7UUFDM0JHLFFBQVEsQ0FBQ0csT0FBT0MsYUFBYSxDQUFDLEdBQUc7WUFDN0IsT0FBTyxJQUFJO1FBQ2Y7SUFDSjtJQUNBLE9BQU9KO0FBQ1gsRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9yZWFkZXIuanM/OGUyNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE9yaWdpbmFsIHNvdXJjZTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9rbWFsYWtvZmYvcmVzcG9uc2UtaXRlcmF0b3IvYmxvYi9tYXN0ZXIvc3JjL2l0ZXJhdG9ycy9yZWFkZXIudHNcbiAqL1xuaW1wb3J0IHsgY2FuVXNlQXN5bmNJdGVyYXRvclN5bWJvbCB9IGZyb20gXCIuLi8uLi8uLi91dGlsaXRpZXMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlYWRlckl0ZXJhdG9yKHJlYWRlcikge1xuICAgIHZhciBpdGVyYXRvciA9IHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5yZWFkKCk7XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICBpZiAoY2FuVXNlQXN5bmNJdGVyYXRvclN5bWJvbCkge1xuICAgICAgICBpdGVyYXRvcltTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZXJhdG9yO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhZGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJjYW5Vc2VBc3luY0l0ZXJhdG9yU3ltYm9sIiwicmVhZGVySXRlcmF0b3IiLCJyZWFkZXIiLCJpdGVyYXRvciIsIm5leHQiLCJyZWFkIiwiU3ltYm9sIiwiYXN5bmNJdGVyYXRvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/iterators/reader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleError: () => (/* binding */ handleError),\n/* harmony export */   parseAndCheckHttpResponse: () => (/* binding */ parseAndCheckHttpResponse),\n/* harmony export */   parseHeaders: () => (/* binding */ parseHeaders),\n/* harmony export */   parseJsonBody: () => (/* binding */ parseJsonBody),\n/* harmony export */   readMultipartBody: () => (/* binding */ readMultipartBody)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _responseIterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./responseIterator.js */ \"(ssr)/./node_modules/@apollo/client/link/http/responseIterator.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/index.js */ \"(ssr)/./node_modules/@apollo/client/link/utils/throwServerError.js\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../errors/index.js */ \"(ssr)/./node_modules/@apollo/client/errors/index.js\");\n/* harmony import */ var _utilities_common_incrementalResult_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/common/incrementalResult.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/incrementalResult.js\");\n\n\n\n\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction readMultipartBody(response, nextValue) {\n    var _a;\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {\n        var decoder, contentType, delimiter, boundaryVal, boundary, buffer, iterator, running, _b, value, done, chunk, searchFrom, bi, message, i, headers, contentType_1, body, result, next;\n        var _c, _d;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_e) {\n            switch(_e.label){\n                case 0:\n                    if (TextDecoder === undefined) {\n                        throw new Error(\"TextDecoder must be defined in the environment: please import a polyfill.\");\n                    }\n                    decoder = new TextDecoder(\"utf-8\");\n                    contentType = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get(\"content-type\");\n                    delimiter = \"boundary=\";\n                    boundaryVal = (contentType === null || contentType === void 0 ? void 0 : contentType.includes(delimiter)) ? contentType === null || contentType === void 0 ? void 0 : contentType.substring((contentType === null || contentType === void 0 ? void 0 : contentType.indexOf(delimiter)) + delimiter.length).replace(/['\"]/g, \"\").replace(/\\;(.*)/gm, \"\").trim() : \"-\";\n                    boundary = \"\\r\\n--\".concat(boundaryVal);\n                    buffer = \"\";\n                    iterator = (0,_responseIterator_js__WEBPACK_IMPORTED_MODULE_1__.responseIterator)(response);\n                    running = true;\n                    _e.label = 1;\n                case 1:\n                    if (!running) return [\n                        3 /*break*/ ,\n                        3\n                    ];\n                    return [\n                        4 /*yield*/ ,\n                        iterator.next()\n                    ];\n                case 2:\n                    _b = _e.sent(), value = _b.value, done = _b.done;\n                    chunk = typeof value === \"string\" ? value : decoder.decode(value);\n                    searchFrom = buffer.length - boundary.length + 1;\n                    running = !done;\n                    buffer += chunk;\n                    bi = buffer.indexOf(boundary, searchFrom);\n                    while(bi > -1){\n                        message = void 0;\n                        _c = [\n                            buffer.slice(0, bi),\n                            buffer.slice(bi + boundary.length)\n                        ], message = _c[0], buffer = _c[1];\n                        i = message.indexOf(\"\\r\\n\\r\\n\");\n                        headers = parseHeaders(message.slice(0, i));\n                        contentType_1 = headers[\"content-type\"];\n                        if (contentType_1 && contentType_1.toLowerCase().indexOf(\"application/json\") === -1) {\n                            throw new Error(\"Unsupported patch content type: application/json is required.\");\n                        }\n                        body = message.slice(i);\n                        if (body) {\n                            result = parseJsonBody(response, body);\n                            if (Object.keys(result).length > 1 || \"data\" in result || \"incremental\" in result || \"errors\" in result || \"payload\" in result) {\n                                if ((0,_utilities_common_incrementalResult_js__WEBPACK_IMPORTED_MODULE_2__.isApolloPayloadResult)(result)) {\n                                    next = {};\n                                    if (\"payload\" in result) {\n                                        next = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, result.payload);\n                                    }\n                                    if (\"errors\" in result) {\n                                        next = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, next), {\n                                            extensions: (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, \"extensions\" in next ? next.extensions : null), (_d = {}, _d[_errors_index_js__WEBPACK_IMPORTED_MODULE_3__.PROTOCOL_ERRORS_SYMBOL] = result.errors, _d))\n                                        });\n                                    }\n                                    nextValue(next);\n                                } else {\n                                    // for the last chunk with only `hasNext: false`\n                                    // we don't need to call observer.next as there is no data/errors\n                                    nextValue(result);\n                                }\n                            } else if (// If the chunk contains only a \"hasNext: false\", we can call\n                            // observer.complete() immediately.\n                            Object.keys(result).length === 1 && \"hasNext\" in result && !result.hasNext) {\n                                return [\n                                    2 /*return*/ \n                                ];\n                            }\n                        }\n                        bi = buffer.indexOf(boundary);\n                    }\n                    return [\n                        3 /*break*/ ,\n                        1\n                    ];\n                case 3:\n                    return [\n                        2 /*return*/ \n                    ];\n            }\n        });\n    });\n}\nfunction parseHeaders(headerText) {\n    var headersInit = {};\n    headerText.split(\"\\n\").forEach(function(line) {\n        var i = line.indexOf(\":\");\n        if (i > -1) {\n            // normalize headers to lowercase\n            var name_1 = line.slice(0, i).trim().toLowerCase();\n            var value = line.slice(i + 1).trim();\n            headersInit[name_1] = value;\n        }\n    });\n    return headersInit;\n}\nfunction parseJsonBody(response, bodyText) {\n    if (response.status >= 300) {\n        // Network error\n        var getResult = function() {\n            try {\n                return JSON.parse(bodyText);\n            } catch (err) {\n                return bodyText;\n            }\n        };\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.throwServerError)(response, getResult(), \"Response not successful: Received status code \".concat(response.status));\n    }\n    try {\n        return JSON.parse(bodyText);\n    } catch (err) {\n        var parseError = err;\n        parseError.name = \"ServerParseError\";\n        parseError.response = response;\n        parseError.statusCode = response.status;\n        parseError.bodyText = bodyText;\n        throw parseError;\n    }\n}\nfunction handleError(err, observer) {\n    // if it is a network error, BUT there is graphql result info fire\n    // the next observer before calling error this gives apollo-client\n    // (and react-apollo) the `graphqlErrors` and `networkErrors` to\n    // pass to UI this should only happen if we *also* have data as\n    // part of the response key per the spec\n    if (err.result && err.result.errors && err.result.data) {\n        // if we don't call next, the UI can only show networkError\n        // because AC didn't get any graphqlErrors this is graphql\n        // execution result info (i.e errors and possibly data) this is\n        // because there is no formal spec how errors should translate to\n        // http status codes. So an auth error (401) could have both data\n        // from a public field, errors from a private field, and a status\n        // of 401\n        // {\n        //  user { // this will have errors\n        //    firstName\n        //  }\n        //  products { // this is public so will have data\n        //    cost\n        //  }\n        // }\n        //\n        // the result of above *could* look like this:\n        // {\n        //   data: { products: [{ cost: \"$10\" }] },\n        //   errors: [{\n        //      message: 'your session has timed out',\n        //      path: []\n        //   }]\n        // }\n        // status code of above would be a 401\n        // in the UI you want to show data where you can, errors as data where you can\n        // and use correct http status codes\n        observer.next(err.result);\n    }\n    observer.error(err);\n}\nfunction parseAndCheckHttpResponse(operations) {\n    return function(response) {\n        return response.text().then(function(bodyText) {\n            return parseJsonBody(response, bodyText);\n        }).then(function(result) {\n            if (!Array.isArray(result) && !hasOwnProperty.call(result, \"data\") && !hasOwnProperty.call(result, \"errors\")) {\n                // Data error\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.throwServerError)(response, result, \"Server response was missing for query '\".concat(Array.isArray(operations) ? operations.map(function(op) {\n                    return op.operationName;\n                }) : operations.operationName, \"'.\"));\n            }\n            return result;\n        });\n    };\n} //# sourceMappingURL=parseAndCheckHttpResponse.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/responseIterator.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/responseIterator.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   responseIterator: () => (/* binding */ responseIterator)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _iterators_async_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iterators/async.js */ \"(ssr)/./node_modules/@apollo/client/link/http/iterators/async.js\");\n/* harmony import */ var _iterators_nodeStream_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./iterators/nodeStream.js */ \"(ssr)/./node_modules/@apollo/client/link/http/iterators/nodeStream.js\");\n/* harmony import */ var _iterators_promise_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./iterators/promise.js */ \"(ssr)/./node_modules/@apollo/client/link/http/iterators/promise.js\");\n/* harmony import */ var _iterators_reader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./iterators/reader.js */ \"(ssr)/./node_modules/@apollo/client/link/http/iterators/reader.js\");\n/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/index.ts\n */ \n\n\n\n\nfunction isNodeResponse(value) {\n    return !!value.body;\n}\nfunction isReadableStream(value) {\n    return !!value.getReader;\n}\nfunction isAsyncIterableIterator(value) {\n    return !!(_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.canUseAsyncIteratorSymbol && value[Symbol.asyncIterator]);\n}\nfunction isStreamableBlob(value) {\n    return !!value.stream;\n}\nfunction isBlob(value) {\n    return !!value.arrayBuffer;\n}\nfunction isNodeReadableStream(value) {\n    return !!value.pipe;\n}\nfunction responseIterator(response) {\n    var body = response;\n    if (isNodeResponse(response)) body = response.body;\n    if (isAsyncIterableIterator(body)) return (0,_iterators_async_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(body);\n    if (isReadableStream(body)) return (0,_iterators_reader_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(body.getReader());\n    // this errors without casting to ReadableStream<T>\n    // because Blob.stream() returns a NodeJS ReadableStream\n    if (isStreamableBlob(body)) {\n        return (0,_iterators_reader_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(body.stream().getReader());\n    }\n    if (isBlob(body)) return (0,_iterators_promise_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(body.arrayBuffer());\n    if (isNodeReadableStream(body)) return (0,_iterators_nodeStream_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(body);\n    throw new Error(\"Unknown body type for responseIterator. Please pass a streamable response.\");\n} //# sourceMappingURL=responseIterator.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3Jlc3BvbnNlSXRlcmF0b3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7OztDQUdDLEdBQ29FO0FBQ3BCO0FBQ1U7QUFDTjtBQUNGO0FBQ25ELFNBQVNLLGVBQWVDLEtBQUs7SUFDekIsT0FBTyxDQUFDLENBQUNBLE1BQU1DLElBQUk7QUFDdkI7QUFDQSxTQUFTQyxpQkFBaUJGLEtBQUs7SUFDM0IsT0FBTyxDQUFDLENBQUNBLE1BQU1HLFNBQVM7QUFDNUI7QUFDQSxTQUFTQyx3QkFBd0JKLEtBQUs7SUFDbEMsT0FBTyxDQUFDLENBQUVOLENBQUFBLDBFQUF5QkEsSUFDL0JNLEtBQUssQ0FBQ0ssT0FBT1YsYUFBYSxDQUFDO0FBQ25DO0FBQ0EsU0FBU1csaUJBQWlCTixLQUFLO0lBQzNCLE9BQU8sQ0FBQyxDQUFDQSxNQUFNTyxNQUFNO0FBQ3pCO0FBQ0EsU0FBU0MsT0FBT1IsS0FBSztJQUNqQixPQUFPLENBQUMsQ0FBQ0EsTUFBTVMsV0FBVztBQUM5QjtBQUNBLFNBQVNDLHFCQUFxQlYsS0FBSztJQUMvQixPQUFPLENBQUMsQ0FBQ0EsTUFBTVcsSUFBSTtBQUN2QjtBQUNPLFNBQVNDLGlCQUFpQkMsUUFBUTtJQUNyQyxJQUFJWixPQUFPWTtJQUNYLElBQUlkLGVBQWVjLFdBQ2ZaLE9BQU9ZLFNBQVNaLElBQUk7SUFDeEIsSUFBSUcsd0JBQXdCSCxPQUN4QixPQUFPTiwrREFBYUEsQ0FBQ007SUFDekIsSUFBSUMsaUJBQWlCRCxPQUNqQixPQUFPSCxnRUFBY0EsQ0FBQ0csS0FBS0UsU0FBUztJQUN4QyxtREFBbUQ7SUFDbkQsd0RBQXdEO0lBQ3hELElBQUlHLGlCQUFpQkwsT0FBTztRQUN4QixPQUFPSCxnRUFBY0EsQ0FBQ0csS0FBS00sTUFBTSxHQUFHSixTQUFTO0lBQ2pEO0lBQ0EsSUFBSUssT0FBT1AsT0FDUCxPQUFPSixpRUFBZUEsQ0FBQ0ksS0FBS1EsV0FBVztJQUMzQyxJQUFJQyxxQkFBcUJULE9BQ3JCLE9BQU9MLG9FQUFrQkEsQ0FBQ0s7SUFDOUIsTUFBTSxJQUFJYSxNQUFNO0FBQ3BCLEVBQ0EsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktZG9jcy1mcm9uLWVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2xpbmsvaHR0cC9yZXNwb25zZUl0ZXJhdG9yLmpzPzdmMzQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBPcmlnaW5hbCBzb3VyY2U6XG4gKiBodHRwczovL2dpdGh1Yi5jb20va21hbGFrb2ZmL3Jlc3BvbnNlLWl0ZXJhdG9yL2Jsb2IvbWFzdGVyL3NyYy9pbmRleC50c1xuICovXG5pbXBvcnQgeyBjYW5Vc2VBc3luY0l0ZXJhdG9yU3ltYm9sIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xuaW1wb3J0IGFzeW5jSXRlcmF0b3IgZnJvbSBcIi4vaXRlcmF0b3JzL2FzeW5jLmpzXCI7XG5pbXBvcnQgbm9kZVN0cmVhbUl0ZXJhdG9yIGZyb20gXCIuL2l0ZXJhdG9ycy9ub2RlU3RyZWFtLmpzXCI7XG5pbXBvcnQgcHJvbWlzZUl0ZXJhdG9yIGZyb20gXCIuL2l0ZXJhdG9ycy9wcm9taXNlLmpzXCI7XG5pbXBvcnQgcmVhZGVySXRlcmF0b3IgZnJvbSBcIi4vaXRlcmF0b3JzL3JlYWRlci5qc1wiO1xuZnVuY3Rpb24gaXNOb2RlUmVzcG9uc2UodmFsdWUpIHtcbiAgICByZXR1cm4gISF2YWx1ZS5ib2R5O1xufVxuZnVuY3Rpb24gaXNSZWFkYWJsZVN0cmVhbSh2YWx1ZSkge1xuICAgIHJldHVybiAhIXZhbHVlLmdldFJlYWRlcjtcbn1cbmZ1bmN0aW9uIGlzQXN5bmNJdGVyYWJsZUl0ZXJhdG9yKHZhbHVlKSB7XG4gICAgcmV0dXJuICEhKGNhblVzZUFzeW5jSXRlcmF0b3JTeW1ib2wgJiZcbiAgICAgICAgdmFsdWVbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKTtcbn1cbmZ1bmN0aW9uIGlzU3RyZWFtYWJsZUJsb2IodmFsdWUpIHtcbiAgICByZXR1cm4gISF2YWx1ZS5zdHJlYW07XG59XG5mdW5jdGlvbiBpc0Jsb2IodmFsdWUpIHtcbiAgICByZXR1cm4gISF2YWx1ZS5hcnJheUJ1ZmZlcjtcbn1cbmZ1bmN0aW9uIGlzTm9kZVJlYWRhYmxlU3RyZWFtKHZhbHVlKSB7XG4gICAgcmV0dXJuICEhdmFsdWUucGlwZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZXNwb25zZUl0ZXJhdG9yKHJlc3BvbnNlKSB7XG4gICAgdmFyIGJvZHkgPSByZXNwb25zZTtcbiAgICBpZiAoaXNOb2RlUmVzcG9uc2UocmVzcG9uc2UpKVxuICAgICAgICBib2R5ID0gcmVzcG9uc2UuYm9keTtcbiAgICBpZiAoaXNBc3luY0l0ZXJhYmxlSXRlcmF0b3IoYm9keSkpXG4gICAgICAgIHJldHVybiBhc3luY0l0ZXJhdG9yKGJvZHkpO1xuICAgIGlmIChpc1JlYWRhYmxlU3RyZWFtKGJvZHkpKVxuICAgICAgICByZXR1cm4gcmVhZGVySXRlcmF0b3IoYm9keS5nZXRSZWFkZXIoKSk7XG4gICAgLy8gdGhpcyBlcnJvcnMgd2l0aG91dCBjYXN0aW5nIHRvIFJlYWRhYmxlU3RyZWFtPFQ+XG4gICAgLy8gYmVjYXVzZSBCbG9iLnN0cmVhbSgpIHJldHVybnMgYSBOb2RlSlMgUmVhZGFibGVTdHJlYW1cbiAgICBpZiAoaXNTdHJlYW1hYmxlQmxvYihib2R5KSkge1xuICAgICAgICByZXR1cm4gcmVhZGVySXRlcmF0b3IoYm9keS5zdHJlYW0oKS5nZXRSZWFkZXIoKSk7XG4gICAgfVxuICAgIGlmIChpc0Jsb2IoYm9keSkpXG4gICAgICAgIHJldHVybiBwcm9taXNlSXRlcmF0b3IoYm9keS5hcnJheUJ1ZmZlcigpKTtcbiAgICBpZiAoaXNOb2RlUmVhZGFibGVTdHJlYW0oYm9keSkpXG4gICAgICAgIHJldHVybiBub2RlU3RyZWFtSXRlcmF0b3IoYm9keSk7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBib2R5IHR5cGUgZm9yIHJlc3BvbnNlSXRlcmF0b3IuIFBsZWFzZSBwYXNzIGEgc3RyZWFtYWJsZSByZXNwb25zZS5cIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNwb25zZUl0ZXJhdG9yLmpzLm1hcCJdLCJuYW1lcyI6WyJjYW5Vc2VBc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsIm5vZGVTdHJlYW1JdGVyYXRvciIsInByb21pc2VJdGVyYXRvciIsInJlYWRlckl0ZXJhdG9yIiwiaXNOb2RlUmVzcG9uc2UiLCJ2YWx1ZSIsImJvZHkiLCJpc1JlYWRhYmxlU3RyZWFtIiwiZ2V0UmVhZGVyIiwiaXNBc3luY0l0ZXJhYmxlSXRlcmF0b3IiLCJTeW1ib2wiLCJpc1N0cmVhbWFibGVCbG9iIiwic3RyZWFtIiwiaXNCbG9iIiwiYXJyYXlCdWZmZXIiLCJpc05vZGVSZWFkYWJsZVN0cmVhbSIsInBpcGUiLCJyZXNwb25zZUl0ZXJhdG9yIiwicmVzcG9uc2UiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/responseIterator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/rewriteURIForGET.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/rewriteURIForGET.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rewriteURIForGET: () => (/* binding */ rewriteURIForGET)\n/* harmony export */ });\n/* harmony import */ var _serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./serializeFetchParameter.js */ \"(ssr)/./node_modules/@apollo/client/link/http/serializeFetchParameter.js\");\n\n// For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\nfunction rewriteURIForGET(chosenURI, body) {\n    // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n    // the extra level of JSON serialization!\n    var queryParams = [];\n    var addQueryParam = function(key, value) {\n        queryParams.push(\"\".concat(key, \"=\").concat(encodeURIComponent(value)));\n    };\n    if (\"query\" in body) {\n        addQueryParam(\"query\", body.query);\n    }\n    if (body.operationName) {\n        addQueryParam(\"operationName\", body.operationName);\n    }\n    if (body.variables) {\n        var serializedVariables = void 0;\n        try {\n            serializedVariables = (0,_serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_0__.serializeFetchParameter)(body.variables, \"Variables map\");\n        } catch (parseError) {\n            return {\n                parseError: parseError\n            };\n        }\n        addQueryParam(\"variables\", serializedVariables);\n    }\n    if (body.extensions) {\n        var serializedExtensions = void 0;\n        try {\n            serializedExtensions = (0,_serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_0__.serializeFetchParameter)(body.extensions, \"Extensions map\");\n        } catch (parseError) {\n            return {\n                parseError: parseError\n            };\n        }\n        addQueryParam(\"extensions\", serializedExtensions);\n    }\n    // Reconstruct the URI with added query params.\n    // XXX This assumes that the URI is well-formed and that it doesn't\n    //     already contain any of these query params. We could instead use the\n    //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n    //     don't support URLSearchParams. Note that some browsers (and\n    //     versions of whatwg-url) support URL but not URLSearchParams!\n    var fragment = \"\", preFragment = chosenURI;\n    var fragmentStart = chosenURI.indexOf(\"#\");\n    if (fragmentStart !== -1) {\n        fragment = chosenURI.substr(fragmentStart);\n        preFragment = chosenURI.substr(0, fragmentStart);\n    }\n    var queryParamsPrefix = preFragment.indexOf(\"?\") === -1 ? \"?\" : \"&\";\n    var newURI = preFragment + queryParamsPrefix + queryParams.join(\"&\") + fragment;\n    return {\n        newURI: newURI\n    };\n} //# sourceMappingURL=rewriteURIForGET.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3Jld3JpdGVVUklGb3JHRVQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBdUU7QUFDdkUsNEVBQTRFO0FBQzVFLGVBQWU7QUFDUixTQUFTQyxpQkFBaUJDLFNBQVMsRUFBRUMsSUFBSTtJQUM1Qyx5RUFBeUU7SUFDekUseUNBQXlDO0lBQ3pDLElBQUlDLGNBQWMsRUFBRTtJQUNwQixJQUFJQyxnQkFBZ0IsU0FBVUMsR0FBRyxFQUFFQyxLQUFLO1FBQ3BDSCxZQUFZSSxJQUFJLENBQUMsR0FBR0MsTUFBTSxDQUFDSCxLQUFLLEtBQUtHLE1BQU0sQ0FBQ0MsbUJBQW1CSDtJQUNuRTtJQUNBLElBQUksV0FBV0osTUFBTTtRQUNqQkUsY0FBYyxTQUFTRixLQUFLUSxLQUFLO0lBQ3JDO0lBQ0EsSUFBSVIsS0FBS1MsYUFBYSxFQUFFO1FBQ3BCUCxjQUFjLGlCQUFpQkYsS0FBS1MsYUFBYTtJQUNyRDtJQUNBLElBQUlULEtBQUtVLFNBQVMsRUFBRTtRQUNoQixJQUFJQyxzQkFBc0IsS0FBSztRQUMvQixJQUFJO1lBQ0FBLHNCQUFzQmQsb0ZBQXVCQSxDQUFDRyxLQUFLVSxTQUFTLEVBQUU7UUFDbEUsRUFDQSxPQUFPRSxZQUFZO1lBQ2YsT0FBTztnQkFBRUEsWUFBWUE7WUFBVztRQUNwQztRQUNBVixjQUFjLGFBQWFTO0lBQy9CO0lBQ0EsSUFBSVgsS0FBS2EsVUFBVSxFQUFFO1FBQ2pCLElBQUlDLHVCQUF1QixLQUFLO1FBQ2hDLElBQUk7WUFDQUEsdUJBQXVCakIsb0ZBQXVCQSxDQUFDRyxLQUFLYSxVQUFVLEVBQUU7UUFDcEUsRUFDQSxPQUFPRCxZQUFZO1lBQ2YsT0FBTztnQkFBRUEsWUFBWUE7WUFBVztRQUNwQztRQUNBVixjQUFjLGNBQWNZO0lBQ2hDO0lBQ0EsK0NBQStDO0lBQy9DLG1FQUFtRTtJQUNuRSwwRUFBMEU7SUFDMUUseUVBQXlFO0lBQ3pFLGtFQUFrRTtJQUNsRSxtRUFBbUU7SUFDbkUsSUFBSUMsV0FBVyxJQUFJQyxjQUFjakI7SUFDakMsSUFBSWtCLGdCQUFnQmxCLFVBQVVtQixPQUFPLENBQUM7SUFDdEMsSUFBSUQsa0JBQWtCLENBQUMsR0FBRztRQUN0QkYsV0FBV2hCLFVBQVVvQixNQUFNLENBQUNGO1FBQzVCRCxjQUFjakIsVUFBVW9CLE1BQU0sQ0FBQyxHQUFHRjtJQUN0QztJQUNBLElBQUlHLG9CQUFvQkosWUFBWUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLE1BQU07SUFDaEUsSUFBSUcsU0FBU0wsY0FBY0ksb0JBQW9CbkIsWUFBWXFCLElBQUksQ0FBQyxPQUFPUDtJQUN2RSxPQUFPO1FBQUVNLFFBQVFBO0lBQU87QUFDNUIsRUFDQSw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3Jld3JpdGVVUklGb3JHRVQuanM/NjU3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzZXJpYWxpemVGZXRjaFBhcmFtZXRlciB9IGZyb20gXCIuL3NlcmlhbGl6ZUZldGNoUGFyYW1ldGVyLmpzXCI7XG4vLyBGb3IgR0VUIG9wZXJhdGlvbnMsIHJldHVybnMgdGhlIGdpdmVuIFVSSSByZXdyaXR0ZW4gd2l0aCBwYXJhbWV0ZXJzLCBvciBhXG4vLyBwYXJzZSBlcnJvci5cbmV4cG9ydCBmdW5jdGlvbiByZXdyaXRlVVJJRm9yR0VUKGNob3NlblVSSSwgYm9keSkge1xuICAgIC8vIEltcGxlbWVudCB0aGUgc3RhbmRhcmQgSFRUUCBHRVQgc2VyaWFsaXphdGlvbiwgcGx1cyAnZXh0ZW5zaW9ucycuIE5vdGVcbiAgICAvLyB0aGUgZXh0cmEgbGV2ZWwgb2YgSlNPTiBzZXJpYWxpemF0aW9uIVxuICAgIHZhciBxdWVyeVBhcmFtcyA9IFtdO1xuICAgIHZhciBhZGRRdWVyeVBhcmFtID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgcXVlcnlQYXJhbXMucHVzaChcIlwiLmNvbmNhdChrZXksIFwiPVwiKS5jb25jYXQoZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSkpO1xuICAgIH07XG4gICAgaWYgKFwicXVlcnlcIiBpbiBib2R5KSB7XG4gICAgICAgIGFkZFF1ZXJ5UGFyYW0oXCJxdWVyeVwiLCBib2R5LnF1ZXJ5KTtcbiAgICB9XG4gICAgaWYgKGJvZHkub3BlcmF0aW9uTmFtZSkge1xuICAgICAgICBhZGRRdWVyeVBhcmFtKFwib3BlcmF0aW9uTmFtZVwiLCBib2R5Lm9wZXJhdGlvbk5hbWUpO1xuICAgIH1cbiAgICBpZiAoYm9keS52YXJpYWJsZXMpIHtcbiAgICAgICAgdmFyIHNlcmlhbGl6ZWRWYXJpYWJsZXMgPSB2b2lkIDA7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzZXJpYWxpemVkVmFyaWFibGVzID0gc2VyaWFsaXplRmV0Y2hQYXJhbWV0ZXIoYm9keS52YXJpYWJsZXMsIFwiVmFyaWFibGVzIG1hcFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAocGFyc2VFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHsgcGFyc2VFcnJvcjogcGFyc2VFcnJvciB9O1xuICAgICAgICB9XG4gICAgICAgIGFkZFF1ZXJ5UGFyYW0oXCJ2YXJpYWJsZXNcIiwgc2VyaWFsaXplZFZhcmlhYmxlcyk7XG4gICAgfVxuICAgIGlmIChib2R5LmV4dGVuc2lvbnMpIHtcbiAgICAgICAgdmFyIHNlcmlhbGl6ZWRFeHRlbnNpb25zID0gdm9pZCAwO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc2VyaWFsaXplZEV4dGVuc2lvbnMgPSBzZXJpYWxpemVGZXRjaFBhcmFtZXRlcihib2R5LmV4dGVuc2lvbnMsIFwiRXh0ZW5zaW9ucyBtYXBcIik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKHBhcnNlRXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHBhcnNlRXJyb3I6IHBhcnNlRXJyb3IgfTtcbiAgICAgICAgfVxuICAgICAgICBhZGRRdWVyeVBhcmFtKFwiZXh0ZW5zaW9uc1wiLCBzZXJpYWxpemVkRXh0ZW5zaW9ucyk7XG4gICAgfVxuICAgIC8vIFJlY29uc3RydWN0IHRoZSBVUkkgd2l0aCBhZGRlZCBxdWVyeSBwYXJhbXMuXG4gICAgLy8gWFhYIFRoaXMgYXNzdW1lcyB0aGF0IHRoZSBVUkkgaXMgd2VsbC1mb3JtZWQgYW5kIHRoYXQgaXQgZG9lc24ndFxuICAgIC8vICAgICBhbHJlYWR5IGNvbnRhaW4gYW55IG9mIHRoZXNlIHF1ZXJ5IHBhcmFtcy4gV2UgY291bGQgaW5zdGVhZCB1c2UgdGhlXG4gICAgLy8gICAgIFVSTCBBUEkgYW5kIHRha2UgYSBwb2x5ZmlsbCAod2hhdHdnLXVybEA2KSBmb3Igb2xkZXIgYnJvd3NlcnMgdGhhdFxuICAgIC8vICAgICBkb24ndCBzdXBwb3J0IFVSTFNlYXJjaFBhcmFtcy4gTm90ZSB0aGF0IHNvbWUgYnJvd3NlcnMgKGFuZFxuICAgIC8vICAgICB2ZXJzaW9ucyBvZiB3aGF0d2ctdXJsKSBzdXBwb3J0IFVSTCBidXQgbm90IFVSTFNlYXJjaFBhcmFtcyFcbiAgICB2YXIgZnJhZ21lbnQgPSBcIlwiLCBwcmVGcmFnbWVudCA9IGNob3NlblVSSTtcbiAgICB2YXIgZnJhZ21lbnRTdGFydCA9IGNob3NlblVSSS5pbmRleE9mKFwiI1wiKTtcbiAgICBpZiAoZnJhZ21lbnRTdGFydCAhPT0gLTEpIHtcbiAgICAgICAgZnJhZ21lbnQgPSBjaG9zZW5VUkkuc3Vic3RyKGZyYWdtZW50U3RhcnQpO1xuICAgICAgICBwcmVGcmFnbWVudCA9IGNob3NlblVSSS5zdWJzdHIoMCwgZnJhZ21lbnRTdGFydCk7XG4gICAgfVxuICAgIHZhciBxdWVyeVBhcmFtc1ByZWZpeCA9IHByZUZyYWdtZW50LmluZGV4T2YoXCI/XCIpID09PSAtMSA/IFwiP1wiIDogXCImXCI7XG4gICAgdmFyIG5ld1VSSSA9IHByZUZyYWdtZW50ICsgcXVlcnlQYXJhbXNQcmVmaXggKyBxdWVyeVBhcmFtcy5qb2luKFwiJlwiKSArIGZyYWdtZW50O1xuICAgIHJldHVybiB7IG5ld1VSSTogbmV3VVJJIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXdyaXRlVVJJRm9yR0VULmpzLm1hcCJdLCJuYW1lcyI6WyJzZXJpYWxpemVGZXRjaFBhcmFtZXRlciIsInJld3JpdGVVUklGb3JHRVQiLCJjaG9zZW5VUkkiLCJib2R5IiwicXVlcnlQYXJhbXMiLCJhZGRRdWVyeVBhcmFtIiwia2V5IiwidmFsdWUiLCJwdXNoIiwiY29uY2F0IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicXVlcnkiLCJvcGVyYXRpb25OYW1lIiwidmFyaWFibGVzIiwic2VyaWFsaXplZFZhcmlhYmxlcyIsInBhcnNlRXJyb3IiLCJleHRlbnNpb25zIiwic2VyaWFsaXplZEV4dGVuc2lvbnMiLCJmcmFnbWVudCIsInByZUZyYWdtZW50IiwiZnJhZ21lbnRTdGFydCIsImluZGV4T2YiLCJzdWJzdHIiLCJxdWVyeVBhcmFtc1ByZWZpeCIsIm5ld1VSSSIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/rewriteURIForGET.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultPrinter: () => (/* binding */ defaultPrinter),\n/* harmony export */   fallbackHttpConfig: () => (/* binding */ fallbackHttpConfig),\n/* harmony export */   selectHttpOptionsAndBody: () => (/* binding */ selectHttpOptionsAndBody),\n/* harmony export */   selectHttpOptionsAndBodyInternal: () => (/* binding */ selectHttpOptionsAndBodyInternal)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/print.js\");\n\n\nvar defaultHttpOptions = {\n    includeQuery: true,\n    includeExtensions: false,\n    preserveHeaderCase: false\n};\nvar defaultHeaders = {\n    // headers are case insensitive (https://stackoverflow.com/a/5259004)\n    accept: \"*/*\",\n    // The content-type header describes the type of the body of the request, and\n    // so it typically only is sent with requests that actually have bodies. One\n    // could imagine that Apollo Client would remove this header when constructing\n    // a GET request (which has no body), but we historically have not done that.\n    // This means that browsers will preflight all Apollo Client requests (even\n    // GET requests). Apollo Server's CSRF prevention feature (introduced in\n    // AS3.7) takes advantage of this fact and does not block requests with this\n    // header. If you want to drop this header from GET requests, then you should\n    // probably replace it with a `apollo-require-preflight` header, or servers\n    // with CSRF prevention enabled might block your GET request. See\n    // https://www.apollographql.com/docs/apollo-server/security/cors/#preventing-cross-site-request-forgery-csrf\n    // for more details.\n    \"content-type\": \"application/json\"\n};\nvar defaultOptions = {\n    method: \"POST\"\n};\nvar fallbackHttpConfig = {\n    http: defaultHttpOptions,\n    headers: defaultHeaders,\n    options: defaultOptions\n};\nvar defaultPrinter = function(ast, printer) {\n    return printer(ast);\n};\nfunction selectHttpOptionsAndBody(operation, fallbackConfig) {\n    var configs = [];\n    for(var _i = 2; _i < arguments.length; _i++){\n        configs[_i - 2] = arguments[_i];\n    }\n    configs.unshift(fallbackConfig);\n    return selectHttpOptionsAndBodyInternal.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([\n        operation,\n        defaultPrinter\n    ], configs, false));\n}\nfunction selectHttpOptionsAndBodyInternal(operation, printer) {\n    var configs = [];\n    for(var _i = 2; _i < arguments.length; _i++){\n        configs[_i - 2] = arguments[_i];\n    }\n    var options = {};\n    var http = {};\n    configs.forEach(function(config) {\n        options = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, options), config.options), {\n            headers: (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, options.headers), config.headers)\n        });\n        if (config.credentials) {\n            options.credentials = config.credentials;\n        }\n        http = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, http), config.http);\n    });\n    if (options.headers) {\n        options.headers = removeDuplicateHeaders(options.headers, http.preserveHeaderCase);\n    }\n    //The body depends on the http options\n    var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;\n    var body = {\n        operationName: operationName,\n        variables: variables\n    };\n    if (http.includeExtensions) body.extensions = extensions;\n    // not sending the query (i.e persisted queries)\n    if (http.includeQuery) body.query = printer(query, _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.print);\n    return {\n        options: options,\n        body: body\n    };\n}\n// Remove potential duplicate header names, preserving last (by insertion order).\n// This is done to prevent unintentionally duplicating a header instead of\n// overwriting it (See #8447 and #8449).\nfunction removeDuplicateHeaders(headers, preserveHeaderCase) {\n    // If we're not preserving the case, just remove duplicates w/ normalization.\n    if (!preserveHeaderCase) {\n        var normalizedHeaders_1 = Object.create(null);\n        Object.keys(Object(headers)).forEach(function(name) {\n            normalizedHeaders_1[name.toLowerCase()] = headers[name];\n        });\n        return normalizedHeaders_1;\n    }\n    // If we are preserving the case, remove duplicates w/ normalization,\n    // preserving the original name.\n    // This allows for non-http-spec-compliant servers that expect intentionally\n    // capitalized header names (See #6741).\n    var headerData = Object.create(null);\n    Object.keys(Object(headers)).forEach(function(name) {\n        headerData[name.toLowerCase()] = {\n            originalName: name,\n            value: headers[name]\n        };\n    });\n    var normalizedHeaders = Object.create(null);\n    Object.keys(headerData).forEach(function(name) {\n        normalizedHeaders[headerData[name].originalName] = headerData[name].value;\n    });\n    return normalizedHeaders;\n} //# sourceMappingURL=selectHttpOptionsAndBody.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/selectURI.js":
/*!************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/selectURI.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   selectURI: () => (/* binding */ selectURI)\n/* harmony export */ });\nvar selectURI = function(operation, fallbackURI) {\n    var context = operation.getContext();\n    var contextURI = context.uri;\n    if (contextURI) {\n        return contextURI;\n    } else if (typeof fallbackURI === \"function\") {\n        return fallbackURI(operation);\n    } else {\n        return fallbackURI || \"/graphql\";\n    }\n}; //# sourceMappingURL=selectURI.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3NlbGVjdFVSSS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sSUFBSUEsWUFBWSxTQUFVQyxTQUFTLEVBQUVDLFdBQVc7SUFDbkQsSUFBSUMsVUFBVUYsVUFBVUcsVUFBVTtJQUNsQyxJQUFJQyxhQUFhRixRQUFRRyxHQUFHO0lBQzVCLElBQUlELFlBQVk7UUFDWixPQUFPQTtJQUNYLE9BQ0ssSUFBSSxPQUFPSCxnQkFBZ0IsWUFBWTtRQUN4QyxPQUFPQSxZQUFZRDtJQUN2QixPQUNLO1FBQ0QsT0FBT0MsZUFBZTtJQUMxQjtBQUNKLEVBQUUsQ0FDRixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3NlbGVjdFVSSS5qcz9mMGZhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgc2VsZWN0VVJJID0gZnVuY3Rpb24gKG9wZXJhdGlvbiwgZmFsbGJhY2tVUkkpIHtcbiAgICB2YXIgY29udGV4dCA9IG9wZXJhdGlvbi5nZXRDb250ZXh0KCk7XG4gICAgdmFyIGNvbnRleHRVUkkgPSBjb250ZXh0LnVyaTtcbiAgICBpZiAoY29udGV4dFVSSSkge1xuICAgICAgICByZXR1cm4gY29udGV4dFVSSTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGZhbGxiYWNrVVJJID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrVVJJKG9wZXJhdGlvbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsbGJhY2tVUkkgfHwgXCIvZ3JhcGhxbFwiO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZWxlY3RVUkkuanMubWFwIl0sIm5hbWVzIjpbInNlbGVjdFVSSSIsIm9wZXJhdGlvbiIsImZhbGxiYWNrVVJJIiwiY29udGV4dCIsImdldENvbnRleHQiLCJjb250ZXh0VVJJIiwidXJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/selectURI.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/http/serializeFetchParameter.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/serializeFetchParameter.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   serializeFetchParameter: () => (/* binding */ serializeFetchParameter)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\nvar serializeFetchParameter = function(p, label) {\n    var serialized;\n    try {\n        serialized = JSON.stringify(p);\n    } catch (e) {\n        var parseError = (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(39, label, e.message);\n        parseError.parseError = e;\n        throw parseError;\n    }\n    return serialized;\n}; //# sourceMappingURL=serializeFetchParameter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3NlcmlhbGl6ZUZldGNoUGFyYW1ldGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFFO0FBQzlELElBQUlDLDBCQUEwQixTQUFVQyxDQUFDLEVBQUVDLEtBQUs7SUFDbkQsSUFBSUM7SUFDSixJQUFJO1FBQ0FBLGFBQWFDLEtBQUtDLFNBQVMsQ0FBQ0o7SUFDaEMsRUFDQSxPQUFPSyxHQUFHO1FBQ04sSUFBSUMsYUFBYVIsOEVBQWlCQSxDQUFDLElBQUlHLE9BQU9JLEVBQUVFLE9BQU87UUFDdkRELFdBQVdBLFVBQVUsR0FBR0Q7UUFDeEIsTUFBTUM7SUFDVjtJQUNBLE9BQU9KO0FBQ1gsRUFBRSxDQUNGLG1EQUFtRCIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL2h0dHAvc2VyaWFsaXplRmV0Y2hQYXJhbWV0ZXIuanM/YmQ2NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuZXdJbnZhcmlhbnRFcnJvciB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvZ2xvYmFscy9pbmRleC5qc1wiO1xuZXhwb3J0IHZhciBzZXJpYWxpemVGZXRjaFBhcmFtZXRlciA9IGZ1bmN0aW9uIChwLCBsYWJlbCkge1xuICAgIHZhciBzZXJpYWxpemVkO1xuICAgIHRyeSB7XG4gICAgICAgIHNlcmlhbGl6ZWQgPSBKU09OLnN0cmluZ2lmeShwKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgdmFyIHBhcnNlRXJyb3IgPSBuZXdJbnZhcmlhbnRFcnJvcigzOSwgbGFiZWwsIGUubWVzc2FnZSk7XG4gICAgICAgIHBhcnNlRXJyb3IucGFyc2VFcnJvciA9IGU7XG4gICAgICAgIHRocm93IHBhcnNlRXJyb3I7XG4gICAgfVxuICAgIHJldHVybiBzZXJpYWxpemVkO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlcmlhbGl6ZUZldGNoUGFyYW1ldGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJuZXdJbnZhcmlhbnRFcnJvciIsInNlcmlhbGl6ZUZldGNoUGFyYW1ldGVyIiwicCIsImxhYmVsIiwic2VyaWFsaXplZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJlIiwicGFyc2VFcnJvciIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/http/serializeFetchParameter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/utils/createOperation.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/createOperation.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createOperation: () => (/* binding */ createOperation)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n\nfunction createOperation(starting, operation) {\n    var context = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, starting);\n    var setContext = function(next) {\n        if (typeof next === \"function\") {\n            context = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, context), next(context));\n        } else {\n            context = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, context), next);\n        }\n    };\n    var getContext = function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, context);\n    };\n    Object.defineProperty(operation, \"setContext\", {\n        enumerable: false,\n        value: setContext\n    });\n    Object.defineProperty(operation, \"getContext\", {\n        enumerable: false,\n        value: getContext\n    });\n    return operation;\n} //# sourceMappingURL=createOperation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy9jcmVhdGVPcGVyYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBaUM7QUFDMUIsU0FBU0MsZ0JBQWdCQyxRQUFRLEVBQUVDLFNBQVM7SUFDL0MsSUFBSUMsVUFBVUosK0NBQVFBLENBQUMsQ0FBQyxHQUFHRTtJQUMzQixJQUFJRyxhQUFhLFNBQVVDLElBQUk7UUFDM0IsSUFBSSxPQUFPQSxTQUFTLFlBQVk7WUFDNUJGLFVBQVVKLCtDQUFRQSxDQUFDQSwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUdJLFVBQVVFLEtBQUtGO1FBQ25ELE9BQ0s7WUFDREEsVUFBVUosK0NBQVFBLENBQUNBLCtDQUFRQSxDQUFDLENBQUMsR0FBR0ksVUFBVUU7UUFDOUM7SUFDSjtJQUNBLElBQUlDLGFBQWE7UUFBYyxPQUFRUCwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUdJO0lBQVc7SUFDL0RJLE9BQU9DLGNBQWMsQ0FBQ04sV0FBVyxjQUFjO1FBQzNDTyxZQUFZO1FBQ1pDLE9BQU9OO0lBQ1g7SUFDQUcsT0FBT0MsY0FBYyxDQUFDTixXQUFXLGNBQWM7UUFDM0NPLFlBQVk7UUFDWkMsT0FBT0o7SUFDWDtJQUNBLE9BQU9KO0FBQ1gsRUFDQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy9jcmVhdGVPcGVyYXRpb24uanM/NTMxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU9wZXJhdGlvbihzdGFydGluZywgb3BlcmF0aW9uKSB7XG4gICAgdmFyIGNvbnRleHQgPSBfX2Fzc2lnbih7fSwgc3RhcnRpbmcpO1xuICAgIHZhciBzZXRDb250ZXh0ID0gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBuZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnRleHQgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY29udGV4dCksIG5leHQoY29udGV4dCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29udGV4dCA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBjb250ZXh0KSwgbmV4dCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBnZXRDb250ZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKF9fYXNzaWduKHt9LCBjb250ZXh0KSk7IH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wZXJhdGlvbiwgXCJzZXRDb250ZXh0XCIsIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBzZXRDb250ZXh0LFxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcGVyYXRpb24sIFwiZ2V0Q29udGV4dFwiLCB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogZ2V0Q29udGV4dCxcbiAgICB9KTtcbiAgICByZXR1cm4gb3BlcmF0aW9uO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlT3BlcmF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsImNyZWF0ZU9wZXJhdGlvbiIsInN0YXJ0aW5nIiwib3BlcmF0aW9uIiwiY29udGV4dCIsInNldENvbnRleHQiLCJuZXh0IiwiZ2V0Q29udGV4dCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/utils/createOperation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/utils/filterOperationVariables.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/filterOperationVariables.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filterOperationVariables: () => (/* binding */ filterOperationVariables)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/visitor.mjs\");\n\n\nfunction filterOperationVariables(variables, query) {\n    var result = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, variables);\n    var unusedNames = new Set(Object.keys(variables));\n    (0,graphql__WEBPACK_IMPORTED_MODULE_1__.visit)(query, {\n        Variable: function(node, _key, parent) {\n            // A variable type definition at the top level of a query is not\n            // enough to silence server-side errors about the variable being\n            // unused, so variable definitions do not count as usage.\n            // https://spec.graphql.org/draft/#sec-All-Variables-Used\n            if (parent && parent.kind !== \"VariableDefinition\") {\n                unusedNames.delete(node.name.value);\n            }\n        }\n    });\n    unusedNames.forEach(function(name) {\n        delete result[name];\n    });\n    return result;\n} //# sourceMappingURL=filterOperationVariables.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy9maWx0ZXJPcGVyYXRpb25WYXJpYWJsZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ0Q7QUFDekIsU0FBU0UseUJBQXlCQyxTQUFTLEVBQUVDLEtBQUs7SUFDckQsSUFBSUMsU0FBU0wsK0NBQVFBLENBQUMsQ0FBQyxHQUFHRztJQUMxQixJQUFJRyxjQUFjLElBQUlDLElBQUlDLE9BQU9DLElBQUksQ0FBQ047SUFDdENGLDhDQUFLQSxDQUFDRyxPQUFPO1FBQ1RNLFVBQVUsU0FBVUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLE1BQU07WUFDbEMsZ0VBQWdFO1lBQ2hFLGdFQUFnRTtZQUNoRSx5REFBeUQ7WUFDekQseURBQXlEO1lBQ3pELElBQUlBLFVBQ0FBLE9BQU9DLElBQUksS0FBSyxzQkFBc0I7Z0JBQ3RDUixZQUFZUyxNQUFNLENBQUNKLEtBQUtLLElBQUksQ0FBQ0MsS0FBSztZQUN0QztRQUNKO0lBQ0o7SUFDQVgsWUFBWVksT0FBTyxDQUFDLFNBQVVGLElBQUk7UUFDOUIsT0FBT1gsTUFBTSxDQUFDVyxLQUFLO0lBQ3ZCO0lBQ0EsT0FBT1g7QUFDWCxFQUNBLG9EQUFvRCIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL3V0aWxzL2ZpbHRlck9wZXJhdGlvblZhcmlhYmxlcy5qcz84YWNlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyB2aXNpdCB9IGZyb20gXCJncmFwaHFsXCI7XG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyT3BlcmF0aW9uVmFyaWFibGVzKHZhcmlhYmxlcywgcXVlcnkpIHtcbiAgICB2YXIgcmVzdWx0ID0gX19hc3NpZ24oe30sIHZhcmlhYmxlcyk7XG4gICAgdmFyIHVudXNlZE5hbWVzID0gbmV3IFNldChPYmplY3Qua2V5cyh2YXJpYWJsZXMpKTtcbiAgICB2aXNpdChxdWVyeSwge1xuICAgICAgICBWYXJpYWJsZTogZnVuY3Rpb24gKG5vZGUsIF9rZXksIHBhcmVudCkge1xuICAgICAgICAgICAgLy8gQSB2YXJpYWJsZSB0eXBlIGRlZmluaXRpb24gYXQgdGhlIHRvcCBsZXZlbCBvZiBhIHF1ZXJ5IGlzIG5vdFxuICAgICAgICAgICAgLy8gZW5vdWdoIHRvIHNpbGVuY2Ugc2VydmVyLXNpZGUgZXJyb3JzIGFib3V0IHRoZSB2YXJpYWJsZSBiZWluZ1xuICAgICAgICAgICAgLy8gdW51c2VkLCBzbyB2YXJpYWJsZSBkZWZpbml0aW9ucyBkbyBub3QgY291bnQgYXMgdXNhZ2UuXG4gICAgICAgICAgICAvLyBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvZHJhZnQvI3NlYy1BbGwtVmFyaWFibGVzLVVzZWRcbiAgICAgICAgICAgIGlmIChwYXJlbnQgJiZcbiAgICAgICAgICAgICAgICBwYXJlbnQua2luZCAhPT0gXCJWYXJpYWJsZURlZmluaXRpb25cIikge1xuICAgICAgICAgICAgICAgIHVudXNlZE5hbWVzLmRlbGV0ZShub2RlLm5hbWUudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIHVudXNlZE5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgZGVsZXRlIHJlc3VsdFtuYW1lXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsdGVyT3BlcmF0aW9uVmFyaWFibGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsInZpc2l0IiwiZmlsdGVyT3BlcmF0aW9uVmFyaWFibGVzIiwidmFyaWFibGVzIiwicXVlcnkiLCJyZXN1bHQiLCJ1bnVzZWROYW1lcyIsIlNldCIsIk9iamVjdCIsImtleXMiLCJWYXJpYWJsZSIsIm5vZGUiLCJfa2V5IiwicGFyZW50Iiwia2luZCIsImRlbGV0ZSIsIm5hbWUiLCJ2YWx1ZSIsImZvckVhY2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/utils/filterOperationVariables.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/utils/fromError.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/fromError.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromError: () => (/* binding */ fromError)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n\nfunction fromError(errorValue) {\n    return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.Observable(function(observer) {\n        observer.error(errorValue);\n    });\n} //# sourceMappingURL=fromError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy9mcm9tRXJyb3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBc0Q7QUFDL0MsU0FBU0MsVUFBVUMsVUFBVTtJQUNoQyxPQUFPLElBQUlGLDJEQUFVQSxDQUFDLFNBQVVHLFFBQVE7UUFDcENBLFNBQVNDLEtBQUssQ0FBQ0Y7SUFDbkI7QUFDSixFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL3V0aWxzL2Zyb21FcnJvci5qcz84ZTI3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gZnJvbUVycm9yKGVycm9yVmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIG9ic2VydmVyLmVycm9yKGVycm9yVmFsdWUpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbUVycm9yLmpzLm1hcCJdLCJuYW1lcyI6WyJPYnNlcnZhYmxlIiwiZnJvbUVycm9yIiwiZXJyb3JWYWx1ZSIsIm9ic2VydmVyIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/utils/fromError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/utils/throwServerError.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/throwServerError.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   throwServerError: () => (/* binding */ throwServerError)\n/* harmony export */ });\nvar throwServerError = function(response, result, message) {\n    var error = new Error(message);\n    error.name = \"ServerError\";\n    error.response = response;\n    error.statusCode = response.status;\n    error.result = result;\n    throw error;\n}; //# sourceMappingURL=throwServerError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy90aHJvd1NlcnZlckVycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxJQUFJQSxtQkFBbUIsU0FBVUMsUUFBUSxFQUFFQyxNQUFNLEVBQUVDLE9BQU87SUFDN0QsSUFBSUMsUUFBUSxJQUFJQyxNQUFNRjtJQUN0QkMsTUFBTUUsSUFBSSxHQUFHO0lBQ2JGLE1BQU1ILFFBQVEsR0FBR0E7SUFDakJHLE1BQU1HLFVBQVUsR0FBR04sU0FBU08sTUFBTTtJQUNsQ0osTUFBTUYsTUFBTSxHQUFHQTtJQUNmLE1BQU1FO0FBQ1YsRUFBRSxDQUNGLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL3V0aWxzL3Rocm93U2VydmVyRXJyb3IuanM/NDllZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIHRocm93U2VydmVyRXJyb3IgPSBmdW5jdGlvbiAocmVzcG9uc2UsIHJlc3VsdCwgbWVzc2FnZSkge1xuICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICBlcnJvci5uYW1lID0gXCJTZXJ2ZXJFcnJvclwiO1xuICAgIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgZXJyb3Iuc3RhdHVzQ29kZSA9IHJlc3BvbnNlLnN0YXR1cztcbiAgICBlcnJvci5yZXN1bHQgPSByZXN1bHQ7XG4gICAgdGhyb3cgZXJyb3I7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3dTZXJ2ZXJFcnJvci5qcy5tYXAiXSwibmFtZXMiOlsidGhyb3dTZXJ2ZXJFcnJvciIsInJlc3BvbnNlIiwicmVzdWx0IiwibWVzc2FnZSIsImVycm9yIiwiRXJyb3IiLCJuYW1lIiwic3RhdHVzQ29kZSIsInN0YXR1cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/utils/throwServerError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/utils/transformOperation.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/transformOperation.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   transformOperation: () => (/* binding */ transformOperation)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n\nfunction transformOperation(operation) {\n    var transformedOperation = {\n        variables: operation.variables || {},\n        extensions: operation.extensions || {},\n        operationName: operation.operationName,\n        query: operation.query\n    };\n    // Best guess at an operation name\n    if (!transformedOperation.operationName) {\n        transformedOperation.operationName = typeof transformedOperation.query !== \"string\" ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.getOperationName)(transformedOperation.query) || undefined : \"\";\n    }\n    return transformedOperation;\n} //# sourceMappingURL=transformOperation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy90cmFuc2Zvcm1PcGVyYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNEQ7QUFDckQsU0FBU0MsbUJBQW1CQyxTQUFTO0lBQ3hDLElBQUlDLHVCQUF1QjtRQUN2QkMsV0FBV0YsVUFBVUUsU0FBUyxJQUFJLENBQUM7UUFDbkNDLFlBQVlILFVBQVVHLFVBQVUsSUFBSSxDQUFDO1FBQ3JDQyxlQUFlSixVQUFVSSxhQUFhO1FBQ3RDQyxPQUFPTCxVQUFVSyxLQUFLO0lBQzFCO0lBQ0Esa0NBQWtDO0lBQ2xDLElBQUksQ0FBQ0oscUJBQXFCRyxhQUFhLEVBQUU7UUFDckNILHFCQUFxQkcsYUFBYSxHQUM5QixPQUFPSCxxQkFBcUJJLEtBQUssS0FBSyxXQUNsQ1AscUVBQWdCQSxDQUFDRyxxQkFBcUJJLEtBQUssS0FBS0MsWUFDOUM7SUFDZDtJQUNBLE9BQU9MO0FBQ1gsRUFDQSw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy90cmFuc2Zvcm1PcGVyYXRpb24uanM/ZWExMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRPcGVyYXRpb25OYW1lIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU9wZXJhdGlvbihvcGVyYXRpb24pIHtcbiAgICB2YXIgdHJhbnNmb3JtZWRPcGVyYXRpb24gPSB7XG4gICAgICAgIHZhcmlhYmxlczogb3BlcmF0aW9uLnZhcmlhYmxlcyB8fCB7fSxcbiAgICAgICAgZXh0ZW5zaW9uczogb3BlcmF0aW9uLmV4dGVuc2lvbnMgfHwge30sXG4gICAgICAgIG9wZXJhdGlvbk5hbWU6IG9wZXJhdGlvbi5vcGVyYXRpb25OYW1lLFxuICAgICAgICBxdWVyeTogb3BlcmF0aW9uLnF1ZXJ5LFxuICAgIH07XG4gICAgLy8gQmVzdCBndWVzcyBhdCBhbiBvcGVyYXRpb24gbmFtZVxuICAgIGlmICghdHJhbnNmb3JtZWRPcGVyYXRpb24ub3BlcmF0aW9uTmFtZSkge1xuICAgICAgICB0cmFuc2Zvcm1lZE9wZXJhdGlvbi5vcGVyYXRpb25OYW1lID1cbiAgICAgICAgICAgIHR5cGVvZiB0cmFuc2Zvcm1lZE9wZXJhdGlvbi5xdWVyeSAhPT0gXCJzdHJpbmdcIiA/XG4gICAgICAgICAgICAgICAgZ2V0T3BlcmF0aW9uTmFtZSh0cmFuc2Zvcm1lZE9wZXJhdGlvbi5xdWVyeSkgfHwgdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgOiBcIlwiO1xuICAgIH1cbiAgICByZXR1cm4gdHJhbnNmb3JtZWRPcGVyYXRpb247XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc2Zvcm1PcGVyYXRpb24uanMubWFwIl0sIm5hbWVzIjpbImdldE9wZXJhdGlvbk5hbWUiLCJ0cmFuc2Zvcm1PcGVyYXRpb24iLCJvcGVyYXRpb24iLCJ0cmFuc2Zvcm1lZE9wZXJhdGlvbiIsInZhcmlhYmxlcyIsImV4dGVuc2lvbnMiLCJvcGVyYXRpb25OYW1lIiwicXVlcnkiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/utils/transformOperation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/link/utils/validateOperation.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/validateOperation.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateOperation: () => (/* binding */ validateOperation)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\nfunction validateOperation(operation) {\n    var OPERATION_FIELDS = [\n        \"query\",\n        \"operationName\",\n        \"variables\",\n        \"extensions\",\n        \"context\"\n    ];\n    for(var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++){\n        var key = _a[_i];\n        if (OPERATION_FIELDS.indexOf(key) < 0) {\n            throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(43, key);\n        }\n    }\n    return operation;\n} //# sourceMappingURL=validateOperation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy92YWxpZGF0ZU9wZXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxRTtBQUM5RCxTQUFTQyxrQkFBa0JDLFNBQVM7SUFDdkMsSUFBSUMsbUJBQW1CO1FBQ25CO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDSDtJQUNELElBQUssSUFBSUMsS0FBSyxHQUFHQyxLQUFLQyxPQUFPQyxJQUFJLENBQUNMLFlBQVlFLEtBQUtDLEdBQUdHLE1BQU0sRUFBRUosS0FBTTtRQUNoRSxJQUFJSyxNQUFNSixFQUFFLENBQUNELEdBQUc7UUFDaEIsSUFBSUQsaUJBQWlCTyxPQUFPLENBQUNELE9BQU8sR0FBRztZQUNuQyxNQUFNVCw4RUFBaUJBLENBQUMsSUFBSVM7UUFDaEM7SUFDSjtJQUNBLE9BQU9QO0FBQ1gsRUFDQSw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy92YWxpZGF0ZU9wZXJhdGlvbi5qcz8wZjA4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG5ld0ludmFyaWFudEVycm9yIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9nbG9iYWxzL2luZGV4LmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVPcGVyYXRpb24ob3BlcmF0aW9uKSB7XG4gICAgdmFyIE9QRVJBVElPTl9GSUVMRFMgPSBbXG4gICAgICAgIFwicXVlcnlcIixcbiAgICAgICAgXCJvcGVyYXRpb25OYW1lXCIsXG4gICAgICAgIFwidmFyaWFibGVzXCIsXG4gICAgICAgIFwiZXh0ZW5zaW9uc1wiLFxuICAgICAgICBcImNvbnRleHRcIixcbiAgICBdO1xuICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3Qua2V5cyhvcGVyYXRpb24pOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIga2V5ID0gX2FbX2ldO1xuICAgICAgICBpZiAoT1BFUkFUSU9OX0ZJRUxEUy5pbmRleE9mKGtleSkgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXdJbnZhcmlhbnRFcnJvcig0Mywga2V5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3BlcmF0aW9uO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsaWRhdGVPcGVyYXRpb24uanMubWFwIl0sIm5hbWVzIjpbIm5ld0ludmFyaWFudEVycm9yIiwidmFsaWRhdGVPcGVyYXRpb24iLCJvcGVyYXRpb24iLCJPUEVSQVRJT05fRklFTERTIiwiX2kiLCJfYSIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJrZXkiLCJpbmRleE9mIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/link/utils/validateOperation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/context/ApolloContext.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/react/context/ApolloContext.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var rehackt__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getApolloContext: () => (/* binding */ getApolloContext),\n/* harmony export */   resetApolloContext: () => (/* binding */ resetApolloContext)\n/* harmony export */ });\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\n\n\n// To make sure Apollo Client doesn't create more than one React context\n// (which can lead to problems like having an Apollo Client instance added\n// in one context, then attempting to retrieve it from another different\n// context), a single Apollo context is created and tracked in global state.\nvar contextKey = _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.canUseSymbol ? Symbol.for(\"__APOLLO_CONTEXT__\") : \"__APOLLO_CONTEXT__\";\nfunction getApolloContext() {\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__.invariant)(\"createContext\" in /*#__PURE__*/ (rehackt__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (rehackt__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(rehackt__WEBPACK_IMPORTED_MODULE_0__, 2))), 45);\n    var context = rehackt__WEBPACK_IMPORTED_MODULE_0__.createContext[contextKey];\n    if (!context) {\n        Object.defineProperty(rehackt__WEBPACK_IMPORTED_MODULE_0__.createContext, contextKey, {\n            value: context = rehackt__WEBPACK_IMPORTED_MODULE_0__.createContext({}),\n            enumerable: false,\n            writable: false,\n            configurable: true\n        });\n        context.displayName = \"ApolloContext\";\n    }\n    return context;\n}\n/**\n * @deprecated This function has no \"resetting\" effect since Apollo Client 3.4.12,\n * and will be removed in the next major version of Apollo Client.\n * If you want to get the Apollo Context, use `getApolloContext` instead.\n */ var resetApolloContext = getApolloContext; //# sourceMappingURL=ApolloContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvY29udGV4dC9BcG9sbG9Db250ZXh0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFpQztBQUN1QjtBQUNLO0FBQzdELHdFQUF3RTtBQUN4RSwwRUFBMEU7QUFDMUUsd0VBQXdFO0FBQ3hFLDRFQUE0RTtBQUM1RSxJQUFJRyxhQUFhRiw2REFBWUEsR0FBR0csT0FBT0MsR0FBRyxDQUFDLHdCQUF3QjtBQUM1RCxTQUFTQztJQUNaSixzRUFBU0EsQ0FBQyxrTkFBd0JGLEVBQUU7SUFDcEMsSUFBSU8sVUFBVVAsa0RBQW1CLENBQUNHLFdBQVc7SUFDN0MsSUFBSSxDQUFDSSxTQUFTO1FBQ1ZFLE9BQU9DLGNBQWMsQ0FBQ1Ysa0RBQW1CLEVBQUVHLFlBQVk7WUFDbkRRLE9BQVFKLFVBQVVQLGtEQUFtQixDQUFDLENBQUM7WUFDdkNZLFlBQVk7WUFDWkMsVUFBVTtZQUNWQyxjQUFjO1FBQ2xCO1FBQ0FQLFFBQVFRLFdBQVcsR0FBRztJQUMxQjtJQUNBLE9BQU9SO0FBQ1g7QUFDQTs7OztDQUlDLEdBQ00sSUFBSVMscUJBQXFCVixpQkFBaUIsQ0FDakQseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktZG9jcy1mcm9uLWVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3JlYWN0L2NvbnRleHQvQXBvbGxvQ29udGV4dC5qcz9mYzg0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWhhY2t0XCI7XG5pbXBvcnQgeyBjYW5Vc2VTeW1ib2wgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL2dsb2JhbHMvaW5kZXguanNcIjtcbi8vIFRvIG1ha2Ugc3VyZSBBcG9sbG8gQ2xpZW50IGRvZXNuJ3QgY3JlYXRlIG1vcmUgdGhhbiBvbmUgUmVhY3QgY29udGV4dFxuLy8gKHdoaWNoIGNhbiBsZWFkIHRvIHByb2JsZW1zIGxpa2UgaGF2aW5nIGFuIEFwb2xsbyBDbGllbnQgaW5zdGFuY2UgYWRkZWRcbi8vIGluIG9uZSBjb250ZXh0LCB0aGVuIGF0dGVtcHRpbmcgdG8gcmV0cmlldmUgaXQgZnJvbSBhbm90aGVyIGRpZmZlcmVudFxuLy8gY29udGV4dCksIGEgc2luZ2xlIEFwb2xsbyBjb250ZXh0IGlzIGNyZWF0ZWQgYW5kIHRyYWNrZWQgaW4gZ2xvYmFsIHN0YXRlLlxudmFyIGNvbnRleHRLZXkgPSBjYW5Vc2VTeW1ib2wgPyBTeW1ib2wuZm9yKFwiX19BUE9MTE9fQ09OVEVYVF9fXCIpIDogXCJfX0FQT0xMT19DT05URVhUX19cIjtcbmV4cG9ydCBmdW5jdGlvbiBnZXRBcG9sbG9Db250ZXh0KCkge1xuICAgIGludmFyaWFudChcImNyZWF0ZUNvbnRleHRcIiBpbiBSZWFjdCwgNDUpO1xuICAgIHZhciBjb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dFtjb250ZXh0S2V5XTtcbiAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWN0LmNyZWF0ZUNvbnRleHQsIGNvbnRleHRLZXksIHtcbiAgICAgICAgICAgIHZhbHVlOiAoY29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoe30pKSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgICAgY29udGV4dC5kaXNwbGF5TmFtZSA9IFwiQXBvbGxvQ29udGV4dFwiO1xuICAgIH1cbiAgICByZXR1cm4gY29udGV4dDtcbn1cbi8qKlxuICogQGRlcHJlY2F0ZWQgVGhpcyBmdW5jdGlvbiBoYXMgbm8gXCJyZXNldHRpbmdcIiBlZmZlY3Qgc2luY2UgQXBvbGxvIENsaWVudCAzLjQuMTIsXG4gKiBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24gb2YgQXBvbGxvIENsaWVudC5cbiAqIElmIHlvdSB3YW50IHRvIGdldCB0aGUgQXBvbGxvIENvbnRleHQsIHVzZSBgZ2V0QXBvbGxvQ29udGV4dGAgaW5zdGVhZC5cbiAqL1xuZXhwb3J0IHZhciByZXNldEFwb2xsb0NvbnRleHQgPSBnZXRBcG9sbG9Db250ZXh0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXBvbGxvQ29udGV4dC5qcy5tYXAiXSwibmFtZXMiOlsiUmVhY3QiLCJjYW5Vc2VTeW1ib2wiLCJpbnZhcmlhbnQiLCJjb250ZXh0S2V5IiwiU3ltYm9sIiwiZm9yIiwiZ2V0QXBvbGxvQ29udGV4dCIsImNvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImRpc3BsYXlOYW1lIiwicmVzZXRBcG9sbG9Db250ZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/context/ApolloContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/context/ApolloProvider.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/react/context/ApolloProvider.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloProvider: () => (/* binding */ ApolloProvider)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _ApolloContext_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ApolloContext.js */ \"(ssr)/./node_modules/@apollo/client/react/context/ApolloContext.js\");\n\n\n\n\nvar ApolloProvider = function(_a) {\n    var client = _a.client, children = _a.children;\n    var ApolloContext = (0,_ApolloContext_js__WEBPACK_IMPORTED_MODULE_2__.getApolloContext)();\n    var parentContext = rehackt__WEBPACK_IMPORTED_MODULE_1__.useContext(ApolloContext);\n    var context = rehackt__WEBPACK_IMPORTED_MODULE_1__.useMemo(function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, parentContext), {\n            client: client || parentContext.client\n        });\n    }, [\n        parentContext,\n        client\n    ]);\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.client, 46);\n    return rehackt__WEBPACK_IMPORTED_MODULE_1__.createElement(ApolloContext.Provider, {\n        value: context\n    }, children);\n}; //# sourceMappingURL=ApolloProvider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvY29udGV4dC9BcG9sbG9Qcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFpQztBQUM0QjtBQUM1QjtBQUNxQjtBQUMvQyxJQUFJSSxpQkFBaUIsU0FBVUMsRUFBRTtJQUNwQyxJQUFJQyxTQUFTRCxHQUFHQyxNQUFNLEVBQUVDLFdBQVdGLEdBQUdFLFFBQVE7SUFDOUMsSUFBSUMsZ0JBQWdCTCxtRUFBZ0JBO0lBQ3BDLElBQUlNLGdCQUFnQlAsK0NBQWdCLENBQUNNO0lBQ3JDLElBQUlHLFVBQVVULDRDQUFhLENBQUM7UUFDeEIsT0FBT0YsK0NBQVFBLENBQUNBLCtDQUFRQSxDQUFDLENBQUMsR0FBR1MsZ0JBQWdCO1lBQUVILFFBQVFBLFVBQVVHLGNBQWNILE1BQU07UUFBQztJQUMxRixHQUFHO1FBQUNHO1FBQWVIO0tBQU87SUFDMUJMLHNFQUFTQSxDQUFDVSxRQUFRTCxNQUFNLEVBQUU7SUFDMUIsT0FBUUosa0RBQW1CLENBQUNNLGNBQWNNLFFBQVEsRUFBRTtRQUFFQyxPQUFPSjtJQUFRLEdBQUdKO0FBQzVFLEVBQUUsQ0FDRiwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvY29udGV4dC9BcG9sbG9Qcm92aWRlci5qcz9lOTJiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL2dsb2JhbHMvaW5kZXguanNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWhhY2t0XCI7XG5pbXBvcnQgeyBnZXRBcG9sbG9Db250ZXh0IH0gZnJvbSBcIi4vQXBvbGxvQ29udGV4dC5qc1wiO1xuZXhwb3J0IHZhciBBcG9sbG9Qcm92aWRlciA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBjbGllbnQgPSBfYS5jbGllbnQsIGNoaWxkcmVuID0gX2EuY2hpbGRyZW47XG4gICAgdmFyIEFwb2xsb0NvbnRleHQgPSBnZXRBcG9sbG9Db250ZXh0KCk7XG4gICAgdmFyIHBhcmVudENvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KEFwb2xsb0NvbnRleHQpO1xuICAgIHZhciBjb250ZXh0ID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcGFyZW50Q29udGV4dCksIHsgY2xpZW50OiBjbGllbnQgfHwgcGFyZW50Q29udGV4dC5jbGllbnQgfSk7XG4gICAgfSwgW3BhcmVudENvbnRleHQsIGNsaWVudF0pO1xuICAgIGludmFyaWFudChjb250ZXh0LmNsaWVudCwgNDYpO1xuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChBcG9sbG9Db250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBjb250ZXh0IH0sIGNoaWxkcmVuKSk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXBvbGxvUHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbIl9fYXNzaWduIiwiaW52YXJpYW50IiwiUmVhY3QiLCJnZXRBcG9sbG9Db250ZXh0IiwiQXBvbGxvUHJvdmlkZXIiLCJfYSIsImNsaWVudCIsImNoaWxkcmVuIiwiQXBvbGxvQ29udGV4dCIsInBhcmVudENvbnRleHQiLCJ1c2VDb250ZXh0IiwiY29udGV4dCIsInVzZU1lbW8iLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/context/ApolloProvider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/useApolloClient.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/useApolloClient.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useApolloClient: () => (/* binding */ useApolloClient)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _context_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../context/index.js */ \"(ssr)/./node_modules/@apollo/client/react/context/ApolloContext.js\");\n\n\n\n/**\n * @example\n * ```jsx\n * import { useApolloClient } from '@apollo/client';\n *\n * function SomeComponent() {\n *   const client = useApolloClient();\n *   // `client` is now set to the `ApolloClient` instance being used by the\n *   // application (that was configured using something like `ApolloProvider`)\n * }\n * ```\n *\n * @since 3.0.0\n * @returns The `ApolloClient` instance being used by the application.\n */ function useApolloClient(override) {\n    var context = rehackt__WEBPACK_IMPORTED_MODULE_1__.useContext((0,_context_index_js__WEBPACK_IMPORTED_MODULE_2__.getApolloContext)());\n    var client = override || context.client;\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!!client, 49);\n    return client;\n} //# sourceMappingURL=useApolloClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvdXNlQXBvbGxvQ2xpZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNkQ7QUFDNUI7QUFDc0I7QUFDdkQ7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FDTSxTQUFTRyxnQkFBZ0JDLFFBQVE7SUFDcEMsSUFBSUMsVUFBVUosK0NBQWdCLENBQUNDLG1FQUFnQkE7SUFDL0MsSUFBSUssU0FBU0gsWUFBWUMsUUFBUUUsTUFBTTtJQUN2Q1Asc0VBQVNBLENBQUMsQ0FBQyxDQUFDTyxRQUFRO0lBQ3BCLE9BQU9BO0FBQ1gsRUFDQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvcmVhY3QvaG9va3MvdXNlQXBvbGxvQ2xpZW50LmpzPzQzY2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9nbG9iYWxzL2luZGV4LmpzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVoYWNrdFwiO1xuaW1wb3J0IHsgZ2V0QXBvbGxvQ29udGV4dCB9IGZyb20gXCIuLi9jb250ZXh0L2luZGV4LmpzXCI7XG4vKipcbiAqIEBleGFtcGxlXG4gKiBgYGBqc3hcbiAqIGltcG9ydCB7IHVzZUFwb2xsb0NsaWVudCB9IGZyb20gJ0BhcG9sbG8vY2xpZW50JztcbiAqXG4gKiBmdW5jdGlvbiBTb21lQ29tcG9uZW50KCkge1xuICogICBjb25zdCBjbGllbnQgPSB1c2VBcG9sbG9DbGllbnQoKTtcbiAqICAgLy8gYGNsaWVudGAgaXMgbm93IHNldCB0byB0aGUgYEFwb2xsb0NsaWVudGAgaW5zdGFuY2UgYmVpbmcgdXNlZCBieSB0aGVcbiAqICAgLy8gYXBwbGljYXRpb24gKHRoYXQgd2FzIGNvbmZpZ3VyZWQgdXNpbmcgc29tZXRoaW5nIGxpa2UgYEFwb2xsb1Byb3ZpZGVyYClcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBzaW5jZSAzLjAuMFxuICogQHJldHVybnMgVGhlIGBBcG9sbG9DbGllbnRgIGluc3RhbmNlIGJlaW5nIHVzZWQgYnkgdGhlIGFwcGxpY2F0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQXBvbGxvQ2xpZW50KG92ZXJyaWRlKSB7XG4gICAgdmFyIGNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KGdldEFwb2xsb0NvbnRleHQoKSk7XG4gICAgdmFyIGNsaWVudCA9IG92ZXJyaWRlIHx8IGNvbnRleHQuY2xpZW50O1xuICAgIGludmFyaWFudCghIWNsaWVudCwgNDkpO1xuICAgIHJldHVybiBjbGllbnQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VBcG9sbG9DbGllbnQuanMubWFwIl0sIm5hbWVzIjpbImludmFyaWFudCIsIlJlYWN0IiwiZ2V0QXBvbGxvQ29udGV4dCIsInVzZUFwb2xsb0NsaWVudCIsIm92ZXJyaWRlIiwiY29udGV4dCIsInVzZUNvbnRleHQiLCJjbGllbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/useApolloClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/useQuery.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/useQuery.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useInternalState: () => (/* binding */ useInternalState),\n/* harmony export */   useQuery: () => (/* binding */ useQuery)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _useSyncExternalStore_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./useSyncExternalStore.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useSyncExternalStore.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wry/equality */ \"(ssr)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeOptions.js\");\n/* harmony import */ var _context_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../context/index.js */ \"(ssr)/./node_modules/@apollo/client/react/context/ApolloContext.js\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../errors/index.js */ \"(ssr)/./node_modules/@apollo/client/errors/index.js\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/index.js */ \"(ssr)/./node_modules/@apollo/client/core/networkStatus.js\");\n/* harmony import */ var _parser_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../parser/index.js */ \"(ssr)/./node_modules/@apollo/client/react/parser/index.js\");\n/* harmony import */ var _useApolloClient_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useApolloClient.js */ \"(ssr)/./node_modules/@apollo/client/react/hooks/useApolloClient.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/compact.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * A hook for executing queries in an Apollo application.\n *\n * To run a query within a React component, call `useQuery` and pass it a GraphQL query document.\n *\n * When your component renders, `useQuery` returns an object from Apollo Client that contains `loading`, `error`, and `data` properties you can use to render your UI.\n *\n * > Refer to the [Queries](https://www.apollographql.com/docs/react/data/queries) section for a more in-depth overview of `useQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useQuery } from '@apollo/client';\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const { loading, error, data } = useQuery(GET_GREETING, {\n *     variables: { language: 'english' },\n *   });\n *   if (loading) return <p>Loading ...</p>;\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Options to control how the query is executed.\n * @returns Query result object\n */ function useQuery(query, options) {\n    if (options === void 0) {\n        options = Object.create(null);\n    }\n    return useInternalState((0,_useApolloClient_js__WEBPACK_IMPORTED_MODULE_3__.useApolloClient)(options.client), query).useQuery(options);\n}\nfunction useInternalState(client, query) {\n    var stateRef = rehackt__WEBPACK_IMPORTED_MODULE_1__.useRef();\n    if (!stateRef.current || client !== stateRef.current.client || query !== stateRef.current.query) {\n        stateRef.current = new InternalState(client, query, stateRef.current);\n    }\n    var state = stateRef.current;\n    // By default, InternalState.prototype.forceUpdate is an empty function, but\n    // we replace it here (before anyone has had a chance to see this state yet)\n    // with a function that unconditionally forces an update, using the latest\n    // setTick function. Updating this state by calling state.forceUpdate is the\n    // only way we trigger React component updates (no other useState calls within\n    // the InternalState class).\n    state.forceUpdateState = rehackt__WEBPACK_IMPORTED_MODULE_1__.useReducer(function(tick) {\n        return tick + 1;\n    }, 0)[1];\n    return state;\n}\nvar InternalState = /** @class */ function() {\n    function InternalState(client, query, previous) {\n        var _this = this;\n        this.client = client;\n        this.query = query;\n        /**\n         * Will be overwritten by the `useSyncExternalStore` \"force update\" method\n         * whenever it is available and reset to `forceUpdateState` when it isn't.\n         */ this.forceUpdate = function() {\n            return _this.forceUpdateState();\n        };\n        this.ssrDisabledResult = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.maybeDeepFreeze)({\n            loading: true,\n            data: void 0,\n            error: void 0,\n            networkStatus: _core_index_js__WEBPACK_IMPORTED_MODULE_5__.NetworkStatus.loading\n        });\n        this.skipStandbyResult = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.maybeDeepFreeze)({\n            loading: false,\n            data: void 0,\n            error: void 0,\n            networkStatus: _core_index_js__WEBPACK_IMPORTED_MODULE_5__.NetworkStatus.ready\n        });\n        // This cache allows the referential stability of this.result (as returned by\n        // getCurrentResult) to translate into referential stability of the resulting\n        // QueryResult object returned by toQueryResult.\n        this.toQueryResultCache = new (_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.canUseWeakMap ? WeakMap : Map)();\n        (0,_parser_index_js__WEBPACK_IMPORTED_MODULE_7__.verifyDocumentType)(query, _parser_index_js__WEBPACK_IMPORTED_MODULE_7__.DocumentType.Query);\n        // Reuse previousData from previous InternalState (if any) to provide\n        // continuity of previousData even if/when the query or client changes.\n        var previousResult = previous && previous.result;\n        var previousData = previousResult && previousResult.data;\n        if (previousData) {\n            this.previousData = previousData;\n        }\n    }\n    /**\n     * Forces an update using local component state.\n     * As this is not batched with `useSyncExternalStore` updates,\n     * this is only used as a fallback if the `useSyncExternalStore` \"force update\"\n     * method is not registered at the moment.\n     * See https://github.com/facebook/react/issues/25191\n     *  */ InternalState.prototype.forceUpdateState = function() {\n        // Replaced (in useInternalState) with a method that triggers an update.\n        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(51);\n    };\n    InternalState.prototype.executeQuery = function(options) {\n        var _this = this;\n        var _a;\n        if (options.query) {\n            Object.assign(this, {\n                query: options.query\n            });\n        }\n        this.watchQueryOptions = this.createWatchQueryOptions(this.queryHookOptions = options);\n        var concast = this.observable.reobserveAsConcast(this.getObsQueryOptions());\n        // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n        // but save the current data as this.previousData, just like setResult\n        // usually does.\n        this.previousData = ((_a = this.result) === null || _a === void 0 ? void 0 : _a.data) || this.previousData;\n        this.result = void 0;\n        this.forceUpdate();\n        return new Promise(function(resolve) {\n            var result;\n            // Subscribe to the concast independently of the ObservableQuery in case\n            // the component gets unmounted before the promise resolves. This prevents\n            // the concast from terminating early and resolving with `undefined` when\n            // there are no more subscribers for the concast.\n            concast.subscribe({\n                next: function(value) {\n                    result = value;\n                },\n                error: function() {\n                    resolve(_this.toQueryResult(_this.observable.getCurrentResult()));\n                },\n                complete: function() {\n                    resolve(_this.toQueryResult(result));\n                }\n            });\n        });\n    };\n    // Methods beginning with use- should be called according to the standard\n    // rules of React hooks: only at the top level of the calling function, and\n    // without any dynamic conditional logic.\n    InternalState.prototype.useQuery = function(options) {\n        var _this = this;\n        // The renderPromises field gets initialized here in the useQuery method, at\n        // the beginning of everything (for a given component rendering, at least),\n        // so we can safely use this.renderPromises in other/later InternalState\n        // methods without worrying it might be uninitialized. Even after\n        // initialization, this.renderPromises is usually undefined (unless SSR is\n        // happening), but that's fine as long as it has been initialized that way,\n        // rather than left uninitialized.\n        this.renderPromises = rehackt__WEBPACK_IMPORTED_MODULE_1__.useContext((0,_context_index_js__WEBPACK_IMPORTED_MODULE_8__.getApolloContext)()).renderPromises;\n        this.useOptions(options);\n        var obsQuery = this.useObservableQuery();\n        var result = (0,_useSyncExternalStore_js__WEBPACK_IMPORTED_MODULE_9__.useSyncExternalStore)(rehackt__WEBPACK_IMPORTED_MODULE_1__.useCallback(function(handleStoreChange) {\n            if (_this.renderPromises) {\n                return function() {};\n            }\n            _this.forceUpdate = handleStoreChange;\n            var onNext = function() {\n                var previousResult = _this.result;\n                // We use `getCurrentResult()` instead of the onNext argument because\n                // the values differ slightly. Specifically, loading results will have\n                // an empty object for data instead of `undefined` for some reason.\n                var result = obsQuery.getCurrentResult();\n                // Make sure we're not attempting to re-render similar results\n                if (previousResult && previousResult.loading === result.loading && previousResult.networkStatus === result.networkStatus && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(previousResult.data, result.data)) {\n                    return;\n                }\n                _this.setResult(result);\n            };\n            var onError = function(error) {\n                subscription.unsubscribe();\n                subscription = obsQuery.resubscribeAfterError(onNext, onError);\n                if (!hasOwnProperty.call(error, \"graphQLErrors\")) {\n                    // The error is not a GraphQL error\n                    throw error;\n                }\n                var previousResult = _this.result;\n                if (!previousResult || previousResult && previousResult.loading || !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(error, previousResult.error)) {\n                    _this.setResult({\n                        data: previousResult && previousResult.data,\n                        error: error,\n                        loading: false,\n                        networkStatus: _core_index_js__WEBPACK_IMPORTED_MODULE_5__.NetworkStatus.error\n                    });\n                }\n            };\n            var subscription = obsQuery.subscribe(onNext, onError);\n            // Do the \"unsubscribe\" with a short delay.\n            // This way, an existing subscription can be reused without an additional\n            // request if \"unsubscribe\"  and \"resubscribe\" to the same ObservableQuery\n            // happen in very fast succession.\n            return function() {\n                setTimeout(function() {\n                    return subscription.unsubscribe();\n                });\n                _this.forceUpdate = function() {\n                    return _this.forceUpdateState();\n                };\n            };\n        }, [\n            // We memoize the subscribe function using useCallback and the following\n            // dependency keys, because the subscribe function reference is all that\n            // useSyncExternalStore uses internally as a dependency key for the\n            // useEffect ultimately responsible for the subscription, so we are\n            // effectively passing this dependency array to that useEffect buried\n            // inside useSyncExternalStore, as desired.\n            obsQuery,\n            this.renderPromises,\n            this.client.disableNetworkFetches\n        ]), function() {\n            return _this.getCurrentResult();\n        }, function() {\n            return _this.getCurrentResult();\n        });\n        // TODO Remove this method when we remove support for options.partialRefetch.\n        this.unsafeHandlePartialRefetch(result);\n        return this.toQueryResult(result);\n    };\n    InternalState.prototype.useOptions = function(options) {\n        var _a;\n        var watchQueryOptions = this.createWatchQueryOptions(this.queryHookOptions = options);\n        // Update this.watchQueryOptions, but only when they have changed, which\n        // allows us to depend on the referential stability of\n        // this.watchQueryOptions elsewhere.\n        var currentWatchQueryOptions = this.watchQueryOptions;\n        if (!(0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(watchQueryOptions, currentWatchQueryOptions)) {\n            this.watchQueryOptions = watchQueryOptions;\n            if (currentWatchQueryOptions && this.observable) {\n                // Though it might be tempting to postpone this reobserve call to the\n                // useEffect block, we need getCurrentResult to return an appropriate\n                // loading:true result synchronously (later within the same call to\n                // useQuery). Since we already have this.observable here (not true for\n                // the very first call to useQuery), we are not initiating any new\n                // subscriptions, though it does feel less than ideal that reobserve\n                // (potentially) kicks off a network request (for example, when the\n                // variables have changed), which is technically a side-effect.\n                this.observable.reobserve(this.getObsQueryOptions());\n                // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n                // but save the current data as this.previousData, just like setResult\n                // usually does.\n                this.previousData = ((_a = this.result) === null || _a === void 0 ? void 0 : _a.data) || this.previousData;\n                this.result = void 0;\n            }\n        }\n        // Make sure state.onCompleted and state.onError always reflect the latest\n        // options.onCompleted and options.onError callbacks provided to useQuery,\n        // since those functions are often recreated every time useQuery is called.\n        // Like the forceUpdate method, the versions of these methods inherited from\n        // InternalState.prototype are empty no-ops, but we can override them on the\n        // base state object (without modifying the prototype).\n        this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;\n        this.onError = options.onError || InternalState.prototype.onError;\n        if ((this.renderPromises || this.client.disableNetworkFetches) && this.queryHookOptions.ssr === false && !this.queryHookOptions.skip) {\n            // If SSR has been explicitly disabled, and this function has been called\n            // on the server side, return the default loading state.\n            this.result = this.ssrDisabledResult;\n        } else if (this.queryHookOptions.skip || this.watchQueryOptions.fetchPolicy === \"standby\") {\n            // When skipping a query (ie. we're not querying for data but still want to\n            // render children), make sure the `data` is cleared out and `loading` is\n            // set to `false` (since we aren't loading anything).\n            //\n            // NOTE: We no longer think this is the correct behavior. Skipping should\n            // not automatically set `data` to `undefined`, but instead leave the\n            // previous data in place. In other words, skipping should not mandate that\n            // previously received data is all of a sudden removed. Unfortunately,\n            // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n            // to address this.\n            this.result = this.skipStandbyResult;\n        } else if (this.result === this.ssrDisabledResult || this.result === this.skipStandbyResult) {\n            this.result = void 0;\n        }\n    };\n    InternalState.prototype.getObsQueryOptions = function() {\n        var toMerge = [];\n        var globalDefaults = this.client.defaultOptions.watchQuery;\n        if (globalDefaults) toMerge.push(globalDefaults);\n        if (this.queryHookOptions.defaultOptions) {\n            toMerge.push(this.queryHookOptions.defaultOptions);\n        }\n        // We use compact rather than mergeOptions for this part of the merge,\n        // because we want watchQueryOptions.variables (if defined) to replace\n        // this.observable.options.variables whole. This replacement allows\n        // removing variables by removing them from the variables input to\n        // useQuery. If the variables were always merged together (rather than\n        // replaced), there would be no way to remove existing variables.\n        // However, the variables from options.defaultOptions and globalDefaults\n        // (if provided) should be merged, to ensure individual defaulted\n        // variables always have values, if not otherwise defined in\n        // observable.options or watchQueryOptions.\n        toMerge.push((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.compact)(this.observable && this.observable.options, this.watchQueryOptions));\n        return toMerge.reduce(_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.mergeOptions);\n    };\n    // A function to massage options before passing them to ObservableQuery.\n    InternalState.prototype.createWatchQueryOptions = function(_a) {\n        var _b;\n        if (_a === void 0) {\n            _a = {};\n        }\n        var skip = _a.skip, ssr = _a.ssr, onCompleted = _a.onCompleted, onError = _a.onError, defaultOptions = _a.defaultOptions, // The above options are useQuery-specific, so this ...otherOptions spread\n        // makes otherOptions almost a WatchQueryOptions object, except for the\n        // query property that we add below.\n        otherOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__rest)(_a, [\n            \"skip\",\n            \"ssr\",\n            \"onCompleted\",\n            \"onError\",\n            \"defaultOptions\"\n        ]);\n        // This Object.assign is safe because otherOptions is a fresh ...rest object\n        // that did not exist until just now, so modifications are still allowed.\n        var watchQueryOptions = Object.assign(otherOptions, {\n            query: this.query\n        });\n        if (this.renderPromises && (watchQueryOptions.fetchPolicy === \"network-only\" || watchQueryOptions.fetchPolicy === \"cache-and-network\")) {\n            // this behavior was added to react-apollo without explanation in this PR\n            // https://github.com/apollographql/react-apollo/pull/1579\n            watchQueryOptions.fetchPolicy = \"cache-first\";\n        }\n        if (!watchQueryOptions.variables) {\n            watchQueryOptions.variables = {};\n        }\n        if (skip) {\n            var _c = watchQueryOptions.fetchPolicy, fetchPolicy = _c === void 0 ? this.getDefaultFetchPolicy() : _c, _d = watchQueryOptions.initialFetchPolicy, initialFetchPolicy = _d === void 0 ? fetchPolicy : _d;\n            // When skipping, we set watchQueryOptions.fetchPolicy initially to\n            // \"standby\", but we also need/want to preserve the initial non-standby\n            // fetchPolicy that would have been used if not skipping.\n            Object.assign(watchQueryOptions, {\n                initialFetchPolicy: initialFetchPolicy,\n                fetchPolicy: \"standby\"\n            });\n        } else if (!watchQueryOptions.fetchPolicy) {\n            watchQueryOptions.fetchPolicy = ((_b = this.observable) === null || _b === void 0 ? void 0 : _b.options.initialFetchPolicy) || this.getDefaultFetchPolicy();\n        }\n        return watchQueryOptions;\n    };\n    InternalState.prototype.getDefaultFetchPolicy = function() {\n        var _a, _b;\n        return ((_a = this.queryHookOptions.defaultOptions) === null || _a === void 0 ? void 0 : _a.fetchPolicy) || ((_b = this.client.defaultOptions.watchQuery) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || \"cache-first\";\n    };\n    // Defining these methods as no-ops on the prototype allows us to call\n    // state.onCompleted and/or state.onError without worrying about whether a\n    // callback was provided.\n    InternalState.prototype.onCompleted = function(data) {};\n    InternalState.prototype.onError = function(error) {};\n    InternalState.prototype.useObservableQuery = function() {\n        // See if there is an existing observable that was used to fetch the same\n        // data and if so, use it instead since it will contain the proper queryId\n        // to fetch the result set. This is used during SSR.\n        var obsQuery = this.observable = this.renderPromises && this.renderPromises.getSSRObservable(this.watchQueryOptions) || this.observable || // Reuse this.observable if possible (and not SSR)\n        this.client.watchQuery(this.getObsQueryOptions());\n        this.obsQueryFields = rehackt__WEBPACK_IMPORTED_MODULE_1__.useMemo(function() {\n            return {\n                refetch: obsQuery.refetch.bind(obsQuery),\n                reobserve: obsQuery.reobserve.bind(obsQuery),\n                fetchMore: obsQuery.fetchMore.bind(obsQuery),\n                updateQuery: obsQuery.updateQuery.bind(obsQuery),\n                startPolling: obsQuery.startPolling.bind(obsQuery),\n                stopPolling: obsQuery.stopPolling.bind(obsQuery),\n                subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery)\n            };\n        }, [\n            obsQuery\n        ]);\n        var ssrAllowed = !(this.queryHookOptions.ssr === false || this.queryHookOptions.skip);\n        if (this.renderPromises && ssrAllowed) {\n            this.renderPromises.registerSSRObservable(obsQuery);\n            if (obsQuery.getCurrentResult().loading) {\n                // TODO: This is a legacy API which could probably be cleaned up\n                this.renderPromises.addObservableQueryPromise(obsQuery);\n            }\n        }\n        return obsQuery;\n    };\n    InternalState.prototype.setResult = function(nextResult) {\n        var previousResult = this.result;\n        if (previousResult && previousResult.data) {\n            this.previousData = previousResult.data;\n        }\n        this.result = nextResult;\n        // Calling state.setResult always triggers an update, though some call sites\n        // perform additional equality checks before committing to an update.\n        this.forceUpdate();\n        this.handleErrorOrCompleted(nextResult, previousResult);\n    };\n    InternalState.prototype.handleErrorOrCompleted = function(result, previousResult) {\n        var _this = this;\n        if (!result.loading) {\n            var error_1 = this.toApolloError(result);\n            // wait a tick in case we are in the middle of rendering a component\n            Promise.resolve().then(function() {\n                if (error_1) {\n                    _this.onError(error_1);\n                } else if (result.data && (previousResult === null || previousResult === void 0 ? void 0 : previousResult.networkStatus) !== result.networkStatus && result.networkStatus === _core_index_js__WEBPACK_IMPORTED_MODULE_5__.NetworkStatus.ready) {\n                    _this.onCompleted(result.data);\n                }\n            }).catch(function(error) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(error);\n            });\n        }\n    };\n    InternalState.prototype.toApolloError = function(result) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.isNonEmptyArray)(result.errors) ? new _errors_index_js__WEBPACK_IMPORTED_MODULE_14__.ApolloError({\n            graphQLErrors: result.errors\n        }) : result.error;\n    };\n    InternalState.prototype.getCurrentResult = function() {\n        // Using this.result as a cache ensures getCurrentResult continues returning\n        // the same (===) result object, unless state.setResult has been called, or\n        // we're doing server rendering and therefore override the result below.\n        if (!this.result) {\n            this.handleErrorOrCompleted(this.result = this.observable.getCurrentResult());\n        }\n        return this.result;\n    };\n    InternalState.prototype.toQueryResult = function(result) {\n        var queryResult = this.toQueryResultCache.get(result);\n        if (queryResult) return queryResult;\n        var data = result.data, partial = result.partial, resultWithoutPartial = (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__rest)(result, [\n            \"data\",\n            \"partial\"\n        ]);\n        this.toQueryResultCache.set(result, queryResult = (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_12__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_12__.__assign)({\n            data: data\n        }, resultWithoutPartial), this.obsQueryFields), {\n            client: this.client,\n            observable: this.observable,\n            variables: this.observable.variables,\n            called: !this.queryHookOptions.skip,\n            previousData: this.previousData\n        }));\n        if (!queryResult.error && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.isNonEmptyArray)(result.errors)) {\n            // Until a set naming convention for networkError and graphQLErrors is\n            // decided upon, we map errors (graphQLErrors) to the error options.\n            // TODO: Is it possible for both result.error and result.errors to be\n            // defined here?\n            queryResult.error = new _errors_index_js__WEBPACK_IMPORTED_MODULE_14__.ApolloError({\n                graphQLErrors: result.errors\n            });\n        }\n        return queryResult;\n    };\n    InternalState.prototype.unsafeHandlePartialRefetch = function(result) {\n        // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n        //\n        // TODO: This code should be removed when the partialRefetch option is\n        // removed. I was unable to get this hook to behave reasonably in certain\n        // edge cases when this block was put in an effect.\n        if (result.partial && this.queryHookOptions.partialRefetch && !result.loading && (!result.data || Object.keys(result.data).length === 0) && this.observable.options.fetchPolicy !== \"cache-only\") {\n            Object.assign(result, {\n                loading: true,\n                networkStatus: _core_index_js__WEBPACK_IMPORTED_MODULE_5__.NetworkStatus.refetch\n            });\n            this.observable.refetch();\n        }\n    };\n    return InternalState;\n}(); //# sourceMappingURL=useQuery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/useQuery.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/hooks/useSyncExternalStore.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@apollo/client/react/hooks/useSyncExternalStore.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var rehackt__WEBPACK_IMPORTED_MODULE_1___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSyncExternalStore: () => (/* binding */ useSyncExternalStore)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var rehackt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rehackt */ \"(ssr)/./node_modules/rehackt/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n\n\n\nvar didWarnUncachedGetSnapshot = false;\n// Prevent webpack from complaining about our feature detection of the\n// useSyncExternalStore property of the React namespace, which is expected not\n// to exist when using React 17 and earlier, and that's fine.\nvar uSESKey = \"useSyncExternalStore\";\nvar realHook = /*#__PURE__*/ (rehackt__WEBPACK_IMPORTED_MODULE_1___namespace_cache || (rehackt__WEBPACK_IMPORTED_MODULE_1___namespace_cache = __webpack_require__.t(rehackt__WEBPACK_IMPORTED_MODULE_1__, 2)))[uSESKey];\n// Adapted from https://www.npmjs.com/package/use-sync-external-store, with\n// Apollo Client deviations called out by \"// DEVIATION ...\" comments.\n// When/if React.useSyncExternalStore is defined, delegate fully to it.\nvar useSyncExternalStore = realHook || function(subscribe, getSnapshot, getServerSnapshot) {\n    // Read the current snapshot from the store on every render. Again, this\n    // breaks the rules of React, and only works here because of specific\n    // implementation details, most importantly that updates are\n    // always synchronous.\n    var value = getSnapshot();\n    if (// DEVIATION: Using __DEV__\n    globalThis.__DEV__ !== false && !didWarnUncachedGetSnapshot && // DEVIATION: Not using Object.is because we know our snapshots will never\n    // be exotic primitive values like NaN, which is !== itself.\n    value !== getSnapshot()) {\n        didWarnUncachedGetSnapshot = true;\n        // DEVIATION: Using invariant.error instead of console.error directly.\n        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(58);\n    }\n    // Because updates are synchronous, we don't queue them. Instead we force a\n    // re-render whenever the subscribed state changes by updating an some\n    // arbitrary useState hook. Then, during render, we call getSnapshot to read\n    // the current value.\n    //\n    // Because we don't actually use the state returned by the useState hook, we\n    // can save a bit of memory by storing other stuff in that slot.\n    //\n    // To implement the early bailout, we need to track some things on a mutable\n    // object. Usually, we would put that in a useRef hook, but we can stash it in\n    // our useState hook instead.\n    //\n    // To force a re-render, we call forceUpdate({inst}). That works because the\n    // new object always fails an equality check.\n    var _a = rehackt__WEBPACK_IMPORTED_MODULE_1__.useState({\n        inst: {\n            value: value,\n            getSnapshot: getSnapshot\n        }\n    }), inst = _a[0].inst, forceUpdate = _a[1];\n    // Track the latest getSnapshot function with a ref. This needs to be updated\n    // in the layout phase so we can access it during the tearing check that\n    // happens on subscribe.\n    if (_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.canUseLayoutEffect) {\n        // DEVIATION: We avoid calling useLayoutEffect when !canUseLayoutEffect,\n        // which may seem like a conditional hook, but this code ends up behaving\n        // unconditionally (one way or the other) because canUseLayoutEffect is\n        // constant.\n        rehackt__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect(function() {\n            Object.assign(inst, {\n                value: value,\n                getSnapshot: getSnapshot\n            });\n            // Whenever getSnapshot or subscribe changes, we need to check in the\n            // commit phase if there was an interleaved mutation. In concurrent mode\n            // this can happen all the time, but even in synchronous mode, an earlier\n            // effect may have mutated the store.\n            if (checkIfSnapshotChanged(inst)) {\n                // Force a re-render.\n                forceUpdate({\n                    inst: inst\n                });\n            }\n        }, [\n            subscribe,\n            value,\n            getSnapshot\n        ]);\n    } else {\n        Object.assign(inst, {\n            value: value,\n            getSnapshot: getSnapshot\n        });\n    }\n    rehackt__WEBPACK_IMPORTED_MODULE_1__.useEffect(function() {\n        // Check for changes right before subscribing. Subsequent changes will be\n        // detected in the subscription handler.\n        if (checkIfSnapshotChanged(inst)) {\n            // Force a re-render.\n            forceUpdate({\n                inst: inst\n            });\n        }\n        // Subscribe to the store and return a clean-up function.\n        return subscribe(function handleStoreChange() {\n            // TODO: Because there is no cross-renderer API for batching updates, it's\n            // up to the consumer of this library to wrap their subscription event\n            // with unstable_batchedUpdates. Should we try to detect when this isn't\n            // the case and print a warning in development?\n            // The store changed. Check if the snapshot changed since the last time we\n            // read from the store.\n            if (checkIfSnapshotChanged(inst)) {\n                // Force a re-render.\n                forceUpdate({\n                    inst: inst\n                });\n            }\n        });\n    }, [\n        subscribe\n    ]);\n    return value;\n};\nfunction checkIfSnapshotChanged(_a) {\n    var value = _a.value, getSnapshot = _a.getSnapshot;\n    try {\n        return value !== getSnapshot();\n    } catch (_b) {\n        return true;\n    }\n} //# sourceMappingURL=useSyncExternalStore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/hooks/useSyncExternalStore.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/react/parser/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@apollo/client/react/parser/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DocumentType: () => (/* binding */ DocumentType),\n/* harmony export */   operationName: () => (/* binding */ operationName),\n/* harmony export */   parser: () => (/* binding */ parser),\n/* harmony export */   verifyDocumentType: () => (/* binding */ verifyDocumentType)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/caches.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utilities/caching/getMemoryInternals.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n\n\n\nvar DocumentType;\n(function(DocumentType) {\n    DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n    DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n    DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\nvar cache;\nfunction operationName(type) {\n    var name;\n    switch(type){\n        case DocumentType.Query:\n            name = \"Query\";\n            break;\n        case DocumentType.Mutation:\n            name = \"Mutation\";\n            break;\n        case DocumentType.Subscription:\n            name = \"Subscription\";\n            break;\n    }\n    return name;\n}\n// This parser is mostly used to safety check incoming documents.\nfunction parser(document) {\n    if (!cache) {\n        cache = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.AutoCleanedWeakCache(_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.cacheSizes.parser || 1000 /* defaultCacheSizes.parser */ );\n    }\n    var cached = cache.get(document);\n    if (cached) return cached;\n    var variables, type, name;\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!!document && !!document.kind, 59, document);\n    var fragments = [];\n    var queries = [];\n    var mutations = [];\n    var subscriptions = [];\n    for(var _i = 0, _a = document.definitions; _i < _a.length; _i++){\n        var x = _a[_i];\n        if (x.kind === \"FragmentDefinition\") {\n            fragments.push(x);\n            continue;\n        }\n        if (x.kind === \"OperationDefinition\") {\n            switch(x.operation){\n                case \"query\":\n                    queries.push(x);\n                    break;\n                case \"mutation\":\n                    mutations.push(x);\n                    break;\n                case \"subscription\":\n                    subscriptions.push(x);\n                    break;\n            }\n        }\n    }\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!fragments.length || queries.length || mutations.length || subscriptions.length, 60);\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(queries.length + mutations.length + subscriptions.length <= 1, 61, document, queries.length, subscriptions.length, mutations.length);\n    type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n    if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n    var definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(definitions.length === 1, 62, document, definitions.length);\n    var definition = definitions[0];\n    variables = definition.variableDefinitions || [];\n    if (definition.name && definition.name.kind === \"Name\") {\n        name = definition.name.value;\n    } else {\n        name = \"data\"; // fallback to using data if no name\n    }\n    var payload = {\n        name: name,\n        type: type,\n        variables: variables\n    };\n    cache.set(document, payload);\n    return payload;\n}\nparser.resetCache = function() {\n    cache = undefined;\n};\nif (globalThis.__DEV__ !== false) {\n    (0,_utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_3__.registerGlobalCache)(\"parser\", function() {\n        return cache ? cache.size : 0;\n    });\n}\nfunction verifyDocumentType(document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(operation.type === type, 63, requiredOperationName, requiredOperationName, usedOperationName);\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/react/parser/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/caching/caches.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/caching/caches.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AutoCleanedStrongCache: () => (/* binding */ AutoCleanedStrongCache),\n/* harmony export */   AutoCleanedWeakCache: () => (/* binding */ AutoCleanedWeakCache)\n/* harmony export */ });\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/caches */ \"(ssr)/./node_modules/@wry/caches/lib/weak.js\");\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/caches */ \"(ssr)/./node_modules/@wry/caches/lib/strong.js\");\n\nvar scheduledCleanup = new WeakSet();\nfunction schedule(cache) {\n    if (!scheduledCleanup.has(cache)) {\n        scheduledCleanup.add(cache);\n        setTimeout(function() {\n            cache.clean();\n            scheduledCleanup.delete(cache);\n        }, 100);\n    }\n}\n/**\n * @internal\n * A version of WeakCache that will auto-schedule a cleanup of the cache when\n * a new item is added.\n * Throttled to once per 100ms.\n *\n * @privateRemarks\n * Should be used throughout the rest of the codebase instead of WeakCache,\n * with the notable exception of usage in `wrap` from `optimism` - that one\n * already handles cleanup and should remain a `WeakCache`.\n */ var AutoCleanedWeakCache = function(max, dispose) {\n    /*\n    Some builds of `WeakCache` are function prototypes, some are classes.\n    This library still builds with an ES5 target, so we can't extend the\n    real classes.\n    Instead, we have to use this workaround until we switch to a newer build\n    target.\n    */ var cache = new _wry_caches__WEBPACK_IMPORTED_MODULE_0__.WeakCache(max, dispose);\n    cache.set = function(key, value) {\n        schedule(this);\n        return _wry_caches__WEBPACK_IMPORTED_MODULE_0__.WeakCache.prototype.set.call(this, key, value);\n    };\n    return cache;\n};\n/**\n * @internal\n * A version of StrongCache that will auto-schedule a cleanup of the cache when\n * a new item is added.\n * Throttled to once per 100ms.\n *\n * @privateRemarks\n * Should be used throughout the rest of the codebase instead of StrongCache,\n * with the notable exception of usage in `wrap` from `optimism` - that one\n * already handles cleanup and should remain a `StrongCache`.\n */ var AutoCleanedStrongCache = function(max, dispose) {\n    /*\n    Some builds of `StrongCache` are function prototypes, some are classes.\n    This library still builds with an ES5 target, so we can't extend the\n    real classes.\n    Instead, we have to use this workaround until we switch to a newer build\n    target.\n    */ var cache = new _wry_caches__WEBPACK_IMPORTED_MODULE_1__.StrongCache(max, dispose);\n    cache.set = function(key, value) {\n        schedule(this);\n        return _wry_caches__WEBPACK_IMPORTED_MODULE_1__.StrongCache.prototype.set.call(this, key, value);\n    };\n    return cache;\n}; //# sourceMappingURL=caches.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NhY2hpbmcvY2FjaGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBcUQ7QUFDckQsSUFBSUUsbUJBQW1CLElBQUlDO0FBQzNCLFNBQVNDLFNBQVNDLEtBQUs7SUFDbkIsSUFBSSxDQUFDSCxpQkFBaUJJLEdBQUcsQ0FBQ0QsUUFBUTtRQUM5QkgsaUJBQWlCSyxHQUFHLENBQUNGO1FBQ3JCRyxXQUFXO1lBQ1BILE1BQU1JLEtBQUs7WUFDWFAsaUJBQWlCUSxNQUFNLENBQUNMO1FBQzVCLEdBQUc7SUFDUDtBQUNKO0FBQ0E7Ozs7Ozs7Ozs7Q0FVQyxHQUNNLElBQUlNLHVCQUF1QixTQUFVQyxHQUFHLEVBQUVDLE9BQU87SUFDcEQ7Ozs7OztJQU1BLEdBQ0EsSUFBSVIsUUFBUSxJQUFJTCxrREFBU0EsQ0FBQ1ksS0FBS0M7SUFDL0JSLE1BQU1TLEdBQUcsR0FBRyxTQUFVQyxHQUFHLEVBQUVDLEtBQUs7UUFDNUJaLFNBQVMsSUFBSTtRQUNiLE9BQU9KLGtEQUFTQSxDQUFDaUIsU0FBUyxDQUFDSCxHQUFHLENBQUNJLElBQUksQ0FBQyxJQUFJLEVBQUVILEtBQUtDO0lBQ25EO0lBQ0EsT0FBT1g7QUFDWCxFQUFFO0FBQ0Y7Ozs7Ozs7Ozs7Q0FVQyxHQUNNLElBQUljLHlCQUF5QixTQUFVUCxHQUFHLEVBQUVDLE9BQU87SUFDdEQ7Ozs7OztJQU1BLEdBQ0EsSUFBSVIsUUFBUSxJQUFJSixvREFBV0EsQ0FBQ1csS0FBS0M7SUFDakNSLE1BQU1TLEdBQUcsR0FBRyxTQUFVQyxHQUFHLEVBQUVDLEtBQUs7UUFDNUJaLFNBQVMsSUFBSTtRQUNiLE9BQU9ILG9EQUFXQSxDQUFDZ0IsU0FBUyxDQUFDSCxHQUFHLENBQUNJLElBQUksQ0FBQyxJQUFJLEVBQUVILEtBQUtDO0lBQ3JEO0lBQ0EsT0FBT1g7QUFDWCxFQUFFLENBQ0Ysa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktZG9jcy1mcm9uLWVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9jYWNoaW5nL2NhY2hlcy5qcz8yMTNiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFdlYWtDYWNoZSwgU3Ryb25nQ2FjaGUgfSBmcm9tIFwiQHdyeS9jYWNoZXNcIjtcbnZhciBzY2hlZHVsZWRDbGVhbnVwID0gbmV3IFdlYWtTZXQoKTtcbmZ1bmN0aW9uIHNjaGVkdWxlKGNhY2hlKSB7XG4gICAgaWYgKCFzY2hlZHVsZWRDbGVhbnVwLmhhcyhjYWNoZSkpIHtcbiAgICAgICAgc2NoZWR1bGVkQ2xlYW51cC5hZGQoY2FjaGUpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNhY2hlLmNsZWFuKCk7XG4gICAgICAgICAgICBzY2hlZHVsZWRDbGVhbnVwLmRlbGV0ZShjYWNoZSk7XG4gICAgICAgIH0sIDEwMCk7XG4gICAgfVxufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIEEgdmVyc2lvbiBvZiBXZWFrQ2FjaGUgdGhhdCB3aWxsIGF1dG8tc2NoZWR1bGUgYSBjbGVhbnVwIG9mIHRoZSBjYWNoZSB3aGVuXG4gKiBhIG5ldyBpdGVtIGlzIGFkZGVkLlxuICogVGhyb3R0bGVkIHRvIG9uY2UgcGVyIDEwMG1zLlxuICpcbiAqIEBwcml2YXRlUmVtYXJrc1xuICogU2hvdWxkIGJlIHVzZWQgdGhyb3VnaG91dCB0aGUgcmVzdCBvZiB0aGUgY29kZWJhc2UgaW5zdGVhZCBvZiBXZWFrQ2FjaGUsXG4gKiB3aXRoIHRoZSBub3RhYmxlIGV4Y2VwdGlvbiBvZiB1c2FnZSBpbiBgd3JhcGAgZnJvbSBgb3B0aW1pc21gIC0gdGhhdCBvbmVcbiAqIGFscmVhZHkgaGFuZGxlcyBjbGVhbnVwIGFuZCBzaG91bGQgcmVtYWluIGEgYFdlYWtDYWNoZWAuXG4gKi9cbmV4cG9ydCB2YXIgQXV0b0NsZWFuZWRXZWFrQ2FjaGUgPSBmdW5jdGlvbiAobWF4LCBkaXNwb3NlKSB7XG4gICAgLypcbiAgICBTb21lIGJ1aWxkcyBvZiBgV2Vha0NhY2hlYCBhcmUgZnVuY3Rpb24gcHJvdG90eXBlcywgc29tZSBhcmUgY2xhc3Nlcy5cbiAgICBUaGlzIGxpYnJhcnkgc3RpbGwgYnVpbGRzIHdpdGggYW4gRVM1IHRhcmdldCwgc28gd2UgY2FuJ3QgZXh0ZW5kIHRoZVxuICAgIHJlYWwgY2xhc3Nlcy5cbiAgICBJbnN0ZWFkLCB3ZSBoYXZlIHRvIHVzZSB0aGlzIHdvcmthcm91bmQgdW50aWwgd2Ugc3dpdGNoIHRvIGEgbmV3ZXIgYnVpbGRcbiAgICB0YXJnZXQuXG4gICAgKi9cbiAgICB2YXIgY2FjaGUgPSBuZXcgV2Vha0NhY2hlKG1heCwgZGlzcG9zZSk7XG4gICAgY2FjaGUuc2V0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgc2NoZWR1bGUodGhpcyk7XG4gICAgICAgIHJldHVybiBXZWFrQ2FjaGUucHJvdG90eXBlLnNldC5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgIH07XG4gICAgcmV0dXJuIGNhY2hlO1xufTtcbi8qKlxuICogQGludGVybmFsXG4gKiBBIHZlcnNpb24gb2YgU3Ryb25nQ2FjaGUgdGhhdCB3aWxsIGF1dG8tc2NoZWR1bGUgYSBjbGVhbnVwIG9mIHRoZSBjYWNoZSB3aGVuXG4gKiBhIG5ldyBpdGVtIGlzIGFkZGVkLlxuICogVGhyb3R0bGVkIHRvIG9uY2UgcGVyIDEwMG1zLlxuICpcbiAqIEBwcml2YXRlUmVtYXJrc1xuICogU2hvdWxkIGJlIHVzZWQgdGhyb3VnaG91dCB0aGUgcmVzdCBvZiB0aGUgY29kZWJhc2UgaW5zdGVhZCBvZiBTdHJvbmdDYWNoZSxcbiAqIHdpdGggdGhlIG5vdGFibGUgZXhjZXB0aW9uIG9mIHVzYWdlIGluIGB3cmFwYCBmcm9tIGBvcHRpbWlzbWAgLSB0aGF0IG9uZVxuICogYWxyZWFkeSBoYW5kbGVzIGNsZWFudXAgYW5kIHNob3VsZCByZW1haW4gYSBgU3Ryb25nQ2FjaGVgLlxuICovXG5leHBvcnQgdmFyIEF1dG9DbGVhbmVkU3Ryb25nQ2FjaGUgPSBmdW5jdGlvbiAobWF4LCBkaXNwb3NlKSB7XG4gICAgLypcbiAgICBTb21lIGJ1aWxkcyBvZiBgU3Ryb25nQ2FjaGVgIGFyZSBmdW5jdGlvbiBwcm90b3R5cGVzLCBzb21lIGFyZSBjbGFzc2VzLlxuICAgIFRoaXMgbGlicmFyeSBzdGlsbCBidWlsZHMgd2l0aCBhbiBFUzUgdGFyZ2V0LCBzbyB3ZSBjYW4ndCBleHRlbmQgdGhlXG4gICAgcmVhbCBjbGFzc2VzLlxuICAgIEluc3RlYWQsIHdlIGhhdmUgdG8gdXNlIHRoaXMgd29ya2Fyb3VuZCB1bnRpbCB3ZSBzd2l0Y2ggdG8gYSBuZXdlciBidWlsZFxuICAgIHRhcmdldC5cbiAgICAqL1xuICAgIHZhciBjYWNoZSA9IG5ldyBTdHJvbmdDYWNoZShtYXgsIGRpc3Bvc2UpO1xuICAgIGNhY2hlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHNjaGVkdWxlKHRoaXMpO1xuICAgICAgICByZXR1cm4gU3Ryb25nQ2FjaGUucHJvdG90eXBlLnNldC5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgIH07XG4gICAgcmV0dXJuIGNhY2hlO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhY2hlcy5qcy5tYXAiXSwibmFtZXMiOlsiV2Vha0NhY2hlIiwiU3Ryb25nQ2FjaGUiLCJzY2hlZHVsZWRDbGVhbnVwIiwiV2Vha1NldCIsInNjaGVkdWxlIiwiY2FjaGUiLCJoYXMiLCJhZGQiLCJzZXRUaW1lb3V0IiwiY2xlYW4iLCJkZWxldGUiLCJBdXRvQ2xlYW5lZFdlYWtDYWNoZSIsIm1heCIsImRpc3Bvc2UiLCJzZXQiLCJrZXkiLCJ2YWx1ZSIsInByb3RvdHlwZSIsImNhbGwiLCJBdXRvQ2xlYW5lZFN0cm9uZ0NhY2hlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/caching/caches.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getApolloCacheMemoryInternals: () => (/* binding */ getApolloCacheMemoryInternals),\n/* harmony export */   getApolloClientMemoryInternals: () => (/* binding */ getApolloClientMemoryInternals),\n/* harmony export */   getInMemoryCacheMemoryInternals: () => (/* binding */ getInMemoryCacheMemoryInternals),\n/* harmony export */   registerGlobalCache: () => (/* binding */ registerGlobalCache)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _sizes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sizes.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n\n\nvar globalCaches = {};\nfunction registerGlobalCache(name, getSize) {\n    globalCaches[name] = getSize;\n}\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */ var getApolloClientMemoryInternals = globalThis.__DEV__ !== false ? _getApolloClientMemoryInternals : undefined;\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */ var getInMemoryCacheMemoryInternals = globalThis.__DEV__ !== false ? _getInMemoryCacheMemoryInternals : undefined;\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */ var getApolloCacheMemoryInternals = globalThis.__DEV__ !== false ? _getApolloCacheMemoryInternals : undefined;\nfunction getCurrentCacheSizes() {\n    // `defaultCacheSizes` is a `const enum` that will be inlined during build, so we have to reconstruct it's shape here\n    var defaults = {\n        parser: 1000 /* defaultCacheSizes[\"parser\"] */ ,\n        canonicalStringify: 1000 /* defaultCacheSizes[\"canonicalStringify\"] */ ,\n        print: 2000 /* defaultCacheSizes[\"print\"] */ ,\n        \"documentTransform.cache\": 2000 /* defaultCacheSizes[\"documentTransform.cache\"] */ ,\n        \"queryManager.getDocumentInfo\": 2000 /* defaultCacheSizes[\"queryManager.getDocumentInfo\"] */ ,\n        \"PersistedQueryLink.persistedQueryHashes\": 2000 /* defaultCacheSizes[\"PersistedQueryLink.persistedQueryHashes\"] */ ,\n        \"fragmentRegistry.transform\": 2000 /* defaultCacheSizes[\"fragmentRegistry.transform\"] */ ,\n        \"fragmentRegistry.lookup\": 1000 /* defaultCacheSizes[\"fragmentRegistry.lookup\"] */ ,\n        \"fragmentRegistry.findFragmentSpreads\": 4000 /* defaultCacheSizes[\"fragmentRegistry.findFragmentSpreads\"] */ ,\n        \"cache.fragmentQueryDocuments\": 1000 /* defaultCacheSizes[\"cache.fragmentQueryDocuments\"] */ ,\n        \"removeTypenameFromVariables.getVariableDefinitions\": 2000 /* defaultCacheSizes[\"removeTypenameFromVariables.getVariableDefinitions\"] */ ,\n        \"inMemoryCache.maybeBroadcastWatch\": 5000 /* defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] */ ,\n        \"inMemoryCache.executeSelectionSet\": 50000 /* defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"] */ ,\n        \"inMemoryCache.executeSubSelectedArray\": 10000 /* defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"] */ \n    };\n    return Object.fromEntries(Object.entries(defaults).map(function(_a) {\n        var k = _a[0], v = _a[1];\n        return [\n            k,\n            _sizes_js__WEBPACK_IMPORTED_MODULE_0__.cacheSizes[k] || v\n        ];\n    }));\n}\nfunction _getApolloClientMemoryInternals() {\n    var _a, _b, _c, _d, _e;\n    if (!(globalThis.__DEV__ !== false)) throw new Error(\"only supported in development mode\");\n    return {\n        limits: getCurrentCacheSizes(),\n        sizes: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n            print: (_a = globalCaches.print) === null || _a === void 0 ? void 0 : _a.call(globalCaches),\n            parser: (_b = globalCaches.parser) === null || _b === void 0 ? void 0 : _b.call(globalCaches),\n            canonicalStringify: (_c = globalCaches.canonicalStringify) === null || _c === void 0 ? void 0 : _c.call(globalCaches),\n            links: linkInfo(this.link),\n            queryManager: {\n                getDocumentInfo: this[\"queryManager\"][\"transformCache\"].size,\n                documentTransforms: transformInfo(this[\"queryManager\"].documentTransform)\n            }\n        }, (_e = (_d = this.cache).getMemoryInternals) === null || _e === void 0 ? void 0 : _e.call(_d))\n    };\n}\nfunction _getApolloCacheMemoryInternals() {\n    return {\n        cache: {\n            fragmentQueryDocuments: getWrapperInformation(this[\"getFragmentDoc\"])\n        }\n    };\n}\nfunction _getInMemoryCacheMemoryInternals() {\n    var fragments = this.config.fragments;\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _getApolloCacheMemoryInternals.apply(this)), {\n        addTypenameDocumentTransform: transformInfo(this[\"addTypenameTransform\"]),\n        inMemoryCache: {\n            executeSelectionSet: getWrapperInformation(this[\"storeReader\"][\"executeSelectionSet\"]),\n            executeSubSelectedArray: getWrapperInformation(this[\"storeReader\"][\"executeSubSelectedArray\"]),\n            maybeBroadcastWatch: getWrapperInformation(this[\"maybeBroadcastWatch\"])\n        },\n        fragmentRegistry: {\n            findFragmentSpreads: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.findFragmentSpreads),\n            lookup: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.lookup),\n            transform: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.transform)\n        }\n    });\n}\nfunction isWrapper(f) {\n    return !!f && \"dirtyKey\" in f;\n}\nfunction getWrapperInformation(f) {\n    return isWrapper(f) ? f.size : undefined;\n}\nfunction isDefined(value) {\n    return value != null;\n}\nfunction transformInfo(transform) {\n    return recurseTransformInfo(transform).map(function(cache) {\n        return {\n            cache: cache\n        };\n    });\n}\nfunction recurseTransformInfo(transform) {\n    return transform ? (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([\n        getWrapperInformation(transform === null || transform === void 0 ? void 0 : transform[\"performWork\"])\n    ], recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform[\"left\"]), true), recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform[\"right\"]), true).filter(isDefined) : [];\n}\nfunction linkInfo(link) {\n    var _a;\n    return link ? (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([\n        (_a = link === null || link === void 0 ? void 0 : link.getMemoryInternals) === null || _a === void 0 ? void 0 : _a.call(link)\n    ], linkInfo(link === null || link === void 0 ? void 0 : link.left), true), linkInfo(link === null || link === void 0 ? void 0 : link.right), true).filter(isDefined) : [];\n} //# sourceMappingURL=getMemoryInternals.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/caching/sizes.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cacheSizes: () => (/* binding */ cacheSizes)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\n\nvar cacheSizeSymbol = Symbol.for(\"apollo.cacheSize\");\n/**\n *\n * The global cache size configuration for Apollo Client.\n *\n * @remarks\n *\n * You can directly modify this object, but any modification will\n * only have an effect on caches that are created after the modification.\n *\n * So for global caches, such as `parser`, `canonicalStringify` and `print`,\n * you might need to call `.reset` on them, which will essentially re-create them.\n *\n * Alternatively, you can set `globalThis[Symbol.for(\"apollo.cacheSize\")]` before\n * you load the Apollo Client package:\n *\n * @example\n * ```ts\n * globalThis[Symbol.for(\"apollo.cacheSize\")] = {\n *   parser: 100\n * } satisfies Partial<CacheSizes> // the `satisfies` is optional if using TypeScript\n * ```\n */ var cacheSizes = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.global[cacheSizeSymbol]); //# sourceMappingURL=sizes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NhY2hpbmcvc2l6ZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ1k7QUFDN0MsSUFBSUUsa0JBQWtCQyxPQUFPQyxHQUFHLENBQUM7QUFDakM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXFCQyxHQUNNLElBQUlDLGFBQWFMLCtDQUFRQSxDQUFDLENBQUMsR0FBR0MscURBQU0sQ0FBQ0MsZ0JBQWdCLEVBQUUsQ0FDOUQsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktZG9jcy1mcm9uLWVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9jYWNoaW5nL3NpemVzLmpzPzMzNWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGdsb2JhbCB9IGZyb20gXCIuLi9nbG9iYWxzL2luZGV4LmpzXCI7XG52YXIgY2FjaGVTaXplU3ltYm9sID0gU3ltYm9sLmZvcihcImFwb2xsby5jYWNoZVNpemVcIik7XG4vKipcbiAqXG4gKiBUaGUgZ2xvYmFsIGNhY2hlIHNpemUgY29uZmlndXJhdGlvbiBmb3IgQXBvbGxvIENsaWVudC5cbiAqXG4gKiBAcmVtYXJrc1xuICpcbiAqIFlvdSBjYW4gZGlyZWN0bHkgbW9kaWZ5IHRoaXMgb2JqZWN0LCBidXQgYW55IG1vZGlmaWNhdGlvbiB3aWxsXG4gKiBvbmx5IGhhdmUgYW4gZWZmZWN0IG9uIGNhY2hlcyB0aGF0IGFyZSBjcmVhdGVkIGFmdGVyIHRoZSBtb2RpZmljYXRpb24uXG4gKlxuICogU28gZm9yIGdsb2JhbCBjYWNoZXMsIHN1Y2ggYXMgYHBhcnNlcmAsIGBjYW5vbmljYWxTdHJpbmdpZnlgIGFuZCBgcHJpbnRgLFxuICogeW91IG1pZ2h0IG5lZWQgdG8gY2FsbCBgLnJlc2V0YCBvbiB0aGVtLCB3aGljaCB3aWxsIGVzc2VudGlhbGx5IHJlLWNyZWF0ZSB0aGVtLlxuICpcbiAqIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gc2V0IGBnbG9iYWxUaGlzW1N5bWJvbC5mb3IoXCJhcG9sbG8uY2FjaGVTaXplXCIpXWAgYmVmb3JlXG4gKiB5b3UgbG9hZCB0aGUgQXBvbGxvIENsaWVudCBwYWNrYWdlOlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogZ2xvYmFsVGhpc1tTeW1ib2wuZm9yKFwiYXBvbGxvLmNhY2hlU2l6ZVwiKV0gPSB7XG4gKiAgIHBhcnNlcjogMTAwXG4gKiB9IHNhdGlzZmllcyBQYXJ0aWFsPENhY2hlU2l6ZXM+IC8vIHRoZSBgc2F0aXNmaWVzYCBpcyBvcHRpb25hbCBpZiB1c2luZyBUeXBlU2NyaXB0XG4gKiBgYGBcbiAqL1xuZXhwb3J0IHZhciBjYWNoZVNpemVzID0gX19hc3NpZ24oe30sIGdsb2JhbFtjYWNoZVNpemVTeW1ib2xdKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpemVzLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsImdsb2JhbCIsImNhY2hlU2l6ZVN5bWJvbCIsIlN5bWJvbCIsImZvciIsImNhY2hlU2l6ZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/arrays.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isNonEmptyArray: () => (/* binding */ isNonEmptyArray)\n/* harmony export */ });\n// A version of Array.isArray that works better with readonly arrays.\nvar isArray = Array.isArray;\nfunction isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n} //# sourceMappingURL=arrays.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9hcnJheXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxxRUFBcUU7QUFDOUQsSUFBSUEsVUFBVUMsTUFBTUQsT0FBTyxDQUFDO0FBQzVCLFNBQVNFLGdCQUFnQkMsS0FBSztJQUNqQyxPQUFPRixNQUFNRCxPQUFPLENBQUNHLFVBQVVBLE1BQU1DLE1BQU0sR0FBRztBQUNsRCxFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL2FycmF5cy5qcz80ZGZkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEEgdmVyc2lvbiBvZiBBcnJheS5pc0FycmF5IHRoYXQgd29ya3MgYmV0dGVyIHdpdGggcmVhZG9ubHkgYXJyYXlzLlxuZXhwb3J0IHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmV4cG9ydCBmdW5jdGlvbiBpc05vbkVtcHR5QXJyYXkodmFsdWUpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID4gMDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFycmF5cy5qcy5tYXAiXSwibmFtZXMiOlsiaXNBcnJheSIsIkFycmF5IiwiaXNOb25FbXB0eUFycmF5IiwidmFsdWUiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/canUse.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   canUseAsyncIteratorSymbol: () => (/* binding */ canUseAsyncIteratorSymbol),\n/* harmony export */   canUseDOM: () => (/* binding */ canUseDOM),\n/* harmony export */   canUseLayoutEffect: () => (/* binding */ canUseLayoutEffect),\n/* harmony export */   canUseSymbol: () => (/* binding */ canUseSymbol),\n/* harmony export */   canUseWeakMap: () => (/* binding */ canUseWeakMap),\n/* harmony export */   canUseWeakSet: () => (/* binding */ canUseWeakSet)\n/* harmony export */ });\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\nvar canUseWeakMap = typeof WeakMap === \"function\" && !(0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return navigator.product == \"ReactNative\" && !global.HermesInternal;\n});\nvar canUseWeakSet = typeof WeakSet === \"function\";\nvar canUseSymbol = typeof Symbol === \"function\" && typeof Symbol.for === \"function\";\nvar canUseAsyncIteratorSymbol = canUseSymbol && Symbol.asyncIterator;\nvar canUseDOM = typeof (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return window.document.createElement;\n}) === \"function\";\nvar usingJSDOM = // Following advice found in this comment from @domenic (maintainer of jsdom):\n// https://github.com/jsdom/jsdom/issues/1537#issuecomment-229405327\n//\n// Since we control the version of Jest and jsdom used when running Apollo\n// Client tests, and that version is recent enought to include \" jsdom/x.y.z\"\n// at the end of the user agent string, I believe this case is all we need to\n// check. Testing for \"Node.js\" was recommended for backwards compatibility\n// with older version of jsdom, but we don't have that problem.\n(0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return navigator.userAgent.indexOf(\"jsdom\") >= 0;\n}) || false;\n// Our tests should all continue to pass if we remove this !usingJSDOM\n// condition, thereby allowing useLayoutEffect when using jsdom. Unfortunately,\n// if we allow useLayoutEffect, then useSyncExternalStore generates many\n// warnings about useLayoutEffect doing nothing on the server. While these\n// warnings are harmless, this !usingJSDOM condition seems to be the best way to\n// prevent them (i.e. skipping useLayoutEffect when using jsdom).\nvar canUseLayoutEffect = canUseDOM && !usingJSDOM; //# sourceMappingURL=canUse.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9jYW5Vc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUE0QztBQUNyQyxJQUFJQyxnQkFBZ0IsT0FBT0MsWUFBWSxjQUMxQyxDQUFDRix3REFBS0EsQ0FBQztJQUFjLE9BQU9HLFVBQVVDLE9BQU8sSUFBSSxpQkFBaUIsQ0FBQ0MsT0FBT0MsY0FBYztBQUFFLEdBQUc7QUFDMUYsSUFBSUMsZ0JBQWdCLE9BQU9DLFlBQVksV0FBVztBQUNsRCxJQUFJQyxlQUFlLE9BQU9DLFdBQVcsY0FBYyxPQUFPQSxPQUFPQyxHQUFHLEtBQUssV0FBVztBQUNwRixJQUFJQyw0QkFBNEJILGdCQUFnQkMsT0FBT0csYUFBYSxDQUFDO0FBQ3JFLElBQUlDLFlBQVksT0FBT2Qsd0RBQUtBLENBQUM7SUFBYyxPQUFPZSxPQUFPQyxRQUFRLENBQUNDLGFBQWE7QUFBRSxPQUFPLFdBQVc7QUFDMUcsSUFBSUMsYUFDSiw4RUFBOEU7QUFDOUUsb0VBQW9FO0FBQ3BFLEVBQUU7QUFDRiwwRUFBMEU7QUFDMUUsNkVBQTZFO0FBQzdFLDZFQUE2RTtBQUM3RSwyRUFBMkU7QUFDM0UsK0RBQStEO0FBQy9EbEIsd0RBQUtBLENBQUM7SUFBYyxPQUFPRyxVQUFVZ0IsU0FBUyxDQUFDQyxPQUFPLENBQUMsWUFBWTtBQUFHLE1BQU07QUFDNUUsc0VBQXNFO0FBQ3RFLCtFQUErRTtBQUMvRSx3RUFBd0U7QUFDeEUsMEVBQTBFO0FBQzFFLGdGQUFnRjtBQUNoRixpRUFBaUU7QUFDMUQsSUFBSUMscUJBQXFCUCxhQUFhLENBQUNJLFdBQVcsQ0FDekQsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktZG9jcy1mcm9uLWVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9jb21tb24vY2FuVXNlLmpzPzBmNWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWF5YmUgfSBmcm9tIFwiLi4vZ2xvYmFscy9pbmRleC5qc1wiO1xuZXhwb3J0IHZhciBjYW5Vc2VXZWFrTWFwID0gdHlwZW9mIFdlYWtNYXAgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICFtYXliZShmdW5jdGlvbiAoKSB7IHJldHVybiBuYXZpZ2F0b3IucHJvZHVjdCA9PSBcIlJlYWN0TmF0aXZlXCIgJiYgIWdsb2JhbC5IZXJtZXNJbnRlcm5hbDsgfSk7XG5leHBvcnQgdmFyIGNhblVzZVdlYWtTZXQgPSB0eXBlb2YgV2Vha1NldCA9PT0gXCJmdW5jdGlvblwiO1xuZXhwb3J0IHZhciBjYW5Vc2VTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5mb3IgPT09IFwiZnVuY3Rpb25cIjtcbmV4cG9ydCB2YXIgY2FuVXNlQXN5bmNJdGVyYXRvclN5bWJvbCA9IGNhblVzZVN5bWJvbCAmJiBTeW1ib2wuYXN5bmNJdGVyYXRvcjtcbmV4cG9ydCB2YXIgY2FuVXNlRE9NID0gdHlwZW9mIG1heWJlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50OyB9KSA9PT0gXCJmdW5jdGlvblwiO1xudmFyIHVzaW5nSlNET00gPSBcbi8vIEZvbGxvd2luZyBhZHZpY2UgZm91bmQgaW4gdGhpcyBjb21tZW50IGZyb20gQGRvbWVuaWMgKG1haW50YWluZXIgb2YganNkb20pOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pzZG9tL2pzZG9tL2lzc3Vlcy8xNTM3I2lzc3VlY29tbWVudC0yMjk0MDUzMjdcbi8vXG4vLyBTaW5jZSB3ZSBjb250cm9sIHRoZSB2ZXJzaW9uIG9mIEplc3QgYW5kIGpzZG9tIHVzZWQgd2hlbiBydW5uaW5nIEFwb2xsb1xuLy8gQ2xpZW50IHRlc3RzLCBhbmQgdGhhdCB2ZXJzaW9uIGlzIHJlY2VudCBlbm91Z2h0IHRvIGluY2x1ZGUgXCIganNkb20veC55LnpcIlxuLy8gYXQgdGhlIGVuZCBvZiB0aGUgdXNlciBhZ2VudCBzdHJpbmcsIEkgYmVsaWV2ZSB0aGlzIGNhc2UgaXMgYWxsIHdlIG5lZWQgdG9cbi8vIGNoZWNrLiBUZXN0aW5nIGZvciBcIk5vZGUuanNcIiB3YXMgcmVjb21tZW5kZWQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4vLyB3aXRoIG9sZGVyIHZlcnNpb24gb2YganNkb20sIGJ1dCB3ZSBkb24ndCBoYXZlIHRoYXQgcHJvYmxlbS5cbm1heWJlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcImpzZG9tXCIpID49IDA7IH0pIHx8IGZhbHNlO1xuLy8gT3VyIHRlc3RzIHNob3VsZCBhbGwgY29udGludWUgdG8gcGFzcyBpZiB3ZSByZW1vdmUgdGhpcyAhdXNpbmdKU0RPTVxuLy8gY29uZGl0aW9uLCB0aGVyZWJ5IGFsbG93aW5nIHVzZUxheW91dEVmZmVjdCB3aGVuIHVzaW5nIGpzZG9tLiBVbmZvcnR1bmF0ZWx5LFxuLy8gaWYgd2UgYWxsb3cgdXNlTGF5b3V0RWZmZWN0LCB0aGVuIHVzZVN5bmNFeHRlcm5hbFN0b3JlIGdlbmVyYXRlcyBtYW55XG4vLyB3YXJuaW5ncyBhYm91dCB1c2VMYXlvdXRFZmZlY3QgZG9pbmcgbm90aGluZyBvbiB0aGUgc2VydmVyLiBXaGlsZSB0aGVzZVxuLy8gd2FybmluZ3MgYXJlIGhhcm1sZXNzLCB0aGlzICF1c2luZ0pTRE9NIGNvbmRpdGlvbiBzZWVtcyB0byBiZSB0aGUgYmVzdCB3YXkgdG9cbi8vIHByZXZlbnQgdGhlbSAoaS5lLiBza2lwcGluZyB1c2VMYXlvdXRFZmZlY3Qgd2hlbiB1c2luZyBqc2RvbSkuXG5leHBvcnQgdmFyIGNhblVzZUxheW91dEVmZmVjdCA9IGNhblVzZURPTSAmJiAhdXNpbmdKU0RPTTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhblVzZS5qcy5tYXAiXSwibmFtZXMiOlsibWF5YmUiLCJjYW5Vc2VXZWFrTWFwIiwiV2Vha01hcCIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJnbG9iYWwiLCJIZXJtZXNJbnRlcm5hbCIsImNhblVzZVdlYWtTZXQiLCJXZWFrU2V0IiwiY2FuVXNlU3ltYm9sIiwiU3ltYm9sIiwiZm9yIiwiY2FuVXNlQXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJjYW5Vc2VET00iLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ1c2luZ0pTRE9NIiwidXNlckFnZW50IiwiaW5kZXhPZiIsImNhblVzZUxheW91dEVmZmVjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/canonicalStringify.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   canonicalStringify: () => (/* binding */ canonicalStringify)\n/* harmony export */ });\n/* harmony import */ var _utilities_caching_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/caching/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/caches.js\");\n/* harmony import */ var _utilities_caching_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/caching/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../caching/getMemoryInternals.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n\n\n/**\n * Like JSON.stringify, but with object keys always sorted in the same order.\n *\n * To achieve performant sorting, this function uses a Map from JSON-serialized\n * arrays of keys (in any order) to sorted arrays of the same keys, with a\n * single sorted array reference shared by all permutations of the keys.\n *\n * As a drawback, this function will add a little bit more memory for every\n * object encountered that has different (more, less, a different order of) keys\n * than in the past.\n *\n * In a typical application, this extra memory usage should not play a\n * significant role, as `canonicalStringify` will be called for only a limited\n * number of object shapes, and the cache will not grow beyond a certain point.\n * But in some edge cases, this could be a problem, so we provide\n * canonicalStringify.reset() as a way of clearing the cache.\n * */ var canonicalStringify = Object.assign(function canonicalStringify(value) {\n    return JSON.stringify(value, stableObjectReplacer);\n}, {\n    reset: function() {\n        // Clearing the sortingMap will reclaim all cached memory, without\n        // affecting the logical results of canonicalStringify, but potentially\n        // sacrificing performance until the cache is refilled.\n        sortingMap = new _utilities_caching_index_js__WEBPACK_IMPORTED_MODULE_0__.AutoCleanedStrongCache(_utilities_caching_index_js__WEBPACK_IMPORTED_MODULE_1__.cacheSizes.canonicalStringify || 1000 /* defaultCacheSizes.canonicalStringify */ );\n    }\n});\nif (globalThis.__DEV__ !== false) {\n    (0,_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_2__.registerGlobalCache)(\"canonicalStringify\", function() {\n        return sortingMap.size;\n    });\n}\n// Values are JSON-serialized arrays of object keys (in any order), and values\n// are sorted arrays of the same keys.\nvar sortingMap;\ncanonicalStringify.reset();\n// The JSON.stringify function takes an optional second argument called a\n// replacer function. This function is called for each key-value pair in the\n// object being stringified, and its return value is used instead of the\n// original value. If the replacer function returns a new value, that value is\n// stringified as JSON instead of the original value of the property.\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#the_replacer_parameter\nfunction stableObjectReplacer(key, value) {\n    if (value && typeof value === \"object\") {\n        var proto = Object.getPrototypeOf(value);\n        // We don't want to mess with objects that are not \"plain\" objects, which\n        // means their prototype is either Object.prototype or null. This check also\n        // prevents needlessly rearranging the indices of arrays.\n        if (proto === Object.prototype || proto === null) {\n            var keys = Object.keys(value);\n            // If keys is already sorted, let JSON.stringify serialize the original\n            // value instead of creating a new object with keys in the same order.\n            if (keys.every(everyKeyInOrder)) return value;\n            var unsortedKey = JSON.stringify(keys);\n            var sortedKeys = sortingMap.get(unsortedKey);\n            if (!sortedKeys) {\n                keys.sort();\n                var sortedKey = JSON.stringify(keys);\n                // Checking for sortedKey in the sortingMap allows us to share the same\n                // sorted array reference for all permutations of the same set of keys.\n                sortedKeys = sortingMap.get(sortedKey) || keys;\n                sortingMap.set(unsortedKey, sortedKeys);\n                sortingMap.set(sortedKey, sortedKeys);\n            }\n            var sortedObject_1 = Object.create(proto);\n            // Reassigning the keys in sorted order will cause JSON.stringify to\n            // serialize them in sorted order.\n            sortedKeys.forEach(function(key) {\n                sortedObject_1[key] = value[key];\n            });\n            return sortedObject_1;\n        }\n    }\n    return value;\n}\n// Since everything that happens in stableObjectReplacer benefits from being as\n// efficient as possible, we use a static function as the callback for\n// keys.every in order to test if the provided keys are already sorted without\n// allocating extra memory for a callback.\nfunction everyKeyInOrder(key, i, keys) {\n    return i === 0 || keys[i - 1] <= key;\n} //# sourceMappingURL=canonicalStringify.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9jYW5vbmljYWxTdHJpbmdpZnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF1RjtBQUNoQjtBQUN2RTs7Ozs7Ozs7Ozs7Ozs7OztHQWdCRyxHQUNJLElBQUlHLHFCQUFxQkMsT0FBT0MsTUFBTSxDQUFDLFNBQVNGLG1CQUFtQkcsS0FBSztJQUMzRSxPQUFPQyxLQUFLQyxTQUFTLENBQUNGLE9BQU9HO0FBQ2pDLEdBQUc7SUFDQ0MsT0FBTztRQUNILGtFQUFrRTtRQUNsRSx1RUFBdUU7UUFDdkUsdURBQXVEO1FBQ3ZEQyxhQUFhLElBQUlYLCtFQUFzQkEsQ0FBQ0MsbUVBQVVBLENBQUNFLGtCQUFrQixJQUFJLEtBQUssd0NBQXdDO0lBQzFIO0FBQ0osR0FBRztBQUNILElBQUlTLFdBQVdDLE9BQU8sS0FBSyxPQUFPO0lBQzlCWCxtRkFBbUJBLENBQUMsc0JBQXNCO1FBQWMsT0FBT1MsV0FBV0csSUFBSTtJQUFFO0FBQ3BGO0FBQ0EsOEVBQThFO0FBQzlFLHNDQUFzQztBQUN0QyxJQUFJSDtBQUNKUixtQkFBbUJPLEtBQUs7QUFDeEIseUVBQXlFO0FBQ3pFLDRFQUE0RTtBQUM1RSx3RUFBd0U7QUFDeEUsOEVBQThFO0FBQzlFLHFFQUFxRTtBQUNyRSx5SEFBeUg7QUFDekgsU0FBU0QscUJBQXFCTSxHQUFHLEVBQUVULEtBQUs7SUFDcEMsSUFBSUEsU0FBUyxPQUFPQSxVQUFVLFVBQVU7UUFDcEMsSUFBSVUsUUFBUVosT0FBT2EsY0FBYyxDQUFDWDtRQUNsQyx5RUFBeUU7UUFDekUsNEVBQTRFO1FBQzVFLHlEQUF5RDtRQUN6RCxJQUFJVSxVQUFVWixPQUFPYyxTQUFTLElBQUlGLFVBQVUsTUFBTTtZQUM5QyxJQUFJRyxPQUFPZixPQUFPZSxJQUFJLENBQUNiO1lBQ3ZCLHVFQUF1RTtZQUN2RSxzRUFBc0U7WUFDdEUsSUFBSWEsS0FBS0MsS0FBSyxDQUFDQyxrQkFDWCxPQUFPZjtZQUNYLElBQUlnQixjQUFjZixLQUFLQyxTQUFTLENBQUNXO1lBQ2pDLElBQUlJLGFBQWFaLFdBQVdhLEdBQUcsQ0FBQ0Y7WUFDaEMsSUFBSSxDQUFDQyxZQUFZO2dCQUNiSixLQUFLTSxJQUFJO2dCQUNULElBQUlDLFlBQVluQixLQUFLQyxTQUFTLENBQUNXO2dCQUMvQix1RUFBdUU7Z0JBQ3ZFLHVFQUF1RTtnQkFDdkVJLGFBQWFaLFdBQVdhLEdBQUcsQ0FBQ0UsY0FBY1A7Z0JBQzFDUixXQUFXZ0IsR0FBRyxDQUFDTCxhQUFhQztnQkFDNUJaLFdBQVdnQixHQUFHLENBQUNELFdBQVdIO1lBQzlCO1lBQ0EsSUFBSUssaUJBQWlCeEIsT0FBT3lCLE1BQU0sQ0FBQ2I7WUFDbkMsb0VBQW9FO1lBQ3BFLGtDQUFrQztZQUNsQ08sV0FBV08sT0FBTyxDQUFDLFNBQVVmLEdBQUc7Z0JBQzVCYSxjQUFjLENBQUNiLElBQUksR0FBR1QsS0FBSyxDQUFDUyxJQUFJO1lBQ3BDO1lBQ0EsT0FBT2E7UUFDWDtJQUNKO0lBQ0EsT0FBT3RCO0FBQ1g7QUFDQSwrRUFBK0U7QUFDL0Usc0VBQXNFO0FBQ3RFLDhFQUE4RTtBQUM5RSwwQ0FBMEM7QUFDMUMsU0FBU2UsZ0JBQWdCTixHQUFHLEVBQUVnQixDQUFDLEVBQUVaLElBQUk7SUFDakMsT0FBT1ksTUFBTSxLQUFLWixJQUFJLENBQUNZLElBQUksRUFBRSxJQUFJaEI7QUFDckMsRUFDQSw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9jYW5vbmljYWxTdHJpbmdpZnkuanM/NjRkOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBdXRvQ2xlYW5lZFN0cm9uZ0NhY2hlLCBjYWNoZVNpemVzLCB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvY2FjaGluZy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgcmVnaXN0ZXJHbG9iYWxDYWNoZSB9IGZyb20gXCIuLi9jYWNoaW5nL2dldE1lbW9yeUludGVybmFscy5qc1wiO1xuLyoqXG4gKiBMaWtlIEpTT04uc3RyaW5naWZ5LCBidXQgd2l0aCBvYmplY3Qga2V5cyBhbHdheXMgc29ydGVkIGluIHRoZSBzYW1lIG9yZGVyLlxuICpcbiAqIFRvIGFjaGlldmUgcGVyZm9ybWFudCBzb3J0aW5nLCB0aGlzIGZ1bmN0aW9uIHVzZXMgYSBNYXAgZnJvbSBKU09OLXNlcmlhbGl6ZWRcbiAqIGFycmF5cyBvZiBrZXlzIChpbiBhbnkgb3JkZXIpIHRvIHNvcnRlZCBhcnJheXMgb2YgdGhlIHNhbWUga2V5cywgd2l0aCBhXG4gKiBzaW5nbGUgc29ydGVkIGFycmF5IHJlZmVyZW5jZSBzaGFyZWQgYnkgYWxsIHBlcm11dGF0aW9ucyBvZiB0aGUga2V5cy5cbiAqXG4gKiBBcyBhIGRyYXdiYWNrLCB0aGlzIGZ1bmN0aW9uIHdpbGwgYWRkIGEgbGl0dGxlIGJpdCBtb3JlIG1lbW9yeSBmb3IgZXZlcnlcbiAqIG9iamVjdCBlbmNvdW50ZXJlZCB0aGF0IGhhcyBkaWZmZXJlbnQgKG1vcmUsIGxlc3MsIGEgZGlmZmVyZW50IG9yZGVyIG9mKSBrZXlzXG4gKiB0aGFuIGluIHRoZSBwYXN0LlxuICpcbiAqIEluIGEgdHlwaWNhbCBhcHBsaWNhdGlvbiwgdGhpcyBleHRyYSBtZW1vcnkgdXNhZ2Ugc2hvdWxkIG5vdCBwbGF5IGFcbiAqIHNpZ25pZmljYW50IHJvbGUsIGFzIGBjYW5vbmljYWxTdHJpbmdpZnlgIHdpbGwgYmUgY2FsbGVkIGZvciBvbmx5IGEgbGltaXRlZFxuICogbnVtYmVyIG9mIG9iamVjdCBzaGFwZXMsIGFuZCB0aGUgY2FjaGUgd2lsbCBub3QgZ3JvdyBiZXlvbmQgYSBjZXJ0YWluIHBvaW50LlxuICogQnV0IGluIHNvbWUgZWRnZSBjYXNlcywgdGhpcyBjb3VsZCBiZSBhIHByb2JsZW0sIHNvIHdlIHByb3ZpZGVcbiAqIGNhbm9uaWNhbFN0cmluZ2lmeS5yZXNldCgpIGFzIGEgd2F5IG9mIGNsZWFyaW5nIHRoZSBjYWNoZS5cbiAqICovXG5leHBvcnQgdmFyIGNhbm9uaWNhbFN0cmluZ2lmeSA9IE9iamVjdC5hc3NpZ24oZnVuY3Rpb24gY2Fub25pY2FsU3RyaW5naWZ5KHZhbHVlKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlLCBzdGFibGVPYmplY3RSZXBsYWNlcik7XG59LCB7XG4gICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gQ2xlYXJpbmcgdGhlIHNvcnRpbmdNYXAgd2lsbCByZWNsYWltIGFsbCBjYWNoZWQgbWVtb3J5LCB3aXRob3V0XG4gICAgICAgIC8vIGFmZmVjdGluZyB0aGUgbG9naWNhbCByZXN1bHRzIG9mIGNhbm9uaWNhbFN0cmluZ2lmeSwgYnV0IHBvdGVudGlhbGx5XG4gICAgICAgIC8vIHNhY3JpZmljaW5nIHBlcmZvcm1hbmNlIHVudGlsIHRoZSBjYWNoZSBpcyByZWZpbGxlZC5cbiAgICAgICAgc29ydGluZ01hcCA9IG5ldyBBdXRvQ2xlYW5lZFN0cm9uZ0NhY2hlKGNhY2hlU2l6ZXMuY2Fub25pY2FsU3RyaW5naWZ5IHx8IDEwMDAgLyogZGVmYXVsdENhY2hlU2l6ZXMuY2Fub25pY2FsU3RyaW5naWZ5ICovKTtcbiAgICB9LFxufSk7XG5pZiAoZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSkge1xuICAgIHJlZ2lzdGVyR2xvYmFsQ2FjaGUoXCJjYW5vbmljYWxTdHJpbmdpZnlcIiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc29ydGluZ01hcC5zaXplOyB9KTtcbn1cbi8vIFZhbHVlcyBhcmUgSlNPTi1zZXJpYWxpemVkIGFycmF5cyBvZiBvYmplY3Qga2V5cyAoaW4gYW55IG9yZGVyKSwgYW5kIHZhbHVlc1xuLy8gYXJlIHNvcnRlZCBhcnJheXMgb2YgdGhlIHNhbWUga2V5cy5cbnZhciBzb3J0aW5nTWFwO1xuY2Fub25pY2FsU3RyaW5naWZ5LnJlc2V0KCk7XG4vLyBUaGUgSlNPTi5zdHJpbmdpZnkgZnVuY3Rpb24gdGFrZXMgYW4gb3B0aW9uYWwgc2Vjb25kIGFyZ3VtZW50IGNhbGxlZCBhXG4vLyByZXBsYWNlciBmdW5jdGlvbi4gVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgZm9yIGVhY2gga2V5LXZhbHVlIHBhaXIgaW4gdGhlXG4vLyBvYmplY3QgYmVpbmcgc3RyaW5naWZpZWQsIGFuZCBpdHMgcmV0dXJuIHZhbHVlIGlzIHVzZWQgaW5zdGVhZCBvZiB0aGVcbi8vIG9yaWdpbmFsIHZhbHVlLiBJZiB0aGUgcmVwbGFjZXIgZnVuY3Rpb24gcmV0dXJucyBhIG5ldyB2YWx1ZSwgdGhhdCB2YWx1ZSBpc1xuLy8gc3RyaW5naWZpZWQgYXMgSlNPTiBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCB2YWx1ZSBvZiB0aGUgcHJvcGVydHkuXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9KU09OL3N0cmluZ2lmeSN0aGVfcmVwbGFjZXJfcGFyYW1ldGVyXG5mdW5jdGlvbiBzdGFibGVPYmplY3RSZXBsYWNlcihrZXksIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICB2YXIgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xuICAgICAgICAvLyBXZSBkb24ndCB3YW50IHRvIG1lc3Mgd2l0aCBvYmplY3RzIHRoYXQgYXJlIG5vdCBcInBsYWluXCIgb2JqZWN0cywgd2hpY2hcbiAgICAgICAgLy8gbWVhbnMgdGhlaXIgcHJvdG90eXBlIGlzIGVpdGhlciBPYmplY3QucHJvdG90eXBlIG9yIG51bGwuIFRoaXMgY2hlY2sgYWxzb1xuICAgICAgICAvLyBwcmV2ZW50cyBuZWVkbGVzc2x5IHJlYXJyYW5naW5nIHRoZSBpbmRpY2VzIG9mIGFycmF5cy5cbiAgICAgICAgaWYgKHByb3RvID09PSBPYmplY3QucHJvdG90eXBlIHx8IHByb3RvID09PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcbiAgICAgICAgICAgIC8vIElmIGtleXMgaXMgYWxyZWFkeSBzb3J0ZWQsIGxldCBKU09OLnN0cmluZ2lmeSBzZXJpYWxpemUgdGhlIG9yaWdpbmFsXG4gICAgICAgICAgICAvLyB2YWx1ZSBpbnN0ZWFkIG9mIGNyZWF0aW5nIGEgbmV3IG9iamVjdCB3aXRoIGtleXMgaW4gdGhlIHNhbWUgb3JkZXIuXG4gICAgICAgICAgICBpZiAoa2V5cy5ldmVyeShldmVyeUtleUluT3JkZXIpKVxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIHZhciB1bnNvcnRlZEtleSA9IEpTT04uc3RyaW5naWZ5KGtleXMpO1xuICAgICAgICAgICAgdmFyIHNvcnRlZEtleXMgPSBzb3J0aW5nTWFwLmdldCh1bnNvcnRlZEtleSk7XG4gICAgICAgICAgICBpZiAoIXNvcnRlZEtleXMpIHtcbiAgICAgICAgICAgICAgICBrZXlzLnNvcnQoKTtcbiAgICAgICAgICAgICAgICB2YXIgc29ydGVkS2V5ID0gSlNPTi5zdHJpbmdpZnkoa2V5cyk7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2tpbmcgZm9yIHNvcnRlZEtleSBpbiB0aGUgc29ydGluZ01hcCBhbGxvd3MgdXMgdG8gc2hhcmUgdGhlIHNhbWVcbiAgICAgICAgICAgICAgICAvLyBzb3J0ZWQgYXJyYXkgcmVmZXJlbmNlIGZvciBhbGwgcGVybXV0YXRpb25zIG9mIHRoZSBzYW1lIHNldCBvZiBrZXlzLlxuICAgICAgICAgICAgICAgIHNvcnRlZEtleXMgPSBzb3J0aW5nTWFwLmdldChzb3J0ZWRLZXkpIHx8IGtleXM7XG4gICAgICAgICAgICAgICAgc29ydGluZ01hcC5zZXQodW5zb3J0ZWRLZXksIHNvcnRlZEtleXMpO1xuICAgICAgICAgICAgICAgIHNvcnRpbmdNYXAuc2V0KHNvcnRlZEtleSwgc29ydGVkS2V5cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc29ydGVkT2JqZWN0XzEgPSBPYmplY3QuY3JlYXRlKHByb3RvKTtcbiAgICAgICAgICAgIC8vIFJlYXNzaWduaW5nIHRoZSBrZXlzIGluIHNvcnRlZCBvcmRlciB3aWxsIGNhdXNlIEpTT04uc3RyaW5naWZ5IHRvXG4gICAgICAgICAgICAvLyBzZXJpYWxpemUgdGhlbSBpbiBzb3J0ZWQgb3JkZXIuXG4gICAgICAgICAgICBzb3J0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIHNvcnRlZE9iamVjdF8xW2tleV0gPSB2YWx1ZVtrZXldO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gc29ydGVkT2JqZWN0XzE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuLy8gU2luY2UgZXZlcnl0aGluZyB0aGF0IGhhcHBlbnMgaW4gc3RhYmxlT2JqZWN0UmVwbGFjZXIgYmVuZWZpdHMgZnJvbSBiZWluZyBhc1xuLy8gZWZmaWNpZW50IGFzIHBvc3NpYmxlLCB3ZSB1c2UgYSBzdGF0aWMgZnVuY3Rpb24gYXMgdGhlIGNhbGxiYWNrIGZvclxuLy8ga2V5cy5ldmVyeSBpbiBvcmRlciB0byB0ZXN0IGlmIHRoZSBwcm92aWRlZCBrZXlzIGFyZSBhbHJlYWR5IHNvcnRlZCB3aXRob3V0XG4vLyBhbGxvY2F0aW5nIGV4dHJhIG1lbW9yeSBmb3IgYSBjYWxsYmFjay5cbmZ1bmN0aW9uIGV2ZXJ5S2V5SW5PcmRlcihrZXksIGksIGtleXMpIHtcbiAgICByZXR1cm4gaSA9PT0gMCB8fCBrZXlzW2kgLSAxXSA8PSBrZXk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYW5vbmljYWxTdHJpbmdpZnkuanMubWFwIl0sIm5hbWVzIjpbIkF1dG9DbGVhbmVkU3Ryb25nQ2FjaGUiLCJjYWNoZVNpemVzIiwicmVnaXN0ZXJHbG9iYWxDYWNoZSIsImNhbm9uaWNhbFN0cmluZ2lmeSIsIk9iamVjdCIsImFzc2lnbiIsInZhbHVlIiwiSlNPTiIsInN0cmluZ2lmeSIsInN0YWJsZU9iamVjdFJlcGxhY2VyIiwicmVzZXQiLCJzb3J0aW5nTWFwIiwiZ2xvYmFsVGhpcyIsIl9fREVWX18iLCJzaXplIiwia2V5IiwicHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsInByb3RvdHlwZSIsImtleXMiLCJldmVyeSIsImV2ZXJ5S2V5SW5PcmRlciIsInVuc29ydGVkS2V5Iiwic29ydGVkS2V5cyIsImdldCIsInNvcnQiLCJzb3J0ZWRLZXkiLCJzZXQiLCJzb3J0ZWRPYmplY3RfMSIsImNyZWF0ZSIsImZvckVhY2giLCJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/cloneDeep.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/cloneDeep.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cloneDeep: () => (/* binding */ cloneDeep)\n/* harmony export */ });\nvar toString = Object.prototype.toString;\n/**\n * Deeply clones a value to create a new instance.\n */ function cloneDeep(value) {\n    return cloneDeepHelper(value);\n}\nfunction cloneDeepHelper(val, seen) {\n    switch(toString.call(val)){\n        case \"[object Array]\":\n            {\n                seen = seen || new Map();\n                if (seen.has(val)) return seen.get(val);\n                var copy_1 = val.slice(0);\n                seen.set(val, copy_1);\n                copy_1.forEach(function(child, i) {\n                    copy_1[i] = cloneDeepHelper(child, seen);\n                });\n                return copy_1;\n            }\n        case \"[object Object]\":\n            {\n                seen = seen || new Map();\n                if (seen.has(val)) return seen.get(val);\n                // High fidelity polyfills of Object.create and Object.getPrototypeOf are\n                // possible in all JS environments, so we will assume they exist/work.\n                var copy_2 = Object.create(Object.getPrototypeOf(val));\n                seen.set(val, copy_2);\n                Object.keys(val).forEach(function(key) {\n                    copy_2[key] = cloneDeepHelper(val[key], seen);\n                });\n                return copy_2;\n            }\n        default:\n            return val;\n    }\n} //# sourceMappingURL=cloneDeep.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9jbG9uZURlZXAuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUlBLFdBQVdDLE9BQU9DLFNBQVMsQ0FBQ0YsUUFBUTtBQUN4Qzs7Q0FFQyxHQUNNLFNBQVNHLFVBQVVDLEtBQUs7SUFDM0IsT0FBT0MsZ0JBQWdCRDtBQUMzQjtBQUNBLFNBQVNDLGdCQUFnQkMsR0FBRyxFQUFFQyxJQUFJO0lBQzlCLE9BQVFQLFNBQVNRLElBQUksQ0FBQ0Y7UUFDbEIsS0FBSztZQUFrQjtnQkFDbkJDLE9BQU9BLFFBQVEsSUFBSUU7Z0JBQ25CLElBQUlGLEtBQUtHLEdBQUcsQ0FBQ0osTUFDVCxPQUFPQyxLQUFLSSxHQUFHLENBQUNMO2dCQUNwQixJQUFJTSxTQUFTTixJQUFJTyxLQUFLLENBQUM7Z0JBQ3ZCTixLQUFLTyxHQUFHLENBQUNSLEtBQUtNO2dCQUNkQSxPQUFPRyxPQUFPLENBQUMsU0FBVUMsS0FBSyxFQUFFQyxDQUFDO29CQUM3QkwsTUFBTSxDQUFDSyxFQUFFLEdBQUdaLGdCQUFnQlcsT0FBT1Q7Z0JBQ3ZDO2dCQUNBLE9BQU9LO1lBQ1g7UUFDQSxLQUFLO1lBQW1CO2dCQUNwQkwsT0FBT0EsUUFBUSxJQUFJRTtnQkFDbkIsSUFBSUYsS0FBS0csR0FBRyxDQUFDSixNQUNULE9BQU9DLEtBQUtJLEdBQUcsQ0FBQ0w7Z0JBQ3BCLHlFQUF5RTtnQkFDekUsc0VBQXNFO2dCQUN0RSxJQUFJWSxTQUFTakIsT0FBT2tCLE1BQU0sQ0FBQ2xCLE9BQU9tQixjQUFjLENBQUNkO2dCQUNqREMsS0FBS08sR0FBRyxDQUFDUixLQUFLWTtnQkFDZGpCLE9BQU9vQixJQUFJLENBQUNmLEtBQUtTLE9BQU8sQ0FBQyxTQUFVTyxHQUFHO29CQUNsQ0osTUFBTSxDQUFDSSxJQUFJLEdBQUdqQixnQkFBZ0JDLEdBQUcsQ0FBQ2dCLElBQUksRUFBRWY7Z0JBQzVDO2dCQUNBLE9BQU9XO1lBQ1g7UUFDQTtZQUNJLE9BQU9aO0lBQ2Y7QUFDSixFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL2Nsb25lRGVlcC5qcz84ODQwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG4vKipcbiAqIERlZXBseSBjbG9uZXMgYSB2YWx1ZSB0byBjcmVhdGUgYSBuZXcgaW5zdGFuY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZURlZXAodmFsdWUpIHtcbiAgICByZXR1cm4gY2xvbmVEZWVwSGVscGVyKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGNsb25lRGVlcEhlbHBlcih2YWwsIHNlZW4pIHtcbiAgICBzd2l0Y2ggKHRvU3RyaW5nLmNhbGwodmFsKSkge1xuICAgICAgICBjYXNlIFwiW29iamVjdCBBcnJheV1cIjoge1xuICAgICAgICAgICAgc2VlbiA9IHNlZW4gfHwgbmV3IE1hcCgpO1xuICAgICAgICAgICAgaWYgKHNlZW4uaGFzKHZhbCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlZW4uZ2V0KHZhbCk7XG4gICAgICAgICAgICB2YXIgY29weV8xID0gdmFsLnNsaWNlKDApO1xuICAgICAgICAgICAgc2Vlbi5zZXQodmFsLCBjb3B5XzEpO1xuICAgICAgICAgICAgY29weV8xLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkLCBpKSB7XG4gICAgICAgICAgICAgICAgY29weV8xW2ldID0gY2xvbmVEZWVwSGVscGVyKGNoaWxkLCBzZWVuKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGNvcHlfMTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiW29iamVjdCBPYmplY3RdXCI6IHtcbiAgICAgICAgICAgIHNlZW4gPSBzZWVuIHx8IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIGlmIChzZWVuLmhhcyh2YWwpKVxuICAgICAgICAgICAgICAgIHJldHVybiBzZWVuLmdldCh2YWwpO1xuICAgICAgICAgICAgLy8gSGlnaCBmaWRlbGl0eSBwb2x5ZmlsbHMgb2YgT2JqZWN0LmNyZWF0ZSBhbmQgT2JqZWN0LmdldFByb3RvdHlwZU9mIGFyZVxuICAgICAgICAgICAgLy8gcG9zc2libGUgaW4gYWxsIEpTIGVudmlyb25tZW50cywgc28gd2Ugd2lsbCBhc3N1bWUgdGhleSBleGlzdC93b3JrLlxuICAgICAgICAgICAgdmFyIGNvcHlfMiA9IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbCkpO1xuICAgICAgICAgICAgc2Vlbi5zZXQodmFsLCBjb3B5XzIpO1xuICAgICAgICAgICAgT2JqZWN0LmtleXModmFsKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICBjb3B5XzJba2V5XSA9IGNsb25lRGVlcEhlbHBlcih2YWxba2V5XSwgc2Vlbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBjb3B5XzI7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xvbmVEZWVwLmpzLm1hcCJdLCJuYW1lcyI6WyJ0b1N0cmluZyIsIk9iamVjdCIsInByb3RvdHlwZSIsImNsb25lRGVlcCIsInZhbHVlIiwiY2xvbmVEZWVwSGVscGVyIiwidmFsIiwic2VlbiIsImNhbGwiLCJNYXAiLCJoYXMiLCJnZXQiLCJjb3B5XzEiLCJzbGljZSIsInNldCIsImZvckVhY2giLCJjaGlsZCIsImkiLCJjb3B5XzIiLCJjcmVhdGUiLCJnZXRQcm90b3R5cGVPZiIsImtleXMiLCJrZXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/cloneDeep.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/compact.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/compact.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compact: () => (/* binding */ compact)\n/* harmony export */ });\n/**\n * Merges the provided objects shallowly and removes\n * all properties with an `undefined` value\n */ function compact() {\n    var objects = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        objects[_i] = arguments[_i];\n    }\n    var result = Object.create(null);\n    objects.forEach(function(obj) {\n        if (!obj) return;\n        Object.keys(obj).forEach(function(key) {\n            var value = obj[key];\n            if (value !== void 0) {\n                result[key] = value;\n            }\n        });\n    });\n    return result;\n} //# sourceMappingURL=compact.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9jb21wYWN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7O0NBR0MsR0FDTSxTQUFTQTtJQUNaLElBQUlDLFVBQVUsRUFBRTtJQUNoQixJQUFLLElBQUlDLEtBQUssR0FBR0EsS0FBS0MsVUFBVUMsTUFBTSxFQUFFRixLQUFNO1FBQzFDRCxPQUFPLENBQUNDLEdBQUcsR0FBR0MsU0FBUyxDQUFDRCxHQUFHO0lBQy9CO0lBQ0EsSUFBSUcsU0FBU0MsT0FBT0MsTUFBTSxDQUFDO0lBQzNCTixRQUFRTyxPQUFPLENBQUMsU0FBVUMsR0FBRztRQUN6QixJQUFJLENBQUNBLEtBQ0Q7UUFDSkgsT0FBT0ksSUFBSSxDQUFDRCxLQUFLRCxPQUFPLENBQUMsU0FBVUcsR0FBRztZQUNsQyxJQUFJQyxRQUFRSCxHQUFHLENBQUNFLElBQUk7WUFDcEIsSUFBSUMsVUFBVSxLQUFLLEdBQUc7Z0JBQ2xCUCxNQUFNLENBQUNNLElBQUksR0FBR0M7WUFDbEI7UUFDSjtJQUNKO0lBQ0EsT0FBT1A7QUFDWCxFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL2NvbXBhY3QuanM/NmU2NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1lcmdlcyB0aGUgcHJvdmlkZWQgb2JqZWN0cyBzaGFsbG93bHkgYW5kIHJlbW92ZXNcbiAqIGFsbCBwcm9wZXJ0aWVzIHdpdGggYW4gYHVuZGVmaW5lZGAgdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhY3QoKSB7XG4gICAgdmFyIG9iamVjdHMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvYmplY3RzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIG9iamVjdHMuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIGlmICghb2JqKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gb2JqW2tleV07XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wYWN0LmpzLm1hcCJdLCJuYW1lcyI6WyJjb21wYWN0Iiwib2JqZWN0cyIsIl9pIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwicmVzdWx0IiwiT2JqZWN0IiwiY3JlYXRlIiwiZm9yRWFjaCIsIm9iaiIsImtleXMiLCJrZXkiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/compact.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/errorHandling.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/errorHandling.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getGraphQLErrorsFromResult: () => (/* binding */ getGraphQLErrorsFromResult),\n/* harmony export */   graphQLResultHasError: () => (/* binding */ graphQLResultHasError)\n/* harmony export */ });\n/* harmony import */ var _arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrays.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _incrementalResult_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./incrementalResult.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/incrementalResult.js\");\n\n\nfunction graphQLResultHasError(result) {\n    var errors = getGraphQLErrorsFromResult(result);\n    return (0,_arrays_js__WEBPACK_IMPORTED_MODULE_0__.isNonEmptyArray)(errors);\n}\nfunction getGraphQLErrorsFromResult(result) {\n    var graphQLErrors = (0,_arrays_js__WEBPACK_IMPORTED_MODULE_0__.isNonEmptyArray)(result.errors) ? result.errors.slice(0) : [];\n    if ((0,_incrementalResult_js__WEBPACK_IMPORTED_MODULE_1__.isExecutionPatchIncrementalResult)(result) && (0,_arrays_js__WEBPACK_IMPORTED_MODULE_0__.isNonEmptyArray)(result.incremental)) {\n        result.incremental.forEach(function(incrementalResult) {\n            if (incrementalResult.errors) {\n                graphQLErrors.push.apply(graphQLErrors, incrementalResult.errors);\n            }\n        });\n    }\n    return graphQLErrors;\n} //# sourceMappingURL=errorHandling.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9lcnJvckhhbmRsaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBOEM7QUFDNkI7QUFDcEUsU0FBU0Usc0JBQXNCQyxNQUFNO0lBQ3hDLElBQUlDLFNBQVNDLDJCQUEyQkY7SUFDeEMsT0FBT0gsMkRBQWVBLENBQUNJO0FBQzNCO0FBQ08sU0FBU0MsMkJBQTJCRixNQUFNO0lBQzdDLElBQUlHLGdCQUFnQk4sMkRBQWVBLENBQUNHLE9BQU9DLE1BQU0sSUFBSUQsT0FBT0MsTUFBTSxDQUFDRyxLQUFLLENBQUMsS0FBSyxFQUFFO0lBQ2hGLElBQUlOLHdGQUFpQ0EsQ0FBQ0UsV0FDbENILDJEQUFlQSxDQUFDRyxPQUFPSyxXQUFXLEdBQUc7UUFDckNMLE9BQU9LLFdBQVcsQ0FBQ0MsT0FBTyxDQUFDLFNBQVVDLGlCQUFpQjtZQUNsRCxJQUFJQSxrQkFBa0JOLE1BQU0sRUFBRTtnQkFDMUJFLGNBQWNLLElBQUksQ0FBQ0MsS0FBSyxDQUFDTixlQUFlSSxrQkFBa0JOLE1BQU07WUFDcEU7UUFDSjtJQUNKO0lBQ0EsT0FBT0U7QUFDWCxFQUNBLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL2Vycm9ySGFuZGxpbmcuanM/N2VmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc05vbkVtcHR5QXJyYXkgfSBmcm9tIFwiLi9hcnJheXMuanNcIjtcbmltcG9ydCB7IGlzRXhlY3V0aW9uUGF0Y2hJbmNyZW1lbnRhbFJlc3VsdCB9IGZyb20gXCIuL2luY3JlbWVudGFsUmVzdWx0LmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gZ3JhcGhRTFJlc3VsdEhhc0Vycm9yKHJlc3VsdCkge1xuICAgIHZhciBlcnJvcnMgPSBnZXRHcmFwaFFMRXJyb3JzRnJvbVJlc3VsdChyZXN1bHQpO1xuICAgIHJldHVybiBpc05vbkVtcHR5QXJyYXkoZXJyb3JzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRHcmFwaFFMRXJyb3JzRnJvbVJlc3VsdChyZXN1bHQpIHtcbiAgICB2YXIgZ3JhcGhRTEVycm9ycyA9IGlzTm9uRW1wdHlBcnJheShyZXN1bHQuZXJyb3JzKSA/IHJlc3VsdC5lcnJvcnMuc2xpY2UoMCkgOiBbXTtcbiAgICBpZiAoaXNFeGVjdXRpb25QYXRjaEluY3JlbWVudGFsUmVzdWx0KHJlc3VsdCkgJiZcbiAgICAgICAgaXNOb25FbXB0eUFycmF5KHJlc3VsdC5pbmNyZW1lbnRhbCkpIHtcbiAgICAgICAgcmVzdWx0LmluY3JlbWVudGFsLmZvckVhY2goZnVuY3Rpb24gKGluY3JlbWVudGFsUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoaW5jcmVtZW50YWxSZXN1bHQuZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgZ3JhcGhRTEVycm9ycy5wdXNoLmFwcGx5KGdyYXBoUUxFcnJvcnMsIGluY3JlbWVudGFsUmVzdWx0LmVycm9ycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZ3JhcGhRTEVycm9ycztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ySGFuZGxpbmcuanMubWFwIl0sIm5hbWVzIjpbImlzTm9uRW1wdHlBcnJheSIsImlzRXhlY3V0aW9uUGF0Y2hJbmNyZW1lbnRhbFJlc3VsdCIsImdyYXBoUUxSZXN1bHRIYXNFcnJvciIsInJlc3VsdCIsImVycm9ycyIsImdldEdyYXBoUUxFcnJvcnNGcm9tUmVzdWx0IiwiZ3JhcGhRTEVycm9ycyIsInNsaWNlIiwiaW5jcmVtZW50YWwiLCJmb3JFYWNoIiwiaW5jcmVtZW50YWxSZXN1bHQiLCJwdXNoIiwiYXBwbHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/errorHandling.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/incrementalResult.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/incrementalResult.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isApolloPayloadResult: () => (/* binding */ isApolloPayloadResult),\n/* harmony export */   isExecutionPatchIncrementalResult: () => (/* binding */ isExecutionPatchIncrementalResult),\n/* harmony export */   isExecutionPatchInitialResult: () => (/* binding */ isExecutionPatchInitialResult),\n/* harmony export */   isExecutionPatchResult: () => (/* binding */ isExecutionPatchResult),\n/* harmony export */   mergeIncrementalData: () => (/* binding */ mergeIncrementalData)\n/* harmony export */ });\n/* harmony import */ var _objects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./objects.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _arrays_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./arrays.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _mergeDeep_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mergeDeep.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n\n\n\nfunction isExecutionPatchIncrementalResult(value) {\n    return \"incremental\" in value;\n}\nfunction isExecutionPatchInitialResult(value) {\n    return \"hasNext\" in value && \"data\" in value;\n}\nfunction isExecutionPatchResult(value) {\n    return isExecutionPatchIncrementalResult(value) || isExecutionPatchInitialResult(value);\n}\n// This function detects an Apollo payload result before it is transformed\n// into a FetchResult via HttpLink; it cannot detect an ApolloPayloadResult\n// once it leaves the link chain.\nfunction isApolloPayloadResult(value) {\n    return (0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(value) && \"payload\" in value;\n}\nfunction mergeIncrementalData(prevResult, result) {\n    var mergedData = prevResult;\n    var merger = new _mergeDeep_js__WEBPACK_IMPORTED_MODULE_1__.DeepMerger();\n    if (isExecutionPatchIncrementalResult(result) && (0,_arrays_js__WEBPACK_IMPORTED_MODULE_2__.isNonEmptyArray)(result.incremental)) {\n        result.incremental.forEach(function(_a) {\n            var data = _a.data, path = _a.path;\n            for(var i = path.length - 1; i >= 0; --i){\n                var key = path[i];\n                var isNumericKey = !isNaN(+key);\n                var parent_1 = isNumericKey ? [] : {};\n                parent_1[key] = data;\n                data = parent_1;\n            }\n            mergedData = merger.merge(mergedData, data);\n        });\n    }\n    return mergedData;\n} //# sourceMappingURL=incrementalResult.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9pbmNyZW1lbnRhbFJlc3VsdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUErQztBQUNEO0FBQ0Y7QUFDckMsU0FBU0csa0NBQWtDQyxLQUFLO0lBQ25ELE9BQU8saUJBQWlCQTtBQUM1QjtBQUNPLFNBQVNDLDhCQUE4QkQsS0FBSztJQUMvQyxPQUFPLGFBQWFBLFNBQVMsVUFBVUE7QUFDM0M7QUFDTyxTQUFTRSx1QkFBdUJGLEtBQUs7SUFDeEMsT0FBUUQsa0NBQWtDQyxVQUN0Q0MsOEJBQThCRDtBQUN0QztBQUNBLDBFQUEwRTtBQUMxRSwyRUFBMkU7QUFDM0UsaUNBQWlDO0FBQzFCLFNBQVNHLHNCQUFzQkgsS0FBSztJQUN2QyxPQUFPSiw0REFBZUEsQ0FBQ0ksVUFBVSxhQUFhQTtBQUNsRDtBQUNPLFNBQVNJLHFCQUFxQkMsVUFBVSxFQUFFQyxNQUFNO0lBQ25ELElBQUlDLGFBQWFGO0lBQ2pCLElBQUlHLFNBQVMsSUFBSVYscURBQVVBO0lBQzNCLElBQUlDLGtDQUFrQ08sV0FDbENULDJEQUFlQSxDQUFDUyxPQUFPRyxXQUFXLEdBQUc7UUFDckNILE9BQU9HLFdBQVcsQ0FBQ0MsT0FBTyxDQUFDLFNBQVVDLEVBQUU7WUFDbkMsSUFBSUMsT0FBT0QsR0FBR0MsSUFBSSxFQUFFQyxPQUFPRixHQUFHRSxJQUFJO1lBQ2xDLElBQUssSUFBSUMsSUFBSUQsS0FBS0UsTUFBTSxHQUFHLEdBQUdELEtBQUssR0FBRyxFQUFFQSxFQUFHO2dCQUN2QyxJQUFJRSxNQUFNSCxJQUFJLENBQUNDLEVBQUU7Z0JBQ2pCLElBQUlHLGVBQWUsQ0FBQ0MsTUFBTSxDQUFDRjtnQkFDM0IsSUFBSUcsV0FBV0YsZUFBZSxFQUFFLEdBQUcsQ0FBQztnQkFDcENFLFFBQVEsQ0FBQ0gsSUFBSSxHQUFHSjtnQkFDaEJBLE9BQU9PO1lBQ1g7WUFDQVosYUFBYUMsT0FBT1ksS0FBSyxDQUFDYixZQUFZSztRQUMxQztJQUNKO0lBQ0EsT0FBT0w7QUFDWCxFQUNBLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL2luY3JlbWVudGFsUmVzdWx0LmpzPzJiODkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNOb25OdWxsT2JqZWN0IH0gZnJvbSBcIi4vb2JqZWN0cy5qc1wiO1xuaW1wb3J0IHsgaXNOb25FbXB0eUFycmF5IH0gZnJvbSBcIi4vYXJyYXlzLmpzXCI7XG5pbXBvcnQgeyBEZWVwTWVyZ2VyIH0gZnJvbSBcIi4vbWVyZ2VEZWVwLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNFeGVjdXRpb25QYXRjaEluY3JlbWVudGFsUmVzdWx0KHZhbHVlKSB7XG4gICAgcmV0dXJuIFwiaW5jcmVtZW50YWxcIiBpbiB2YWx1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0V4ZWN1dGlvblBhdGNoSW5pdGlhbFJlc3VsdCh2YWx1ZSkge1xuICAgIHJldHVybiBcImhhc05leHRcIiBpbiB2YWx1ZSAmJiBcImRhdGFcIiBpbiB2YWx1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0V4ZWN1dGlvblBhdGNoUmVzdWx0KHZhbHVlKSB7XG4gICAgcmV0dXJuIChpc0V4ZWN1dGlvblBhdGNoSW5jcmVtZW50YWxSZXN1bHQodmFsdWUpIHx8XG4gICAgICAgIGlzRXhlY3V0aW9uUGF0Y2hJbml0aWFsUmVzdWx0KHZhbHVlKSk7XG59XG4vLyBUaGlzIGZ1bmN0aW9uIGRldGVjdHMgYW4gQXBvbGxvIHBheWxvYWQgcmVzdWx0IGJlZm9yZSBpdCBpcyB0cmFuc2Zvcm1lZFxuLy8gaW50byBhIEZldGNoUmVzdWx0IHZpYSBIdHRwTGluazsgaXQgY2Fubm90IGRldGVjdCBhbiBBcG9sbG9QYXlsb2FkUmVzdWx0XG4vLyBvbmNlIGl0IGxlYXZlcyB0aGUgbGluayBjaGFpbi5cbmV4cG9ydCBmdW5jdGlvbiBpc0Fwb2xsb1BheWxvYWRSZXN1bHQodmFsdWUpIHtcbiAgICByZXR1cm4gaXNOb25OdWxsT2JqZWN0KHZhbHVlKSAmJiBcInBheWxvYWRcIiBpbiB2YWx1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUluY3JlbWVudGFsRGF0YShwcmV2UmVzdWx0LCByZXN1bHQpIHtcbiAgICB2YXIgbWVyZ2VkRGF0YSA9IHByZXZSZXN1bHQ7XG4gICAgdmFyIG1lcmdlciA9IG5ldyBEZWVwTWVyZ2VyKCk7XG4gICAgaWYgKGlzRXhlY3V0aW9uUGF0Y2hJbmNyZW1lbnRhbFJlc3VsdChyZXN1bHQpICYmXG4gICAgICAgIGlzTm9uRW1wdHlBcnJheShyZXN1bHQuaW5jcmVtZW50YWwpKSB7XG4gICAgICAgIHJlc3VsdC5pbmNyZW1lbnRhbC5mb3JFYWNoKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBfYS5kYXRhLCBwYXRoID0gX2EucGF0aDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IHBhdGhbaV07XG4gICAgICAgICAgICAgICAgdmFyIGlzTnVtZXJpY0tleSA9ICFpc05hTigra2V5KTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50XzEgPSBpc051bWVyaWNLZXkgPyBbXSA6IHt9O1xuICAgICAgICAgICAgICAgIHBhcmVudF8xW2tleV0gPSBkYXRhO1xuICAgICAgICAgICAgICAgIGRhdGEgPSBwYXJlbnRfMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1lcmdlZERhdGEgPSBtZXJnZXIubWVyZ2UobWVyZ2VkRGF0YSwgZGF0YSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VkRGF0YTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluY3JlbWVudGFsUmVzdWx0LmpzLm1hcCJdLCJuYW1lcyI6WyJpc05vbk51bGxPYmplY3QiLCJpc05vbkVtcHR5QXJyYXkiLCJEZWVwTWVyZ2VyIiwiaXNFeGVjdXRpb25QYXRjaEluY3JlbWVudGFsUmVzdWx0IiwidmFsdWUiLCJpc0V4ZWN1dGlvblBhdGNoSW5pdGlhbFJlc3VsdCIsImlzRXhlY3V0aW9uUGF0Y2hSZXN1bHQiLCJpc0Fwb2xsb1BheWxvYWRSZXN1bHQiLCJtZXJnZUluY3JlbWVudGFsRGF0YSIsInByZXZSZXN1bHQiLCJyZXN1bHQiLCJtZXJnZWREYXRhIiwibWVyZ2VyIiwiaW5jcmVtZW50YWwiLCJmb3JFYWNoIiwiX2EiLCJkYXRhIiwicGF0aCIsImkiLCJsZW5ndGgiLCJrZXkiLCJpc051bWVyaWNLZXkiLCJpc05hTiIsInBhcmVudF8xIiwibWVyZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/incrementalResult.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/makeUniqueId.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/makeUniqueId.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeUniqueId: () => (/* binding */ makeUniqueId)\n/* harmony export */ });\nvar prefixCounts = new Map();\n// These IDs won't be globally unique, but they will be unique within this\n// process, thanks to the counter, and unguessable thanks to the random suffix.\nfunction makeUniqueId(prefix) {\n    var count = prefixCounts.get(prefix) || 1;\n    prefixCounts.set(prefix, count + 1);\n    return \"\".concat(prefix, \":\").concat(count, \":\").concat(Math.random().toString(36).slice(2));\n} //# sourceMappingURL=makeUniqueId.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9tYWtlVW5pcXVlSWQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUlBLGVBQWUsSUFBSUM7QUFDdkIsMEVBQTBFO0FBQzFFLCtFQUErRTtBQUN4RSxTQUFTQyxhQUFhQyxNQUFNO0lBQy9CLElBQUlDLFFBQVFKLGFBQWFLLEdBQUcsQ0FBQ0YsV0FBVztJQUN4Q0gsYUFBYU0sR0FBRyxDQUFDSCxRQUFRQyxRQUFRO0lBQ2pDLE9BQU8sR0FBR0csTUFBTSxDQUFDSixRQUFRLEtBQUtJLE1BQU0sQ0FBQ0gsT0FBTyxLQUFLRyxNQUFNLENBQUNDLEtBQUtDLE1BQU0sR0FBR0MsUUFBUSxDQUFDLElBQUlDLEtBQUssQ0FBQztBQUM3RixFQUNBLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL21ha2VVbmlxdWVJZC5qcz8yOWFhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBwcmVmaXhDb3VudHMgPSBuZXcgTWFwKCk7XG4vLyBUaGVzZSBJRHMgd29uJ3QgYmUgZ2xvYmFsbHkgdW5pcXVlLCBidXQgdGhleSB3aWxsIGJlIHVuaXF1ZSB3aXRoaW4gdGhpc1xuLy8gcHJvY2VzcywgdGhhbmtzIHRvIHRoZSBjb3VudGVyLCBhbmQgdW5ndWVzc2FibGUgdGhhbmtzIHRvIHRoZSByYW5kb20gc3VmZml4LlxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VVbmlxdWVJZChwcmVmaXgpIHtcbiAgICB2YXIgY291bnQgPSBwcmVmaXhDb3VudHMuZ2V0KHByZWZpeCkgfHwgMTtcbiAgICBwcmVmaXhDb3VudHMuc2V0KHByZWZpeCwgY291bnQgKyAxKTtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQocHJlZml4LCBcIjpcIikuY29uY2F0KGNvdW50LCBcIjpcIikuY29uY2F0KE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1ha2VVbmlxdWVJZC5qcy5tYXAiXSwibmFtZXMiOlsicHJlZml4Q291bnRzIiwiTWFwIiwibWFrZVVuaXF1ZUlkIiwicHJlZml4IiwiY291bnQiLCJnZXQiLCJzZXQiLCJjb25jYXQiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJzbGljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/makeUniqueId.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maybeDeepFreeze: () => (/* binding */ maybeDeepFreeze)\n/* harmony export */ });\n/* harmony import */ var _objects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./objects.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n\nfunction deepFreeze(value) {\n    var workSet = new Set([\n        value\n    ]);\n    workSet.forEach(function(obj) {\n        if ((0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(obj) && shallowFreeze(obj) === obj) {\n            Object.getOwnPropertyNames(obj).forEach(function(name) {\n                if ((0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(obj[name])) workSet.add(obj[name]);\n            });\n        }\n    });\n    return value;\n}\nfunction shallowFreeze(obj) {\n    if (globalThis.__DEV__ !== false && !Object.isFrozen(obj)) {\n        try {\n            Object.freeze(obj);\n        } catch (e) {\n            // Some types like Uint8Array and Node.js's Buffer cannot be frozen, but\n            // they all throw a TypeError when you try, so we re-throw any exceptions\n            // that are not TypeErrors, since that would be unexpected.\n            if (e instanceof TypeError) return null;\n            throw e;\n        }\n    }\n    return obj;\n}\nfunction maybeDeepFreeze(obj) {\n    if (globalThis.__DEV__ !== false) {\n        deepFreeze(obj);\n    }\n    return obj;\n} //# sourceMappingURL=maybeDeepFreeze.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9tYXliZURlZXBGcmVlemUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0M7QUFDL0MsU0FBU0MsV0FBV0MsS0FBSztJQUNyQixJQUFJQyxVQUFVLElBQUlDLElBQUk7UUFBQ0Y7S0FBTTtJQUM3QkMsUUFBUUUsT0FBTyxDQUFDLFNBQVVDLEdBQUc7UUFDekIsSUFBSU4sNERBQWVBLENBQUNNLFFBQVFDLGNBQWNELFNBQVNBLEtBQUs7WUFDcERFLE9BQU9DLG1CQUFtQixDQUFDSCxLQUFLRCxPQUFPLENBQUMsU0FBVUssSUFBSTtnQkFDbEQsSUFBSVYsNERBQWVBLENBQUNNLEdBQUcsQ0FBQ0ksS0FBSyxHQUN6QlAsUUFBUVEsR0FBRyxDQUFDTCxHQUFHLENBQUNJLEtBQUs7WUFDN0I7UUFDSjtJQUNKO0lBQ0EsT0FBT1I7QUFDWDtBQUNBLFNBQVNLLGNBQWNELEdBQUc7SUFDdEIsSUFBSU0sV0FBV0MsT0FBTyxLQUFLLFNBQVMsQ0FBQ0wsT0FBT00sUUFBUSxDQUFDUixNQUFNO1FBQ3ZELElBQUk7WUFDQUUsT0FBT08sTUFBTSxDQUFDVDtRQUNsQixFQUNBLE9BQU9VLEdBQUc7WUFDTix3RUFBd0U7WUFDeEUseUVBQXlFO1lBQ3pFLDJEQUEyRDtZQUMzRCxJQUFJQSxhQUFhQyxXQUNiLE9BQU87WUFDWCxNQUFNRDtRQUNWO0lBQ0o7SUFDQSxPQUFPVjtBQUNYO0FBQ08sU0FBU1ksZ0JBQWdCWixHQUFHO0lBQy9CLElBQUlNLFdBQVdDLE9BQU8sS0FBSyxPQUFPO1FBQzlCWixXQUFXSztJQUNmO0lBQ0EsT0FBT0E7QUFDWCxFQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL21heWJlRGVlcEZyZWV6ZS5qcz80NWQ1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzTm9uTnVsbE9iamVjdCB9IGZyb20gXCIuL29iamVjdHMuanNcIjtcbmZ1bmN0aW9uIGRlZXBGcmVlemUodmFsdWUpIHtcbiAgICB2YXIgd29ya1NldCA9IG5ldyBTZXQoW3ZhbHVlXSk7XG4gICAgd29ya1NldC5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgaWYgKGlzTm9uTnVsbE9iamVjdChvYmopICYmIHNoYWxsb3dGcmVlemUob2JqKSA9PT0gb2JqKSB7XG4gICAgICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNOb25OdWxsT2JqZWN0KG9ialtuYW1lXSkpXG4gICAgICAgICAgICAgICAgICAgIHdvcmtTZXQuYWRkKG9ialtuYW1lXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHNoYWxsb3dGcmVlemUob2JqKSB7XG4gICAgaWYgKGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UgJiYgIU9iamVjdC5pc0Zyb3plbihvYmopKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBPYmplY3QuZnJlZXplKG9iaik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIFNvbWUgdHlwZXMgbGlrZSBVaW50OEFycmF5IGFuZCBOb2RlLmpzJ3MgQnVmZmVyIGNhbm5vdCBiZSBmcm96ZW4sIGJ1dFxuICAgICAgICAgICAgLy8gdGhleSBhbGwgdGhyb3cgYSBUeXBlRXJyb3Igd2hlbiB5b3UgdHJ5LCBzbyB3ZSByZS10aHJvdyBhbnkgZXhjZXB0aW9uc1xuICAgICAgICAgICAgLy8gdGhhdCBhcmUgbm90IFR5cGVFcnJvcnMsIHNpbmNlIHRoYXQgd291bGQgYmUgdW5leHBlY3RlZC5cbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgVHlwZUVycm9yKVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1heWJlRGVlcEZyZWV6ZShvYmopIHtcbiAgICBpZiAoZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSkge1xuICAgICAgICBkZWVwRnJlZXplKG9iaik7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXliZURlZXBGcmVlemUuanMubWFwIl0sIm5hbWVzIjpbImlzTm9uTnVsbE9iamVjdCIsImRlZXBGcmVlemUiLCJ2YWx1ZSIsIndvcmtTZXQiLCJTZXQiLCJmb3JFYWNoIiwib2JqIiwic2hhbGxvd0ZyZWV6ZSIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJuYW1lIiwiYWRkIiwiZ2xvYmFsVGhpcyIsIl9fREVWX18iLCJpc0Zyb3plbiIsImZyZWV6ZSIsImUiLCJUeXBlRXJyb3IiLCJtYXliZURlZXBGcmVlemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/mergeDeep.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeepMerger: () => (/* binding */ DeepMerger),\n/* harmony export */   mergeDeep: () => (/* binding */ mergeDeep),\n/* harmony export */   mergeDeepArray: () => (/* binding */ mergeDeepArray)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _objects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./objects.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction mergeDeep() {\n    var sources = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        sources[_i] = arguments[_i];\n    }\n    return mergeDeepArray(sources);\n}\n// In almost any situation where you could succeed in getting the\n// TypeScript compiler to infer a tuple type for the sources array, you\n// could just use mergeDeep instead of mergeDeepArray, so instead of\n// trying to convert T[] to an intersection type we just infer the array\n// element type, which works perfectly when the sources array has a\n// consistent element type.\nfunction mergeDeepArray(sources) {\n    var target = sources[0] || {};\n    var count = sources.length;\n    if (count > 1) {\n        var merger = new DeepMerger();\n        for(var i = 1; i < count; ++i){\n            target = merger.merge(target, sources[i]);\n        }\n    }\n    return target;\n}\nvar defaultReconciler = function(target, source, property) {\n    return this.merge(target[property], source[property]);\n};\nvar DeepMerger = /** @class */ function() {\n    function DeepMerger(reconciler) {\n        if (reconciler === void 0) {\n            reconciler = defaultReconciler;\n        }\n        this.reconciler = reconciler;\n        this.isObject = _objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject;\n        this.pastCopies = new Set();\n    }\n    DeepMerger.prototype.merge = function(target, source) {\n        var _this = this;\n        var context = [];\n        for(var _i = 2; _i < arguments.length; _i++){\n            context[_i - 2] = arguments[_i];\n        }\n        if ((0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(source) && (0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(target)) {\n            Object.keys(source).forEach(function(sourceKey) {\n                if (hasOwnProperty.call(target, sourceKey)) {\n                    var targetValue = target[sourceKey];\n                    if (source[sourceKey] !== targetValue) {\n                        var result = _this.reconciler.apply(_this, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([\n                            target,\n                            source,\n                            sourceKey\n                        ], context, false));\n                        // A well-implemented reconciler may return targetValue to indicate\n                        // the merge changed nothing about the structure of the target.\n                        if (result !== targetValue) {\n                            target = _this.shallowCopyForMerge(target);\n                            target[sourceKey] = result;\n                        }\n                    }\n                } else {\n                    // If there is no collision, the target can safely share memory with\n                    // the source, and the recursion can terminate here.\n                    target = _this.shallowCopyForMerge(target);\n                    target[sourceKey] = source[sourceKey];\n                }\n            });\n            return target;\n        }\n        // If source (or target) is not an object, let source replace target.\n        return source;\n    };\n    DeepMerger.prototype.shallowCopyForMerge = function(value) {\n        if ((0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(value)) {\n            if (!this.pastCopies.has(value)) {\n                if (Array.isArray(value)) {\n                    value = value.slice(0);\n                } else {\n                    value = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n                        __proto__: Object.getPrototypeOf(value)\n                    }, value);\n                }\n                this.pastCopies.add(value);\n            }\n        }\n        return value;\n    };\n    return DeepMerger;\n}();\n //# sourceMappingURL=mergeDeep.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/mergeOptions.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/mergeOptions.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeOptions: () => (/* binding */ mergeOptions)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _compact_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./compact.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/compact.js\");\n\n\nfunction mergeOptions(defaults, options) {\n    return (0,_compact_js__WEBPACK_IMPORTED_MODULE_0__.compact)(defaults, options, options.variables && {\n        variables: (0,_compact_js__WEBPACK_IMPORTED_MODULE_0__.compact)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, defaults && defaults.variables), options.variables))\n    });\n} //# sourceMappingURL=mergeOptions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9tZXJnZU9wdGlvbnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ007QUFDaEMsU0FBU0UsYUFBYUMsUUFBUSxFQUFFQyxPQUFPO0lBQzFDLE9BQU9ILG9EQUFPQSxDQUFDRSxVQUFVQyxTQUFTQSxRQUFRQyxTQUFTLElBQUk7UUFDbkRBLFdBQVdKLG9EQUFPQSxDQUFDRCwrQ0FBUUEsQ0FBQ0EsK0NBQVFBLENBQUMsQ0FBQyxHQUFJRyxZQUFZQSxTQUFTRSxTQUFTLEdBQUlELFFBQVFDLFNBQVM7SUFDakc7QUFDSixFQUNBLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL21lcmdlT3B0aW9ucy5qcz8wMmJkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBjb21wYWN0IH0gZnJvbSBcIi4vY29tcGFjdC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlT3B0aW9ucyhkZWZhdWx0cywgb3B0aW9ucykge1xuICAgIHJldHVybiBjb21wYWN0KGRlZmF1bHRzLCBvcHRpb25zLCBvcHRpb25zLnZhcmlhYmxlcyAmJiB7XG4gICAgICAgIHZhcmlhYmxlczogY29tcGFjdChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgKGRlZmF1bHRzICYmIGRlZmF1bHRzLnZhcmlhYmxlcykpLCBvcHRpb25zLnZhcmlhYmxlcykpLFxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VPcHRpb25zLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsImNvbXBhY3QiLCJtZXJnZU9wdGlvbnMiLCJkZWZhdWx0cyIsIm9wdGlvbnMiLCJ2YXJpYWJsZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/mergeOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/objects.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/objects.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNonNullObject: () => (/* binding */ isNonNullObject),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject)\n/* harmony export */ });\nfunction isNonNullObject(obj) {\n    return obj !== null && typeof obj === \"object\";\n}\nfunction isPlainObject(obj) {\n    return obj !== null && typeof obj === \"object\" && (Object.getPrototypeOf(obj) === Object.prototype || Object.getPrototypeOf(obj) === null);\n} //# sourceMappingURL=objects.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9vYmplY3RzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sU0FBU0EsZ0JBQWdCQyxHQUFHO0lBQy9CLE9BQU9BLFFBQVEsUUFBUSxPQUFPQSxRQUFRO0FBQzFDO0FBQ08sU0FBU0MsY0FBY0QsR0FBRztJQUM3QixPQUFRQSxRQUFRLFFBQ1osT0FBT0EsUUFBUSxZQUNkRSxDQUFBQSxPQUFPQyxjQUFjLENBQUNILFNBQVNFLE9BQU9FLFNBQVMsSUFDNUNGLE9BQU9DLGNBQWMsQ0FBQ0gsU0FBUyxJQUFHO0FBQzlDLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktZG9jcy1mcm9uLWVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9jb21tb24vb2JqZWN0cy5qcz8yMTU4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpc05vbk51bGxPYmplY3Qob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gICAgcmV0dXJuIChvYmogIT09IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAoT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IE9iamVjdC5wcm90b3R5cGUgfHxcbiAgICAgICAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBudWxsKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYmplY3RzLmpzLm1hcCJdLCJuYW1lcyI6WyJpc05vbk51bGxPYmplY3QiLCJvYmoiLCJpc1BsYWluT2JqZWN0IiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stringifyForDisplay: () => (/* binding */ stringifyForDisplay)\n/* harmony export */ });\n/* harmony import */ var _makeUniqueId_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./makeUniqueId.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/makeUniqueId.js\");\n\nfunction stringifyForDisplay(value, space) {\n    if (space === void 0) {\n        space = 0;\n    }\n    var undefId = (0,_makeUniqueId_js__WEBPACK_IMPORTED_MODULE_0__.makeUniqueId)(\"stringifyForDisplay\");\n    return JSON.stringify(value, function(key, value) {\n        return value === void 0 ? undefId : value;\n    }, space).split(JSON.stringify(undefId)).join(\"<undefined>\");\n} //# sourceMappingURL=stringifyForDisplay.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9zdHJpbmdpZnlGb3JEaXNwbGF5LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWlEO0FBQzFDLFNBQVNDLG9CQUFvQkMsS0FBSyxFQUFFQyxLQUFLO0lBQzVDLElBQUlBLFVBQVUsS0FBSyxHQUFHO1FBQUVBLFFBQVE7SUFBRztJQUNuQyxJQUFJQyxVQUFVSiw4REFBWUEsQ0FBQztJQUMzQixPQUFPSyxLQUFLQyxTQUFTLENBQUNKLE9BQU8sU0FBVUssR0FBRyxFQUFFTCxLQUFLO1FBQzdDLE9BQU9BLFVBQVUsS0FBSyxJQUFJRSxVQUFVRjtJQUN4QyxHQUFHQyxPQUNFSyxLQUFLLENBQUNILEtBQUtDLFNBQVMsQ0FBQ0YsVUFDckJLLElBQUksQ0FBQztBQUNkLEVBQ0EsK0NBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktZG9jcy1mcm9uLWVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9jb21tb24vc3RyaW5naWZ5Rm9yRGlzcGxheS5qcz8yMmM1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1ha2VVbmlxdWVJZCB9IGZyb20gXCIuL21ha2VVbmlxdWVJZC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeUZvckRpc3BsYXkodmFsdWUsIHNwYWNlKSB7XG4gICAgaWYgKHNwYWNlID09PSB2b2lkIDApIHsgc3BhY2UgPSAwOyB9XG4gICAgdmFyIHVuZGVmSWQgPSBtYWtlVW5pcXVlSWQoXCJzdHJpbmdpZnlGb3JEaXNwbGF5XCIpO1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB2b2lkIDAgPyB1bmRlZklkIDogdmFsdWU7XG4gICAgfSwgc3BhY2UpXG4gICAgICAgIC5zcGxpdChKU09OLnN0cmluZ2lmeSh1bmRlZklkKSlcbiAgICAgICAgLmpvaW4oXCI8dW5kZWZpbmVkPlwiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmluZ2lmeUZvckRpc3BsYXkuanMubWFwIl0sIm5hbWVzIjpbIm1ha2VVbmlxdWVJZCIsInN0cmluZ2lmeUZvckRpc3BsYXkiLCJ2YWx1ZSIsInNwYWNlIiwidW5kZWZJZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJrZXkiLCJzcGxpdCIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/globals/global.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/globals/global.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _maybe_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./maybe.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/maybe.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return globalThis;\n}) || (0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return window;\n}) || (0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return self;\n}) || (0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return global;\n}) || // We don't expect the Function constructor ever to be invoked at runtime, as\n// long as at least one of globalThis, window, self, or global is defined, so\n// we are under no obligation to make it easy for static analysis tools to\n// detect syntactic usage of the Function constructor. If you think you can\n// improve your static analysis to detect this obfuscation, think again. This\n// is an arms race you cannot win, at least not in JavaScript.\n(0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return _maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe.constructor(\"return this\")();\n})); //# sourceMappingURL=global.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvZ2xvYmFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW1DO0FBQ25DLGlFQUFnQkEsZ0RBQUtBLENBQUM7SUFBYyxPQUFPQztBQUFZLE1BQ25ERCxnREFBS0EsQ0FBQztJQUFjLE9BQU9FO0FBQVEsTUFDbkNGLGdEQUFLQSxDQUFDO0lBQWMsT0FBT0c7QUFBTSxNQUNqQ0gsZ0RBQUtBLENBQUM7SUFBYyxPQUFPSTtBQUFRLE1BQU0sNkVBQTZFO0FBQzFILDZFQUE2RTtBQUM3RSwwRUFBMEU7QUFDMUUsMkVBQTJFO0FBQzNFLDZFQUE2RTtBQUM3RSw4REFBOEQ7QUFDOURKLGdEQUFLQSxDQUFDO0lBQ0YsT0FBT0EsNENBQUtBLENBQUNLLFdBQVcsQ0FBQztBQUM3QixFQUFFLEVBQUUsQ0FDSixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvZ2xvYmFsLmpzPzg0ODgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWF5YmUgfSBmcm9tIFwiLi9tYXliZS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgKG1heWJlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdsb2JhbFRoaXM7IH0pIHx8XG4gICAgbWF5YmUoZnVuY3Rpb24gKCkgeyByZXR1cm4gd2luZG93OyB9KSB8fFxuICAgIG1heWJlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlbGY7IH0pIHx8XG4gICAgbWF5YmUoZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2xvYmFsOyB9KSB8fCAvLyBXZSBkb24ndCBleHBlY3QgdGhlIEZ1bmN0aW9uIGNvbnN0cnVjdG9yIGV2ZXIgdG8gYmUgaW52b2tlZCBhdCBydW50aW1lLCBhc1xuLy8gbG9uZyBhcyBhdCBsZWFzdCBvbmUgb2YgZ2xvYmFsVGhpcywgd2luZG93LCBzZWxmLCBvciBnbG9iYWwgaXMgZGVmaW5lZCwgc29cbi8vIHdlIGFyZSB1bmRlciBubyBvYmxpZ2F0aW9uIHRvIG1ha2UgaXQgZWFzeSBmb3Igc3RhdGljIGFuYWx5c2lzIHRvb2xzIHRvXG4vLyBkZXRlY3Qgc3ludGFjdGljIHVzYWdlIG9mIHRoZSBGdW5jdGlvbiBjb25zdHJ1Y3Rvci4gSWYgeW91IHRoaW5rIHlvdSBjYW5cbi8vIGltcHJvdmUgeW91ciBzdGF0aWMgYW5hbHlzaXMgdG8gZGV0ZWN0IHRoaXMgb2JmdXNjYXRpb24sIHRoaW5rIGFnYWluLiBUaGlzXG4vLyBpcyBhbiBhcm1zIHJhY2UgeW91IGNhbm5vdCB3aW4sIGF0IGxlYXN0IG5vdCBpbiBKYXZhU2NyaXB0LlxubWF5YmUoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBtYXliZS5jb25zdHJ1Y3RvcihcInJldHVybiB0aGlzXCIpKCk7XG59KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nbG9iYWwuanMubWFwIl0sIm5hbWVzIjpbIm1heWJlIiwiZ2xvYmFsVGhpcyIsIndpbmRvdyIsInNlbGYiLCJnbG9iYWwiLCJjb25zdHJ1Y3RvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/globals/global.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/globals/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/globals/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEV: () => (/* binding */ DEV),\n/* harmony export */   InvariantError: () => (/* reexport safe */ _invariantWrappers_js__WEBPACK_IMPORTED_MODULE_0__.InvariantError),\n/* harmony export */   __DEV__: () => (/* binding */ DEV),\n/* harmony export */   global: () => (/* reexport safe */ _global_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   invariant: () => (/* reexport safe */ _invariantWrappers_js__WEBPACK_IMPORTED_MODULE_0__.invariant),\n/* harmony export */   maybe: () => (/* reexport safe */ _maybe_js__WEBPACK_IMPORTED_MODULE_1__.maybe),\n/* harmony export */   newInvariantError: () => (/* reexport safe */ _invariantWrappers_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)\n/* harmony export */ });\n/* harmony import */ var _invariantWrappers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./invariantWrappers.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/invariantWrappers.js\");\n/* harmony import */ var _maybe_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./maybe.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/maybe.js\");\n/* harmony import */ var _global_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./global.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/global.js\");\n\n\n\n\n/**\n * @deprecated we do not use this internally anymore,\n * it is just exported for backwards compatibility\n */ // this file is extempt from automatic `__DEV__` replacement\n// so we have to write it out here\n// @ts-ignore\nvar DEV = globalThis.__DEV__ !== false;\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUF1RjtBQUNwRDtBQUNhO0FBQ1E7QUFDeEQ7OztDQUdDLEdBQ0QsNERBQTREO0FBQzVELGtDQUFrQztBQUNsQyxhQUFhO0FBQ04sSUFBSU0sTUFBTUMsV0FBV0MsT0FBTyxLQUFLLE1BQU07QUFDcEIsQ0FDMUIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktZG9jcy1mcm9uLWVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9nbG9iYWxzL2luZGV4LmpzP2QzODIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW52YXJpYW50LCBuZXdJbnZhcmlhbnRFcnJvciwgSW52YXJpYW50RXJyb3IsIH0gZnJvbSBcIi4vaW52YXJpYW50V3JhcHBlcnMuanNcIjtcbmV4cG9ydCB7IG1heWJlIH0gZnJvbSBcIi4vbWF5YmUuanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZ2xvYmFsIH0gZnJvbSBcIi4vZ2xvYmFsLmpzXCI7XG5leHBvcnQgeyBpbnZhcmlhbnQsIG5ld0ludmFyaWFudEVycm9yLCBJbnZhcmlhbnRFcnJvciB9O1xuLyoqXG4gKiBAZGVwcmVjYXRlZCB3ZSBkbyBub3QgdXNlIHRoaXMgaW50ZXJuYWxseSBhbnltb3JlLFxuICogaXQgaXMganVzdCBleHBvcnRlZCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAqL1xuLy8gdGhpcyBmaWxlIGlzIGV4dGVtcHQgZnJvbSBhdXRvbWF0aWMgYF9fREVWX19gIHJlcGxhY2VtZW50XG4vLyBzbyB3ZSBoYXZlIHRvIHdyaXRlIGl0IG91dCBoZXJlXG4vLyBAdHMtaWdub3JlXG5leHBvcnQgdmFyIERFViA9IGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2U7XG5leHBvcnQgeyBERVYgYXMgX19ERVZfXyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbImludmFyaWFudCIsIm5ld0ludmFyaWFudEVycm9yIiwiSW52YXJpYW50RXJyb3IiLCJtYXliZSIsImRlZmF1bHQiLCJnbG9iYWwiLCJERVYiLCJnbG9iYWxUaGlzIiwiX19ERVZfXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/globals/invariantWrappers.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/globals/invariantWrappers.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloErrorMessageHandler: () => (/* binding */ ApolloErrorMessageHandler),\n/* harmony export */   InvariantError: () => (/* reexport safe */ ts_invariant__WEBPACK_IMPORTED_MODULE_0__.InvariantError),\n/* harmony export */   invariant: () => (/* binding */ invariant),\n/* harmony export */   newInvariantError: () => (/* binding */ newInvariantError)\n/* harmony export */ });\n/* harmony import */ var ts_invariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ts-invariant */ \"(ssr)/./node_modules/ts-invariant/lib/invariant.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../version.js */ \"(ssr)/./node_modules/@apollo/client/version.js\");\n/* harmony import */ var _global_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./global.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/global.js\");\n/* harmony import */ var _common_stringifyForDisplay_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/stringifyForDisplay.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js\");\n\n\n\n\nfunction wrap(fn) {\n    return function(message) {\n        var args = [];\n        for(var _i = 1; _i < arguments.length; _i++){\n            args[_i - 1] = arguments[_i];\n        }\n        if (typeof message === \"number\") {\n            var arg0 = message;\n            message = getHandledErrorMsg(arg0);\n            if (!message) {\n                message = getFallbackErrorMsg(arg0, args);\n                args = [];\n            }\n        }\n        fn.apply(void 0, [\n            message\n        ].concat(args));\n    };\n}\nvar invariant = Object.assign(function invariant(condition, message) {\n    var args = [];\n    for(var _i = 2; _i < arguments.length; _i++){\n        args[_i - 2] = arguments[_i];\n    }\n    if (!condition) {\n        (0,ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(condition, getHandledErrorMsg(message, args) || getFallbackErrorMsg(message, args));\n    }\n}, {\n    debug: wrap(ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant.debug),\n    log: wrap(ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant.log),\n    warn: wrap(ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant.warn),\n    error: wrap(ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant.error)\n});\n/**\n * Returns an InvariantError.\n *\n * `message` can only be a string, a concatenation of strings, or a ternary statement\n * that results in a string. This will be enforced on build, where the message will\n * be replaced with a message number.\n * String substitutions with %s are supported and will also return\n * pretty-stringified objects.\n * Excess `optionalParams` will be swallowed.\n */ function newInvariantError(message) {\n    var optionalParams = [];\n    for(var _i = 1; _i < arguments.length; _i++){\n        optionalParams[_i - 1] = arguments[_i];\n    }\n    return new ts_invariant__WEBPACK_IMPORTED_MODULE_0__.InvariantError(getHandledErrorMsg(message, optionalParams) || getFallbackErrorMsg(message, optionalParams));\n}\nvar ApolloErrorMessageHandler = Symbol.for(\"ApolloErrorMessageHandler_\" + _version_js__WEBPACK_IMPORTED_MODULE_2__.version);\nfunction stringify(arg) {\n    return typeof arg == \"string\" ? arg : (0,_common_stringifyForDisplay_js__WEBPACK_IMPORTED_MODULE_3__.stringifyForDisplay)(arg, 2).slice(0, 1000);\n}\nfunction getHandledErrorMsg(message, messageArgs) {\n    if (messageArgs === void 0) {\n        messageArgs = [];\n    }\n    if (!message) return;\n    return _global_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"][ApolloErrorMessageHandler] && _global_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"][ApolloErrorMessageHandler](message, messageArgs.map(stringify));\n}\nfunction getFallbackErrorMsg(message, messageArgs) {\n    if (messageArgs === void 0) {\n        messageArgs = [];\n    }\n    if (!message) return;\n    return \"An error occurred! For more details, see the full error text at https://go.apollo.dev/c/err#\".concat(encodeURIComponent(JSON.stringify({\n        version: _version_js__WEBPACK_IMPORTED_MODULE_2__.version,\n        message: message,\n        args: messageArgs.map(stringify)\n    })));\n}\n //# sourceMappingURL=invariantWrappers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvaW52YXJpYW50V3JhcHBlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBOEU7QUFDbkM7QUFDVjtBQUNzQztBQUN2RSxTQUFTTSxLQUFLQyxFQUFFO0lBQ1osT0FBTyxTQUFVQyxPQUFPO1FBQ3BCLElBQUlDLE9BQU8sRUFBRTtRQUNiLElBQUssSUFBSUMsS0FBSyxHQUFHQSxLQUFLQyxVQUFVQyxNQUFNLEVBQUVGLEtBQU07WUFDMUNELElBQUksQ0FBQ0MsS0FBSyxFQUFFLEdBQUdDLFNBQVMsQ0FBQ0QsR0FBRztRQUNoQztRQUNBLElBQUksT0FBT0YsWUFBWSxVQUFVO1lBQzdCLElBQUlLLE9BQU9MO1lBQ1hBLFVBQVVNLG1CQUFtQkQ7WUFDN0IsSUFBSSxDQUFDTCxTQUFTO2dCQUNWQSxVQUFVTyxvQkFBb0JGLE1BQU1KO2dCQUNwQ0EsT0FBTyxFQUFFO1lBQ2I7UUFDSjtRQUNBRixHQUFHUyxLQUFLLENBQUMsS0FBSyxHQUFHO1lBQUNSO1NBQVEsQ0FBQ1MsTUFBTSxDQUFDUjtJQUN0QztBQUNKO0FBQ0EsSUFBSVQsWUFBWWtCLE9BQU9DLE1BQU0sQ0FBQyxTQUFTbkIsVUFBVW9CLFNBQVMsRUFBRVosT0FBTztJQUMvRCxJQUFJQyxPQUFPLEVBQUU7SUFDYixJQUFLLElBQUlDLEtBQUssR0FBR0EsS0FBS0MsVUFBVUMsTUFBTSxFQUFFRixLQUFNO1FBQzFDRCxJQUFJLENBQUNDLEtBQUssRUFBRSxHQUFHQyxTQUFTLENBQUNELEdBQUc7SUFDaEM7SUFDQSxJQUFJLENBQUNVLFdBQVc7UUFDWm5CLHVEQUFpQkEsQ0FBQ21CLFdBQVdOLG1CQUFtQk4sU0FBU0MsU0FBU00sb0JBQW9CUCxTQUFTQztJQUNuRztBQUNKLEdBQUc7SUFDQ1ksT0FBT2YsS0FBS0wsbURBQWlCQSxDQUFDb0IsS0FBSztJQUNuQ0MsS0FBS2hCLEtBQUtMLG1EQUFpQkEsQ0FBQ3FCLEdBQUc7SUFDL0JDLE1BQU1qQixLQUFLTCxtREFBaUJBLENBQUNzQixJQUFJO0lBQ2pDQyxPQUFPbEIsS0FBS0wsbURBQWlCQSxDQUFDdUIsS0FBSztBQUN2QztBQUNBOzs7Ozs7Ozs7Q0FTQyxHQUNELFNBQVNDLGtCQUFrQmpCLE9BQU87SUFDOUIsSUFBSWtCLGlCQUFpQixFQUFFO0lBQ3ZCLElBQUssSUFBSWhCLEtBQUssR0FBR0EsS0FBS0MsVUFBVUMsTUFBTSxFQUFFRixLQUFNO1FBQzFDZ0IsY0FBYyxDQUFDaEIsS0FBSyxFQUFFLEdBQUdDLFNBQVMsQ0FBQ0QsR0FBRztJQUMxQztJQUNBLE9BQU8sSUFBSVIsd0RBQWNBLENBQUNZLG1CQUFtQk4sU0FBU2tCLG1CQUNsRFgsb0JBQW9CUCxTQUFTa0I7QUFDckM7QUFDQSxJQUFJQyw0QkFBNEJDLE9BQU9DLEdBQUcsQ0FBQywrQkFBK0IxQixnREFBT0E7QUFDakYsU0FBUzJCLFVBQVVDLEdBQUc7SUFDbEIsT0FBTyxPQUFPQSxPQUFPLFdBQVdBLE1BQU8xQixtRkFBbUJBLENBQUMwQixLQUFLLEdBQUdDLEtBQUssQ0FBQyxHQUFHO0FBQ2hGO0FBQ0EsU0FBU2xCLG1CQUFtQk4sT0FBTyxFQUFFeUIsV0FBVztJQUM1QyxJQUFJQSxnQkFBZ0IsS0FBSyxHQUFHO1FBQUVBLGNBQWMsRUFBRTtJQUFFO0lBQ2hELElBQUksQ0FBQ3pCLFNBQ0Q7SUFDSixPQUFRSixrREFBTSxDQUFDdUIsMEJBQTBCLElBQ3JDdkIsa0RBQU0sQ0FBQ3VCLDBCQUEwQixDQUFDbkIsU0FBU3lCLFlBQVlDLEdBQUcsQ0FBQ0o7QUFDbkU7QUFDQSxTQUFTZixvQkFBb0JQLE9BQU8sRUFBRXlCLFdBQVc7SUFDN0MsSUFBSUEsZ0JBQWdCLEtBQUssR0FBRztRQUFFQSxjQUFjLEVBQUU7SUFBRTtJQUNoRCxJQUFJLENBQUN6QixTQUNEO0lBQ0osT0FBTywrRkFBK0ZTLE1BQU0sQ0FBQ2tCLG1CQUFtQkMsS0FBS04sU0FBUyxDQUFDO1FBQzNJM0IsU0FBU0EsZ0RBQU9BO1FBQ2hCSyxTQUFTQTtRQUNUQyxNQUFNd0IsWUFBWUMsR0FBRyxDQUFDSjtJQUMxQjtBQUNKO0FBQ29GLENBQ3BGLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvZ2xvYmFscy9pbnZhcmlhbnRXcmFwcGVycy5qcz9jNzNlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGludmFyaWFudCBhcyBvcmlnaW5hbEludmFyaWFudCwgSW52YXJpYW50RXJyb3IgfSBmcm9tIFwidHMtaW52YXJpYW50XCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4uLy4uL3ZlcnNpb24uanNcIjtcbmltcG9ydCBnbG9iYWwgZnJvbSBcIi4vZ2xvYmFsLmpzXCI7XG5pbXBvcnQgeyBzdHJpbmdpZnlGb3JEaXNwbGF5IH0gZnJvbSBcIi4uL2NvbW1vbi9zdHJpbmdpZnlGb3JEaXNwbGF5LmpzXCI7XG5mdW5jdGlvbiB3cmFwKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdmFyIGFyZzAgPSBtZXNzYWdlO1xuICAgICAgICAgICAgbWVzc2FnZSA9IGdldEhhbmRsZWRFcnJvck1zZyhhcmcwKTtcbiAgICAgICAgICAgIGlmICghbWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBnZXRGYWxsYmFja0Vycm9yTXNnKGFyZzAsIGFyZ3MpO1xuICAgICAgICAgICAgICAgIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmbi5hcHBseSh2b2lkIDAsIFttZXNzYWdlXS5jb25jYXQoYXJncykpO1xuICAgIH07XG59XG52YXIgaW52YXJpYW50ID0gT2JqZWN0LmFzc2lnbihmdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgICBvcmlnaW5hbEludmFyaWFudChjb25kaXRpb24sIGdldEhhbmRsZWRFcnJvck1zZyhtZXNzYWdlLCBhcmdzKSB8fCBnZXRGYWxsYmFja0Vycm9yTXNnKG1lc3NhZ2UsIGFyZ3MpKTtcbiAgICB9XG59LCB7XG4gICAgZGVidWc6IHdyYXAob3JpZ2luYWxJbnZhcmlhbnQuZGVidWcpLFxuICAgIGxvZzogd3JhcChvcmlnaW5hbEludmFyaWFudC5sb2cpLFxuICAgIHdhcm46IHdyYXAob3JpZ2luYWxJbnZhcmlhbnQud2FybiksXG4gICAgZXJyb3I6IHdyYXAob3JpZ2luYWxJbnZhcmlhbnQuZXJyb3IpLFxufSk7XG4vKipcbiAqIFJldHVybnMgYW4gSW52YXJpYW50RXJyb3IuXG4gKlxuICogYG1lc3NhZ2VgIGNhbiBvbmx5IGJlIGEgc3RyaW5nLCBhIGNvbmNhdGVuYXRpb24gb2Ygc3RyaW5ncywgb3IgYSB0ZXJuYXJ5IHN0YXRlbWVudFxuICogdGhhdCByZXN1bHRzIGluIGEgc3RyaW5nLiBUaGlzIHdpbGwgYmUgZW5mb3JjZWQgb24gYnVpbGQsIHdoZXJlIHRoZSBtZXNzYWdlIHdpbGxcbiAqIGJlIHJlcGxhY2VkIHdpdGggYSBtZXNzYWdlIG51bWJlci5cbiAqIFN0cmluZyBzdWJzdGl0dXRpb25zIHdpdGggJXMgYXJlIHN1cHBvcnRlZCBhbmQgd2lsbCBhbHNvIHJldHVyblxuICogcHJldHR5LXN0cmluZ2lmaWVkIG9iamVjdHMuXG4gKiBFeGNlc3MgYG9wdGlvbmFsUGFyYW1zYCB3aWxsIGJlIHN3YWxsb3dlZC5cbiAqL1xuZnVuY3Rpb24gbmV3SW52YXJpYW50RXJyb3IobWVzc2FnZSkge1xuICAgIHZhciBvcHRpb25hbFBhcmFtcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG9wdGlvbmFsUGFyYW1zW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEludmFyaWFudEVycm9yKGdldEhhbmRsZWRFcnJvck1zZyhtZXNzYWdlLCBvcHRpb25hbFBhcmFtcykgfHxcbiAgICAgICAgZ2V0RmFsbGJhY2tFcnJvck1zZyhtZXNzYWdlLCBvcHRpb25hbFBhcmFtcykpO1xufVxudmFyIEFwb2xsb0Vycm9yTWVzc2FnZUhhbmRsZXIgPSBTeW1ib2wuZm9yKFwiQXBvbGxvRXJyb3JNZXNzYWdlSGFuZGxlcl9cIiArIHZlcnNpb24pO1xuZnVuY3Rpb24gc3RyaW5naWZ5KGFyZykge1xuICAgIHJldHVybiB0eXBlb2YgYXJnID09IFwic3RyaW5nXCIgPyBhcmcgOiAoc3RyaW5naWZ5Rm9yRGlzcGxheShhcmcsIDIpLnNsaWNlKDAsIDEwMDApKTtcbn1cbmZ1bmN0aW9uIGdldEhhbmRsZWRFcnJvck1zZyhtZXNzYWdlLCBtZXNzYWdlQXJncykge1xuICAgIGlmIChtZXNzYWdlQXJncyA9PT0gdm9pZCAwKSB7IG1lc3NhZ2VBcmdzID0gW107IH1cbiAgICBpZiAoIW1lc3NhZ2UpXG4gICAgICAgIHJldHVybjtcbiAgICByZXR1cm4gKGdsb2JhbFtBcG9sbG9FcnJvck1lc3NhZ2VIYW5kbGVyXSAmJlxuICAgICAgICBnbG9iYWxbQXBvbGxvRXJyb3JNZXNzYWdlSGFuZGxlcl0obWVzc2FnZSwgbWVzc2FnZUFyZ3MubWFwKHN0cmluZ2lmeSkpKTtcbn1cbmZ1bmN0aW9uIGdldEZhbGxiYWNrRXJyb3JNc2cobWVzc2FnZSwgbWVzc2FnZUFyZ3MpIHtcbiAgICBpZiAobWVzc2FnZUFyZ3MgPT09IHZvaWQgMCkgeyBtZXNzYWdlQXJncyA9IFtdOyB9XG4gICAgaWYgKCFtZXNzYWdlKVxuICAgICAgICByZXR1cm47XG4gICAgcmV0dXJuIFwiQW4gZXJyb3Igb2NjdXJyZWQhIEZvciBtb3JlIGRldGFpbHMsIHNlZSB0aGUgZnVsbCBlcnJvciB0ZXh0IGF0IGh0dHBzOi8vZ28uYXBvbGxvLmRldi9jL2VyciNcIi5jb25jYXQoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgdmVyc2lvbjogdmVyc2lvbixcbiAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgYXJnczogbWVzc2FnZUFyZ3MubWFwKHN0cmluZ2lmeSksXG4gICAgfSkpKTtcbn1cbmV4cG9ydCB7IGludmFyaWFudCwgSW52YXJpYW50RXJyb3IsIG5ld0ludmFyaWFudEVycm9yLCBBcG9sbG9FcnJvck1lc3NhZ2VIYW5kbGVyLCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW52YXJpYW50V3JhcHBlcnMuanMubWFwIl0sIm5hbWVzIjpbImludmFyaWFudCIsIm9yaWdpbmFsSW52YXJpYW50IiwiSW52YXJpYW50RXJyb3IiLCJ2ZXJzaW9uIiwiZ2xvYmFsIiwic3RyaW5naWZ5Rm9yRGlzcGxheSIsIndyYXAiLCJmbiIsIm1lc3NhZ2UiLCJhcmdzIiwiX2kiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcmcwIiwiZ2V0SGFuZGxlZEVycm9yTXNnIiwiZ2V0RmFsbGJhY2tFcnJvck1zZyIsImFwcGx5IiwiY29uY2F0IiwiT2JqZWN0IiwiYXNzaWduIiwiY29uZGl0aW9uIiwiZGVidWciLCJsb2ciLCJ3YXJuIiwiZXJyb3IiLCJuZXdJbnZhcmlhbnRFcnJvciIsIm9wdGlvbmFsUGFyYW1zIiwiQXBvbGxvRXJyb3JNZXNzYWdlSGFuZGxlciIsIlN5bWJvbCIsImZvciIsInN0cmluZ2lmeSIsImFyZyIsInNsaWNlIiwibWVzc2FnZUFyZ3MiLCJtYXAiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/globals/invariantWrappers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/globals/maybe.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/globals/maybe.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maybe: () => (/* binding */ maybe)\n/* harmony export */ });\nfunction maybe(thunk) {\n    try {\n        return thunk();\n    } catch (_a) {}\n} //# sourceMappingURL=maybe.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvbWF5YmUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLE1BQU1DLEtBQUs7SUFDdkIsSUFBSTtRQUNBLE9BQU9BO0lBQ1gsRUFDQSxPQUFPQyxJQUFJLENBQUU7QUFDakIsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvbWF5YmUuanM/MTVhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gbWF5YmUodGh1bmspIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gdGh1bmsoKTtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7IH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1heWJlLmpzLm1hcCJdLCJuYW1lcyI6WyJtYXliZSIsInRodW5rIiwiX2EiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/globals/maybe.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/DocumentTransform.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/DocumentTransform.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DocumentTransform: () => (/* binding */ DocumentTransform)\n/* harmony export */ });\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var _common_canUse_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/canUse.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _getFromAST_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getFromAST.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @wry/caches */ \"(ssr)/./node_modules/@wry/caches/lib/weak.js\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! optimism */ \"(ssr)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _caching_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../caching/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n\n\n\n\n\n\n\nfunction identity(document) {\n    return document;\n}\nvar DocumentTransform = /** @class */ function() {\n    function DocumentTransform(transform, options) {\n        if (options === void 0) {\n            options = Object.create(null);\n        }\n        this.resultCache = _common_canUse_js__WEBPACK_IMPORTED_MODULE_3__.canUseWeakSet ? new WeakSet() : new Set();\n        this.transform = transform;\n        if (options.getCacheKey) {\n            // Override default `getCacheKey` function, which returns [document].\n            this.getCacheKey = options.getCacheKey;\n        }\n        this.cached = options.cache !== false;\n        this.resetCache();\n    }\n    // This default implementation of getCacheKey can be overridden by providing\n    // options.getCacheKey to the DocumentTransform constructor. In general, a\n    // getCacheKey function may either return an array of keys (often including\n    // the document) to be used as a cache key, or undefined to indicate the\n    // transform for this document should not be cached.\n    DocumentTransform.prototype.getCacheKey = function(document) {\n        return [\n            document\n        ];\n    };\n    DocumentTransform.identity = function() {\n        // No need to cache this transform since it just returns the document\n        // unchanged. This should save a bit of memory that would otherwise be\n        // needed to populate the `documentCache` of this transform.\n        return new DocumentTransform(identity, {\n            cache: false\n        });\n    };\n    DocumentTransform.split = function(predicate, left, right) {\n        if (right === void 0) {\n            right = DocumentTransform.identity();\n        }\n        return Object.assign(new DocumentTransform(function(document) {\n            var documentTransform = predicate(document) ? left : right;\n            return documentTransform.transformDocument(document);\n        }, // Reasonably assume both `left` and `right` transforms handle their own caching\n        {\n            cache: false\n        }), {\n            left: left,\n            right: right\n        });\n    };\n    /**\n     * Resets the internal cache of this transform, if it has one.\n     */ DocumentTransform.prototype.resetCache = function() {\n        var _this = this;\n        if (this.cached) {\n            var stableCacheKeys_1 = new _wry_trie__WEBPACK_IMPORTED_MODULE_0__.Trie(_common_canUse_js__WEBPACK_IMPORTED_MODULE_3__.canUseWeakMap);\n            this.performWork = (0,optimism__WEBPACK_IMPORTED_MODULE_2__.wrap)(DocumentTransform.prototype.performWork.bind(this), {\n                makeCacheKey: function(document) {\n                    var cacheKeys = _this.getCacheKey(document);\n                    if (cacheKeys) {\n                        (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_1__.invariant)(Array.isArray(cacheKeys), 66);\n                        return stableCacheKeys_1.lookupArray(cacheKeys);\n                    }\n                },\n                max: _caching_index_js__WEBPACK_IMPORTED_MODULE_4__.cacheSizes[\"documentTransform.cache\"],\n                cache: _wry_caches__WEBPACK_IMPORTED_MODULE_5__.WeakCache\n            });\n        }\n    };\n    DocumentTransform.prototype.performWork = function(document) {\n        (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_6__.checkDocument)(document);\n        return this.transform(document);\n    };\n    DocumentTransform.prototype.transformDocument = function(document) {\n        // If a user passes an already transformed result back to this function,\n        // immediately return it.\n        if (this.resultCache.has(document)) {\n            return document;\n        }\n        var transformedDocument = this.performWork(document);\n        this.resultCache.add(transformedDocument);\n        return transformedDocument;\n    };\n    DocumentTransform.prototype.concat = function(otherTransform) {\n        var _this = this;\n        return Object.assign(new DocumentTransform(function(document) {\n            return otherTransform.transformDocument(_this.transformDocument(document));\n        }, // Reasonably assume both transforms handle their own caching\n        {\n            cache: false\n        }), {\n            left: this,\n            right: otherTransform\n        });\n    };\n    return DocumentTransform;\n}();\n //# sourceMappingURL=DocumentTransform.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/DocumentTransform.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/directives.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDirectiveNames: () => (/* binding */ getDirectiveNames),\n/* harmony export */   getInclusionDirectives: () => (/* binding */ getInclusionDirectives),\n/* harmony export */   hasAllDirectives: () => (/* binding */ hasAllDirectives),\n/* harmony export */   hasAnyDirectives: () => (/* binding */ hasAnyDirectives),\n/* harmony export */   hasClientExports: () => (/* binding */ hasClientExports),\n/* harmony export */   hasDirectives: () => (/* binding */ hasDirectives),\n/* harmony export */   shouldInclude: () => (/* binding */ shouldInclude)\n/* harmony export */ });\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/visitor.mjs\");\n\n\nfunction shouldInclude(_a, variables) {\n    var directives = _a.directives;\n    if (!directives || !directives.length) {\n        return true;\n    }\n    return getInclusionDirectives(directives).every(function(_a) {\n        var directive = _a.directive, ifArgument = _a.ifArgument;\n        var evaledValue = false;\n        if (ifArgument.value.kind === \"Variable\") {\n            evaledValue = variables && variables[ifArgument.value.name.value];\n            (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(evaledValue !== void 0, 67, directive.name.value);\n        } else {\n            evaledValue = ifArgument.value.value;\n        }\n        return directive.name.value === \"skip\" ? !evaledValue : evaledValue;\n    });\n}\nfunction getDirectiveNames(root) {\n    var names = [];\n    (0,graphql__WEBPACK_IMPORTED_MODULE_1__.visit)(root, {\n        Directive: function(node) {\n            names.push(node.name.value);\n        }\n    });\n    return names;\n}\nvar hasAnyDirectives = function(names, root) {\n    return hasDirectives(names, root, false);\n};\nvar hasAllDirectives = function(names, root) {\n    return hasDirectives(names, root, true);\n};\nfunction hasDirectives(names, root, all) {\n    var nameSet = new Set(names);\n    var uniqueCount = nameSet.size;\n    (0,graphql__WEBPACK_IMPORTED_MODULE_1__.visit)(root, {\n        Directive: function(node) {\n            if (nameSet.delete(node.name.value) && (!all || !nameSet.size)) {\n                return graphql__WEBPACK_IMPORTED_MODULE_1__.BREAK;\n            }\n        }\n    });\n    // If we found all the names, nameSet will be empty. If we only care about\n    // finding some of them, the < condition is sufficient.\n    return all ? !nameSet.size : nameSet.size < uniqueCount;\n}\nfunction hasClientExports(document) {\n    return document && hasDirectives([\n        \"client\",\n        \"export\"\n    ], document, true);\n}\nfunction isInclusionDirective(_a) {\n    var value = _a.name.value;\n    return value === \"skip\" || value === \"include\";\n}\nfunction getInclusionDirectives(directives) {\n    var result = [];\n    if (directives && directives.length) {\n        directives.forEach(function(directive) {\n            if (!isInclusionDirective(directive)) return;\n            var directiveArguments = directive.arguments;\n            var directiveName = directive.name.value;\n            (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(directiveArguments && directiveArguments.length === 1, 68, directiveName);\n            var ifArgument = directiveArguments[0];\n            (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(ifArgument.name && ifArgument.name.value === \"if\", 69, directiveName);\n            var ifValue = ifArgument.value;\n            // means it has to be a variable value if this is a valid @skip or @include directive\n            (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(ifValue && (ifValue.kind === \"Variable\" || ifValue.kind === \"BooleanValue\"), 70, directiveName);\n            result.push({\n                directive: directive,\n                ifArgument: ifArgument\n            });\n        });\n    }\n    return result;\n} //# sourceMappingURL=directives.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dyYXBocWwvZGlyZWN0aXZlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBZ0Q7QUFDVDtBQUNoQyxTQUFTRyxjQUFjQyxFQUFFLEVBQUVDLFNBQVM7SUFDdkMsSUFBSUMsYUFBYUYsR0FBR0UsVUFBVTtJQUM5QixJQUFJLENBQUNBLGNBQWMsQ0FBQ0EsV0FBV0MsTUFBTSxFQUFFO1FBQ25DLE9BQU87SUFDWDtJQUNBLE9BQU9DLHVCQUF1QkYsWUFBWUcsS0FBSyxDQUFDLFNBQVVMLEVBQUU7UUFDeEQsSUFBSU0sWUFBWU4sR0FBR00sU0FBUyxFQUFFQyxhQUFhUCxHQUFHTyxVQUFVO1FBQ3hELElBQUlDLGNBQWM7UUFDbEIsSUFBSUQsV0FBV0UsS0FBSyxDQUFDQyxJQUFJLEtBQUssWUFBWTtZQUN0Q0YsY0FDSVAsYUFBYUEsU0FBUyxDQUFDTSxXQUFXRSxLQUFLLENBQUNFLElBQUksQ0FBQ0YsS0FBSyxDQUFDO1lBQ3ZEYiw0REFBU0EsQ0FBQ1ksZ0JBQWdCLEtBQUssR0FBRyxJQUFJRixVQUFVSyxJQUFJLENBQUNGLEtBQUs7UUFDOUQsT0FDSztZQUNERCxjQUFjRCxXQUFXRSxLQUFLLENBQUNBLEtBQUs7UUFDeEM7UUFDQSxPQUFPSCxVQUFVSyxJQUFJLENBQUNGLEtBQUssS0FBSyxTQUFTLENBQUNELGNBQWNBO0lBQzVEO0FBQ0o7QUFDTyxTQUFTSSxrQkFBa0JDLElBQUk7SUFDbEMsSUFBSUMsUUFBUSxFQUFFO0lBQ2RqQiw4Q0FBS0EsQ0FBQ2dCLE1BQU07UUFDUkUsV0FBVyxTQUFVQyxJQUFJO1lBQ3JCRixNQUFNRyxJQUFJLENBQUNELEtBQUtMLElBQUksQ0FBQ0YsS0FBSztRQUM5QjtJQUNKO0lBQ0EsT0FBT0s7QUFDWDtBQUNPLElBQUlJLG1CQUFtQixTQUFVSixLQUFLLEVBQUVELElBQUk7SUFDL0MsT0FBT00sY0FBY0wsT0FBT0QsTUFBTTtBQUN0QyxFQUFFO0FBQ0ssSUFBSU8sbUJBQW1CLFNBQVVOLEtBQUssRUFBRUQsSUFBSTtJQUMvQyxPQUFPTSxjQUFjTCxPQUFPRCxNQUFNO0FBQ3RDLEVBQUU7QUFDSyxTQUFTTSxjQUFjTCxLQUFLLEVBQUVELElBQUksRUFBRVEsR0FBRztJQUMxQyxJQUFJQyxVQUFVLElBQUlDLElBQUlUO0lBQ3RCLElBQUlVLGNBQWNGLFFBQVFHLElBQUk7SUFDOUI1Qiw4Q0FBS0EsQ0FBQ2dCLE1BQU07UUFDUkUsV0FBVyxTQUFVQyxJQUFJO1lBQ3JCLElBQUlNLFFBQVFJLE1BQU0sQ0FBQ1YsS0FBS0wsSUFBSSxDQUFDRixLQUFLLEtBQU0sRUFBQ1ksT0FBTyxDQUFDQyxRQUFRRyxJQUFJLEdBQUc7Z0JBQzVELE9BQU8zQiwwQ0FBS0E7WUFDaEI7UUFDSjtJQUNKO0lBQ0EsMEVBQTBFO0lBQzFFLHVEQUF1RDtJQUN2RCxPQUFPdUIsTUFBTSxDQUFDQyxRQUFRRyxJQUFJLEdBQUdILFFBQVFHLElBQUksR0FBR0Q7QUFDaEQ7QUFDTyxTQUFTRyxpQkFBaUJDLFFBQVE7SUFDckMsT0FBT0EsWUFBWVQsY0FBYztRQUFDO1FBQVU7S0FBUyxFQUFFUyxVQUFVO0FBQ3JFO0FBQ0EsU0FBU0MscUJBQXFCN0IsRUFBRTtJQUM1QixJQUFJUyxRQUFRVCxHQUFHVyxJQUFJLENBQUNGLEtBQUs7SUFDekIsT0FBT0EsVUFBVSxVQUFVQSxVQUFVO0FBQ3pDO0FBQ08sU0FBU0wsdUJBQXVCRixVQUFVO0lBQzdDLElBQUk0QixTQUFTLEVBQUU7SUFDZixJQUFJNUIsY0FBY0EsV0FBV0MsTUFBTSxFQUFFO1FBQ2pDRCxXQUFXNkIsT0FBTyxDQUFDLFNBQVV6QixTQUFTO1lBQ2xDLElBQUksQ0FBQ3VCLHFCQUFxQnZCLFlBQ3RCO1lBQ0osSUFBSTBCLHFCQUFxQjFCLFVBQVUyQixTQUFTO1lBQzVDLElBQUlDLGdCQUFnQjVCLFVBQVVLLElBQUksQ0FBQ0YsS0FBSztZQUN4Q2IsNERBQVNBLENBQUNvQyxzQkFBc0JBLG1CQUFtQjdCLE1BQU0sS0FBSyxHQUFHLElBQUkrQjtZQUNyRSxJQUFJM0IsYUFBYXlCLGtCQUFrQixDQUFDLEVBQUU7WUFDdENwQyw0REFBU0EsQ0FBQ1csV0FBV0ksSUFBSSxJQUFJSixXQUFXSSxJQUFJLENBQUNGLEtBQUssS0FBSyxNQUFNLElBQUl5QjtZQUNqRSxJQUFJQyxVQUFVNUIsV0FBV0UsS0FBSztZQUM5QixxRkFBcUY7WUFDckZiLDREQUFTQSxDQUFDdUMsV0FDTEEsQ0FBQUEsUUFBUXpCLElBQUksS0FBSyxjQUFjeUIsUUFBUXpCLElBQUksS0FBSyxjQUFhLEdBQUksSUFBSXdCO1lBQzFFSixPQUFPYixJQUFJLENBQUM7Z0JBQUVYLFdBQVdBO2dCQUFXQyxZQUFZQTtZQUFXO1FBQy9EO0lBQ0o7SUFDQSxPQUFPdUI7QUFDWCxFQUNBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvZ3JhcGhxbC9kaXJlY3RpdmVzLmpzP2UwMDAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSBcIi4uL2dsb2JhbHMvaW5kZXguanNcIjtcbmltcG9ydCB7IHZpc2l0LCBCUkVBSyB9IGZyb20gXCJncmFwaHFsXCI7XG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkSW5jbHVkZShfYSwgdmFyaWFibGVzKSB7XG4gICAgdmFyIGRpcmVjdGl2ZXMgPSBfYS5kaXJlY3RpdmVzO1xuICAgIGlmICghZGlyZWN0aXZlcyB8fCAhZGlyZWN0aXZlcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBnZXRJbmNsdXNpb25EaXJlY3RpdmVzKGRpcmVjdGl2ZXMpLmV2ZXJ5KGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgZGlyZWN0aXZlID0gX2EuZGlyZWN0aXZlLCBpZkFyZ3VtZW50ID0gX2EuaWZBcmd1bWVudDtcbiAgICAgICAgdmFyIGV2YWxlZFZhbHVlID0gZmFsc2U7XG4gICAgICAgIGlmIChpZkFyZ3VtZW50LnZhbHVlLmtpbmQgPT09IFwiVmFyaWFibGVcIikge1xuICAgICAgICAgICAgZXZhbGVkVmFsdWUgPVxuICAgICAgICAgICAgICAgIHZhcmlhYmxlcyAmJiB2YXJpYWJsZXNbaWZBcmd1bWVudC52YWx1ZS5uYW1lLnZhbHVlXTtcbiAgICAgICAgICAgIGludmFyaWFudChldmFsZWRWYWx1ZSAhPT0gdm9pZCAwLCA2NywgZGlyZWN0aXZlLm5hbWUudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZXZhbGVkVmFsdWUgPSBpZkFyZ3VtZW50LnZhbHVlLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaXJlY3RpdmUubmFtZS52YWx1ZSA9PT0gXCJza2lwXCIgPyAhZXZhbGVkVmFsdWUgOiBldmFsZWRWYWx1ZTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXREaXJlY3RpdmVOYW1lcyhyb290KSB7XG4gICAgdmFyIG5hbWVzID0gW107XG4gICAgdmlzaXQocm9vdCwge1xuICAgICAgICBEaXJlY3RpdmU6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICBuYW1lcy5wdXNoKG5vZGUubmFtZS52YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIG5hbWVzO1xufVxuZXhwb3J0IHZhciBoYXNBbnlEaXJlY3RpdmVzID0gZnVuY3Rpb24gKG5hbWVzLCByb290KSB7XG4gICAgcmV0dXJuIGhhc0RpcmVjdGl2ZXMobmFtZXMsIHJvb3QsIGZhbHNlKTtcbn07XG5leHBvcnQgdmFyIGhhc0FsbERpcmVjdGl2ZXMgPSBmdW5jdGlvbiAobmFtZXMsIHJvb3QpIHtcbiAgICByZXR1cm4gaGFzRGlyZWN0aXZlcyhuYW1lcywgcm9vdCwgdHJ1ZSk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGhhc0RpcmVjdGl2ZXMobmFtZXMsIHJvb3QsIGFsbCkge1xuICAgIHZhciBuYW1lU2V0ID0gbmV3IFNldChuYW1lcyk7XG4gICAgdmFyIHVuaXF1ZUNvdW50ID0gbmFtZVNldC5zaXplO1xuICAgIHZpc2l0KHJvb3QsIHtcbiAgICAgICAgRGlyZWN0aXZlOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgaWYgKG5hbWVTZXQuZGVsZXRlKG5vZGUubmFtZS52YWx1ZSkgJiYgKCFhbGwgfHwgIW5hbWVTZXQuc2l6ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQlJFQUs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgLy8gSWYgd2UgZm91bmQgYWxsIHRoZSBuYW1lcywgbmFtZVNldCB3aWxsIGJlIGVtcHR5LiBJZiB3ZSBvbmx5IGNhcmUgYWJvdXRcbiAgICAvLyBmaW5kaW5nIHNvbWUgb2YgdGhlbSwgdGhlIDwgY29uZGl0aW9uIGlzIHN1ZmZpY2llbnQuXG4gICAgcmV0dXJuIGFsbCA/ICFuYW1lU2V0LnNpemUgOiBuYW1lU2V0LnNpemUgPCB1bmlxdWVDb3VudDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYXNDbGllbnRFeHBvcnRzKGRvY3VtZW50KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50ICYmIGhhc0RpcmVjdGl2ZXMoW1wiY2xpZW50XCIsIFwiZXhwb3J0XCJdLCBkb2N1bWVudCwgdHJ1ZSk7XG59XG5mdW5jdGlvbiBpc0luY2x1c2lvbkRpcmVjdGl2ZShfYSkge1xuICAgIHZhciB2YWx1ZSA9IF9hLm5hbWUudmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlID09PSBcInNraXBcIiB8fCB2YWx1ZSA9PT0gXCJpbmNsdWRlXCI7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5jbHVzaW9uRGlyZWN0aXZlcyhkaXJlY3RpdmVzKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGlmIChkaXJlY3RpdmVzICYmIGRpcmVjdGl2ZXMubGVuZ3RoKSB7XG4gICAgICAgIGRpcmVjdGl2ZXMuZm9yRWFjaChmdW5jdGlvbiAoZGlyZWN0aXZlKSB7XG4gICAgICAgICAgICBpZiAoIWlzSW5jbHVzaW9uRGlyZWN0aXZlKGRpcmVjdGl2ZSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIGRpcmVjdGl2ZUFyZ3VtZW50cyA9IGRpcmVjdGl2ZS5hcmd1bWVudHM7XG4gICAgICAgICAgICB2YXIgZGlyZWN0aXZlTmFtZSA9IGRpcmVjdGl2ZS5uYW1lLnZhbHVlO1xuICAgICAgICAgICAgaW52YXJpYW50KGRpcmVjdGl2ZUFyZ3VtZW50cyAmJiBkaXJlY3RpdmVBcmd1bWVudHMubGVuZ3RoID09PSAxLCA2OCwgZGlyZWN0aXZlTmFtZSk7XG4gICAgICAgICAgICB2YXIgaWZBcmd1bWVudCA9IGRpcmVjdGl2ZUFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgIGludmFyaWFudChpZkFyZ3VtZW50Lm5hbWUgJiYgaWZBcmd1bWVudC5uYW1lLnZhbHVlID09PSBcImlmXCIsIDY5LCBkaXJlY3RpdmVOYW1lKTtcbiAgICAgICAgICAgIHZhciBpZlZhbHVlID0gaWZBcmd1bWVudC52YWx1ZTtcbiAgICAgICAgICAgIC8vIG1lYW5zIGl0IGhhcyB0byBiZSBhIHZhcmlhYmxlIHZhbHVlIGlmIHRoaXMgaXMgYSB2YWxpZCBAc2tpcCBvciBAaW5jbHVkZSBkaXJlY3RpdmVcbiAgICAgICAgICAgIGludmFyaWFudChpZlZhbHVlICYmXG4gICAgICAgICAgICAgICAgKGlmVmFsdWUua2luZCA9PT0gXCJWYXJpYWJsZVwiIHx8IGlmVmFsdWUua2luZCA9PT0gXCJCb29sZWFuVmFsdWVcIiksIDcwLCBkaXJlY3RpdmVOYW1lKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHsgZGlyZWN0aXZlOiBkaXJlY3RpdmUsIGlmQXJndW1lbnQ6IGlmQXJndW1lbnQgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlyZWN0aXZlcy5qcy5tYXAiXSwibmFtZXMiOlsiaW52YXJpYW50IiwidmlzaXQiLCJCUkVBSyIsInNob3VsZEluY2x1ZGUiLCJfYSIsInZhcmlhYmxlcyIsImRpcmVjdGl2ZXMiLCJsZW5ndGgiLCJnZXRJbmNsdXNpb25EaXJlY3RpdmVzIiwiZXZlcnkiLCJkaXJlY3RpdmUiLCJpZkFyZ3VtZW50IiwiZXZhbGVkVmFsdWUiLCJ2YWx1ZSIsImtpbmQiLCJuYW1lIiwiZ2V0RGlyZWN0aXZlTmFtZXMiLCJyb290IiwibmFtZXMiLCJEaXJlY3RpdmUiLCJub2RlIiwicHVzaCIsImhhc0FueURpcmVjdGl2ZXMiLCJoYXNEaXJlY3RpdmVzIiwiaGFzQWxsRGlyZWN0aXZlcyIsImFsbCIsIm5hbWVTZXQiLCJTZXQiLCJ1bmlxdWVDb3VudCIsInNpemUiLCJkZWxldGUiLCJoYXNDbGllbnRFeHBvcnRzIiwiZG9jdW1lbnQiLCJpc0luY2x1c2lvbkRpcmVjdGl2ZSIsInJlc3VsdCIsImZvckVhY2giLCJkaXJlY3RpdmVBcmd1bWVudHMiLCJhcmd1bWVudHMiLCJkaXJlY3RpdmVOYW1lIiwiaWZWYWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/directives.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/fragments.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFragmentMap: () => (/* binding */ createFragmentMap),\n/* harmony export */   getFragmentFromSelection: () => (/* binding */ getFragmentFromSelection),\n/* harmony export */   getFragmentQueryDocument: () => (/* binding */ getFragmentQueryDocument)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\n\n/**\n * Returns a query document which adds a single query operation that only\n * spreads the target fragment inside of it.\n *\n * So for example a document of:\n *\n * ```graphql\n * fragment foo on Foo { a b c }\n * ```\n *\n * Turns into:\n *\n * ```graphql\n * { ...foo }\n *\n * fragment foo on Foo { a b c }\n * ```\n *\n * The target fragment will either be the only fragment in the document, or a\n * fragment specified by the provided `fragmentName`. If there is more than one\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\n */ function getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    // Build an array of all our fragment definitions that will be used for\n    // validations. We also do some validations on the other definitions in the\n    // document while building this list.\n    var fragments = [];\n    document.definitions.forEach(function(definition) {\n        // Throw an error if we encounter an operation definition because we will\n        // define our own operation definition later on.\n        if (definition.kind === \"OperationDefinition\") {\n            throw (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(71, definition.operation, definition.name ? \" named '\".concat(definition.name.value, \"'\") : \"\");\n        }\n        // Add our definition to the fragments array if it is a fragment\n        // definition.\n        if (definition.kind === \"FragmentDefinition\") {\n            fragments.push(definition);\n        }\n    });\n    // If the user did not give us a fragment name then let us try to get a\n    // name from a single fragment in the definition.\n    if (typeof actualFragmentName === \"undefined\") {\n        (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragments.length === 1, 72, fragments.length);\n        actualFragmentName = fragments[0].name.value;\n    }\n    // Generate a query document with an operation that simply spreads the\n    // fragment inside of it.\n    var query = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, document), {\n        definitions: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([\n            {\n                kind: \"OperationDefinition\",\n                // OperationTypeNode is an enum\n                operation: \"query\",\n                selectionSet: {\n                    kind: \"SelectionSet\",\n                    selections: [\n                        {\n                            kind: \"FragmentSpread\",\n                            name: {\n                                kind: \"Name\",\n                                value: actualFragmentName\n                            }\n                        }\n                    ]\n                }\n            }\n        ], document.definitions, true)\n    });\n    return query;\n}\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nfunction createFragmentMap(fragments) {\n    if (fragments === void 0) {\n        fragments = [];\n    }\n    var symTable = {};\n    fragments.forEach(function(fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nfunction getFragmentFromSelection(selection, fragmentMap) {\n    switch(selection.kind){\n        case \"InlineFragment\":\n            return selection;\n        case \"FragmentSpread\":\n            {\n                var fragmentName = selection.name.value;\n                if (typeof fragmentMap === \"function\") {\n                    return fragmentMap(fragmentName);\n                }\n                var fragment = fragmentMap && fragmentMap[fragmentName];\n                (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragment, 73, fragmentName);\n                return fragment || null;\n            }\n        default:\n            return null;\n    }\n} //# sourceMappingURL=fragments.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/getFromAST.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkDocument: () => (/* binding */ checkDocument),\n/* harmony export */   getDefaultValues: () => (/* binding */ getDefaultValues),\n/* harmony export */   getFragmentDefinition: () => (/* binding */ getFragmentDefinition),\n/* harmony export */   getFragmentDefinitions: () => (/* binding */ getFragmentDefinitions),\n/* harmony export */   getMainDefinition: () => (/* binding */ getMainDefinition),\n/* harmony export */   getOperationDefinition: () => (/* binding */ getOperationDefinition),\n/* harmony export */   getOperationName: () => (/* binding */ getOperationName),\n/* harmony export */   getQueryDefinition: () => (/* binding */ getQueryDefinition)\n/* harmony export */ });\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _storeUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./storeUtils.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n\n\n// Checks the document for errors and throws an exception if there is an error.\nfunction checkDocument(doc) {\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(doc && doc.kind === \"Document\", 74);\n    var operations = doc.definitions.filter(function(d) {\n        return d.kind !== \"FragmentDefinition\";\n    }).map(function(definition) {\n        if (definition.kind !== \"OperationDefinition\") {\n            throw (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(75, definition.kind);\n        }\n        return definition;\n    });\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(operations.length <= 1, 76, operations.length);\n    return doc;\n}\nfunction getOperationDefinition(doc) {\n    checkDocument(doc);\n    return doc.definitions.filter(function(definition) {\n        return definition.kind === \"OperationDefinition\";\n    })[0];\n}\nfunction getOperationName(doc) {\n    return doc.definitions.filter(function(definition) {\n        return definition.kind === \"OperationDefinition\" && !!definition.name;\n    }).map(function(x) {\n        return x.name.value;\n    })[0] || null;\n}\n// Returns the FragmentDefinitions from a particular document as an array\nfunction getFragmentDefinitions(doc) {\n    return doc.definitions.filter(function(definition) {\n        return definition.kind === \"FragmentDefinition\";\n    });\n}\nfunction getQueryDefinition(doc) {\n    var queryDef = getOperationDefinition(doc);\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(queryDef && queryDef.operation === \"query\", 77);\n    return queryDef;\n}\nfunction getFragmentDefinition(doc) {\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(doc.kind === \"Document\", 78);\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(doc.definitions.length <= 1, 79);\n    var fragmentDef = doc.definitions[0];\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragmentDef.kind === \"FragmentDefinition\", 80);\n    return fragmentDef;\n}\n/**\n * Returns the first operation definition found in this document.\n * If no operation definition is found, the first fragment definition will be returned.\n * If no definitions are found, an error will be thrown.\n */ function getMainDefinition(queryDoc) {\n    checkDocument(queryDoc);\n    var fragmentDefinition;\n    for(var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++){\n        var definition = _a[_i];\n        if (definition.kind === \"OperationDefinition\") {\n            var operation = definition.operation;\n            if (operation === \"query\" || operation === \"mutation\" || operation === \"subscription\") {\n                return definition;\n            }\n        }\n        if (definition.kind === \"FragmentDefinition\" && !fragmentDefinition) {\n            // we do this because we want to allow multiple fragment definitions\n            // to precede an operation definition.\n            fragmentDefinition = definition;\n        }\n    }\n    if (fragmentDefinition) {\n        return fragmentDefinition;\n    }\n    throw (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(81);\n}\nfunction getDefaultValues(definition) {\n    var defaultValues = Object.create(null);\n    var defs = definition && definition.variableDefinitions;\n    if (defs && defs.length) {\n        defs.forEach(function(def) {\n            if (def.defaultValue) {\n                (0,_storeUtils_js__WEBPACK_IMPORTED_MODULE_1__.valueToObjectRepresentation)(defaultValues, def.variable.name, def.defaultValue);\n            }\n        });\n    }\n    return defaultValues;\n} //# sourceMappingURL=getFromAST.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/print.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/print.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   print: () => (/* binding */ print)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/printer.mjs\");\n/* harmony import */ var _caching_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../caching/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/caches.js\");\n/* harmony import */ var _caching_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../caching/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../caching/getMemoryInternals.js */ \"(ssr)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n\n\n\nvar printCache;\nvar print = Object.assign(function(ast) {\n    var result = printCache.get(ast);\n    if (!result) {\n        result = (0,graphql__WEBPACK_IMPORTED_MODULE_0__.print)(ast);\n        printCache.set(ast, result);\n    }\n    return result;\n}, {\n    reset: function() {\n        printCache = new _caching_index_js__WEBPACK_IMPORTED_MODULE_1__.AutoCleanedWeakCache(_caching_index_js__WEBPACK_IMPORTED_MODULE_2__.cacheSizes.print || 2000 /* defaultCacheSizes.print */ );\n    }\n});\nprint.reset();\nif (globalThis.__DEV__ !== false) {\n    (0,_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_3__.registerGlobalCache)(\"print\", function() {\n        return printCache ? printCache.size : 0;\n    });\n} //# sourceMappingURL=print.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dyYXBocWwvcHJpbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBNkM7QUFDMkI7QUFDRDtBQUN2RSxJQUFJSztBQUNHLElBQUlMLFFBQVFNLE9BQU9DLE1BQU0sQ0FBQyxTQUFVQyxHQUFHO0lBQzFDLElBQUlDLFNBQVNKLFdBQVdLLEdBQUcsQ0FBQ0Y7SUFDNUIsSUFBSSxDQUFDQyxRQUFRO1FBQ1RBLFNBQVNSLDhDQUFTQSxDQUFDTztRQUNuQkgsV0FBV00sR0FBRyxDQUFDSCxLQUFLQztJQUN4QjtJQUNBLE9BQU9BO0FBQ1gsR0FBRztJQUNDRyxPQUFPO1FBQ0hQLGFBQWEsSUFBSUgsbUVBQW9CQSxDQUFDQyx5REFBVUEsQ0FBQ0gsS0FBSyxJQUFJLEtBQUssMkJBQTJCO0lBQzlGO0FBQ0osR0FBRztBQUNIQSxNQUFNWSxLQUFLO0FBQ1gsSUFBSUMsV0FBV0MsT0FBTyxLQUFLLE9BQU87SUFDOUJWLG1GQUFtQkEsQ0FBQyxTQUFTO1FBQWMsT0FBUUMsYUFBYUEsV0FBV1UsSUFBSSxHQUFHO0lBQUk7QUFDMUYsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dyYXBocWwvcHJpbnQuanM/ZTI4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwcmludCBhcyBvcmlnUHJpbnQgfSBmcm9tIFwiZ3JhcGhxbFwiO1xuaW1wb3J0IHsgQXV0b0NsZWFuZWRXZWFrQ2FjaGUsIGNhY2hlU2l6ZXMsIH0gZnJvbSBcIi4uL2NhY2hpbmcvaW5kZXguanNcIjtcbmltcG9ydCB7IHJlZ2lzdGVyR2xvYmFsQ2FjaGUgfSBmcm9tIFwiLi4vY2FjaGluZy9nZXRNZW1vcnlJbnRlcm5hbHMuanNcIjtcbnZhciBwcmludENhY2hlO1xuZXhwb3J0IHZhciBwcmludCA9IE9iamVjdC5hc3NpZ24oZnVuY3Rpb24gKGFzdCkge1xuICAgIHZhciByZXN1bHQgPSBwcmludENhY2hlLmdldChhc3QpO1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdCA9IG9yaWdQcmludChhc3QpO1xuICAgICAgICBwcmludENhY2hlLnNldChhc3QsIHJlc3VsdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59LCB7XG4gICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcHJpbnRDYWNoZSA9IG5ldyBBdXRvQ2xlYW5lZFdlYWtDYWNoZShjYWNoZVNpemVzLnByaW50IHx8IDIwMDAgLyogZGVmYXVsdENhY2hlU2l6ZXMucHJpbnQgKi8pO1xuICAgIH0sXG59KTtcbnByaW50LnJlc2V0KCk7XG5pZiAoZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSkge1xuICAgIHJlZ2lzdGVyR2xvYmFsQ2FjaGUoXCJwcmludFwiLCBmdW5jdGlvbiAoKSB7IHJldHVybiAocHJpbnRDYWNoZSA/IHByaW50Q2FjaGUuc2l6ZSA6IDApOyB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByaW50LmpzLm1hcCJdLCJuYW1lcyI6WyJwcmludCIsIm9yaWdQcmludCIsIkF1dG9DbGVhbmVkV2Vha0NhY2hlIiwiY2FjaGVTaXplcyIsInJlZ2lzdGVyR2xvYmFsQ2FjaGUiLCJwcmludENhY2hlIiwiT2JqZWN0IiwiYXNzaWduIiwiYXN0IiwicmVzdWx0IiwiZ2V0Iiwic2V0IiwicmVzZXQiLCJnbG9iYWxUaGlzIiwiX19ERVZfXyIsInNpemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/print.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/storeUtils.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   argumentsObjectFromField: () => (/* binding */ argumentsObjectFromField),\n/* harmony export */   getStoreKeyName: () => (/* binding */ getStoreKeyName),\n/* harmony export */   getTypenameFromResult: () => (/* binding */ getTypenameFromResult),\n/* harmony export */   isDocumentNode: () => (/* binding */ isDocumentNode),\n/* harmony export */   isField: () => (/* binding */ isField),\n/* harmony export */   isInlineFragment: () => (/* binding */ isInlineFragment),\n/* harmony export */   isReference: () => (/* binding */ isReference),\n/* harmony export */   makeReference: () => (/* binding */ makeReference),\n/* harmony export */   resultKeyNameFromField: () => (/* binding */ resultKeyNameFromField),\n/* harmony export */   storeKeyNameFromField: () => (/* binding */ storeKeyNameFromField),\n/* harmony export */   valueToObjectRepresentation: () => (/* binding */ valueToObjectRepresentation)\n/* harmony export */ });\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _common_objects_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/objects.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _fragments_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fragments.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _common_canonicalStringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/canonicalStringify.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n\n\n\n\nfunction makeReference(id) {\n    return {\n        __ref: String(id)\n    };\n}\nfunction isReference(obj) {\n    return Boolean(obj && typeof obj === \"object\" && typeof obj.__ref === \"string\");\n}\nfunction isDocumentNode(value) {\n    return (0,_common_objects_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value) && value.kind === \"Document\" && Array.isArray(value.definitions);\n}\nfunction isStringValue(value) {\n    return value.kind === \"StringValue\";\n}\nfunction isBooleanValue(value) {\n    return value.kind === \"BooleanValue\";\n}\nfunction isIntValue(value) {\n    return value.kind === \"IntValue\";\n}\nfunction isFloatValue(value) {\n    return value.kind === \"FloatValue\";\n}\nfunction isVariable(value) {\n    return value.kind === \"Variable\";\n}\nfunction isObjectValue(value) {\n    return value.kind === \"ObjectValue\";\n}\nfunction isListValue(value) {\n    return value.kind === \"ListValue\";\n}\nfunction isEnumValue(value) {\n    return value.kind === \"EnumValue\";\n}\nfunction isNullValue(value) {\n    return value.kind === \"NullValue\";\n}\nfunction valueToObjectRepresentation(argObj, name, value, variables) {\n    if (isIntValue(value) || isFloatValue(value)) {\n        argObj[name.value] = Number(value.value);\n    } else if (isBooleanValue(value) || isStringValue(value)) {\n        argObj[name.value] = value.value;\n    } else if (isObjectValue(value)) {\n        var nestedArgObj_1 = {};\n        value.fields.map(function(obj) {\n            return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n        });\n        argObj[name.value] = nestedArgObj_1;\n    } else if (isVariable(value)) {\n        var variableValue = (variables || {})[value.name.value];\n        argObj[name.value] = variableValue;\n    } else if (isListValue(value)) {\n        argObj[name.value] = value.values.map(function(listValue) {\n            var nestedArgArrayObj = {};\n            valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n            return nestedArgArrayObj[name.value];\n        });\n    } else if (isEnumValue(value)) {\n        argObj[name.value] = value.value;\n    } else if (isNullValue(value)) {\n        argObj[name.value] = null;\n    } else {\n        throw (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(82, name.value, value.kind);\n    }\n}\nfunction storeKeyNameFromField(field, variables) {\n    var directivesObj = null;\n    if (field.directives) {\n        directivesObj = {};\n        field.directives.forEach(function(directive) {\n            directivesObj[directive.name.value] = {};\n            if (directive.arguments) {\n                directive.arguments.forEach(function(_a) {\n                    var name = _a.name, value = _a.value;\n                    return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n                });\n            }\n        });\n    }\n    var argObj = null;\n    if (field.arguments && field.arguments.length) {\n        argObj = {};\n        field.arguments.forEach(function(_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj, name, value, variables);\n        });\n    }\n    return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\nvar KNOWN_DIRECTIVES = [\n    \"connection\",\n    \"include\",\n    \"skip\",\n    \"client\",\n    \"rest\",\n    \"export\",\n    \"nonreactive\"\n];\n// Default stable JSON.stringify implementation used by getStoreKeyName. Can be\n// updated/replaced with something better by calling\n// getStoreKeyName.setStringify(newStringifyFunction).\nvar storeKeyNameStringify = _common_canonicalStringify_js__WEBPACK_IMPORTED_MODULE_2__.canonicalStringify;\nvar getStoreKeyName = Object.assign(function(fieldName, args, directives) {\n    if (args && directives && directives[\"connection\"] && directives[\"connection\"][\"key\"]) {\n        if (directives[\"connection\"][\"filter\"] && directives[\"connection\"][\"filter\"].length > 0) {\n            var filterKeys = directives[\"connection\"][\"filter\"] ? directives[\"connection\"][\"filter\"] : [];\n            filterKeys.sort();\n            var filteredArgs_1 = {};\n            filterKeys.forEach(function(key) {\n                filteredArgs_1[key] = args[key];\n            });\n            return \"\".concat(directives[\"connection\"][\"key\"], \"(\").concat(storeKeyNameStringify(filteredArgs_1), \")\");\n        } else {\n            return directives[\"connection\"][\"key\"];\n        }\n    }\n    var completeFieldName = fieldName;\n    if (args) {\n        // We can't use `JSON.stringify` here since it's non-deterministic,\n        // and can lead to different store key names being created even though\n        // the `args` object used during creation has the same properties/values.\n        var stringifiedArgs = storeKeyNameStringify(args);\n        completeFieldName += \"(\".concat(stringifiedArgs, \")\");\n    }\n    if (directives) {\n        Object.keys(directives).forEach(function(key) {\n            if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n            if (directives[key] && Object.keys(directives[key]).length) {\n                completeFieldName += \"@\".concat(key, \"(\").concat(storeKeyNameStringify(directives[key]), \")\");\n            } else {\n                completeFieldName += \"@\".concat(key);\n            }\n        });\n    }\n    return completeFieldName;\n}, {\n    setStringify: function(s) {\n        var previous = storeKeyNameStringify;\n        storeKeyNameStringify = s;\n        return previous;\n    }\n});\nfunction argumentsObjectFromField(field, variables) {\n    if (field.arguments && field.arguments.length) {\n        var argObj_1 = {};\n        field.arguments.forEach(function(_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj_1, name, value, variables);\n        });\n        return argObj_1;\n    }\n    return null;\n}\nfunction resultKeyNameFromField(field) {\n    return field.alias ? field.alias.value : field.name.value;\n}\nfunction getTypenameFromResult(result, selectionSet, fragmentMap) {\n    var fragments;\n    for(var _i = 0, _a = selectionSet.selections; _i < _a.length; _i++){\n        var selection = _a[_i];\n        if (isField(selection)) {\n            if (selection.name.value === \"__typename\") {\n                return result[resultKeyNameFromField(selection)];\n            }\n        } else if (fragments) {\n            fragments.push(selection);\n        } else {\n            fragments = [\n                selection\n            ];\n        }\n    }\n    if (typeof result.__typename === \"string\") {\n        return result.__typename;\n    }\n    if (fragments) {\n        for(var _b = 0, fragments_1 = fragments; _b < fragments_1.length; _b++){\n            var selection = fragments_1[_b];\n            var typename = getTypenameFromResult(result, (0,_fragments_js__WEBPACK_IMPORTED_MODULE_3__.getFragmentFromSelection)(selection, fragmentMap).selectionSet, fragmentMap);\n            if (typeof typename === \"string\") {\n                return typename;\n            }\n        }\n    }\n}\nfunction isField(selection) {\n    return selection.kind === \"Field\";\n}\nfunction isInlineFragment(selection) {\n    return selection.kind === \"InlineFragment\";\n} //# sourceMappingURL=storeUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/transform.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addTypenameToDocument: () => (/* binding */ addTypenameToDocument),\n/* harmony export */   buildQueryFromSelectionSet: () => (/* binding */ buildQueryFromSelectionSet),\n/* harmony export */   removeArgumentsFromDocument: () => (/* binding */ removeArgumentsFromDocument),\n/* harmony export */   removeClientSetsFromDocument: () => (/* binding */ removeClientSetsFromDocument),\n/* harmony export */   removeConnectionDirectiveFromDocument: () => (/* binding */ removeConnectionDirectiveFromDocument),\n/* harmony export */   removeDirectivesFromDocument: () => (/* binding */ removeDirectivesFromDocument),\n/* harmony export */   removeFragmentSpreadFromDocument: () => (/* binding */ removeFragmentSpreadFromDocument)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(ssr)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/language/visitor.mjs\");\n/* harmony import */ var _getFromAST_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getFromAST.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _storeUtils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./storeUtils.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _fragments_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fragments.js */ \"(ssr)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _common_arrays_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/arrays.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n\n\n\n\n\n\n\nvar TYPENAME_FIELD = {\n    kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FIELD,\n    name: {\n        kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.NAME,\n        value: \"__typename\"\n    }\n};\nfunction isEmpty(op, fragmentMap) {\n    return !op || op.selectionSet.selections.every(function(selection) {\n        return selection.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FRAGMENT_SPREAD && isEmpty(fragmentMap[selection.name.value], fragmentMap);\n    });\n}\nfunction nullIfDocIsEmpty(doc) {\n    return isEmpty((0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.getOperationDefinition)(doc) || (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.getFragmentDefinition)(doc), (0,_fragments_js__WEBPACK_IMPORTED_MODULE_3__.createFragmentMap)((0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.getFragmentDefinitions)(doc))) ? null : doc;\n}\nfunction getDirectiveMatcher(configs) {\n    var names = new Map();\n    var tests = new Map();\n    configs.forEach(function(directive) {\n        if (directive) {\n            if (directive.name) {\n                names.set(directive.name, directive);\n            } else if (directive.test) {\n                tests.set(directive.test, directive);\n            }\n        }\n    });\n    return function(directive) {\n        var config = names.get(directive.name.value);\n        if (!config && tests.size) {\n            tests.forEach(function(testConfig, test) {\n                if (test(directive)) {\n                    config = testConfig;\n                }\n            });\n        }\n        return config;\n    };\n}\nfunction makeInUseGetterFunction(defaultKey) {\n    var map = new Map();\n    return function inUseGetterFunction(key) {\n        if (key === void 0) {\n            key = defaultKey;\n        }\n        var inUse = map.get(key);\n        if (!inUse) {\n            map.set(key, inUse = {\n                // Variable and fragment spread names used directly within this\n                // operation or fragment definition, as identified by key. These sets\n                // will be populated during the first traversal of the document in\n                // removeDirectivesFromDocument below.\n                variables: new Set(),\n                fragmentSpreads: new Set()\n            });\n        }\n        return inUse;\n    };\n}\nfunction removeDirectivesFromDocument(directives, doc) {\n    (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.checkDocument)(doc);\n    // Passing empty strings to makeInUseGetterFunction means we handle anonymous\n    // operations as if their names were \"\". Anonymous fragment definitions are\n    // not supposed to be possible, but the same default naming strategy seems\n    // appropriate for that case as well.\n    var getInUseByOperationName = makeInUseGetterFunction(\"\");\n    var getInUseByFragmentName = makeInUseGetterFunction(\"\");\n    var getInUse = function(ancestors) {\n        for(var p = 0, ancestor = void 0; p < ancestors.length && (ancestor = ancestors[p]); ++p){\n            if ((0,_common_arrays_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(ancestor)) continue;\n            if (ancestor.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_DEFINITION) {\n                // If an operation is anonymous, we use the empty string as its key.\n                return getInUseByOperationName(ancestor.name && ancestor.name.value);\n            }\n            if (ancestor.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FRAGMENT_DEFINITION) {\n                return getInUseByFragmentName(ancestor.name.value);\n            }\n        }\n        globalThis.__DEV__ !== false && _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(83);\n        return null;\n    };\n    var operationCount = 0;\n    for(var i = doc.definitions.length - 1; i >= 0; --i){\n        if (doc.definitions[i].kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_DEFINITION) {\n            ++operationCount;\n        }\n    }\n    var directiveMatcher = getDirectiveMatcher(directives);\n    var shouldRemoveField = function(nodeDirectives) {\n        return (0,_common_arrays_js__WEBPACK_IMPORTED_MODULE_4__.isNonEmptyArray)(nodeDirectives) && nodeDirectives.map(directiveMatcher).some(function(config) {\n            return config && config.remove;\n        });\n    };\n    var originalFragmentDefsByPath = new Map();\n    // Any time the first traversal of the document below makes a change like\n    // removing a fragment (by returning null), this variable should be set to\n    // true. Once it becomes true, it should never be set to false again. If this\n    // variable remains false throughout the traversal, then we can return the\n    // original doc immediately without any modifications.\n    var firstVisitMadeChanges = false;\n    var fieldOrInlineFragmentVisitor = {\n        enter: function(node) {\n            if (shouldRemoveField(node.directives)) {\n                firstVisitMadeChanges = true;\n                return null;\n            }\n        }\n    };\n    var docWithoutDirectiveSubtrees = (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(doc, {\n        // These two AST node types share the same implementation, defined above.\n        Field: fieldOrInlineFragmentVisitor,\n        InlineFragment: fieldOrInlineFragmentVisitor,\n        VariableDefinition: {\n            enter: function() {\n                // VariableDefinition nodes do not count as variables in use, though\n                // they do contain Variable nodes that might be visited below. To avoid\n                // counting variable declarations as usages, we skip visiting the\n                // contents of this VariableDefinition node by returning false.\n                return false;\n            }\n        },\n        Variable: {\n            enter: function(node, _key, _parent, _path, ancestors) {\n                var inUse = getInUse(ancestors);\n                if (inUse) {\n                    inUse.variables.add(node.name.value);\n                }\n            }\n        },\n        FragmentSpread: {\n            enter: function(node, _key, _parent, _path, ancestors) {\n                if (shouldRemoveField(node.directives)) {\n                    firstVisitMadeChanges = true;\n                    return null;\n                }\n                var inUse = getInUse(ancestors);\n                if (inUse) {\n                    inUse.fragmentSpreads.add(node.name.value);\n                }\n            // We might like to remove this FragmentSpread by returning null here if\n            // the corresponding FragmentDefinition node is also going to be removed\n            // by the logic below, but we can't control the relative order of those\n            // events, so we have to postpone the removal of dangling FragmentSpread\n            // nodes until after the current visit of the document has finished.\n            }\n        },\n        FragmentDefinition: {\n            enter: function(node, _key, _parent, path) {\n                originalFragmentDefsByPath.set(JSON.stringify(path), node);\n            },\n            leave: function(node, _key, _parent, path) {\n                var originalNode = originalFragmentDefsByPath.get(JSON.stringify(path));\n                if (node === originalNode) {\n                    // If the FragmentNode received by this leave function is identical to\n                    // the one received by the corresponding enter function (above), then\n                    // the visitor must not have made any changes within this\n                    // FragmentDefinition node. This fragment definition may still be\n                    // removed if there are no ...spread references to it, but it won't be\n                    // removed just because it has only a __typename field.\n                    return node;\n                }\n                if (// This logic applies only if the document contains one or more\n                // operations, since removing all fragments from a document containing\n                // only fragments makes the document useless.\n                operationCount > 0 && node.selectionSet.selections.every(function(selection) {\n                    return selection.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FIELD && selection.name.value === \"__typename\";\n                })) {\n                    // This is a somewhat opinionated choice: if a FragmentDefinition ends\n                    // up having no fields other than __typename, we remove the whole\n                    // fragment definition, and later prune ...spread references to it.\n                    getInUseByFragmentName(node.name.value).removed = true;\n                    firstVisitMadeChanges = true;\n                    return null;\n                }\n            }\n        },\n        Directive: {\n            leave: function(node) {\n                // If a matching directive is found, remove the directive itself. Note\n                // that this does not remove the target (field, argument, etc) of the\n                // directive, but only the directive itself.\n                if (directiveMatcher(node)) {\n                    firstVisitMadeChanges = true;\n                    return null;\n                }\n            }\n        }\n    });\n    if (!firstVisitMadeChanges) {\n        // If our first pass did not change anything about the document, then there\n        // is no cleanup we need to do, and we can return the original doc.\n        return doc;\n    }\n    // Utility for making sure inUse.transitiveVars is recursively populated.\n    // Because this logic assumes inUse.fragmentSpreads has been completely\n    // populated and inUse.removed has been set if appropriate,\n    // populateTransitiveVars must be called after that information has been\n    // collected by the first traversal of the document.\n    var populateTransitiveVars = function(inUse) {\n        if (!inUse.transitiveVars) {\n            inUse.transitiveVars = new Set(inUse.variables);\n            if (!inUse.removed) {\n                inUse.fragmentSpreads.forEach(function(childFragmentName) {\n                    populateTransitiveVars(getInUseByFragmentName(childFragmentName)).transitiveVars.forEach(function(varName) {\n                        inUse.transitiveVars.add(varName);\n                    });\n                });\n            }\n        }\n        return inUse;\n    };\n    // Since we've been keeping track of fragment spreads used by particular\n    // operations and fragment definitions, we now need to compute the set of all\n    // spreads used (transitively) by any operations in the document.\n    var allFragmentNamesUsed = new Set();\n    docWithoutDirectiveSubtrees.definitions.forEach(function(def) {\n        if (def.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_DEFINITION) {\n            populateTransitiveVars(getInUseByOperationName(def.name && def.name.value)).fragmentSpreads.forEach(function(childFragmentName) {\n                allFragmentNamesUsed.add(childFragmentName);\n            });\n        } else if (def.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FRAGMENT_DEFINITION && // If there are no operations in the document, then all fragment\n        // definitions count as usages of their own fragment names. This heuristic\n        // prevents accidentally removing all fragment definitions from the\n        // document just because it contains no operations that use the fragments.\n        operationCount === 0 && !getInUseByFragmentName(def.name.value).removed) {\n            allFragmentNamesUsed.add(def.name.value);\n        }\n    });\n    // Now that we have added all fragment spreads used by operations to the\n    // allFragmentNamesUsed set, we can complete the set by transitively adding\n    // all fragment spreads used by those fragments, and so on.\n    allFragmentNamesUsed.forEach(function(fragmentName) {\n        // Once all the childFragmentName strings added here have been seen already,\n        // the top-level allFragmentNamesUsed.forEach loop will terminate.\n        populateTransitiveVars(getInUseByFragmentName(fragmentName)).fragmentSpreads.forEach(function(childFragmentName) {\n            allFragmentNamesUsed.add(childFragmentName);\n        });\n    });\n    var fragmentWillBeRemoved = function(fragmentName) {\n        return !!// A fragment definition will be removed if there are no spreads that refer\n        // to it, or the fragment was explicitly removed because it had no fields\n        // other than __typename.\n        (!allFragmentNamesUsed.has(fragmentName) || getInUseByFragmentName(fragmentName).removed);\n    };\n    var enterVisitor = {\n        enter: function(node) {\n            if (fragmentWillBeRemoved(node.name.value)) {\n                return null;\n            }\n        }\n    };\n    return nullIfDocIsEmpty((0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(docWithoutDirectiveSubtrees, {\n        // If the fragment is going to be removed, then leaving any dangling\n        // FragmentSpread nodes with the same name would be a mistake.\n        FragmentSpread: enterVisitor,\n        // This is where the fragment definition is actually removed.\n        FragmentDefinition: enterVisitor,\n        OperationDefinition: {\n            leave: function(node) {\n                // Upon leaving each operation in the depth-first AST traversal, prune\n                // any variables that are declared by the operation but unused within.\n                if (node.variableDefinitions) {\n                    var usedVariableNames_1 = populateTransitiveVars(// If an operation is anonymous, we use the empty string as its key.\n                    getInUseByOperationName(node.name && node.name.value)).transitiveVars;\n                    // According to the GraphQL spec, all variables declared by an\n                    // operation must either be used by that operation or used by some\n                    // fragment included transitively into that operation:\n                    // https://spec.graphql.org/draft/#sec-All-Variables-Used\n                    //\n                    // To stay on the right side of this validation rule, if/when we\n                    // remove the last $var references from an operation or its fragments,\n                    // we must also remove the corresponding $var declaration from the\n                    // enclosing operation. This pruning applies only to operations and\n                    // not fragment definitions, at the moment. Fragments may be able to\n                    // declare variables eventually, but today they can only consume them.\n                    if (usedVariableNames_1.size < node.variableDefinitions.length) {\n                        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, node), {\n                            variableDefinitions: node.variableDefinitions.filter(function(varDef) {\n                                return usedVariableNames_1.has(varDef.variable.name.value);\n                            })\n                        });\n                    }\n                }\n            }\n        }\n    }));\n}\nvar addTypenameToDocument = Object.assign(function(doc) {\n    return (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(doc, {\n        SelectionSet: {\n            enter: function(node, _key, parent) {\n                // Don't add __typename to OperationDefinitions.\n                if (parent && parent.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_DEFINITION) {\n                    return;\n                }\n                // No changes if no selections.\n                var selections = node.selections;\n                if (!selections) {\n                    return;\n                }\n                // If selections already have a __typename, or are part of an\n                // introspection query, do nothing.\n                var skip = selections.some(function(selection) {\n                    return (0,_storeUtils_js__WEBPACK_IMPORTED_MODULE_7__.isField)(selection) && (selection.name.value === \"__typename\" || selection.name.value.lastIndexOf(\"__\", 0) === 0);\n                });\n                if (skip) {\n                    return;\n                }\n                // If this SelectionSet is @export-ed as an input variable, it should\n                // not have a __typename field (see issue #4691).\n                var field = parent;\n                if ((0,_storeUtils_js__WEBPACK_IMPORTED_MODULE_7__.isField)(field) && field.directives && field.directives.some(function(d) {\n                    return d.name.value === \"export\";\n                })) {\n                    return;\n                }\n                // Create and return a new SelectionSet with a __typename Field.\n                return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, node), {\n                    selections: (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__spreadArray)([], selections, true), [\n                        TYPENAME_FIELD\n                    ], false)\n                });\n            }\n        }\n    });\n}, {\n    added: function(field) {\n        return field === TYPENAME_FIELD;\n    }\n});\nvar connectionRemoveConfig = {\n    test: function(directive) {\n        var willRemove = directive.name.value === \"connection\";\n        if (willRemove) {\n            if (!directive.arguments || !directive.arguments.some(function(arg) {\n                return arg.name.value === \"key\";\n            })) {\n                globalThis.__DEV__ !== false && _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(84);\n            }\n        }\n        return willRemove;\n    }\n};\nfunction removeConnectionDirectiveFromDocument(doc) {\n    return removeDirectivesFromDocument([\n        connectionRemoveConfig\n    ], (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.checkDocument)(doc));\n}\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n    if (nestedCheck === void 0) {\n        nestedCheck = true;\n    }\n    return !!selectionSet && selectionSet.selections && selectionSet.selections.some(function(selection) {\n        return hasDirectivesInSelection(directives, selection, nestedCheck);\n    });\n}\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n    if (nestedCheck === void 0) {\n        nestedCheck = true;\n    }\n    if (!(0,_storeUtils_js__WEBPACK_IMPORTED_MODULE_7__.isField)(selection)) {\n        return true;\n    }\n    if (!selection.directives) {\n        return false;\n    }\n    return selection.directives.some(getDirectiveMatcher(directives)) || nestedCheck && hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck);\n}\nfunction getArgumentMatcher(config) {\n    return function argumentMatcher(argument) {\n        return config.some(function(aConfig) {\n            return argument.value && argument.value.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.VARIABLE && argument.value.name && (aConfig.name === argument.value.name.value || aConfig.test && aConfig.test(argument));\n        });\n    };\n}\nfunction removeArgumentsFromDocument(config, doc) {\n    var argMatcher = getArgumentMatcher(config);\n    return nullIfDocIsEmpty((0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(doc, {\n        OperationDefinition: {\n            enter: function(node) {\n                return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, node), {\n                    // Remove matching top level variables definitions.\n                    variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(function(varDef) {\n                        return !config.some(function(arg) {\n                            return arg.name === varDef.variable.name.value;\n                        });\n                    }) : []\n                });\n            }\n        },\n        Field: {\n            enter: function(node) {\n                // If `remove` is set to true for an argument, and an argument match\n                // is found for a field, remove the field as well.\n                var shouldRemoveField = config.some(function(argConfig) {\n                    return argConfig.remove;\n                });\n                if (shouldRemoveField) {\n                    var argMatchCount_1 = 0;\n                    if (node.arguments) {\n                        node.arguments.forEach(function(arg) {\n                            if (argMatcher(arg)) {\n                                argMatchCount_1 += 1;\n                            }\n                        });\n                    }\n                    if (argMatchCount_1 === 1) {\n                        return null;\n                    }\n                }\n            }\n        },\n        Argument: {\n            enter: function(node) {\n                // Remove all matching arguments.\n                if (argMatcher(node)) {\n                    return null;\n                }\n            }\n        }\n    }));\n}\nfunction removeFragmentSpreadFromDocument(config, doc) {\n    function enter(node) {\n        if (config.some(function(def) {\n            return def.name === node.name.value;\n        })) {\n            return null;\n        }\n    }\n    return nullIfDocIsEmpty((0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(doc, {\n        FragmentSpread: {\n            enter: enter\n        },\n        FragmentDefinition: {\n            enter: enter\n        }\n    }));\n}\n// If the incoming document is a query, return it as is. Otherwise, build a\n// new document containing a query operation based on the selection set\n// of the previous main operation.\nfunction buildQueryFromSelectionSet(document) {\n    var definition = (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.getMainDefinition)(document);\n    var definitionOperation = definition.operation;\n    if (definitionOperation === \"query\") {\n        // Already a query, so return the existing document.\n        return document;\n    }\n    // Build a new query using the selection set of the main operation.\n    var modifiedDoc = (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(document, {\n        OperationDefinition: {\n            enter: function(node) {\n                return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, node), {\n                    operation: \"query\"\n                });\n            }\n        }\n    });\n    return modifiedDoc;\n}\n// Remove fields / selection sets that include an @client directive.\nfunction removeClientSetsFromDocument(document) {\n    (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.checkDocument)(document);\n    var modifiedDoc = removeDirectivesFromDocument([\n        {\n            test: function(directive) {\n                return directive.name.value === \"client\";\n            },\n            remove: true\n        }\n    ], document);\n    return modifiedDoc;\n} //# sourceMappingURL=transform.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/graphql/transform.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/observables/Concast.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/observables/Concast.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Concast: () => (/* binding */ Concast)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _Observable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Observable.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _iteration_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iteration.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/iteration.js\");\n/* harmony import */ var _subclassing_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./subclassing.js */ \"(ssr)/./node_modules/@apollo/client/utilities/observables/subclassing.js\");\n\n\n\n\nfunction isPromiseLike(value) {\n    return value && typeof value.then === \"function\";\n}\n// A Concast<T> observable concatenates the given sources into a single\n// non-overlapping sequence of Ts, automatically unwrapping any promises,\n// and broadcasts the T elements of that sequence to any number of\n// subscribers, all without creating a bunch of intermediary Observable\n// wrapper objects.\n//\n// Even though any number of observers can subscribe to the Concast, each\n// source observable is guaranteed to receive at most one subscribe call,\n// and the results are multicast to all observers.\n//\n// In addition to broadcasting every next/error message to this.observers,\n// the Concast stores the most recent message using this.latest, so any\n// new observers can immediately receive the latest message, even if it\n// was originally delivered in the past. This behavior means we can assume\n// every active observer in this.observers has received the same most\n// recent message.\n//\n// With the exception of this.latest replay, a Concast is a \"hot\"\n// observable in the sense that it does not replay past results from the\n// beginning of time for each new observer.\n//\n// Could we have used some existing RxJS class instead? Concast<T> is\n// similar to a BehaviorSubject<T>, because it is multicast and redelivers\n// the latest next/error message to new subscribers. Unlike Subject<T>,\n// Concast<T> does not expose an Observer<T> interface (this.handlers is\n// intentionally private), since Concast<T> gets its inputs from the\n// concatenated sources. If we ever switch to RxJS, there may be some\n// value in reusing their code, but for now we use zen-observable, which\n// does not contain any Subject implementations.\nvar Concast = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Concast, _super);\n    // Not only can the individual elements of the iterable be promises, but\n    // also the iterable itself can be wrapped in a promise.\n    function Concast(sources) {\n        var _this = _super.call(this, function(observer) {\n            _this.addObserver(observer);\n            return function() {\n                return _this.removeObserver(observer);\n            };\n        }) || this;\n        // Active observers receiving broadcast messages. Thanks to this.latest,\n        // we can assume all observers in this Set have received the same most\n        // recent message, though possibly at different times in the past.\n        _this.observers = new Set();\n        _this.promise = new Promise(function(resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        });\n        // Bound handler functions that can be reused for every internal\n        // subscription.\n        _this.handlers = {\n            next: function(result) {\n                if (_this.sub !== null) {\n                    _this.latest = [\n                        \"next\",\n                        result\n                    ];\n                    _this.notify(\"next\", result);\n                    (0,_iteration_js__WEBPACK_IMPORTED_MODULE_1__.iterateObserversSafely)(_this.observers, \"next\", result);\n                }\n            },\n            error: function(error) {\n                var sub = _this.sub;\n                if (sub !== null) {\n                    // Delay unsubscribing from the underlying subscription slightly,\n                    // so that immediately subscribing another observer can keep the\n                    // subscription active.\n                    if (sub) setTimeout(function() {\n                        return sub.unsubscribe();\n                    });\n                    _this.sub = null;\n                    _this.latest = [\n                        \"error\",\n                        error\n                    ];\n                    _this.reject(error);\n                    _this.notify(\"error\", error);\n                    (0,_iteration_js__WEBPACK_IMPORTED_MODULE_1__.iterateObserversSafely)(_this.observers, \"error\", error);\n                }\n            },\n            complete: function() {\n                var _a = _this, sub = _a.sub, _b = _a.sources, sources = _b === void 0 ? [] : _b;\n                if (sub !== null) {\n                    // If complete is called before concast.start, this.sources may be\n                    // undefined, so we use a default value of [] for sources. That works\n                    // here because it falls into the if (!value) {...} block, which\n                    // appropriately terminates the Concast, even if this.sources might\n                    // eventually have been initialized to a non-empty array.\n                    var value = sources.shift();\n                    if (!value) {\n                        if (sub) setTimeout(function() {\n                            return sub.unsubscribe();\n                        });\n                        _this.sub = null;\n                        if (_this.latest && _this.latest[0] === \"next\") {\n                            _this.resolve(_this.latest[1]);\n                        } else {\n                            _this.resolve();\n                        }\n                        _this.notify(\"complete\");\n                        // We do not store this.latest = [\"complete\"], because doing so\n                        // discards useful information about the previous next (or\n                        // error) message. Instead, if new observers subscribe after\n                        // this Concast has completed, they will receive the final\n                        // 'next' message (unless there was an error) immediately\n                        // followed by a 'complete' message (see addObserver).\n                        (0,_iteration_js__WEBPACK_IMPORTED_MODULE_1__.iterateObserversSafely)(_this.observers, \"complete\");\n                    } else if (isPromiseLike(value)) {\n                        value.then(function(obs) {\n                            return _this.sub = obs.subscribe(_this.handlers);\n                        }, _this.handlers.error);\n                    } else {\n                        _this.sub = value.subscribe(_this.handlers);\n                    }\n                }\n            }\n        };\n        _this.nextResultListeners = new Set();\n        // A public way to abort observation and broadcast.\n        _this.cancel = function(reason) {\n            _this.reject(reason);\n            _this.sources = [];\n            _this.handlers.complete();\n        };\n        // Suppress rejection warnings for this.promise, since it's perfectly\n        // acceptable to pay no attention to this.promise if you're consuming\n        // the results through the normal observable API.\n        _this.promise.catch(function(_) {});\n        // If someone accidentally tries to create a Concast using a subscriber\n        // function, recover by creating an Observable from that subscriber and\n        // using it as the source.\n        if (typeof sources === \"function\") {\n            sources = [\n                new _Observable_js__WEBPACK_IMPORTED_MODULE_2__.Observable(sources)\n            ];\n        }\n        if (isPromiseLike(sources)) {\n            sources.then(function(iterable) {\n                return _this.start(iterable);\n            }, _this.handlers.error);\n        } else {\n            _this.start(sources);\n        }\n        return _this;\n    }\n    Concast.prototype.start = function(sources) {\n        if (this.sub !== void 0) return;\n        // In practice, sources is most often simply an Array of observables.\n        // TODO Consider using sources[Symbol.iterator]() to take advantage\n        // of the laziness of non-Array iterables.\n        this.sources = Array.from(sources);\n        // Calling this.handlers.complete() kicks off consumption of the first\n        // source observable. It's tempting to do this step lazily in\n        // addObserver, but this.promise can be accessed without calling\n        // addObserver, so consumption needs to begin eagerly.\n        this.handlers.complete();\n    };\n    Concast.prototype.deliverLastMessage = function(observer) {\n        if (this.latest) {\n            var nextOrError = this.latest[0];\n            var method = observer[nextOrError];\n            if (method) {\n                method.call(observer, this.latest[1]);\n            }\n            // If the subscription is already closed, and the last message was\n            // a 'next' message, simulate delivery of the final 'complete'\n            // message again.\n            if (this.sub === null && nextOrError === \"next\" && observer.complete) {\n                observer.complete();\n            }\n        }\n    };\n    Concast.prototype.addObserver = function(observer) {\n        if (!this.observers.has(observer)) {\n            // Immediately deliver the most recent message, so we can always\n            // be sure all observers have the latest information.\n            this.deliverLastMessage(observer);\n            this.observers.add(observer);\n        }\n    };\n    Concast.prototype.removeObserver = function(observer) {\n        if (this.observers.delete(observer) && this.observers.size < 1) {\n            // In case there are still any listeners in this.nextResultListeners, and\n            // no error or completion has been broadcast yet, make sure those\n            // observers have a chance to run and then remove themselves from\n            // this.observers.\n            this.handlers.complete();\n        }\n    };\n    Concast.prototype.notify = function(method, arg) {\n        var nextResultListeners = this.nextResultListeners;\n        if (nextResultListeners.size) {\n            // Replacing this.nextResultListeners first ensures it does not grow while\n            // we are iterating over it, potentially leading to infinite loops.\n            this.nextResultListeners = new Set();\n            nextResultListeners.forEach(function(listener) {\n                return listener(method, arg);\n            });\n        }\n    };\n    // We need a way to run callbacks just *before* the next result (or error or\n    // completion) is delivered by this Concast, so we can be sure any code that\n    // runs as a result of delivering that result/error observes the effects of\n    // running the callback(s). It was tempting to reuse the Observer type instead\n    // of introducing NextResultListener, but that messes with the sizing and\n    // maintenance of this.observers, and ends up being more code overall.\n    Concast.prototype.beforeNext = function(callback) {\n        var called = false;\n        this.nextResultListeners.add(function(method, arg) {\n            if (!called) {\n                called = true;\n                callback(method, arg);\n            }\n        });\n    };\n    return Concast;\n}(_Observable_js__WEBPACK_IMPORTED_MODULE_2__.Observable);\n\n// Necessary because the Concast constructor has a different signature\n// than the Observable constructor.\n(0,_subclassing_js__WEBPACK_IMPORTED_MODULE_3__.fixObservableSubclass)(Concast); //# sourceMappingURL=Concast.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/observables/Concast.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/observables/asyncMap.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/observables/asyncMap.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   asyncMap: () => (/* binding */ asyncMap)\n/* harmony export */ });\n/* harmony import */ var _Observable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Observable.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n\n// Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\nfunction asyncMap(observable, mapFn, catchFn) {\n    return new _Observable_js__WEBPACK_IMPORTED_MODULE_0__.Observable(function(observer) {\n        var promiseQueue = {\n            // Normally we would initialize promiseQueue to Promise.resolve(), but\n            // in this case, for backwards compatibility, we need to be careful to\n            // invoke the first callback synchronously.\n            then: function(callback) {\n                return new Promise(function(resolve) {\n                    return resolve(callback());\n                });\n            }\n        };\n        function makeCallback(examiner, key) {\n            return function(arg) {\n                if (examiner) {\n                    var both = function() {\n                        // If the observer is closed, we don't want to continue calling the\n                        // mapping function - it's result will be swallowed anyways.\n                        return observer.closed ? /* will be swallowed */ 0 : examiner(arg);\n                    };\n                    promiseQueue = promiseQueue.then(both, both).then(function(result) {\n                        return observer.next(result);\n                    }, function(error) {\n                        return observer.error(error);\n                    });\n                } else {\n                    observer[key](arg);\n                }\n            };\n        }\n        var handler = {\n            next: makeCallback(mapFn, \"next\"),\n            error: makeCallback(catchFn, \"error\"),\n            complete: function() {\n                // no need to reassign `promiseQueue`, after `observer.complete`,\n                // the observer will be closed and short-circuit everything anyways\n                /*promiseQueue = */ promiseQueue.then(function() {\n                    return observer.complete();\n                });\n            }\n        };\n        var sub = observable.subscribe(handler);\n        return function() {\n            return sub.unsubscribe();\n        };\n    });\n} //# sourceMappingURL=asyncMap.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL29ic2VydmFibGVzL2FzeW5jTWFwLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTZDO0FBQzdDLHNFQUFzRTtBQUN0RSw2Q0FBNkM7QUFDdEMsU0FBU0MsU0FBU0MsVUFBVSxFQUFFQyxLQUFLLEVBQUVDLE9BQU87SUFDL0MsT0FBTyxJQUFJSixzREFBVUEsQ0FBQyxTQUFVSyxRQUFRO1FBQ3BDLElBQUlDLGVBQWU7WUFDZixzRUFBc0U7WUFDdEUsc0VBQXNFO1lBQ3RFLDJDQUEyQztZQUMzQ0MsTUFBTSxTQUFVQyxRQUFRO2dCQUNwQixPQUFPLElBQUlDLFFBQVEsU0FBVUMsT0FBTztvQkFBSSxPQUFPQSxRQUFRRjtnQkFBYTtZQUN4RTtRQUNKO1FBQ0EsU0FBU0csYUFBYUMsUUFBUSxFQUFFQyxHQUFHO1lBQy9CLE9BQU8sU0FBVUMsR0FBRztnQkFDaEIsSUFBSUYsVUFBVTtvQkFDVixJQUFJRyxPQUFPO3dCQUNQLG1FQUFtRTt3QkFDbkUsNERBQTREO3dCQUM1RCxPQUFPVixTQUFTVyxNQUFNLEdBQ2xCLHFCQUFxQixHQUFHLElBQ3RCSixTQUFTRTtvQkFDbkI7b0JBQ0FSLGVBQWVBLGFBQWFDLElBQUksQ0FBQ1EsTUFBTUEsTUFBTVIsSUFBSSxDQUFDLFNBQVVVLE1BQU07d0JBQUksT0FBT1osU0FBU2EsSUFBSSxDQUFDRDtvQkFBUyxHQUFHLFNBQVVFLEtBQUs7d0JBQUksT0FBT2QsU0FBU2MsS0FBSyxDQUFDQTtvQkFBUTtnQkFDNUosT0FDSztvQkFDRGQsUUFBUSxDQUFDUSxJQUFJLENBQUNDO2dCQUNsQjtZQUNKO1FBQ0o7UUFDQSxJQUFJTSxVQUFVO1lBQ1ZGLE1BQU1QLGFBQWFSLE9BQU87WUFDMUJnQixPQUFPUixhQUFhUCxTQUFTO1lBQzdCaUIsVUFBVTtnQkFDTixpRUFBaUU7Z0JBQ2pFLG1FQUFtRTtnQkFDbkUsaUJBQWlCLEdBQUdmLGFBQWFDLElBQUksQ0FBQztvQkFBYyxPQUFPRixTQUFTZ0IsUUFBUTtnQkFBSTtZQUNwRjtRQUNKO1FBQ0EsSUFBSUMsTUFBTXBCLFdBQVdxQixTQUFTLENBQUNIO1FBQy9CLE9BQU87WUFBYyxPQUFPRSxJQUFJRSxXQUFXO1FBQUk7SUFDbkQ7QUFDSixFQUNBLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvb2JzZXJ2YWJsZXMvYXN5bmNNYXAuanM/YWYyOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4vT2JzZXJ2YWJsZS5qc1wiO1xuLy8gTGlrZSBPYnNlcnZhYmxlLnByb3RvdHlwZS5tYXAsIGV4Y2VwdCB0aGF0IHRoZSBtYXBwaW5nIGZ1bmN0aW9uIGNhblxuLy8gb3B0aW9uYWxseSByZXR1cm4gYSBQcm9taXNlIChvciBiZSBhc3luYykuXG5leHBvcnQgZnVuY3Rpb24gYXN5bmNNYXAob2JzZXJ2YWJsZSwgbWFwRm4sIGNhdGNoRm4pIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHZhciBwcm9taXNlUXVldWUgPSB7XG4gICAgICAgICAgICAvLyBOb3JtYWxseSB3ZSB3b3VsZCBpbml0aWFsaXplIHByb21pc2VRdWV1ZSB0byBQcm9taXNlLnJlc29sdmUoKSwgYnV0XG4gICAgICAgICAgICAvLyBpbiB0aGlzIGNhc2UsIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgd2UgbmVlZCB0byBiZSBjYXJlZnVsIHRvXG4gICAgICAgICAgICAvLyBpbnZva2UgdGhlIGZpcnN0IGNhbGxiYWNrIHN5bmNocm9ub3VzbHkuXG4gICAgICAgICAgICB0aGVuOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmV0dXJuIHJlc29sdmUoY2FsbGJhY2soKSk7IH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgZnVuY3Rpb24gbWFrZUNhbGxiYWNrKGV4YW1pbmVyLCBrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV4YW1pbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBib3RoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIG9ic2VydmVyIGlzIGNsb3NlZCwgd2UgZG9uJ3Qgd2FudCB0byBjb250aW51ZSBjYWxsaW5nIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWFwcGluZyBmdW5jdGlvbiAtIGl0J3MgcmVzdWx0IHdpbGwgYmUgc3dhbGxvd2VkIGFueXdheXMuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JzZXJ2ZXIuY2xvc2VkID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiB3aWxsIGJlIHN3YWxsb3dlZCAqLyAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBleGFtaW5lcihhcmcpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBwcm9taXNlUXVldWUgPSBwcm9taXNlUXVldWUudGhlbihib3RoLCBib3RoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsgcmV0dXJuIG9ic2VydmVyLm5leHQocmVzdWx0KTsgfSwgZnVuY3Rpb24gKGVycm9yKSB7IHJldHVybiBvYnNlcnZlci5lcnJvcihlcnJvcik7IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXJba2V5XShhcmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhhbmRsZXIgPSB7XG4gICAgICAgICAgICBuZXh0OiBtYWtlQ2FsbGJhY2sobWFwRm4sIFwibmV4dFwiKSxcbiAgICAgICAgICAgIGVycm9yOiBtYWtlQ2FsbGJhY2soY2F0Y2hGbiwgXCJlcnJvclwiKSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gbm8gbmVlZCB0byByZWFzc2lnbiBgcHJvbWlzZVF1ZXVlYCwgYWZ0ZXIgYG9ic2VydmVyLmNvbXBsZXRlYCxcbiAgICAgICAgICAgICAgICAvLyB0aGUgb2JzZXJ2ZXIgd2lsbCBiZSBjbG9zZWQgYW5kIHNob3J0LWNpcmN1aXQgZXZlcnl0aGluZyBhbnl3YXlzXG4gICAgICAgICAgICAgICAgLypwcm9taXNlUXVldWUgPSAqLyBwcm9taXNlUXVldWUudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBvYnNlcnZlci5jb21wbGV0ZSgpOyB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIHZhciBzdWIgPSBvYnNlcnZhYmxlLnN1YnNjcmliZShoYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1Yi51bnN1YnNjcmliZSgpOyB9O1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXN5bmNNYXAuanMubWFwIl0sIm5hbWVzIjpbIk9ic2VydmFibGUiLCJhc3luY01hcCIsIm9ic2VydmFibGUiLCJtYXBGbiIsImNhdGNoRm4iLCJvYnNlcnZlciIsInByb21pc2VRdWV1ZSIsInRoZW4iLCJjYWxsYmFjayIsIlByb21pc2UiLCJyZXNvbHZlIiwibWFrZUNhbGxiYWNrIiwiZXhhbWluZXIiLCJrZXkiLCJhcmciLCJib3RoIiwiY2xvc2VkIiwicmVzdWx0IiwibmV4dCIsImVycm9yIiwiaGFuZGxlciIsImNvbXBsZXRlIiwic3ViIiwic3Vic2NyaWJlIiwidW5zdWJzY3JpYmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/observables/asyncMap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/observables/iteration.js":
/*!************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/observables/iteration.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   iterateObserversSafely: () => (/* binding */ iterateObserversSafely)\n/* harmony export */ });\nfunction iterateObserversSafely(observers, method, argument) {\n    // In case observers is modified during iteration, we need to commit to the\n    // original elements, which also provides an opportunity to filter them down\n    // to just the observers with the given method.\n    var observersWithMethod = [];\n    observers.forEach(function(obs) {\n        return obs[method] && observersWithMethod.push(obs);\n    });\n    observersWithMethod.forEach(function(obs) {\n        return obs[method](argument);\n    });\n} //# sourceMappingURL=iteration.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL29ic2VydmFibGVzL2l0ZXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsdUJBQXVCQyxTQUFTLEVBQUVDLE1BQU0sRUFBRUMsUUFBUTtJQUM5RCwyRUFBMkU7SUFDM0UsNEVBQTRFO0lBQzVFLCtDQUErQztJQUMvQyxJQUFJQyxzQkFBc0IsRUFBRTtJQUM1QkgsVUFBVUksT0FBTyxDQUFDLFNBQVVDLEdBQUc7UUFBSSxPQUFPQSxHQUFHLENBQUNKLE9BQU8sSUFBSUUsb0JBQW9CRyxJQUFJLENBQUNEO0lBQU07SUFDeEZGLG9CQUFvQkMsT0FBTyxDQUFDLFNBQVVDLEdBQUc7UUFBSSxPQUFPQSxHQUFHLENBQUNKLE9BQU8sQ0FBQ0M7SUFBVztBQUMvRSxFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvb2JzZXJ2YWJsZXMvaXRlcmF0aW9uLmpzP2I0NzgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGl0ZXJhdGVPYnNlcnZlcnNTYWZlbHkob2JzZXJ2ZXJzLCBtZXRob2QsIGFyZ3VtZW50KSB7XG4gICAgLy8gSW4gY2FzZSBvYnNlcnZlcnMgaXMgbW9kaWZpZWQgZHVyaW5nIGl0ZXJhdGlvbiwgd2UgbmVlZCB0byBjb21taXQgdG8gdGhlXG4gICAgLy8gb3JpZ2luYWwgZWxlbWVudHMsIHdoaWNoIGFsc28gcHJvdmlkZXMgYW4gb3Bwb3J0dW5pdHkgdG8gZmlsdGVyIHRoZW0gZG93blxuICAgIC8vIHRvIGp1c3QgdGhlIG9ic2VydmVycyB3aXRoIHRoZSBnaXZlbiBtZXRob2QuXG4gICAgdmFyIG9ic2VydmVyc1dpdGhNZXRob2QgPSBbXTtcbiAgICBvYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JzKSB7IHJldHVybiBvYnNbbWV0aG9kXSAmJiBvYnNlcnZlcnNXaXRoTWV0aG9kLnB1c2gob2JzKTsgfSk7XG4gICAgb2JzZXJ2ZXJzV2l0aE1ldGhvZC5mb3JFYWNoKGZ1bmN0aW9uIChvYnMpIHsgcmV0dXJuIG9ic1ttZXRob2RdKGFyZ3VtZW50KTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVyYXRpb24uanMubWFwIl0sIm5hbWVzIjpbIml0ZXJhdGVPYnNlcnZlcnNTYWZlbHkiLCJvYnNlcnZlcnMiLCJtZXRob2QiLCJhcmd1bWVudCIsIm9ic2VydmVyc1dpdGhNZXRob2QiLCJmb3JFYWNoIiwib2JzIiwicHVzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/observables/iteration.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/utilities/observables/subclassing.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/observables/subclassing.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fixObservableSubclass: () => (/* binding */ fixObservableSubclass)\n/* harmony export */ });\n/* harmony import */ var _Observable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Observable.js */ \"(ssr)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _common_canUse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/canUse.js */ \"(ssr)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n\n\n// Generic implementations of Observable.prototype methods like map and\n// filter need to know how to create a new Observable from an Observable\n// subclass (like Concast or ObservableQuery). Those methods assume\n// (perhaps unwisely?) that they can call the subtype's constructor with a\n// Subscriber function, even though the subclass constructor might expect\n// different parameters. Defining this static Symbol.species property on\n// the subclass is a hint to generic Observable code to use the default\n// constructor instead of trying to do `new Subclass(observer => ...)`.\nfunction fixObservableSubclass(subclass) {\n    function set(key) {\n        // Object.defineProperty is necessary because the Symbol.species\n        // property is a getter by default in modern JS environments, so we\n        // can't assign to it with a normal assignment expression.\n        Object.defineProperty(subclass, key, {\n            value: _Observable_js__WEBPACK_IMPORTED_MODULE_0__.Observable\n        });\n    }\n    if (_common_canUse_js__WEBPACK_IMPORTED_MODULE_1__.canUseSymbol && Symbol.species) {\n        set(Symbol.species);\n    }\n    // The \"@@species\" string is used as a fake Symbol.species value in some\n    // polyfill systems (including the SymbolSpecies variable used by\n    // zen-observable), so we should set it as well, to be safe.\n    set(\"@@species\");\n    return subclass;\n} //# sourceMappingURL=subclassing.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL29ic2VydmFibGVzL3N1YmNsYXNzaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2QztBQUNNO0FBQ25ELHVFQUF1RTtBQUN2RSx3RUFBd0U7QUFDeEUsbUVBQW1FO0FBQ25FLDBFQUEwRTtBQUMxRSx5RUFBeUU7QUFDekUsd0VBQXdFO0FBQ3hFLHVFQUF1RTtBQUN2RSx1RUFBdUU7QUFDaEUsU0FBU0Usc0JBQXNCQyxRQUFRO0lBQzFDLFNBQVNDLElBQUlDLEdBQUc7UUFDWixnRUFBZ0U7UUFDaEUsbUVBQW1FO1FBQ25FLDBEQUEwRDtRQUMxREMsT0FBT0MsY0FBYyxDQUFDSixVQUFVRSxLQUFLO1lBQUVHLE9BQU9SLHNEQUFVQTtRQUFDO0lBQzdEO0lBQ0EsSUFBSUMsMkRBQVlBLElBQUlRLE9BQU9DLE9BQU8sRUFBRTtRQUNoQ04sSUFBSUssT0FBT0MsT0FBTztJQUN0QjtJQUNBLHdFQUF3RTtJQUN4RSxpRUFBaUU7SUFDakUsNERBQTREO0lBQzVETixJQUFJO0lBQ0osT0FBT0Q7QUFDWCxFQUNBLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvb2JzZXJ2YWJsZXMvc3ViY2xhc3NpbmcuanM/YTFmMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4vT2JzZXJ2YWJsZS5qc1wiO1xuaW1wb3J0IHsgY2FuVXNlU3ltYm9sIH0gZnJvbSBcIi4uL2NvbW1vbi9jYW5Vc2UuanNcIjtcbi8vIEdlbmVyaWMgaW1wbGVtZW50YXRpb25zIG9mIE9ic2VydmFibGUucHJvdG90eXBlIG1ldGhvZHMgbGlrZSBtYXAgYW5kXG4vLyBmaWx0ZXIgbmVlZCB0byBrbm93IGhvdyB0byBjcmVhdGUgYSBuZXcgT2JzZXJ2YWJsZSBmcm9tIGFuIE9ic2VydmFibGVcbi8vIHN1YmNsYXNzIChsaWtlIENvbmNhc3Qgb3IgT2JzZXJ2YWJsZVF1ZXJ5KS4gVGhvc2UgbWV0aG9kcyBhc3N1bWVcbi8vIChwZXJoYXBzIHVud2lzZWx5PykgdGhhdCB0aGV5IGNhbiBjYWxsIHRoZSBzdWJ0eXBlJ3MgY29uc3RydWN0b3Igd2l0aCBhXG4vLyBTdWJzY3JpYmVyIGZ1bmN0aW9uLCBldmVuIHRob3VnaCB0aGUgc3ViY2xhc3MgY29uc3RydWN0b3IgbWlnaHQgZXhwZWN0XG4vLyBkaWZmZXJlbnQgcGFyYW1ldGVycy4gRGVmaW5pbmcgdGhpcyBzdGF0aWMgU3ltYm9sLnNwZWNpZXMgcHJvcGVydHkgb25cbi8vIHRoZSBzdWJjbGFzcyBpcyBhIGhpbnQgdG8gZ2VuZXJpYyBPYnNlcnZhYmxlIGNvZGUgdG8gdXNlIHRoZSBkZWZhdWx0XG4vLyBjb25zdHJ1Y3RvciBpbnN0ZWFkIG9mIHRyeWluZyB0byBkbyBgbmV3IFN1YmNsYXNzKG9ic2VydmVyID0+IC4uLilgLlxuZXhwb3J0IGZ1bmN0aW9uIGZpeE9ic2VydmFibGVTdWJjbGFzcyhzdWJjbGFzcykge1xuICAgIGZ1bmN0aW9uIHNldChrZXkpIHtcbiAgICAgICAgLy8gT2JqZWN0LmRlZmluZVByb3BlcnR5IGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHRoZSBTeW1ib2wuc3BlY2llc1xuICAgICAgICAvLyBwcm9wZXJ0eSBpcyBhIGdldHRlciBieSBkZWZhdWx0IGluIG1vZGVybiBKUyBlbnZpcm9ubWVudHMsIHNvIHdlXG4gICAgICAgIC8vIGNhbid0IGFzc2lnbiB0byBpdCB3aXRoIGEgbm9ybWFsIGFzc2lnbm1lbnQgZXhwcmVzc2lvbi5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN1YmNsYXNzLCBrZXksIHsgdmFsdWU6IE9ic2VydmFibGUgfSk7XG4gICAgfVxuICAgIGlmIChjYW5Vc2VTeW1ib2wgJiYgU3ltYm9sLnNwZWNpZXMpIHtcbiAgICAgICAgc2V0KFN5bWJvbC5zcGVjaWVzKTtcbiAgICB9XG4gICAgLy8gVGhlIFwiQEBzcGVjaWVzXCIgc3RyaW5nIGlzIHVzZWQgYXMgYSBmYWtlIFN5bWJvbC5zcGVjaWVzIHZhbHVlIGluIHNvbWVcbiAgICAvLyBwb2x5ZmlsbCBzeXN0ZW1zIChpbmNsdWRpbmcgdGhlIFN5bWJvbFNwZWNpZXMgdmFyaWFibGUgdXNlZCBieVxuICAgIC8vIHplbi1vYnNlcnZhYmxlKSwgc28gd2Ugc2hvdWxkIHNldCBpdCBhcyB3ZWxsLCB0byBiZSBzYWZlLlxuICAgIHNldChcIkBAc3BlY2llc1wiKTtcbiAgICByZXR1cm4gc3ViY2xhc3M7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJjbGFzc2luZy5qcy5tYXAiXSwibmFtZXMiOlsiT2JzZXJ2YWJsZSIsImNhblVzZVN5bWJvbCIsImZpeE9ic2VydmFibGVTdWJjbGFzcyIsInN1YmNsYXNzIiwic2V0Iiwia2V5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIlN5bWJvbCIsInNwZWNpZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/utilities/observables/subclassing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apollo/client/version.js":
/*!************************************************!*\
  !*** ./node_modules/@apollo/client/version.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\nvar version = \"3.9.0\"; //# sourceMappingURL=version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sSUFBSUEsVUFBVSxRQUFRLENBQzdCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC92ZXJzaW9uLmpzPzZmZGIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciB2ZXJzaW9uID0gXCIzLjkuMFwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOlsidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apollo/client/version.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/cache/core/cache.js":
/*!*********************************************************!*\
  !*** ./node_modules/@apollo/client/cache/core/cache.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloCache: () => (/* binding */ ApolloCache)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! optimism */ \"(rsc)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @wry/caches */ \"(rsc)/./node_modules/@wry/caches/lib/weak.js\");\n/* harmony import */ var _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/caching/getMemoryInternals.js */ \"(rsc)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n\n\n\n\n\nvar ApolloCache = /** @class */ function() {\n    function ApolloCache() {\n        this.assumeImmutableResults = false;\n        // Make sure we compute the same (===) fragment query document every\n        // time we receive the same fragment in readFragment.\n        this.getFragmentDoc = (0,optimism__WEBPACK_IMPORTED_MODULE_0__.wrap)(_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.getFragmentQueryDocument, {\n            max: _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.cacheSizes[\"cache.fragmentQueryDocuments\"] || 1000 /* defaultCacheSizes[\"cache.fragmentQueryDocuments\"] */ ,\n            cache: _wry_caches__WEBPACK_IMPORTED_MODULE_3__.WeakCache\n        });\n    }\n    // Transactional API\n    // The batch method is intended to replace/subsume both performTransaction\n    // and recordOptimisticTransaction, but performTransaction came first, so we\n    // provide a default batch implementation that's just another way of calling\n    // performTransaction. Subclasses of ApolloCache (such as InMemoryCache) can\n    // override the batch method to do more interesting things with its options.\n    ApolloCache.prototype.batch = function(options) {\n        var _this = this;\n        var optimisticId = typeof options.optimistic === \"string\" ? options.optimistic : options.optimistic === false ? null : void 0;\n        var updateResult;\n        this.performTransaction(function() {\n            return updateResult = options.update(_this);\n        }, optimisticId);\n        return updateResult;\n    };\n    ApolloCache.prototype.recordOptimisticTransaction = function(transaction, optimisticId) {\n        this.performTransaction(transaction, optimisticId);\n    };\n    // Optional API\n    // Called once per input document, allowing the cache to make static changes\n    // to the query, such as adding __typename fields.\n    ApolloCache.prototype.transformDocument = function(document) {\n        return document;\n    };\n    // Called before each ApolloLink request, allowing the cache to make dynamic\n    // changes to the query, such as filling in missing fragment definitions.\n    ApolloCache.prototype.transformForLink = function(document) {\n        return document;\n    };\n    ApolloCache.prototype.identify = function(object) {\n        return;\n    };\n    ApolloCache.prototype.gc = function() {\n        return [];\n    };\n    ApolloCache.prototype.modify = function(options) {\n        return false;\n    };\n    // DataProxy API\n    ApolloCache.prototype.readQuery = function(options, optimistic) {\n        if (optimistic === void 0) {\n            optimistic = !!options.optimistic;\n        }\n        return this.read((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, options), {\n            rootId: options.id || \"ROOT_QUERY\",\n            optimistic: optimistic\n        }));\n    };\n    ApolloCache.prototype.readFragment = function(options, optimistic) {\n        if (optimistic === void 0) {\n            optimistic = !!options.optimistic;\n        }\n        return this.read((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, options), {\n            query: this.getFragmentDoc(options.fragment, options.fragmentName),\n            rootId: options.id,\n            optimistic: optimistic\n        }));\n    };\n    ApolloCache.prototype.writeQuery = function(_a) {\n        var id = _a.id, data = _a.data, options = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__rest)(_a, [\n            \"id\",\n            \"data\"\n        ]);\n        return this.write(Object.assign(options, {\n            dataId: id || \"ROOT_QUERY\",\n            result: data\n        }));\n    };\n    ApolloCache.prototype.writeFragment = function(_a) {\n        var id = _a.id, data = _a.data, fragment = _a.fragment, fragmentName = _a.fragmentName, options = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__rest)(_a, [\n            \"id\",\n            \"data\",\n            \"fragment\",\n            \"fragmentName\"\n        ]);\n        return this.write(Object.assign(options, {\n            query: this.getFragmentDoc(fragment, fragmentName),\n            dataId: id,\n            result: data\n        }));\n    };\n    ApolloCache.prototype.updateQuery = function(options, update) {\n        return this.batch({\n            update: function(cache) {\n                var value = cache.readQuery(options);\n                var data = update(value);\n                if (data === void 0 || data === null) return value;\n                cache.writeQuery((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, options), {\n                    data: data\n                }));\n                return data;\n            }\n        });\n    };\n    ApolloCache.prototype.updateFragment = function(options, update) {\n        return this.batch({\n            update: function(cache) {\n                var value = cache.readFragment(options);\n                var data = update(value);\n                if (data === void 0 || data === null) return value;\n                cache.writeFragment((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, options), {\n                    data: data\n                }));\n                return data;\n            }\n        });\n    };\n    return ApolloCache;\n}();\n\nif (globalThis.__DEV__ !== false) {\n    ApolloCache.prototype.getMemoryInternals = _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_5__.getApolloCacheMemoryInternals;\n} //# sourceMappingURL=cache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/cache/core/cache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/cache/core/types/common.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/core/types/common.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MissingFieldError: () => (/* binding */ MissingFieldError)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n\nvar MissingFieldError = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MissingFieldError, _super);\n    function MissingFieldError(message, path, query, variables) {\n        var _a;\n        // 'Error' breaks prototype chain here\n        var _this = _super.call(this, message) || this;\n        _this.message = message;\n        _this.path = path;\n        _this.query = query;\n        _this.variables = variables;\n        if (Array.isArray(_this.path)) {\n            _this.missing = _this.message;\n            for(var i = _this.path.length - 1; i >= 0; --i){\n                _this.missing = (_a = {}, _a[_this.path[i]] = _this.missing, _a);\n            }\n        } else {\n            _this.missing = _this.path;\n        }\n        // We're not using `Object.setPrototypeOf` here as it isn't fully supported\n        // on Android (see issue #3236).\n        _this.__proto__ = MissingFieldError.prototype;\n        return _this;\n    }\n    return MissingFieldError;\n}(Error);\n //# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY2FjaGUvY29yZS90eXBlcy9jb21tb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0M7QUFDbEMsSUFBSUMsb0JBQW9CLFdBQVcsR0FBSSxTQUFVQyxNQUFNO0lBQ25ERixnREFBU0EsQ0FBQ0MsbUJBQW1CQztJQUM3QixTQUFTRCxrQkFBa0JFLE9BQU8sRUFBRUMsSUFBSSxFQUFFQyxLQUFLLEVBQUVDLFNBQVM7UUFDdEQsSUFBSUM7UUFDSixzQ0FBc0M7UUFDdEMsSUFBSUMsUUFBUU4sT0FBT08sSUFBSSxDQUFDLElBQUksRUFBRU4sWUFBWSxJQUFJO1FBQzlDSyxNQUFNTCxPQUFPLEdBQUdBO1FBQ2hCSyxNQUFNSixJQUFJLEdBQUdBO1FBQ2JJLE1BQU1ILEtBQUssR0FBR0E7UUFDZEcsTUFBTUYsU0FBUyxHQUFHQTtRQUNsQixJQUFJSSxNQUFNQyxPQUFPLENBQUNILE1BQU1KLElBQUksR0FBRztZQUMzQkksTUFBTUksT0FBTyxHQUFHSixNQUFNTCxPQUFPO1lBQzdCLElBQUssSUFBSVUsSUFBSUwsTUFBTUosSUFBSSxDQUFDVSxNQUFNLEdBQUcsR0FBR0QsS0FBSyxHQUFHLEVBQUVBLEVBQUc7Z0JBQzdDTCxNQUFNSSxPQUFPLEdBQUlMLENBQUFBLEtBQUssQ0FBQyxHQUFHQSxFQUFFLENBQUNDLE1BQU1KLElBQUksQ0FBQ1MsRUFBRSxDQUFDLEdBQUdMLE1BQU1JLE9BQU8sRUFBRUwsRUFBQztZQUNsRTtRQUNKLE9BQ0s7WUFDREMsTUFBTUksT0FBTyxHQUFHSixNQUFNSixJQUFJO1FBQzlCO1FBQ0EsMkVBQTJFO1FBQzNFLGdDQUFnQztRQUNoQ0ksTUFBTU8sU0FBUyxHQUFHZCxrQkFBa0JlLFNBQVM7UUFDN0MsT0FBT1I7SUFDWDtJQUNBLE9BQU9QO0FBQ1gsRUFBRWdCO0FBQzJCLENBQzdCLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9jYWNoZS9jb3JlL3R5cGVzL2NvbW1vbi5qcz82YWEyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xudmFyIE1pc3NpbmdGaWVsZEVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNaXNzaW5nRmllbGRFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNaXNzaW5nRmllbGRFcnJvcihtZXNzYWdlLCBwYXRoLCBxdWVyeSwgdmFyaWFibGVzKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgLy8gJ0Vycm9yJyBicmVha3MgcHJvdG90eXBlIGNoYWluIGhlcmVcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbWVzc2FnZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIF90aGlzLnBhdGggPSBwYXRoO1xuICAgICAgICBfdGhpcy5xdWVyeSA9IHF1ZXJ5O1xuICAgICAgICBfdGhpcy52YXJpYWJsZXMgPSB2YXJpYWJsZXM7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KF90aGlzLnBhdGgpKSB7XG4gICAgICAgICAgICBfdGhpcy5taXNzaW5nID0gX3RoaXMubWVzc2FnZTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBfdGhpcy5wYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMubWlzc2luZyA9IChfYSA9IHt9LCBfYVtfdGhpcy5wYXRoW2ldXSA9IF90aGlzLm1pc3NpbmcsIF9hKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLm1pc3NpbmcgPSBfdGhpcy5wYXRoO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdlJ3JlIG5vdCB1c2luZyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBoZXJlIGFzIGl0IGlzbid0IGZ1bGx5IHN1cHBvcnRlZFxuICAgICAgICAvLyBvbiBBbmRyb2lkIChzZWUgaXNzdWUgIzMyMzYpLlxuICAgICAgICBfdGhpcy5fX3Byb3RvX18gPSBNaXNzaW5nRmllbGRFcnJvci5wcm90b3R5cGU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIE1pc3NpbmdGaWVsZEVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0IHsgTWlzc2luZ0ZpZWxkRXJyb3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1vbi5qcy5tYXAiXSwibmFtZXMiOlsiX19leHRlbmRzIiwiTWlzc2luZ0ZpZWxkRXJyb3IiLCJfc3VwZXIiLCJtZXNzYWdlIiwicGF0aCIsInF1ZXJ5IiwidmFyaWFibGVzIiwiX2EiLCJfdGhpcyIsImNhbGwiLCJBcnJheSIsImlzQXJyYXkiLCJtaXNzaW5nIiwiaSIsImxlbmd0aCIsIl9fcHJvdG9fXyIsInByb3RvdHlwZSIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/cache/core/types/common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/cache/inmemory/entityStore.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/entityStore.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EntityStore: () => (/* binding */ EntityStore),\n/* harmony export */   maybeDependOnExistenceOfEntity: () => (/* binding */ maybeDependOnExistenceOfEntity),\n/* harmony export */   supportsResultCaching: () => (/* binding */ supportsResultCaching)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! optimism */ \"(rsc)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wry/equality */ \"(rsc)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @wry/trie */ \"(rsc)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n\n\n\n\n\n\n\nvar DELETE = Object.create(null);\nvar delModifier = function() {\n    return DELETE;\n};\nvar INVALIDATE = Object.create(null);\nvar EntityStore = /** @class */ function() {\n    function EntityStore(policies, group) {\n        var _this = this;\n        this.policies = policies;\n        this.group = group;\n        this.data = Object.create(null);\n        // Maps root entity IDs to the number of times they have been retained, minus\n        // the number of times they have been released. Retained entities keep other\n        // entities they reference (even indirectly) from being garbage collected.\n        this.rootIds = Object.create(null);\n        // Lazily tracks { __ref: <dataId> } strings contained by this.data[dataId].\n        this.refs = Object.create(null);\n        // Bound function that can be passed around to provide easy access to fields\n        // of Reference objects as well as ordinary objects.\n        this.getFieldValue = function(objectOrReference, storeFieldName) {\n            return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.maybeDeepFreeze)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(objectOrReference) ? _this.get(objectOrReference.__ref, storeFieldName) : objectOrReference && objectOrReference[storeFieldName]);\n        };\n        // Returns true for non-normalized StoreObjects and non-dangling\n        // References, indicating that readField(name, objOrRef) has a chance of\n        // working. Useful for filtering out dangling references from lists.\n        this.canRead = function(objOrRef) {\n            return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(objOrRef) ? _this.has(objOrRef.__ref) : typeof objOrRef === \"object\";\n        };\n        // Bound function that converts an id or an object with a __typename and\n        // primary key fields to a Reference object. If called with a Reference object,\n        // that same Reference object is returned. Pass true for mergeIntoStore to persist\n        // an object into the store.\n        this.toReference = function(objOrIdOrRef, mergeIntoStore) {\n            if (typeof objOrIdOrRef === \"string\") {\n                return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.makeReference)(objOrIdOrRef);\n            }\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(objOrIdOrRef)) {\n                return objOrIdOrRef;\n            }\n            var id = _this.policies.identify(objOrIdOrRef)[0];\n            if (id) {\n                var ref = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.makeReference)(id);\n                if (mergeIntoStore) {\n                    _this.merge(id, objOrIdOrRef);\n                }\n                return ref;\n            }\n        };\n    }\n    // Although the EntityStore class is abstract, it contains concrete\n    // implementations of the various NormalizedCache interface methods that\n    // are inherited by the Root and Layer subclasses.\n    EntityStore.prototype.toObject = function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, this.data);\n    };\n    EntityStore.prototype.has = function(dataId) {\n        return this.lookup(dataId, true) !== void 0;\n    };\n    EntityStore.prototype.get = function(dataId, fieldName) {\n        this.group.depend(dataId, fieldName);\n        if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.data, dataId)) {\n            var storeObject = this.data[dataId];\n            if (storeObject && _helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(storeObject, fieldName)) {\n                return storeObject[fieldName];\n            }\n        }\n        if (fieldName === \"__typename\" && _helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n            return this.policies.rootTypenamesById[dataId];\n        }\n        if (this instanceof Layer) {\n            return this.parent.get(dataId, fieldName);\n        }\n    };\n    EntityStore.prototype.lookup = function(dataId, dependOnExistence) {\n        // The has method (above) calls lookup with dependOnExistence = true, so\n        // that it can later be invalidated when we add or remove a StoreObject for\n        // this dataId. Any consumer who cares about the contents of the StoreObject\n        // should not rely on this dependency, since the contents could change\n        // without the object being added or removed.\n        if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n        if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.data, dataId)) {\n            return this.data[dataId];\n        }\n        if (this instanceof Layer) {\n            return this.parent.lookup(dataId, dependOnExistence);\n        }\n        if (this.policies.rootTypenamesById[dataId]) {\n            return Object.create(null);\n        }\n    };\n    EntityStore.prototype.merge = function(older, newer) {\n        var _this = this;\n        var dataId;\n        // Convert unexpected references to ID strings.\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(older)) older = older.__ref;\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(newer)) newer = newer.__ref;\n        var existing = typeof older === \"string\" ? this.lookup(dataId = older) : older;\n        var incoming = typeof newer === \"string\" ? this.lookup(dataId = newer) : newer;\n        // If newer was a string ID, but that ID was not defined in this store,\n        // then there are no fields to be merged, so we're done.\n        if (!incoming) return;\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof dataId === \"string\", 1);\n        var merged = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.DeepMerger(storeObjectReconciler).merge(existing, incoming);\n        // Even if merged === existing, existing may have come from a lower\n        // layer, so we always need to set this.data[dataId] on this level.\n        this.data[dataId] = merged;\n        if (merged !== existing) {\n            delete this.refs[dataId];\n            if (this.group.caching) {\n                var fieldsToDirty_1 = Object.create(null);\n                // If we added a new StoreObject where there was previously none, dirty\n                // anything that depended on the existence of this dataId, such as the\n                // EntityStore#has method.\n                if (!existing) fieldsToDirty_1.__exists = 1;\n                // Now invalidate dependents who called getFieldValue for any fields\n                // that are changing as a result of this merge.\n                Object.keys(incoming).forEach(function(storeFieldName) {\n                    if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n                        // Always dirty the full storeFieldName, which may include\n                        // serialized arguments following the fieldName prefix.\n                        fieldsToDirty_1[storeFieldName] = 1;\n                        // Also dirty fieldNameFromStoreName(storeFieldName) if it's\n                        // different from storeFieldName and this field does not have\n                        // keyArgs configured, because that means the cache can't make\n                        // any assumptions about how field values with the same field\n                        // name but different arguments might be interrelated, so it\n                        // must err on the side of invalidating all field values that\n                        // share the same short fieldName, regardless of arguments.\n                        var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_7__.fieldNameFromStoreName)(storeFieldName);\n                        if (fieldName !== storeFieldName && !_this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n                            fieldsToDirty_1[fieldName] = 1;\n                        }\n                        // If merged[storeFieldName] has become undefined, and this is the\n                        // Root layer, actually delete the property from the merged object,\n                        // which is guaranteed to have been created fresh in this method.\n                        if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {\n                            delete merged[storeFieldName];\n                        }\n                    }\n                });\n                if (fieldsToDirty_1.__typename && !(existing && existing.__typename) && // Since we return default root __typename strings\n                // automatically from store.get, we don't need to dirty the\n                // ROOT_QUERY.__typename field if merged.__typename is equal\n                // to the default string (usually \"Query\").\n                this.policies.rootTypenamesById[dataId] === merged.__typename) {\n                    delete fieldsToDirty_1.__typename;\n                }\n                Object.keys(fieldsToDirty_1).forEach(function(fieldName) {\n                    return _this.group.dirty(dataId, fieldName);\n                });\n            }\n        }\n    };\n    EntityStore.prototype.modify = function(dataId, fields) {\n        var _this = this;\n        var storeObject = this.lookup(dataId);\n        if (storeObject) {\n            var changedFields_1 = Object.create(null);\n            var needToMerge_1 = false;\n            var allDeleted_1 = true;\n            var sharedDetails_1 = {\n                DELETE: DELETE,\n                INVALIDATE: INVALIDATE,\n                isReference: _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference,\n                toReference: this.toReference,\n                canRead: this.canRead,\n                readField: function(fieldNameOrOptions, from) {\n                    return _this.policies.readField(typeof fieldNameOrOptions === \"string\" ? {\n                        fieldName: fieldNameOrOptions,\n                        from: from || (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.makeReference)(dataId)\n                    } : fieldNameOrOptions, {\n                        store: _this\n                    });\n                }\n            };\n            Object.keys(storeObject).forEach(function(storeFieldName) {\n                var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_7__.fieldNameFromStoreName)(storeFieldName);\n                var fieldValue = storeObject[storeFieldName];\n                if (fieldValue === void 0) return;\n                var modify = typeof fields === \"function\" ? fields : fields[storeFieldName] || fields[fieldName];\n                if (modify) {\n                    var newValue = modify === delModifier ? DELETE : modify((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.maybeDeepFreeze)(fieldValue), (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, sharedDetails_1), {\n                        fieldName: fieldName,\n                        storeFieldName: storeFieldName,\n                        storage: _this.getStorage(dataId, storeFieldName)\n                    }));\n                    if (newValue === INVALIDATE) {\n                        _this.group.dirty(dataId, storeFieldName);\n                    } else {\n                        if (newValue === DELETE) newValue = void 0;\n                        if (newValue !== fieldValue) {\n                            changedFields_1[storeFieldName] = newValue;\n                            needToMerge_1 = true;\n                            fieldValue = newValue;\n                            if (globalThis.__DEV__ !== false) {\n                                var checkReference = function(ref) {\n                                    if (_this.lookup(ref.__ref) === undefined) {\n                                        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(2, ref);\n                                        return true;\n                                    }\n                                };\n                                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(newValue)) {\n                                    checkReference(newValue);\n                                } else if (Array.isArray(newValue)) {\n                                    // Warn about writing \"mixed\" arrays of Reference and non-Reference objects\n                                    var seenReference = false;\n                                    var someNonReference = void 0;\n                                    for(var _i = 0, newValue_1 = newValue; _i < newValue_1.length; _i++){\n                                        var value = newValue_1[_i];\n                                        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(value)) {\n                                            seenReference = true;\n                                            if (checkReference(value)) break;\n                                        } else {\n                                            // Do not warn on primitive values, since those could never be represented\n                                            // by a reference. This is a valid (albeit uncommon) use case.\n                                            if (typeof value === \"object\" && !!value) {\n                                                var id = _this.policies.identify(value)[0];\n                                                // check if object could even be referenced, otherwise we are not interested in it for this warning\n                                                if (id) {\n                                                    someNonReference = value;\n                                                }\n                                            }\n                                        }\n                                        if (seenReference && someNonReference !== undefined) {\n                                            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(3, someNonReference);\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (fieldValue !== void 0) {\n                    allDeleted_1 = false;\n                }\n            });\n            if (needToMerge_1) {\n                this.merge(dataId, changedFields_1);\n                if (allDeleted_1) {\n                    if (this instanceof Layer) {\n                        this.data[dataId] = void 0;\n                    } else {\n                        delete this.data[dataId];\n                    }\n                    this.group.dirty(dataId, \"__exists\");\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n    // If called with only one argument, removes the entire entity\n    // identified by dataId. If called with a fieldName as well, removes all\n    // fields of that entity whose names match fieldName according to the\n    // fieldNameFromStoreName helper function. If called with a fieldName\n    // and variables, removes all fields of that entity whose names match fieldName\n    // and whose arguments when cached exactly match the variables passed.\n    EntityStore.prototype.delete = function(dataId, fieldName, args) {\n        var _a;\n        var storeObject = this.lookup(dataId);\n        if (storeObject) {\n            var typename = this.getFieldValue(storeObject, \"__typename\");\n            var storeFieldName = fieldName && args ? this.policies.getStoreFieldName({\n                typename: typename,\n                fieldName: fieldName,\n                args: args\n            }) : fieldName;\n            return this.modify(dataId, storeFieldName ? (_a = {}, _a[storeFieldName] = delModifier, _a) : delModifier);\n        }\n        return false;\n    };\n    EntityStore.prototype.evict = function(options, limit) {\n        var evicted = false;\n        if (options.id) {\n            if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.data, options.id)) {\n                evicted = this.delete(options.id, options.fieldName, options.args);\n            }\n            if (this instanceof Layer && this !== limit) {\n                evicted = this.parent.evict(options, limit) || evicted;\n            }\n            // Always invalidate the field to trigger rereading of watched\n            // queries, even if no cache data was modified by the eviction,\n            // because queries may depend on computed fields with custom read\n            // functions, whose values are not stored in the EntityStore.\n            if (options.fieldName || evicted) {\n                this.group.dirty(options.id, options.fieldName || \"__exists\");\n            }\n        }\n        return evicted;\n    };\n    EntityStore.prototype.clear = function() {\n        this.replace(null);\n    };\n    EntityStore.prototype.extract = function() {\n        var _this = this;\n        var obj = this.toObject();\n        var extraRootIds = [];\n        this.getRootIdSet().forEach(function(id) {\n            if (!_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(_this.policies.rootTypenamesById, id)) {\n                extraRootIds.push(id);\n            }\n        });\n        if (extraRootIds.length) {\n            obj.__META = {\n                extraRootIds: extraRootIds.sort()\n            };\n        }\n        return obj;\n    };\n    EntityStore.prototype.replace = function(newData) {\n        var _this = this;\n        Object.keys(this.data).forEach(function(dataId) {\n            if (!(newData && _helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(newData, dataId))) {\n                _this.delete(dataId);\n            }\n        });\n        if (newData) {\n            var __META = newData.__META, rest_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__rest)(newData, [\n                \"__META\"\n            ]);\n            Object.keys(rest_1).forEach(function(dataId) {\n                _this.merge(dataId, rest_1[dataId]);\n            });\n            if (__META) {\n                __META.extraRootIds.forEach(this.retain, this);\n            }\n        }\n    };\n    EntityStore.prototype.retain = function(rootId) {\n        return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n    };\n    EntityStore.prototype.release = function(rootId) {\n        if (this.rootIds[rootId] > 0) {\n            var count = --this.rootIds[rootId];\n            if (!count) delete this.rootIds[rootId];\n            return count;\n        }\n        return 0;\n    };\n    // Return a Set<string> of all the ID strings that have been retained by\n    // this layer/root *and* any layers/roots beneath it.\n    EntityStore.prototype.getRootIdSet = function(ids) {\n        if (ids === void 0) {\n            ids = new Set();\n        }\n        Object.keys(this.rootIds).forEach(ids.add, ids);\n        if (this instanceof Layer) {\n            this.parent.getRootIdSet(ids);\n        } else {\n            // Official singleton IDs like ROOT_QUERY and ROOT_MUTATION are\n            // always considered roots for garbage collection, regardless of\n            // their retainment counts in this.rootIds.\n            Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n        }\n        return ids;\n    };\n    // The goal of garbage collection is to remove IDs from the Root layer of the\n    // store that are no longer reachable starting from any IDs that have been\n    // explicitly retained (see retain and release, above). Returns an array of\n    // dataId strings that were removed from the store.\n    EntityStore.prototype.gc = function() {\n        var _this = this;\n        var ids = this.getRootIdSet();\n        var snapshot = this.toObject();\n        ids.forEach(function(id) {\n            if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(snapshot, id)) {\n                // Because we are iterating over an ECMAScript Set, the IDs we add here\n                // will be visited in later iterations of the forEach loop only if they\n                // were not previously contained by the Set.\n                Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);\n                // By removing IDs from the snapshot object here, we protect them from\n                // getting removed from the root store layer below.\n                delete snapshot[id];\n            }\n        });\n        var idsToRemove = Object.keys(snapshot);\n        if (idsToRemove.length) {\n            var root_1 = this;\n            while(root_1 instanceof Layer)root_1 = root_1.parent;\n            idsToRemove.forEach(function(id) {\n                return root_1.delete(id);\n            });\n        }\n        return idsToRemove;\n    };\n    EntityStore.prototype.findChildRefIds = function(dataId) {\n        if (!_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.refs, dataId)) {\n            var found_1 = this.refs[dataId] = Object.create(null);\n            var root = this.data[dataId];\n            if (!root) return found_1;\n            var workSet_1 = new Set([\n                root\n            ]);\n            // Within the store, only arrays and objects can contain child entity\n            // references, so we can prune the traversal using this predicate:\n            workSet_1.forEach(function(obj) {\n                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(obj)) {\n                    found_1[obj.__ref] = true;\n                // In rare cases, a { __ref } Reference object may have other fields.\n                // This often indicates a mismerging of References with StoreObjects,\n                // but garbage collection should not be fooled by a stray __ref\n                // property in a StoreObject (ignoring all the other fields just\n                // because the StoreObject looks like a Reference). To avoid this\n                // premature termination of findChildRefIds recursion, we fall through\n                // to the code below, which will handle any other properties of obj.\n                }\n                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isNonNullObject)(obj)) {\n                    Object.keys(obj).forEach(function(key) {\n                        var child = obj[key];\n                        // No need to add primitive values to the workSet, since they cannot\n                        // contain reference objects.\n                        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isNonNullObject)(child)) {\n                            workSet_1.add(child);\n                        }\n                    });\n                }\n            });\n        }\n        return this.refs[dataId];\n    };\n    EntityStore.prototype.makeCacheKey = function() {\n        return this.group.keyMaker.lookupArray(arguments);\n    };\n    return EntityStore;\n}();\n\n// A single CacheGroup represents a set of one or more EntityStore objects,\n// typically the Root store in a CacheGroup by itself, and all active Layer\n// stores in a group together. A single EntityStore object belongs to only\n// one CacheGroup, store.group. The CacheGroup is responsible for tracking\n// dependencies, so store.group is helpful for generating unique keys for\n// cached results that need to be invalidated when/if those dependencies\n// change. If we used the EntityStore objects themselves as cache keys (that\n// is, store rather than store.group), the cache would become unnecessarily\n// fragmented by all the different Layer objects. Instead, the CacheGroup\n// approach allows all optimistic Layer objects in the same linked list to\n// belong to one CacheGroup, with the non-optimistic Root object belonging\n// to another CacheGroup, allowing resultCaching dependencies to be tracked\n// separately for optimistic and non-optimistic entity data.\nvar CacheGroup = /** @class */ function() {\n    function CacheGroup(caching, parent) {\n        if (parent === void 0) {\n            parent = null;\n        }\n        this.caching = caching;\n        this.parent = parent;\n        this.d = null;\n        this.resetCaching();\n    }\n    CacheGroup.prototype.resetCaching = function() {\n        this.d = this.caching ? (0,optimism__WEBPACK_IMPORTED_MODULE_1__.dep)() : null;\n        this.keyMaker = new _wry_trie__WEBPACK_IMPORTED_MODULE_3__.Trie(_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.canUseWeakMap);\n    };\n    CacheGroup.prototype.depend = function(dataId, storeFieldName) {\n        if (this.d) {\n            this.d(makeDepKey(dataId, storeFieldName));\n            var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_7__.fieldNameFromStoreName)(storeFieldName);\n            if (fieldName !== storeFieldName) {\n                // Fields with arguments that contribute extra identifying\n                // information to the fieldName (thus forming the storeFieldName)\n                // depend not only on the full storeFieldName but also on the\n                // short fieldName, so the field can be invalidated using either\n                // level of specificity.\n                this.d(makeDepKey(dataId, fieldName));\n            }\n            if (this.parent) {\n                this.parent.depend(dataId, storeFieldName);\n            }\n        }\n    };\n    CacheGroup.prototype.dirty = function(dataId, storeFieldName) {\n        if (this.d) {\n            this.d.dirty(makeDepKey(dataId, storeFieldName), // When storeFieldName === \"__exists\", that means the entity identified\n            // by dataId has either disappeared from the cache or was newly added,\n            // so the result caching system would do well to \"forget everything it\n            // knows\" about that object. To achieve that kind of invalidation, we\n            // not only dirty the associated result cache entry, but also remove it\n            // completely from the dependency graph. For the optimism implementation\n            // details, see https://github.com/benjamn/optimism/pull/195.\n            storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\");\n        }\n    };\n    return CacheGroup;\n}();\nfunction makeDepKey(dataId, storeFieldName) {\n    // Since field names cannot have '#' characters in them, this method\n    // of joining the field name and the ID should be unambiguous, and much\n    // cheaper than JSON.stringify([dataId, fieldName]).\n    return storeFieldName + \"#\" + dataId;\n}\nfunction maybeDependOnExistenceOfEntity(store, entityId) {\n    if (supportsResultCaching(store)) {\n        // We use this pseudo-field __exists elsewhere in the EntityStore code to\n        // represent changes in the existence of the entity object identified by\n        // entityId. This dependency gets reliably dirtied whenever an object with\n        // this ID is deleted (or newly created) within this group, so any result\n        // cache entries (for example, StoreReader#executeSelectionSet results) that\n        // depend on __exists for this entityId will get dirtied as well, leading to\n        // the eventual recomputation (instead of reuse) of those result objects the\n        // next time someone reads them from the cache.\n        store.group.depend(entityId, \"__exists\");\n    }\n}\n(function(EntityStore) {\n    // Refer to this class as EntityStore.Root outside this namespace.\n    var Root = /** @class */ function(_super) {\n        (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__extends)(Root, _super);\n        function Root(_a) {\n            var policies = _a.policies, _b = _a.resultCaching, resultCaching = _b === void 0 ? true : _b, seed = _a.seed;\n            var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;\n            _this.stump = new Stump(_this);\n            _this.storageTrie = new _wry_trie__WEBPACK_IMPORTED_MODULE_3__.Trie(_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.canUseWeakMap);\n            if (seed) _this.replace(seed);\n            return _this;\n        }\n        Root.prototype.addLayer = function(layerId, replay) {\n            // Adding an optimistic Layer on top of the Root actually adds the Layer\n            // on top of the Stump, so the Stump always comes between the Root and\n            // any Layer objects that we've added.\n            return this.stump.addLayer(layerId, replay);\n        };\n        Root.prototype.removeLayer = function() {\n            // Never remove the root layer.\n            return this;\n        };\n        Root.prototype.getStorage = function() {\n            return this.storageTrie.lookupArray(arguments);\n        };\n        return Root;\n    }(EntityStore);\n    EntityStore.Root = Root;\n})(EntityStore || (EntityStore = {}));\n// Not exported, since all Layer instances are created by the addLayer method\n// of the EntityStore.Root class.\nvar Layer = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__extends)(Layer, _super);\n    function Layer(id, parent, replay, group) {\n        var _this = _super.call(this, parent.policies, group) || this;\n        _this.id = id;\n        _this.parent = parent;\n        _this.replay = replay;\n        _this.group = group;\n        replay(_this);\n        return _this;\n    }\n    Layer.prototype.addLayer = function(layerId, replay) {\n        return new Layer(layerId, this, replay, this.group);\n    };\n    Layer.prototype.removeLayer = function(layerId) {\n        var _this = this;\n        // Remove all instances of the given id, not just the first one.\n        var parent = this.parent.removeLayer(layerId);\n        if (layerId === this.id) {\n            if (this.group.caching) {\n                // Dirty every ID we're removing. Technically we might be able to avoid\n                // dirtying fields that have values in higher layers, but we don't have\n                // easy access to higher layers here, and we're about to recreate those\n                // layers anyway (see parent.addLayer below).\n                Object.keys(this.data).forEach(function(dataId) {\n                    var ownStoreObject = _this.data[dataId];\n                    var parentStoreObject = parent[\"lookup\"](dataId);\n                    if (!parentStoreObject) {\n                        // The StoreObject identified by dataId was defined in this layer\n                        // but will be undefined in the parent layer, so we can delete the\n                        // whole entity using this.delete(dataId). Since we're about to\n                        // throw this layer away, the only goal of this deletion is to dirty\n                        // the removed fields.\n                        _this.delete(dataId);\n                    } else if (!ownStoreObject) {\n                        // This layer had an entry for dataId but it was undefined, which\n                        // means the entity was deleted in this layer, and it's about to\n                        // become undeleted when we remove this layer, so we need to dirty\n                        // all fields that are about to be reexposed.\n                        _this.group.dirty(dataId, \"__exists\");\n                        Object.keys(parentStoreObject).forEach(function(storeFieldName) {\n                            _this.group.dirty(dataId, storeFieldName);\n                        });\n                    } else if (ownStoreObject !== parentStoreObject) {\n                        // If ownStoreObject is not exactly the same as parentStoreObject,\n                        // dirty any fields whose values will change as a result of this\n                        // removal.\n                        Object.keys(ownStoreObject).forEach(function(storeFieldName) {\n                            if (!(0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(ownStoreObject[storeFieldName], parentStoreObject[storeFieldName])) {\n                                _this.group.dirty(dataId, storeFieldName);\n                            }\n                        });\n                    }\n                });\n            }\n            return parent;\n        }\n        // No changes are necessary if the parent chain remains identical.\n        if (parent === this.parent) return this;\n        // Recreate this layer on top of the new parent.\n        return parent.addLayer(this.id, this.replay);\n    };\n    Layer.prototype.toObject = function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, this.parent.toObject()), this.data);\n    };\n    Layer.prototype.findChildRefIds = function(dataId) {\n        var fromParent = this.parent.findChildRefIds(dataId);\n        return _helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.data, dataId) ? (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;\n    };\n    Layer.prototype.getStorage = function() {\n        var p = this.parent;\n        while(p.parent)p = p.parent;\n        return p.getStorage.apply(p, // @ts-expect-error\n        arguments);\n    };\n    return Layer;\n}(EntityStore);\n// Represents a Layer permanently installed just above the Root, which allows\n// reading optimistically (and registering optimistic dependencies) even when\n// no optimistic layers are currently active. The stump.group CacheGroup object\n// is shared by any/all Layer objects added on top of the Stump.\nvar Stump = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__extends)(Stump, _super);\n    function Stump(root) {\n        return _super.call(this, \"EntityStore.Stump\", root, function() {}, new CacheGroup(root.group.caching, root.group)) || this;\n    }\n    Stump.prototype.removeLayer = function() {\n        // Never remove the Stump layer.\n        return this;\n    };\n    Stump.prototype.merge = function(older, newer) {\n        // We never want to write any data into the Stump, so we forward any merge\n        // calls to the Root instead. Another option here would be to throw an\n        // exception, but the toReference(object, true) function can sometimes\n        // trigger Stump writes (which used to be Root writes, before the Stump\n        // concept was introduced).\n        return this.parent.merge(older, newer);\n    };\n    return Stump;\n}(Layer);\nfunction storeObjectReconciler(existingObject, incomingObject, property) {\n    var existingValue = existingObject[property];\n    var incomingValue = incomingObject[property];\n    // Wherever there is a key collision, prefer the incoming value, unless\n    // it is deeply equal to the existing value. It's worth checking deep\n    // equality here (even though blindly returning incoming would be\n    // logically correct) because preserving the referential identity of\n    // existing data can prevent needless rereading and rerendering.\n    return (0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(existingValue, incomingValue) ? existingValue : incomingValue;\n}\nfunction supportsResultCaching(store) {\n    // When result caching is disabled, store.depend will be null.\n    return !!(store instanceof EntityStore && store.group.caching);\n} //# sourceMappingURL=entityStore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/cache/inmemory/entityStore.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/cache/inmemory/helpers.js":
/*!***************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/helpers.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TypeOrFieldNameRegExp: () => (/* binding */ TypeOrFieldNameRegExp),\n/* harmony export */   defaultDataIdFromObject: () => (/* binding */ defaultDataIdFromObject),\n/* harmony export */   extractFragmentContext: () => (/* binding */ extractFragmentContext),\n/* harmony export */   fieldNameFromStoreName: () => (/* binding */ fieldNameFromStoreName),\n/* harmony export */   getTypenameFromStoreObject: () => (/* binding */ getTypenameFromStoreObject),\n/* harmony export */   hasOwn: () => (/* binding */ hasOwn),\n/* harmony export */   isArray: () => (/* reexport safe */ _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.isArray),\n/* harmony export */   isNullish: () => (/* binding */ isNullish),\n/* harmony export */   makeProcessedFieldsMerger: () => (/* binding */ makeProcessedFieldsMerger),\n/* harmony export */   normalizeConfig: () => (/* binding */ normalizeConfig),\n/* harmony export */   selectionSetMatchesResult: () => (/* binding */ selectionSetMatchesResult),\n/* harmony export */   shouldCanonizeResults: () => (/* binding */ shouldCanonizeResults),\n/* harmony export */   storeValueIsStoreObject: () => (/* binding */ storeValueIsStoreObject)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/compact.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nfunction isNullish(value) {\n    return value === null || value === void 0;\n}\n\nfunction defaultDataIdFromObject(_a, context) {\n    var __typename = _a.__typename, id = _a.id, _id = _a._id;\n    if (typeof __typename === \"string\") {\n        if (context) {\n            context.keyObject = !isNullish(id) ? {\n                id: id\n            } : !isNullish(_id) ? {\n                _id: _id\n            } : void 0;\n        }\n        // If there is no object.id, fall back to object._id.\n        if (isNullish(id) && !isNullish(_id)) {\n            id = _id;\n        }\n        if (!isNullish(id)) {\n            return \"\".concat(__typename, \":\").concat(typeof id === \"number\" || typeof id === \"string\" ? id : JSON.stringify(id));\n        }\n    }\n}\nvar defaultConfig = {\n    dataIdFromObject: defaultDataIdFromObject,\n    addTypename: true,\n    resultCaching: true,\n    // Thanks to the shouldCanonizeResults helper, this should be the only line\n    // you have to change to reenable canonization by default in the future.\n    canonizeResults: false\n};\nfunction normalizeConfig(config) {\n    return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.compact)(defaultConfig, config);\n}\nfunction shouldCanonizeResults(config) {\n    var value = config.canonizeResults;\n    return value === void 0 ? defaultConfig.canonizeResults : value;\n}\nfunction getTypenameFromStoreObject(store, objectOrReference) {\n    return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isReference)(objectOrReference) ? store.get(objectOrReference.__ref, \"__typename\") : objectOrReference && objectOrReference.__typename;\n}\nvar TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;\nfunction fieldNameFromStoreName(storeFieldName) {\n    var match = storeFieldName.match(TypeOrFieldNameRegExp);\n    return match ? match[0] : storeFieldName;\n}\nfunction selectionSetMatchesResult(selectionSet, result, variables) {\n    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.isNonNullObject)(result)) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(result) ? result.every(function(item) {\n            return selectionSetMatchesResult(selectionSet, item, variables);\n        }) : selectionSet.selections.every(function(field) {\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isField)(field) && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.shouldInclude)(field, variables)) {\n                var key = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.resultKeyNameFromField)(field);\n                return hasOwn.call(result, key) && (!field.selectionSet || selectionSetMatchesResult(field.selectionSet, result[key], variables));\n            }\n            // If the selection has been skipped with @skip(true) or\n            // @include(false), it should not count against the matching. If\n            // the selection is not a field, it must be a fragment (inline or\n            // named). We will determine if selectionSetMatchesResult for that\n            // fragment when we get to it, so for now we return true.\n            return true;\n        });\n    }\n    return false;\n}\nfunction storeValueIsStoreObject(value) {\n    return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.isNonNullObject)(value) && !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isReference)(value) && !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(value);\n}\nfunction makeProcessedFieldsMerger() {\n    return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.DeepMerger();\n}\nfunction extractFragmentContext(document, fragments) {\n    // FragmentMap consisting only of fragments defined directly in document, not\n    // including other fragments registered in the FragmentRegistry.\n    var fragmentMap = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.createFragmentMap)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.getFragmentDefinitions)(document));\n    return {\n        fragmentMap: fragmentMap,\n        lookupFragment: function(name) {\n            var def = fragmentMap[name];\n            if (!def && fragments) {\n                def = fragments.lookup(name);\n            }\n            return def || null;\n        }\n    };\n} //# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/cache/inmemory/helpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/cache/inmemory/inMemoryCache.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/inMemoryCache.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InMemoryCache: () => (/* binding */ InMemoryCache)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! optimism */ \"(rsc)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wry/equality */ \"(rsc)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _core_cache_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../core/cache.js */ \"(rsc)/./node_modules/@apollo/client/cache/core/cache.js\");\n/* harmony import */ var _core_types_common_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../core/types/common.js */ \"(rsc)/./node_modules/@apollo/client/cache/core/types/common.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/DocumentTransform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/print.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _readFromStore_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./readFromStore.js */ \"(rsc)/./node_modules/@apollo/client/cache/inmemory/readFromStore.js\");\n/* harmony import */ var _writeToStore_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./writeToStore.js */ \"(rsc)/./node_modules/@apollo/client/cache/inmemory/writeToStore.js\");\n/* harmony import */ var _entityStore_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./entityStore.js */ \"(rsc)/./node_modules/@apollo/client/cache/inmemory/entityStore.js\");\n/* harmony import */ var _reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reactiveVars.js */ \"(rsc)/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js\");\n/* harmony import */ var _policies_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./policies.js */ \"(rsc)/./node_modules/@apollo/client/cache/inmemory/policies.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n/* harmony import */ var _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../utilities/caching/getMemoryInternals.js */ \"(rsc)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n\n\n// Make builtins like Map and Set safe to use with non-extensible objects.\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar InMemoryCache = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__extends)(InMemoryCache, _super);\n    function InMemoryCache(config) {\n        if (config === void 0) {\n            config = {};\n        }\n        var _this = _super.call(this) || this;\n        _this.watches = new Set();\n        _this.addTypenameTransform = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.DocumentTransform(_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.addTypenameToDocument);\n        // Override the default value, since InMemoryCache result objects are frozen\n        // in development and expected to remain logically immutable in production.\n        _this.assumeImmutableResults = true;\n        _this.makeVar = _reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__.makeVar;\n        _this.txCount = 0;\n        _this.config = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_7__.normalizeConfig)(config);\n        _this.addTypename = !!_this.config.addTypename;\n        _this.policies = new _policies_js__WEBPACK_IMPORTED_MODULE_8__.Policies({\n            cache: _this,\n            dataIdFromObject: _this.config.dataIdFromObject,\n            possibleTypes: _this.config.possibleTypes,\n            typePolicies: _this.config.typePolicies\n        });\n        _this.init();\n        return _this;\n    }\n    InMemoryCache.prototype.init = function() {\n        // Passing { resultCaching: false } in the InMemoryCache constructor options\n        // will completely disable dependency tracking, which will improve memory\n        // usage but worsen the performance of repeated reads.\n        var rootStore = this.data = new _entityStore_js__WEBPACK_IMPORTED_MODULE_9__.EntityStore.Root({\n            policies: this.policies,\n            resultCaching: this.config.resultCaching\n        });\n        // When no optimistic writes are currently active, cache.optimisticData ===\n        // cache.data, so there are no additional layers on top of the actual data.\n        // When an optimistic update happens, this.optimisticData will become a\n        // linked list of EntityStore Layer objects that terminates with the\n        // original this.data cache object.\n        this.optimisticData = rootStore.stump;\n        this.resetResultCache();\n    };\n    InMemoryCache.prototype.resetResultCache = function(resetResultIdentities) {\n        var _this = this;\n        var previousReader = this.storeReader;\n        var fragments = this.config.fragments;\n        // The StoreWriter is mostly stateless and so doesn't really need to be\n        // reset, but it does need to have its writer.storeReader reference updated,\n        // so it's simpler to update this.storeWriter as well.\n        this.storeWriter = new _writeToStore_js__WEBPACK_IMPORTED_MODULE_10__.StoreWriter(this, this.storeReader = new _readFromStore_js__WEBPACK_IMPORTED_MODULE_11__.StoreReader({\n            cache: this,\n            addTypename: this.addTypename,\n            resultCacheMaxSize: this.config.resultCacheMaxSize,\n            canonizeResults: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_7__.shouldCanonizeResults)(this.config),\n            canon: resetResultIdentities ? void 0 : previousReader && previousReader.canon,\n            fragments: fragments\n        }), fragments);\n        this.maybeBroadcastWatch = (0,optimism__WEBPACK_IMPORTED_MODULE_1__.wrap)(function(c, options) {\n            return _this.broadcastWatch(c, options);\n        }, {\n            max: this.config.resultCacheMaxSize || _utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.cacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] || 5000 /* defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] */ ,\n            makeCacheKey: function(c) {\n                // Return a cache key (thus enabling result caching) only if we're\n                // currently using a data store that can track cache dependencies.\n                var store = c.optimistic ? _this.optimisticData : _this.data;\n                if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_9__.supportsResultCaching)(store)) {\n                    var optimistic = c.optimistic, id = c.id, variables = c.variables;\n                    return store.makeCacheKey(c.query, // Different watches can have the same query, optimistic\n                    // status, rootId, and variables, but if their callbacks are\n                    // different, the (identical) result needs to be delivered to\n                    // each distinct callback. The easiest way to achieve that\n                    // separation is to include c.callback in the cache key for\n                    // maybeBroadcastWatch calls. See issue #5733.\n                    c.callback, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.canonicalStringify)({\n                        optimistic: optimistic,\n                        id: id,\n                        variables: variables\n                    }));\n                }\n            }\n        });\n        // Since we have thrown away all the cached functions that depend on the\n        // CacheGroup dependencies maintained by EntityStore, we should also reset\n        // all CacheGroup dependency information.\n        new Set([\n            this.data.group,\n            this.optimisticData.group\n        ]).forEach(function(group) {\n            return group.resetCaching();\n        });\n    };\n    InMemoryCache.prototype.restore = function(data) {\n        this.init();\n        // Since calling this.init() discards/replaces the entire StoreReader, along\n        // with the result caches it maintains, this.data.replace(data) won't have\n        // to bother deleting the old data.\n        if (data) this.data.replace(data);\n        return this;\n    };\n    InMemoryCache.prototype.extract = function(optimistic) {\n        if (optimistic === void 0) {\n            optimistic = false;\n        }\n        return (optimistic ? this.optimisticData : this.data).extract();\n    };\n    InMemoryCache.prototype.read = function(options) {\n        var // Since read returns data or null, without any additional metadata\n        // about whether/where there might have been missing fields, the\n        // default behavior cannot be returnPartialData = true (like it is\n        // for the diff method), since defaulting to true would violate the\n        // integrity of the T in the return type. However, partial data may\n        // be useful in some cases, so returnPartialData:true may be\n        // specified explicitly.\n        _a = options.returnPartialData, // Since read returns data or null, without any additional metadata\n        // about whether/where there might have been missing fields, the\n        // default behavior cannot be returnPartialData = true (like it is\n        // for the diff method), since defaulting to true would violate the\n        // integrity of the T in the return type. However, partial data may\n        // be useful in some cases, so returnPartialData:true may be\n        // specified explicitly.\n        returnPartialData = _a === void 0 ? false : _a;\n        try {\n            return this.storeReader.diffQueryAgainstStore((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n                store: options.optimistic ? this.optimisticData : this.data,\n                config: this.config,\n                returnPartialData: returnPartialData\n            })).result || null;\n        } catch (e) {\n            if (e instanceof _core_types_common_js__WEBPACK_IMPORTED_MODULE_14__.MissingFieldError) {\n                // Swallow MissingFieldError and return null, so callers do not need to\n                // worry about catching \"normal\" exceptions resulting from incomplete\n                // cache data. Unexpected errors will be re-thrown. If you need more\n                // information about which fields were missing, use cache.diff instead,\n                // and examine diffResult.missing.\n                return null;\n            }\n            throw e;\n        }\n    };\n    InMemoryCache.prototype.write = function(options) {\n        try {\n            ++this.txCount;\n            return this.storeWriter.writeToStore(this.data, options);\n        } finally{\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.modify = function(options) {\n        if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(options, \"id\") && !options.id) {\n            // To my knowledge, TypeScript does not currently provide a way to\n            // enforce that an optional property?:type must *not* be undefined\n            // when present. That ability would be useful here, because we want\n            // options.id to default to ROOT_QUERY only when no options.id was\n            // provided. If the caller attempts to pass options.id with a\n            // falsy/undefined value (perhaps because cache.identify failed), we\n            // should not assume the goal was to modify the ROOT_QUERY object.\n            // We could throw, but it seems natural to return false to indicate\n            // that nothing was modified.\n            return false;\n        }\n        var store = options.optimistic // Defaults to false.\n         ? this.optimisticData : this.data;\n        try {\n            ++this.txCount;\n            return store.modify(options.id || \"ROOT_QUERY\", options.fields);\n        } finally{\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.diff = function(options) {\n        return this.storeReader.diffQueryAgainstStore((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n            store: options.optimistic ? this.optimisticData : this.data,\n            rootId: options.id || \"ROOT_QUERY\",\n            config: this.config\n        }));\n    };\n    InMemoryCache.prototype.watch = function(watch) {\n        var _this = this;\n        if (!this.watches.size) {\n            // In case we previously called forgetCache(this) because\n            // this.watches became empty (see below), reattach this cache to any\n            // reactive variables on which it previously depended. It might seem\n            // paradoxical that we're able to recall something we supposedly\n            // forgot, but the point of calling forgetCache(this) is to silence\n            // useless broadcasts while this.watches is empty, and to allow the\n            // cache to be garbage collected. If, however, we manage to call\n            // recallCache(this) here, this cache object must not have been\n            // garbage collected yet, and should resume receiving updates from\n            // reactive variables, now that it has a watcher to notify.\n            (0,_reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__.recallCache)(this);\n        }\n        this.watches.add(watch);\n        if (watch.immediate) {\n            this.maybeBroadcastWatch(watch);\n        }\n        return function() {\n            // Once we remove the last watch from this.watches, cache.broadcastWatches\n            // no longer does anything, so we preemptively tell the reactive variable\n            // system to exclude this cache from future broadcasts.\n            if (_this.watches.delete(watch) && !_this.watches.size) {\n                (0,_reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__.forgetCache)(_this);\n            }\n            // Remove this watch from the LRU cache managed by the\n            // maybeBroadcastWatch OptimisticWrapperFunction, to prevent memory\n            // leaks involving the closure of watch.callback.\n            _this.maybeBroadcastWatch.forget(watch);\n        };\n    };\n    InMemoryCache.prototype.gc = function(options) {\n        var _a;\n        _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.canonicalStringify.reset();\n        _utilities_index_js__WEBPACK_IMPORTED_MODULE_15__.print.reset();\n        this.addTypenameTransform.resetCache();\n        (_a = this.config.fragments) === null || _a === void 0 ? void 0 : _a.resetCaches();\n        var ids = this.optimisticData.gc();\n        if (options && !this.txCount) {\n            if (options.resetResultCache) {\n                this.resetResultCache(options.resetResultIdentities);\n            } else if (options.resetResultIdentities) {\n                this.storeReader.resetCanon();\n            }\n        }\n        return ids;\n    };\n    // Call this method to ensure the given root ID remains in the cache after\n    // garbage collection, along with its transitive child entities. Note that\n    // the cache automatically retains all directly written entities. By default,\n    // the retainment persists after optimistic updates are removed. Pass true\n    // for the optimistic argument if you would prefer for the retainment to be\n    // discarded when the top-most optimistic layer is removed. Returns the\n    // resulting (non-negative) retainment count.\n    InMemoryCache.prototype.retain = function(rootId, optimistic) {\n        return (optimistic ? this.optimisticData : this.data).retain(rootId);\n    };\n    // Call this method to undo the effect of the retain method, above. Once the\n    // retainment count falls to zero, the given ID will no longer be preserved\n    // during garbage collection, though it may still be preserved by other safe\n    // entities that refer to it. Returns the resulting (non-negative) retainment\n    // count, in case that's useful.\n    InMemoryCache.prototype.release = function(rootId, optimistic) {\n        return (optimistic ? this.optimisticData : this.data).release(rootId);\n    };\n    // Returns the canonical ID for a given StoreObject, obeying typePolicies\n    // and keyFields (and dataIdFromObject, if you still use that). At minimum,\n    // the object must contain a __typename and any primary key fields required\n    // to identify entities of that type. If you pass a query result object, be\n    // sure that none of the primary key fields have been renamed by aliasing.\n    // If you pass a Reference object, its __ref ID string will be returned.\n    InMemoryCache.prototype.identify = function(object) {\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_16__.isReference)(object)) return object.__ref;\n        try {\n            return this.policies.identify(object)[0];\n        } catch (e) {\n            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(e);\n        }\n    };\n    InMemoryCache.prototype.evict = function(options) {\n        if (!options.id) {\n            if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(options, \"id\")) {\n                // See comment in modify method about why we return false when\n                // options.id exists but is falsy/undefined.\n                return false;\n            }\n            options = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n                id: \"ROOT_QUERY\"\n            });\n        }\n        try {\n            // It's unlikely that the eviction will end up invoking any other\n            // cache update operations while it's running, but {in,de}crementing\n            // this.txCount still seems like a good idea, for uniformity with\n            // the other update methods.\n            ++this.txCount;\n            // Pass this.data as a limit on the depth of the eviction, so evictions\n            // during optimistic updates (when this.data is temporarily set equal to\n            // this.optimisticData) do not escape their optimistic Layer.\n            return this.optimisticData.evict(options, this.data);\n        } finally{\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.reset = function(options) {\n        var _this = this;\n        this.init();\n        _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.canonicalStringify.reset();\n        if (options && options.discardWatches) {\n            // Similar to what happens in the unsubscribe function returned by\n            // cache.watch, applied to all current watches.\n            this.watches.forEach(function(watch) {\n                return _this.maybeBroadcastWatch.forget(watch);\n            });\n            this.watches.clear();\n            (0,_reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__.forgetCache)(this);\n        } else {\n            // Calling this.init() above unblocks all maybeBroadcastWatch caching, so\n            // this.broadcastWatches() triggers a broadcast to every current watcher\n            // (letting them know their data is now missing). This default behavior is\n            // convenient because it means the watches do not have to be manually\n            // reestablished after resetting the cache. To prevent this broadcast and\n            // cancel all watches, pass true for options.discardWatches.\n            this.broadcastWatches();\n        }\n        return Promise.resolve();\n    };\n    InMemoryCache.prototype.removeOptimistic = function(idToRemove) {\n        var newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n        if (newOptimisticData !== this.optimisticData) {\n            this.optimisticData = newOptimisticData;\n            this.broadcastWatches();\n        }\n    };\n    InMemoryCache.prototype.batch = function(options) {\n        var _this = this;\n        var update = options.update, _a = options.optimistic, optimistic = _a === void 0 ? true : _a, removeOptimistic = options.removeOptimistic, onWatchUpdated = options.onWatchUpdated;\n        var updateResult;\n        var perform = function(layer) {\n            var _a = _this, data = _a.data, optimisticData = _a.optimisticData;\n            ++_this.txCount;\n            if (layer) {\n                _this.data = _this.optimisticData = layer;\n            }\n            try {\n                return updateResult = update(_this);\n            } finally{\n                --_this.txCount;\n                _this.data = data;\n                _this.optimisticData = optimisticData;\n            }\n        };\n        var alreadyDirty = new Set();\n        if (onWatchUpdated && !this.txCount) {\n            // If an options.onWatchUpdated callback is provided, we want to call it\n            // with only the Cache.WatchOptions objects affected by options.update,\n            // but there might be dirty watchers already waiting to be broadcast that\n            // have nothing to do with the update. To prevent including those watchers\n            // in the post-update broadcast, we perform this initial broadcast to\n            // collect the dirty watchers, so we can re-dirty them later, after the\n            // post-update broadcast, allowing them to receive their pending\n            // broadcasts the next time broadcastWatches is called, just as they would\n            // if we never called cache.batch.\n            this.broadcastWatches((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n                onWatchUpdated: function(watch) {\n                    alreadyDirty.add(watch);\n                    return false;\n                }\n            }));\n        }\n        if (typeof optimistic === \"string\") {\n            // Note that there can be multiple layers with the same optimistic ID.\n            // When removeOptimistic(id) is called for that id, all matching layers\n            // will be removed, and the remaining layers will be reapplied.\n            this.optimisticData = this.optimisticData.addLayer(optimistic, perform);\n        } else if (optimistic === false) {\n            // Ensure both this.data and this.optimisticData refer to the root\n            // (non-optimistic) layer of the cache during the update. Note that\n            // this.data could be a Layer if we are currently executing an optimistic\n            // update function, but otherwise will always be an EntityStore.Root\n            // instance.\n            perform(this.data);\n        } else {\n            // Otherwise, leave this.data and this.optimisticData unchanged and run\n            // the update with broadcast batching.\n            perform();\n        }\n        if (typeof removeOptimistic === \"string\") {\n            this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);\n        }\n        // Note: if this.txCount > 0, then alreadyDirty.size === 0, so this code\n        // takes the else branch and calls this.broadcastWatches(options), which\n        // does nothing when this.txCount > 0.\n        if (onWatchUpdated && alreadyDirty.size) {\n            this.broadcastWatches((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n                onWatchUpdated: function(watch, diff) {\n                    var result = onWatchUpdated.call(this, watch, diff);\n                    if (result !== false) {\n                        // Since onWatchUpdated did not return false, this diff is\n                        // about to be broadcast to watch.callback, so we don't need\n                        // to re-dirty it with the other alreadyDirty watches below.\n                        alreadyDirty.delete(watch);\n                    }\n                    return result;\n                }\n            }));\n            // Silently re-dirty any watches that were already dirty before the update\n            // was performed, and were not broadcast just now.\n            if (alreadyDirty.size) {\n                alreadyDirty.forEach(function(watch) {\n                    return _this.maybeBroadcastWatch.dirty(watch);\n                });\n            }\n        } else {\n            // If alreadyDirty is empty or we don't have an onWatchUpdated\n            // function, we don't need to go to the trouble of wrapping\n            // options.onWatchUpdated.\n            this.broadcastWatches(options);\n        }\n        return updateResult;\n    };\n    InMemoryCache.prototype.performTransaction = function(update, optimisticId) {\n        return this.batch({\n            update: update,\n            optimistic: optimisticId || optimisticId !== null\n        });\n    };\n    InMemoryCache.prototype.transformDocument = function(document) {\n        return this.addTypenameToDocument(this.addFragmentsToDocument(document));\n    };\n    InMemoryCache.prototype.broadcastWatches = function(options) {\n        var _this = this;\n        if (!this.txCount) {\n            this.watches.forEach(function(c) {\n                return _this.maybeBroadcastWatch(c, options);\n            });\n        }\n    };\n    InMemoryCache.prototype.addFragmentsToDocument = function(document) {\n        var fragments = this.config.fragments;\n        return fragments ? fragments.transform(document) : document;\n    };\n    InMemoryCache.prototype.addTypenameToDocument = function(document) {\n        if (this.addTypename) {\n            return this.addTypenameTransform.transformDocument(document);\n        }\n        return document;\n    };\n    // This method is wrapped by maybeBroadcastWatch, which is called by\n    // broadcastWatches, so that we compute and broadcast results only when\n    // the data that would be broadcast might have changed. It would be\n    // simpler to check for changes after recomputing a result but before\n    // broadcasting it, but this wrapping approach allows us to skip both\n    // the recomputation and the broadcast, in most cases.\n    InMemoryCache.prototype.broadcastWatch = function(c, options) {\n        var lastDiff = c.lastDiff;\n        // Both WatchOptions and DiffOptions extend ReadOptions, and DiffOptions\n        // currently requires no additional properties, so we can use c (a\n        // WatchOptions object) as DiffOptions, without having to allocate a new\n        // object, and without having to enumerate the relevant properties (query,\n        // variables, etc.) explicitly. There will be some additional properties\n        // (lastDiff, callback, etc.), but cache.diff ignores them.\n        var diff = this.diff(c);\n        if (options) {\n            if (c.optimistic && typeof options.optimistic === \"string\") {\n                diff.fromOptimisticTransaction = true;\n            }\n            if (options.onWatchUpdated && options.onWatchUpdated.call(this, c, diff, lastDiff) === false) {\n                // Returning false from the onWatchUpdated callback will prevent\n                // calling c.callback(diff) for this watcher.\n                return;\n            }\n        }\n        if (!lastDiff || !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(lastDiff.result, diff.result)) {\n            c.callback(c.lastDiff = diff, lastDiff);\n        }\n    };\n    return InMemoryCache;\n}(_core_cache_js__WEBPACK_IMPORTED_MODULE_17__.ApolloCache);\n\nif (globalThis.__DEV__ !== false) {\n    InMemoryCache.prototype.getMemoryInternals = _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_18__.getInMemoryCacheMemoryInternals;\n} //# sourceMappingURL=inMemoryCache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/cache/inmemory/inMemoryCache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/cache/inmemory/key-extractor.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/key-extractor.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   collectSpecifierPaths: () => (/* binding */ collectSpecifierPaths),\n/* harmony export */   extractKeyPath: () => (/* binding */ extractKeyPath),\n/* harmony export */   getSpecifierPaths: () => (/* binding */ getSpecifierPaths),\n/* harmony export */   keyArgsFnFromSpecifier: () => (/* binding */ keyArgsFnFromSpecifier),\n/* harmony export */   keyFieldsFnFromSpecifier: () => (/* binding */ keyFieldsFnFromSpecifier)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n\n\n\n// Mapping from JSON-encoded KeySpecifier strings to associated information.\nvar specifierInfoCache = Object.create(null);\nfunction lookupSpecifierInfo(spec) {\n    // It's safe to encode KeySpecifier arrays with JSON.stringify, since they're\n    // just arrays of strings or nested KeySpecifier arrays, and the order of the\n    // array elements is important (and suitably preserved by JSON.stringify).\n    var cacheKey = JSON.stringify(spec);\n    return specifierInfoCache[cacheKey] || (specifierInfoCache[cacheKey] = Object.create(null));\n}\nfunction keyFieldsFnFromSpecifier(specifier) {\n    var info = lookupSpecifierInfo(specifier);\n    return info.keyFieldsFn || (info.keyFieldsFn = function(object, context) {\n        var extract = function(from, key) {\n            return context.readField(key, from);\n        };\n        var keyObject = context.keyObject = collectSpecifierPaths(specifier, function(schemaKeyPath) {\n            var extracted = extractKeyPath(context.storeObject, schemaKeyPath, // Using context.readField to extract paths from context.storeObject\n            // allows the extraction to see through Reference objects and respect\n            // custom read functions.\n            extract);\n            if (extracted === void 0 && object !== context.storeObject && _helpers_js__WEBPACK_IMPORTED_MODULE_1__.hasOwn.call(object, schemaKeyPath[0])) {\n                // If context.storeObject fails to provide a value for the requested\n                // path, fall back to the raw result object, if it has a top-level key\n                // matching the first key in the path (schemaKeyPath[0]). This allows\n                // key fields included in the written data to be saved in the cache\n                // even if they are not selected explicitly in context.selectionSet.\n                // Not being mentioned by context.selectionSet is convenient here,\n                // since it means these extra fields cannot be affected by field\n                // aliasing, which is why we can use extractKey instead of\n                // context.readField for this extraction.\n                extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n            }\n            (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(extracted !== void 0, 4, schemaKeyPath.join(\".\"), object);\n            return extracted;\n        });\n        return \"\".concat(context.typename, \":\").concat(JSON.stringify(keyObject));\n    });\n}\n// The keyArgs extraction process is roughly analogous to keyFields extraction,\n// but there are no aliases involved, missing fields are tolerated (by merely\n// omitting them from the key), and drawing from field.directives or variables\n// is allowed (in addition to drawing from the field's arguments object).\n// Concretely, these differences mean passing a different key path extractor\n// function to collectSpecifierPaths, reusing the shared extractKeyPath helper\n// wherever possible.\nfunction keyArgsFnFromSpecifier(specifier) {\n    var info = lookupSpecifierInfo(specifier);\n    return info.keyArgsFn || (info.keyArgsFn = function(args, _a) {\n        var field = _a.field, variables = _a.variables, fieldName = _a.fieldName;\n        var collected = collectSpecifierPaths(specifier, function(keyPath) {\n            var firstKey = keyPath[0];\n            var firstChar = firstKey.charAt(0);\n            if (firstChar === \"@\") {\n                if (field && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isNonEmptyArray)(field.directives)) {\n                    var directiveName_1 = firstKey.slice(1);\n                    // If the directive appears multiple times, only the first\n                    // occurrence's arguments will be used. TODO Allow repetition?\n                    // TODO Cache this work somehow, a la aliasMap?\n                    var d = field.directives.find(function(d) {\n                        return d.name.value === directiveName_1;\n                    });\n                    // Fortunately argumentsObjectFromField works for DirectiveNode!\n                    var directiveArgs = d && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.argumentsObjectFromField)(d, variables);\n                    // For directives without arguments (d defined, but directiveArgs ===\n                    // null), the presence or absence of the directive still counts as\n                    // part of the field key, so we return null in those cases. If no\n                    // directive with this name was found for this field (d undefined and\n                    // thus directiveArgs undefined), we return undefined, which causes\n                    // this value to be omitted from the key object returned by\n                    // collectSpecifierPaths.\n                    return directiveArgs && extractKeyPath(directiveArgs, // If keyPath.length === 1, this code calls extractKeyPath with an\n                    // empty path, which works because it uses directiveArgs as the\n                    // extracted value.\n                    keyPath.slice(1));\n                }\n                // If the key started with @ but there was no corresponding directive,\n                // we want to omit this value from the key object, not fall through to\n                // treating @whatever as a normal argument name.\n                return;\n            }\n            if (firstChar === \"$\") {\n                var variableName = firstKey.slice(1);\n                if (variables && _helpers_js__WEBPACK_IMPORTED_MODULE_1__.hasOwn.call(variables, variableName)) {\n                    var varKeyPath = keyPath.slice(0);\n                    varKeyPath[0] = variableName;\n                    return extractKeyPath(variables, varKeyPath);\n                }\n                // If the key started with $ but there was no corresponding variable, we\n                // want to omit this value from the key object, not fall through to\n                // treating $whatever as a normal argument name.\n                return;\n            }\n            if (args) {\n                return extractKeyPath(args, keyPath);\n            }\n        });\n        var suffix = JSON.stringify(collected);\n        // If no arguments were passed to this field, and it didn't have any other\n        // field key contributions from directives or variables, hide the empty\n        // :{} suffix from the field key. However, a field passed no arguments can\n        // still end up with a non-empty :{...} suffix if its key configuration\n        // refers to directives or variables.\n        if (args || suffix !== \"{}\") {\n            fieldName += \":\" + suffix;\n        }\n        return fieldName;\n    });\n}\nfunction collectSpecifierPaths(specifier, extractor) {\n    // For each path specified by specifier, invoke the extractor, and repeatedly\n    // merge the results together, with appropriate ancestor context.\n    var merger = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.DeepMerger();\n    return getSpecifierPaths(specifier).reduce(function(collected, path) {\n        var _a;\n        var toMerge = extractor(path);\n        if (toMerge !== void 0) {\n            // This path is not expected to contain array indexes, so the toMerge\n            // reconstruction will not contain arrays. TODO Fix this?\n            for(var i = path.length - 1; i >= 0; --i){\n                toMerge = (_a = {}, _a[path[i]] = toMerge, _a);\n            }\n            collected = merger.merge(collected, toMerge);\n        }\n        return collected;\n    }, Object.create(null));\n}\nfunction getSpecifierPaths(spec) {\n    var info = lookupSpecifierInfo(spec);\n    if (!info.paths) {\n        var paths_1 = info.paths = [];\n        var currentPath_1 = [];\n        spec.forEach(function(s, i) {\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(s)) {\n                getSpecifierPaths(s).forEach(function(p) {\n                    return paths_1.push(currentPath_1.concat(p));\n                });\n                currentPath_1.length = 0;\n            } else {\n                currentPath_1.push(s);\n                if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(spec[i + 1])) {\n                    paths_1.push(currentPath_1.slice(0));\n                    currentPath_1.length = 0;\n                }\n            }\n        });\n    }\n    return info.paths;\n}\nfunction extractKey(object, key) {\n    return object[key];\n}\nfunction extractKeyPath(object, path, extract) {\n    // For each key in path, extract the corresponding child property from obj,\n    // flattening arrays if encountered (uncommon for keyFields and keyArgs, but\n    // possible). The final result of path.reduce is normalized so unexpected leaf\n    // objects have their keys safely sorted. That final result is difficult to\n    // type as anything other than any. You're welcome to try to improve the\n    // return type, but keep in mind extractKeyPath is not a public function\n    // (exported only for testing), so the effort may not be worthwhile unless the\n    // limited set of actual callers (see above) pass arguments that TypeScript\n    // can statically type. If we know only that path is some array of strings\n    // (and not, say, a specific tuple of statically known strings), any (or\n    // possibly unknown) is the honest answer.\n    extract = extract || extractKey;\n    return normalize(path.reduce(function reducer(obj, key) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(obj) ? obj.map(function(child) {\n            return reducer(child, key);\n        }) : obj && extract(obj, key);\n    }, object));\n}\nfunction normalize(value) {\n    // Usually the extracted value will be a scalar value, since most primary\n    // key fields are scalar, but just in case we get an object or an array, we\n    // need to do some normalization of the order of (nested) keys.\n    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isNonNullObject)(value)) {\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(value)) {\n            return value.map(normalize);\n        }\n        return collectSpecifierPaths(Object.keys(value).sort(), function(path) {\n            return extractKeyPath(value, path);\n        });\n    }\n    return value;\n} //# sourceMappingURL=key-extractor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/cache/inmemory/key-extractor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/cache/inmemory/object-canon.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/object-canon.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ObjectCanon: () => (/* binding */ ObjectCanon)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/trie */ \"(rsc)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n\n\n\n\nfunction shallowCopy(value) {\n    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value)) {\n        return (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(value) ? value.slice(0) : (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n            __proto__: Object.getPrototypeOf(value)\n        }, value);\n    }\n    return value;\n}\n// When programmers talk about the \"canonical form\" of an object, they\n// usually have the following meaning in mind, which I've copied from\n// https://en.wiktionary.org/wiki/canonical_form:\n//\n// 1. A standard or normal presentation of a mathematical entity [or\n//    object]. A canonical form is an element of a set of representatives\n//    of equivalence classes of forms such that there is a function or\n//    procedure which projects every element of each equivalence class\n//    onto that one element, the canonical form of that equivalence\n//    class. The canonical form is expected to be simpler than the rest of\n//    the forms in some way.\n//\n// That's a long-winded way of saying any two objects that have the same\n// canonical form may be considered equivalent, even if they are !==,\n// which usually means the objects are structurally equivalent (deeply\n// equal), but don't necessarily use the same memory.\n//\n// Like a literary or musical canon, this ObjectCanon class represents a\n// collection of unique canonical items (JavaScript objects), with the\n// important property that canon.admit(a) === canon.admit(b) if a and b\n// are deeply equal to each other. In terms of the definition above, the\n// canon.admit method is the \"function or procedure which projects every\"\n// object \"onto that one element, the canonical form.\"\n//\n// In the worst case, the canonicalization process may involve looking at\n// every property in the provided object tree, so it takes the same order\n// of time as deep equality checking. Fortunately, already-canonicalized\n// objects are returned immediately from canon.admit, so the presence of\n// canonical subtrees tends to speed up canonicalization.\n//\n// Since consumers of canonical objects can check for deep equality in\n// constant time, canonicalizing cache results can massively improve the\n// performance of application code that skips re-rendering unchanged\n// results, such as \"pure\" UI components in a framework like React.\n//\n// Of course, since canonical objects may be shared widely between\n// unrelated consumers, it's important to think of them as immutable, even\n// though they are not actually frozen with Object.freeze in production,\n// due to the extra performance overhead that comes with frozen objects.\n//\n// Custom scalar objects whose internal class name is neither Array nor\n// Object can be included safely in the admitted tree, but they will not\n// be replaced with a canonical version (to put it another way, they are\n// assumed to be canonical already).\n//\n// If we ignore custom objects, no detection of cycles or repeated object\n// references is currently required by the StoreReader class, since\n// GraphQL result objects are JSON-serializable trees (and thus contain\n// neither cycles nor repeated subtrees), so we can avoid the complexity\n// of keeping track of objects we've already seen during the recursion of\n// the admit method.\n//\n// In the future, we may consider adding additional cases to the switch\n// statement to handle other common object types, such as \"[object Date]\"\n// objects, as needed.\nvar ObjectCanon = /** @class */ function() {\n    function ObjectCanon() {\n        // Set of all canonical objects this ObjectCanon has admitted, allowing\n        // canon.admit to return previously-canonicalized objects immediately.\n        this.known = new (_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.canUseWeakSet ? WeakSet : Set)();\n        // Efficient storage/lookup structure for canonical objects.\n        this.pool = new _wry_trie__WEBPACK_IMPORTED_MODULE_0__.Trie(_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.canUseWeakMap);\n        // Make the ObjectCanon assume this value has already been\n        // canonicalized.\n        this.passes = new WeakMap();\n        // Arrays that contain the same elements in a different order can share\n        // the same SortedKeysInfo object, to save memory.\n        this.keysByJSON = new Map();\n        // This has to come last because it depends on keysByJSON.\n        this.empty = this.admit({});\n    }\n    ObjectCanon.prototype.isKnown = function(value) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value) && this.known.has(value);\n    };\n    ObjectCanon.prototype.pass = function(value) {\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value)) {\n            var copy = shallowCopy(value);\n            this.passes.set(copy, value);\n            return copy;\n        }\n        return value;\n    };\n    ObjectCanon.prototype.admit = function(value) {\n        var _this = this;\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value)) {\n            var original = this.passes.get(value);\n            if (original) return original;\n            var proto = Object.getPrototypeOf(value);\n            switch(proto){\n                case Array.prototype:\n                    {\n                        if (this.known.has(value)) return value;\n                        var array = value.map(this.admit, this);\n                        // Arrays are looked up in the Trie using their recursively\n                        // canonicalized elements, and the known version of the array is\n                        // preserved as node.array.\n                        var node = this.pool.lookupArray(array);\n                        if (!node.array) {\n                            this.known.add(node.array = array);\n                            // Since canonical arrays may be shared widely between\n                            // unrelated consumers, it's important to regard them as\n                            // immutable, even if they are not frozen in production.\n                            if (globalThis.__DEV__ !== false) {\n                                Object.freeze(array);\n                            }\n                        }\n                        return node.array;\n                    }\n                case null:\n                case Object.prototype:\n                    {\n                        if (this.known.has(value)) return value;\n                        var proto_1 = Object.getPrototypeOf(value);\n                        var array_1 = [\n                            proto_1\n                        ];\n                        var keys = this.sortedKeys(value);\n                        array_1.push(keys.json);\n                        var firstValueIndex_1 = array_1.length;\n                        keys.sorted.forEach(function(key) {\n                            array_1.push(_this.admit(value[key]));\n                        });\n                        // Objects are looked up in the Trie by their prototype (which\n                        // is *not* recursively canonicalized), followed by a JSON\n                        // representation of their (sorted) keys, followed by the\n                        // sequence of recursively canonicalized values corresponding to\n                        // those keys. To keep the final results unambiguous with other\n                        // sequences (such as arrays that just happen to contain [proto,\n                        // keys.json, value1, value2, ...]), the known version of the\n                        // object is stored as node.object.\n                        var node = this.pool.lookupArray(array_1);\n                        if (!node.object) {\n                            var obj_1 = node.object = Object.create(proto_1);\n                            this.known.add(obj_1);\n                            keys.sorted.forEach(function(key, i) {\n                                obj_1[key] = array_1[firstValueIndex_1 + i];\n                            });\n                            // Since canonical objects may be shared widely between\n                            // unrelated consumers, it's important to regard them as\n                            // immutable, even if they are not frozen in production.\n                            if (globalThis.__DEV__ !== false) {\n                                Object.freeze(obj_1);\n                            }\n                        }\n                        return node.object;\n                    }\n            }\n        }\n        return value;\n    };\n    // It's worthwhile to cache the sorting of arrays of strings, since the\n    // same initial unsorted arrays tend to be encountered many times.\n    // Fortunately, we can reuse the Trie machinery to look up the sorted\n    // arrays in linear time (which is faster than sorting large arrays).\n    ObjectCanon.prototype.sortedKeys = function(obj) {\n        var keys = Object.keys(obj);\n        var node = this.pool.lookupArray(keys);\n        if (!node.keys) {\n            keys.sort();\n            var json = JSON.stringify(keys);\n            if (!(node.keys = this.keysByJSON.get(json))) {\n                this.keysByJSON.set(json, node.keys = {\n                    sorted: keys,\n                    json: json\n                });\n            }\n        }\n        return node.keys;\n    };\n    return ObjectCanon;\n}();\n //# sourceMappingURL=object-canon.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/cache/inmemory/object-canon.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/cache/inmemory/policies.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/policies.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Policies: () => (/* binding */ Policies),\n/* harmony export */   normalizeReadFieldOptions: () => (/* binding */ normalizeReadFieldOptions)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reactiveVars.js */ \"(rsc)/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js\");\n/* harmony import */ var _key_extractor_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./key-extractor.js */ \"(rsc)/./node_modules/@apollo/client/cache/inmemory/key-extractor.js\");\n\n\n\n\n\n\nfunction argsFromFieldSpecifier(spec) {\n    return spec.args !== void 0 ? spec.args : spec.field ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.argumentsObjectFromField)(spec.field, spec.variables) : null;\n}\nvar nullKeyFieldsFn = function() {\n    return void 0;\n};\nvar simpleKeyArgsFn = function(_args, context) {\n    return context.fieldName;\n};\n// These merge functions can be selected by specifying merge:true or\n// merge:false in a field policy.\nvar mergeTrueFn = function(existing, incoming, _a) {\n    var mergeObjects = _a.mergeObjects;\n    return mergeObjects(existing, incoming);\n};\nvar mergeFalseFn = function(_, incoming) {\n    return incoming;\n};\nvar Policies = /** @class */ function() {\n    function Policies(config) {\n        this.config = config;\n        this.typePolicies = Object.create(null);\n        this.toBeAdded = Object.create(null);\n        // Map from subtype names to sets of supertype names. Note that this\n        // representation inverts the structure of possibleTypes (whose keys are\n        // supertypes and whose values are arrays of subtypes) because it tends\n        // to be much more efficient to search upwards than downwards.\n        this.supertypeMap = new Map();\n        // Any fuzzy subtypes specified by possibleTypes will be converted to\n        // RegExp objects and recorded here. Every key of this map can also be\n        // found in supertypeMap. In many cases this Map will be empty, which\n        // means no fuzzy subtype checking will happen in fragmentMatches.\n        this.fuzzySubtypes = new Map();\n        this.rootIdsByTypename = Object.create(null);\n        this.rootTypenamesById = Object.create(null);\n        this.usingPossibleTypes = false;\n        this.config = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n            dataIdFromObject: _helpers_js__WEBPACK_IMPORTED_MODULE_3__.defaultDataIdFromObject\n        }, config);\n        this.cache = this.config.cache;\n        this.setRootTypename(\"Query\");\n        this.setRootTypename(\"Mutation\");\n        this.setRootTypename(\"Subscription\");\n        if (config.possibleTypes) {\n            this.addPossibleTypes(config.possibleTypes);\n        }\n        if (config.typePolicies) {\n            this.addTypePolicies(config.typePolicies);\n        }\n    }\n    Policies.prototype.identify = function(object, partialContext) {\n        var _a;\n        var policies = this;\n        var typename = partialContext && (partialContext.typename || ((_a = partialContext.storeObject) === null || _a === void 0 ? void 0 : _a.__typename)) || object.__typename;\n        // It should be possible to write root Query fields with writeFragment,\n        // using { __typename: \"Query\", ... } as the data, but it does not make\n        // sense to allow the same identification behavior for the Mutation and\n        // Subscription types, since application code should never be writing\n        // directly to (or reading directly from) those root objects.\n        if (typename === this.rootTypenamesById.ROOT_QUERY) {\n            return [\n                \"ROOT_QUERY\"\n            ];\n        }\n        // Default context.storeObject to object if not otherwise provided.\n        var storeObject = partialContext && partialContext.storeObject || object;\n        var context = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, partialContext), {\n            typename: typename,\n            storeObject: storeObject,\n            readField: partialContext && partialContext.readField || function() {\n                var options = normalizeReadFieldOptions(arguments, storeObject);\n                return policies.readField(options, {\n                    store: policies.cache[\"data\"],\n                    variables: options.variables\n                });\n            }\n        });\n        var id;\n        var policy = typename && this.getTypePolicy(typename);\n        var keyFn = policy && policy.keyFn || this.config.dataIdFromObject;\n        while(keyFn){\n            var specifierOrId = keyFn((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, object), storeObject), context);\n            if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(specifierOrId)) {\n                keyFn = (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_5__.keyFieldsFnFromSpecifier)(specifierOrId);\n            } else {\n                id = specifierOrId;\n                break;\n            }\n        }\n        id = id ? String(id) : void 0;\n        return context.keyObject ? [\n            id,\n            context.keyObject\n        ] : [\n            id\n        ];\n    };\n    Policies.prototype.addTypePolicies = function(typePolicies) {\n        var _this = this;\n        Object.keys(typePolicies).forEach(function(typename) {\n            var _a = typePolicies[typename], queryType = _a.queryType, mutationType = _a.mutationType, subscriptionType = _a.subscriptionType, incoming = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__rest)(_a, [\n                \"queryType\",\n                \"mutationType\",\n                \"subscriptionType\"\n            ]);\n            // Though {query,mutation,subscription}Type configurations are rare,\n            // it's important to call setRootTypename as early as possible,\n            // since these configurations should apply consistently for the\n            // entire lifetime of the cache. Also, since only one __typename can\n            // qualify as one of these root types, these three properties cannot\n            // be inherited, unlike the rest of the incoming properties. That\n            // restriction is convenient, because the purpose of this.toBeAdded\n            // is to delay the processing of type/field policies until the first\n            // time they're used, allowing policies to be added in any order as\n            // long as all relevant policies (including policies for supertypes)\n            // have been added by the time a given policy is used for the first\n            // time. In other words, since inheritance doesn't matter for these\n            // properties, there's also no need to delay their processing using\n            // the this.toBeAdded queue.\n            if (queryType) _this.setRootTypename(\"Query\", typename);\n            if (mutationType) _this.setRootTypename(\"Mutation\", typename);\n            if (subscriptionType) _this.setRootTypename(\"Subscription\", typename);\n            if (_helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(_this.toBeAdded, typename)) {\n                _this.toBeAdded[typename].push(incoming);\n            } else {\n                _this.toBeAdded[typename] = [\n                    incoming\n                ];\n            }\n        });\n    };\n    Policies.prototype.updateTypePolicy = function(typename, incoming) {\n        var _this = this;\n        var existing = this.getTypePolicy(typename);\n        var keyFields = incoming.keyFields, fields = incoming.fields;\n        function setMerge(existing, merge) {\n            existing.merge = typeof merge === \"function\" ? merge : merge === true ? mergeTrueFn : merge === false ? mergeFalseFn : existing.merge;\n        }\n        // Type policies can define merge functions, as an alternative to\n        // using field policies to merge child objects.\n        setMerge(existing, incoming.merge);\n        existing.keyFn = // Pass false to disable normalization for this typename.\n        keyFields === false ? nullKeyFieldsFn : (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(keyFields) ? (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_5__.keyFieldsFnFromSpecifier)(keyFields) : typeof keyFields === \"function\" ? keyFields : existing.keyFn;\n        if (fields) {\n            Object.keys(fields).forEach(function(fieldName) {\n                var existing = _this.getFieldPolicy(typename, fieldName, true);\n                var incoming = fields[fieldName];\n                if (typeof incoming === \"function\") {\n                    existing.read = incoming;\n                } else {\n                    var keyArgs = incoming.keyArgs, read = incoming.read, merge = incoming.merge;\n                    existing.keyFn = // Pass false to disable argument-based differentiation of\n                    // field identities.\n                    keyArgs === false ? simpleKeyArgsFn : (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(keyArgs) ? (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_5__.keyArgsFnFromSpecifier)(keyArgs) : typeof keyArgs === \"function\" ? keyArgs : existing.keyFn;\n                    if (typeof read === \"function\") {\n                        existing.read = read;\n                    }\n                    setMerge(existing, merge);\n                }\n                if (existing.read && existing.merge) {\n                    // If we have both a read and a merge function, assume\n                    // keyArgs:false, because read and merge together can take\n                    // responsibility for interpreting arguments in and out. This\n                    // default assumption can always be overridden by specifying\n                    // keyArgs explicitly in the FieldPolicy.\n                    existing.keyFn = existing.keyFn || simpleKeyArgsFn;\n                }\n            });\n        }\n    };\n    Policies.prototype.setRootTypename = function(which, typename) {\n        if (typename === void 0) {\n            typename = which;\n        }\n        var rootId = \"ROOT_\" + which.toUpperCase();\n        var old = this.rootTypenamesById[rootId];\n        if (typename !== old) {\n            (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!old || old === which, 5, which);\n            // First, delete any old __typename associated with this rootId from\n            // rootIdsByTypename.\n            if (old) delete this.rootIdsByTypename[old];\n            // Now make this the only __typename that maps to this rootId.\n            this.rootIdsByTypename[typename] = rootId;\n            // Finally, update the __typename associated with this rootId.\n            this.rootTypenamesById[rootId] = typename;\n        }\n    };\n    Policies.prototype.addPossibleTypes = function(possibleTypes) {\n        var _this = this;\n        this.usingPossibleTypes = true;\n        Object.keys(possibleTypes).forEach(function(supertype) {\n            // Make sure all types have an entry in this.supertypeMap, even if\n            // their supertype set is empty, so we can return false immediately\n            // from policies.fragmentMatches for unknown supertypes.\n            _this.getSupertypeSet(supertype, true);\n            possibleTypes[supertype].forEach(function(subtype) {\n                _this.getSupertypeSet(subtype, true).add(supertype);\n                var match = subtype.match(_helpers_js__WEBPACK_IMPORTED_MODULE_3__.TypeOrFieldNameRegExp);\n                if (!match || match[0] !== subtype) {\n                    // TODO Don't interpret just any invalid typename as a RegExp.\n                    _this.fuzzySubtypes.set(subtype, new RegExp(subtype));\n                }\n            });\n        });\n    };\n    Policies.prototype.getTypePolicy = function(typename) {\n        var _this = this;\n        if (!_helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(this.typePolicies, typename)) {\n            var policy_1 = this.typePolicies[typename] = Object.create(null);\n            policy_1.fields = Object.create(null);\n            // When the TypePolicy for typename is first accessed, instead of\n            // starting with an empty policy object, inherit any properties or\n            // fields from the type policies of the supertypes of typename.\n            //\n            // Any properties or fields defined explicitly within the TypePolicy\n            // for typename will take precedence, and if there are multiple\n            // supertypes, the properties of policies whose types were added\n            // later via addPossibleTypes will take precedence over those of\n            // earlier supertypes. TODO Perhaps we should warn about these\n            // conflicts in development, and recommend defining the property\n            // explicitly in the subtype policy?\n            //\n            // Field policy inheritance is atomic/shallow: you can't inherit a\n            // field policy and then override just its read function, since read\n            // and merge functions often need to cooperate, so changing only one\n            // of them would be a recipe for inconsistency.\n            //\n            // Once the TypePolicy for typename has been accessed, its properties can\n            // still be updated directly using addTypePolicies, but future changes to\n            // inherited supertype policies will not be reflected in this subtype\n            // policy, because this code runs at most once per typename.\n            var supertypes_1 = this.supertypeMap.get(typename);\n            if (!supertypes_1 && this.fuzzySubtypes.size) {\n                // To make the inheritance logic work for unknown typename strings that\n                // may have fuzzy supertypes, we give this typename an empty supertype\n                // set and then populate it with any fuzzy supertypes that match.\n                supertypes_1 = this.getSupertypeSet(typename, true);\n                // This only works for typenames that are directly matched by a fuzzy\n                // supertype. What if there is an intermediate chain of supertypes?\n                // While possible, that situation can only be solved effectively by\n                // specifying the intermediate relationships via possibleTypes, manually\n                // and in a non-fuzzy way.\n                this.fuzzySubtypes.forEach(function(regExp, fuzzy) {\n                    if (regExp.test(typename)) {\n                        // The fuzzy parameter is just the original string version of regExp\n                        // (not a valid __typename string), but we can look up the\n                        // associated supertype(s) in this.supertypeMap.\n                        var fuzzySupertypes = _this.supertypeMap.get(fuzzy);\n                        if (fuzzySupertypes) {\n                            fuzzySupertypes.forEach(function(supertype) {\n                                return supertypes_1.add(supertype);\n                            });\n                        }\n                    }\n                });\n            }\n            if (supertypes_1 && supertypes_1.size) {\n                supertypes_1.forEach(function(supertype) {\n                    var _a = _this.getTypePolicy(supertype), fields = _a.fields, rest = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__rest)(_a, [\n                        \"fields\"\n                    ]);\n                    Object.assign(policy_1, rest);\n                    Object.assign(policy_1.fields, fields);\n                });\n            }\n        }\n        var inbox = this.toBeAdded[typename];\n        if (inbox && inbox.length) {\n            // Merge the pending policies into this.typePolicies, in the order they\n            // were originally passed to addTypePolicy.\n            inbox.splice(0).forEach(function(policy) {\n                _this.updateTypePolicy(typename, policy);\n            });\n        }\n        return this.typePolicies[typename];\n    };\n    Policies.prototype.getFieldPolicy = function(typename, fieldName, createIfMissing) {\n        if (typename) {\n            var fieldPolicies = this.getTypePolicy(typename).fields;\n            return fieldPolicies[fieldName] || createIfMissing && (fieldPolicies[fieldName] = Object.create(null));\n        }\n    };\n    Policies.prototype.getSupertypeSet = function(subtype, createIfMissing) {\n        var supertypeSet = this.supertypeMap.get(subtype);\n        if (!supertypeSet && createIfMissing) {\n            this.supertypeMap.set(subtype, supertypeSet = new Set());\n        }\n        return supertypeSet;\n    };\n    Policies.prototype.fragmentMatches = function(fragment, typename, result, variables) {\n        var _this = this;\n        if (!fragment.typeCondition) return true;\n        // If the fragment has a type condition but the object we're matching\n        // against does not have a __typename, the fragment cannot match.\n        if (!typename) return false;\n        var supertype = fragment.typeCondition.name.value;\n        // Common case: fragment type condition and __typename are the same.\n        if (typename === supertype) return true;\n        if (this.usingPossibleTypes && this.supertypeMap.has(supertype)) {\n            var typenameSupertypeSet = this.getSupertypeSet(typename, true);\n            var workQueue_1 = [\n                typenameSupertypeSet\n            ];\n            var maybeEnqueue_1 = function(subtype) {\n                var supertypeSet = _this.getSupertypeSet(subtype, false);\n                if (supertypeSet && supertypeSet.size && workQueue_1.indexOf(supertypeSet) < 0) {\n                    workQueue_1.push(supertypeSet);\n                }\n            };\n            // We need to check fuzzy subtypes only if we encountered fuzzy\n            // subtype strings in addPossibleTypes, and only while writing to\n            // the cache, since that's when selectionSetMatchesResult gives a\n            // strong signal of fragment matching. The StoreReader class calls\n            // policies.fragmentMatches without passing a result object, so\n            // needToCheckFuzzySubtypes is always false while reading.\n            var needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);\n            var checkingFuzzySubtypes = false;\n            // It's important to keep evaluating workQueue.length each time through\n            // the loop, because the queue can grow while we're iterating over it.\n            for(var i = 0; i < workQueue_1.length; ++i){\n                var supertypeSet = workQueue_1[i];\n                if (supertypeSet.has(supertype)) {\n                    if (!typenameSupertypeSet.has(supertype)) {\n                        if (checkingFuzzySubtypes) {\n                            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(6, typename, supertype);\n                        }\n                        // Record positive results for faster future lookup.\n                        // Unfortunately, we cannot safely cache negative results,\n                        // because new possibleTypes data could always be added to the\n                        // Policies class.\n                        typenameSupertypeSet.add(supertype);\n                    }\n                    return true;\n                }\n                supertypeSet.forEach(maybeEnqueue_1);\n                if (needToCheckFuzzySubtypes && // Start checking fuzzy subtypes only after exhausting all\n                // non-fuzzy subtypes (after the final iteration of the loop).\n                i === workQueue_1.length - 1 && // We could wait to compare fragment.selectionSet to result\n                // after we verify the supertype, but this check is often less\n                // expensive than that search, and we will have to do the\n                // comparison anyway whenever we find a potential match.\n                (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.selectionSetMatchesResult)(fragment.selectionSet, result, variables)) {\n                    // We don't always need to check fuzzy subtypes (if no result\n                    // was provided, or !this.fuzzySubtypes.size), but, when we do,\n                    // we only want to check them once.\n                    needToCheckFuzzySubtypes = false;\n                    checkingFuzzySubtypes = true;\n                    // If we find any fuzzy subtypes that match typename, extend the\n                    // workQueue to search through the supertypes of those fuzzy\n                    // subtypes. Otherwise the for-loop will terminate and we'll\n                    // return false below.\n                    this.fuzzySubtypes.forEach(function(regExp, fuzzyString) {\n                        var match = typename.match(regExp);\n                        if (match && match[0] === typename) {\n                            maybeEnqueue_1(fuzzyString);\n                        }\n                    });\n                }\n            }\n        }\n        return false;\n    };\n    Policies.prototype.hasKeyArgs = function(typename, fieldName) {\n        var policy = this.getFieldPolicy(typename, fieldName, false);\n        return !!(policy && policy.keyFn);\n    };\n    Policies.prototype.getStoreFieldName = function(fieldSpec) {\n        var typename = fieldSpec.typename, fieldName = fieldSpec.fieldName;\n        var policy = this.getFieldPolicy(typename, fieldName, false);\n        var storeFieldName;\n        var keyFn = policy && policy.keyFn;\n        if (keyFn && typename) {\n            var context = {\n                typename: typename,\n                fieldName: fieldName,\n                field: fieldSpec.field || null,\n                variables: fieldSpec.variables\n            };\n            var args = argsFromFieldSpecifier(fieldSpec);\n            while(keyFn){\n                var specifierOrString = keyFn(args, context);\n                if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(specifierOrString)) {\n                    keyFn = (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_5__.keyArgsFnFromSpecifier)(specifierOrString);\n                } else {\n                    // If the custom keyFn returns a falsy value, fall back to\n                    // fieldName instead.\n                    storeFieldName = specifierOrString || fieldName;\n                    break;\n                }\n            }\n        }\n        if (storeFieldName === void 0) {\n            storeFieldName = fieldSpec.field ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.storeKeyNameFromField)(fieldSpec.field, fieldSpec.variables) : (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.getStoreKeyName)(fieldName, argsFromFieldSpecifier(fieldSpec));\n        }\n        // Returning false from a keyArgs function is like configuring\n        // keyArgs: false, but more dynamic.\n        if (storeFieldName === false) {\n            return fieldName;\n        }\n        // Make sure custom field names start with the actual field.name.value\n        // of the field, so we can always figure out which properties of a\n        // StoreObject correspond to which original field names.\n        return fieldName === (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.fieldNameFromStoreName)(storeFieldName) ? storeFieldName : fieldName + \":\" + storeFieldName;\n    };\n    Policies.prototype.readField = function(options, context) {\n        var objectOrReference = options.from;\n        if (!objectOrReference) return;\n        var nameOrField = options.field || options.fieldName;\n        if (!nameOrField) return;\n        if (options.typename === void 0) {\n            var typename = context.store.getFieldValue(objectOrReference, \"__typename\");\n            if (typename) options.typename = typename;\n        }\n        var storeFieldName = this.getStoreFieldName(options);\n        var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.fieldNameFromStoreName)(storeFieldName);\n        var existing = context.store.getFieldValue(objectOrReference, storeFieldName);\n        var policy = this.getFieldPolicy(options.typename, fieldName, false);\n        var read = policy && policy.read;\n        if (read) {\n            var readOptions = makeFieldFunctionOptions(this, objectOrReference, options, context, context.store.getStorage((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isReference)(objectOrReference) ? objectOrReference.__ref : objectOrReference, storeFieldName));\n            // Call read(existing, readOptions) with cacheSlot holding this.cache.\n            return _reactiveVars_js__WEBPACK_IMPORTED_MODULE_6__.cacheSlot.withValue(this.cache, read, [\n                existing,\n                readOptions\n            ]);\n        }\n        return existing;\n    };\n    Policies.prototype.getReadFunction = function(typename, fieldName) {\n        var policy = this.getFieldPolicy(typename, fieldName, false);\n        return policy && policy.read;\n    };\n    Policies.prototype.getMergeFunction = function(parentTypename, fieldName, childTypename) {\n        var policy = this.getFieldPolicy(parentTypename, fieldName, false);\n        var merge = policy && policy.merge;\n        if (!merge && childTypename) {\n            policy = this.getTypePolicy(childTypename);\n            merge = policy && policy.merge;\n        }\n        return merge;\n    };\n    Policies.prototype.runMergeFunction = function(existing, incoming, _a, context, storage) {\n        var field = _a.field, typename = _a.typename, merge = _a.merge;\n        if (merge === mergeTrueFn) {\n            // Instead of going to the trouble of creating a full\n            // FieldFunctionOptions object and calling mergeTrueFn, we can\n            // simply call mergeObjects, as mergeTrueFn would.\n            return makeMergeObjectsFunction(context.store)(existing, incoming);\n        }\n        if (merge === mergeFalseFn) {\n            // Likewise for mergeFalseFn, whose implementation is even simpler.\n            return incoming;\n        }\n        // If cache.writeQuery or cache.writeFragment was called with\n        // options.overwrite set to true, we still call merge functions, but\n        // the existing data is always undefined, so the merge function will\n        // not attempt to combine the incoming data with the existing data.\n        if (context.overwrite) {\n            existing = void 0;\n        }\n        return merge(existing, incoming, makeFieldFunctionOptions(this, // Unlike options.readField for read functions, we do not fall\n        // back to the current object if no foreignObjOrRef is provided,\n        // because it's not clear what the current object should be for\n        // merge functions: the (possibly undefined) existing object, or\n        // the incoming object? If you think your merge function needs\n        // to read sibling fields in order to produce a new value for\n        // the current field, you might want to rethink your strategy,\n        // because that's a recipe for making merge behavior sensitive\n        // to the order in which fields are written into the cache.\n        // However, readField(name, ref) is useful for merge functions\n        // that need to deduplicate child objects and references.\n        void 0, {\n            typename: typename,\n            fieldName: field.name.value,\n            field: field,\n            variables: context.variables\n        }, context, storage || Object.create(null)));\n    };\n    return Policies;\n}();\n\nfunction makeFieldFunctionOptions(policies, objectOrReference, fieldSpec, context, storage) {\n    var storeFieldName = policies.getStoreFieldName(fieldSpec);\n    var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.fieldNameFromStoreName)(storeFieldName);\n    var variables = fieldSpec.variables || context.variables;\n    var _a = context.store, toReference = _a.toReference, canRead = _a.canRead;\n    return {\n        args: argsFromFieldSpecifier(fieldSpec),\n        field: fieldSpec.field || null,\n        fieldName: fieldName,\n        storeFieldName: storeFieldName,\n        variables: variables,\n        isReference: _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isReference,\n        toReference: toReference,\n        storage: storage,\n        cache: policies.cache,\n        canRead: canRead,\n        readField: function() {\n            return policies.readField(normalizeReadFieldOptions(arguments, objectOrReference, variables), context);\n        },\n        mergeObjects: makeMergeObjectsFunction(context.store)\n    };\n}\nfunction normalizeReadFieldOptions(readFieldArgs, objectOrReference, variables) {\n    var fieldNameOrOptions = readFieldArgs[0], from = readFieldArgs[1], argc = readFieldArgs.length;\n    var options;\n    if (typeof fieldNameOrOptions === \"string\") {\n        options = {\n            fieldName: fieldNameOrOptions,\n            // Default to objectOrReference only when no second argument was\n            // passed for the from parameter, not when undefined is explicitly\n            // passed as the second argument.\n            from: argc > 1 ? from : objectOrReference\n        };\n    } else {\n        options = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, fieldNameOrOptions);\n        // Default to objectOrReference only when fieldNameOrOptions.from is\n        // actually omitted, rather than just undefined.\n        if (!_helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(options, \"from\")) {\n            options.from = objectOrReference;\n        }\n    }\n    if (globalThis.__DEV__ !== false && options.from === void 0) {\n        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(7, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.stringifyForDisplay)(Array.from(readFieldArgs)));\n    }\n    if (void 0 === options.variables) {\n        options.variables = variables;\n    }\n    return options;\n}\nfunction makeMergeObjectsFunction(store) {\n    return function mergeObjects(existing, incoming) {\n        if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(existing) || (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(incoming)) {\n            throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(8);\n        }\n        // These dynamic checks are necessary because the parameters of a\n        // custom merge function can easily have the any type, so the type\n        // system cannot always enforce the StoreObject | Reference parameter\n        // types of options.mergeObjects.\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.isNonNullObject)(existing) && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.isNonNullObject)(incoming)) {\n            var eType = store.getFieldValue(existing, \"__typename\");\n            var iType = store.getFieldValue(incoming, \"__typename\");\n            var typesDiffer = eType && iType && eType !== iType;\n            if (typesDiffer) {\n                return incoming;\n            }\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isReference)(existing) && (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.storeValueIsStoreObject)(incoming)) {\n                // Update the normalized EntityStore for the entity identified by\n                // existing.__ref, preferring/overwriting any fields contributed by the\n                // newer incoming StoreObject.\n                store.merge(existing.__ref, incoming);\n                return existing;\n            }\n            if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.storeValueIsStoreObject)(existing) && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isReference)(incoming)) {\n                // Update the normalized EntityStore for the entity identified by\n                // incoming.__ref, taking fields from the older existing object only if\n                // those fields are not already present in the newer StoreObject\n                // identified by incoming.__ref.\n                store.merge(existing, incoming.__ref);\n                return incoming;\n            }\n            if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.storeValueIsStoreObject)(existing) && (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.storeValueIsStoreObject)(incoming)) {\n                return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, existing), incoming);\n            }\n        }\n        return incoming;\n    };\n} //# sourceMappingURL=policies.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/cache/inmemory/policies.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/reactiveVars.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cacheSlot: () => (/* binding */ cacheSlot),\n/* harmony export */   forgetCache: () => (/* binding */ forgetCache),\n/* harmony export */   makeVar: () => (/* binding */ makeVar),\n/* harmony export */   recallCache: () => (/* binding */ recallCache)\n/* harmony export */ });\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! optimism */ \"(rsc)/./node_modules/optimism/lib/index.js\");\n\n// Contextual Slot that acquires its value when custom read functions are\n// called in Policies#readField.\nvar cacheSlot = new optimism__WEBPACK_IMPORTED_MODULE_0__.Slot();\nvar cacheInfoMap = new WeakMap();\nfunction getCacheInfo(cache) {\n    var info = cacheInfoMap.get(cache);\n    if (!info) {\n        cacheInfoMap.set(cache, info = {\n            vars: new Set(),\n            dep: (0,optimism__WEBPACK_IMPORTED_MODULE_0__.dep)()\n        });\n    }\n    return info;\n}\nfunction forgetCache(cache) {\n    getCacheInfo(cache).vars.forEach(function(rv) {\n        return rv.forgetCache(cache);\n    });\n}\n// Calling forgetCache(cache) serves to silence broadcasts and allows the\n// cache to be garbage collected. However, the varsByCache WeakMap\n// preserves the set of reactive variables that were previously associated\n// with this cache, which makes it possible to \"recall\" the cache at a\n// later time, by reattaching it to those variables. If the cache has been\n// garbage collected in the meantime, because it is no longer reachable,\n// you won't be able to call recallCache(cache), and the cache will\n// automatically disappear from the varsByCache WeakMap.\nfunction recallCache(cache) {\n    getCacheInfo(cache).vars.forEach(function(rv) {\n        return rv.attachCache(cache);\n    });\n}\nfunction makeVar(value) {\n    var caches = new Set();\n    var listeners = new Set();\n    var rv = function(newValue) {\n        if (arguments.length > 0) {\n            if (value !== newValue) {\n                value = newValue;\n                caches.forEach(function(cache) {\n                    // Invalidate any fields with custom read functions that\n                    // consumed this variable, so query results involving those\n                    // fields will be recomputed the next time we read them.\n                    getCacheInfo(cache).dep.dirty(rv);\n                    // Broadcast changes to any caches that have previously read\n                    // from this variable.\n                    broadcast(cache);\n                });\n                // Finally, notify any listeners added via rv.onNextChange.\n                var oldListeners = Array.from(listeners);\n                listeners.clear();\n                oldListeners.forEach(function(listener) {\n                    return listener(value);\n                });\n            }\n        } else {\n            // When reading from the variable, obtain the current cache from\n            // context via cacheSlot. This isn't entirely foolproof, but it's\n            // the same system that powers varDep.\n            var cache = cacheSlot.getValue();\n            if (cache) {\n                attach(cache);\n                getCacheInfo(cache).dep(rv);\n            }\n        }\n        return value;\n    };\n    rv.onNextChange = function(listener) {\n        listeners.add(listener);\n        return function() {\n            listeners.delete(listener);\n        };\n    };\n    var attach = rv.attachCache = function(cache) {\n        caches.add(cache);\n        getCacheInfo(cache).vars.add(rv);\n        return rv;\n    };\n    rv.forgetCache = function(cache) {\n        return caches.delete(cache);\n    };\n    return rv;\n}\nfunction broadcast(cache) {\n    if (cache.broadcastWatches) {\n        cache.broadcastWatches();\n    }\n} //# sourceMappingURL=reactiveVars.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY2FjaGUvaW5tZW1vcnkvcmVhY3RpdmVWYXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXFDO0FBQ3JDLHlFQUF5RTtBQUN6RSxnQ0FBZ0M7QUFDekIsSUFBSUUsWUFBWSxJQUFJRCwwQ0FBSUEsR0FBRztBQUNsQyxJQUFJRSxlQUFlLElBQUlDO0FBQ3ZCLFNBQVNDLGFBQWFDLEtBQUs7SUFDdkIsSUFBSUMsT0FBT0osYUFBYUssR0FBRyxDQUFDRjtJQUM1QixJQUFJLENBQUNDLE1BQU07UUFDUEosYUFBYU0sR0FBRyxDQUFDSCxPQUFRQyxPQUFPO1lBQzVCRyxNQUFNLElBQUlDO1lBQ1ZYLEtBQUtBLDZDQUFHQTtRQUNaO0lBQ0o7SUFDQSxPQUFPTztBQUNYO0FBQ08sU0FBU0ssWUFBWU4sS0FBSztJQUM3QkQsYUFBYUMsT0FBT0ksSUFBSSxDQUFDRyxPQUFPLENBQUMsU0FBVUMsRUFBRTtRQUFJLE9BQU9BLEdBQUdGLFdBQVcsQ0FBQ047SUFBUTtBQUNuRjtBQUNBLHlFQUF5RTtBQUN6RSxrRUFBa0U7QUFDbEUsMEVBQTBFO0FBQzFFLHNFQUFzRTtBQUN0RSwwRUFBMEU7QUFDMUUsd0VBQXdFO0FBQ3hFLG1FQUFtRTtBQUNuRSx3REFBd0Q7QUFDakQsU0FBU1MsWUFBWVQsS0FBSztJQUM3QkQsYUFBYUMsT0FBT0ksSUFBSSxDQUFDRyxPQUFPLENBQUMsU0FBVUMsRUFBRTtRQUFJLE9BQU9BLEdBQUdFLFdBQVcsQ0FBQ1Y7SUFBUTtBQUNuRjtBQUNPLFNBQVNXLFFBQVFDLEtBQUs7SUFDekIsSUFBSUMsU0FBUyxJQUFJUjtJQUNqQixJQUFJUyxZQUFZLElBQUlUO0lBQ3BCLElBQUlHLEtBQUssU0FBVU8sUUFBUTtRQUN2QixJQUFJQyxVQUFVQyxNQUFNLEdBQUcsR0FBRztZQUN0QixJQUFJTCxVQUFVRyxVQUFVO2dCQUNwQkgsUUFBUUc7Z0JBQ1JGLE9BQU9OLE9BQU8sQ0FBQyxTQUFVUCxLQUFLO29CQUMxQix3REFBd0Q7b0JBQ3hELDJEQUEyRDtvQkFDM0Qsd0RBQXdEO29CQUN4REQsYUFBYUMsT0FBT04sR0FBRyxDQUFDd0IsS0FBSyxDQUFDVjtvQkFDOUIsNERBQTREO29CQUM1RCxzQkFBc0I7b0JBQ3RCVyxVQUFVbkI7Z0JBQ2Q7Z0JBQ0EsMkRBQTJEO2dCQUMzRCxJQUFJb0IsZUFBZUMsTUFBTUMsSUFBSSxDQUFDUjtnQkFDOUJBLFVBQVVTLEtBQUs7Z0JBQ2ZILGFBQWFiLE9BQU8sQ0FBQyxTQUFVaUIsUUFBUTtvQkFBSSxPQUFPQSxTQUFTWjtnQkFBUTtZQUN2RTtRQUNKLE9BQ0s7WUFDRCxnRUFBZ0U7WUFDaEUsaUVBQWlFO1lBQ2pFLHNDQUFzQztZQUN0QyxJQUFJWixRQUFRSixVQUFVNkIsUUFBUTtZQUM5QixJQUFJekIsT0FBTztnQkFDUDBCLE9BQU8xQjtnQkFDUEQsYUFBYUMsT0FBT04sR0FBRyxDQUFDYztZQUM1QjtRQUNKO1FBQ0EsT0FBT0k7SUFDWDtJQUNBSixHQUFHbUIsWUFBWSxHQUFHLFNBQVVILFFBQVE7UUFDaENWLFVBQVVjLEdBQUcsQ0FBQ0o7UUFDZCxPQUFPO1lBQ0hWLFVBQVVlLE1BQU0sQ0FBQ0w7UUFDckI7SUFDSjtJQUNBLElBQUlFLFNBQVVsQixHQUFHRSxXQUFXLEdBQUcsU0FBVVYsS0FBSztRQUMxQ2EsT0FBT2UsR0FBRyxDQUFDNUI7UUFDWEQsYUFBYUMsT0FBT0ksSUFBSSxDQUFDd0IsR0FBRyxDQUFDcEI7UUFDN0IsT0FBT0E7SUFDWDtJQUNBQSxHQUFHRixXQUFXLEdBQUcsU0FBVU4sS0FBSztRQUFJLE9BQU9hLE9BQU9nQixNQUFNLENBQUM3QjtJQUFRO0lBQ2pFLE9BQU9RO0FBQ1g7QUFDQSxTQUFTVyxVQUFVbkIsS0FBSztJQUNwQixJQUFJQSxNQUFNOEIsZ0JBQWdCLEVBQUU7UUFDeEI5QixNQUFNOEIsZ0JBQWdCO0lBQzFCO0FBQ0osRUFDQSx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY2FjaGUvaW5tZW1vcnkvcmVhY3RpdmVWYXJzLmpzP2Q3M2IiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVwLCBTbG90IH0gZnJvbSBcIm9wdGltaXNtXCI7XG4vLyBDb250ZXh0dWFsIFNsb3QgdGhhdCBhY3F1aXJlcyBpdHMgdmFsdWUgd2hlbiBjdXN0b20gcmVhZCBmdW5jdGlvbnMgYXJlXG4vLyBjYWxsZWQgaW4gUG9saWNpZXMjcmVhZEZpZWxkLlxuZXhwb3J0IHZhciBjYWNoZVNsb3QgPSBuZXcgU2xvdCgpO1xudmFyIGNhY2hlSW5mb01hcCA9IG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiBnZXRDYWNoZUluZm8oY2FjaGUpIHtcbiAgICB2YXIgaW5mbyA9IGNhY2hlSW5mb01hcC5nZXQoY2FjaGUpO1xuICAgIGlmICghaW5mbykge1xuICAgICAgICBjYWNoZUluZm9NYXAuc2V0KGNhY2hlLCAoaW5mbyA9IHtcbiAgICAgICAgICAgIHZhcnM6IG5ldyBTZXQoKSxcbiAgICAgICAgICAgIGRlcDogZGVwKCksXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGluZm87XG59XG5leHBvcnQgZnVuY3Rpb24gZm9yZ2V0Q2FjaGUoY2FjaGUpIHtcbiAgICBnZXRDYWNoZUluZm8oY2FjaGUpLnZhcnMuZm9yRWFjaChmdW5jdGlvbiAocnYpIHsgcmV0dXJuIHJ2LmZvcmdldENhY2hlKGNhY2hlKTsgfSk7XG59XG4vLyBDYWxsaW5nIGZvcmdldENhY2hlKGNhY2hlKSBzZXJ2ZXMgdG8gc2lsZW5jZSBicm9hZGNhc3RzIGFuZCBhbGxvd3MgdGhlXG4vLyBjYWNoZSB0byBiZSBnYXJiYWdlIGNvbGxlY3RlZC4gSG93ZXZlciwgdGhlIHZhcnNCeUNhY2hlIFdlYWtNYXBcbi8vIHByZXNlcnZlcyB0aGUgc2V0IG9mIHJlYWN0aXZlIHZhcmlhYmxlcyB0aGF0IHdlcmUgcHJldmlvdXNseSBhc3NvY2lhdGVkXG4vLyB3aXRoIHRoaXMgY2FjaGUsIHdoaWNoIG1ha2VzIGl0IHBvc3NpYmxlIHRvIFwicmVjYWxsXCIgdGhlIGNhY2hlIGF0IGFcbi8vIGxhdGVyIHRpbWUsIGJ5IHJlYXR0YWNoaW5nIGl0IHRvIHRob3NlIHZhcmlhYmxlcy4gSWYgdGhlIGNhY2hlIGhhcyBiZWVuXG4vLyBnYXJiYWdlIGNvbGxlY3RlZCBpbiB0aGUgbWVhbnRpbWUsIGJlY2F1c2UgaXQgaXMgbm8gbG9uZ2VyIHJlYWNoYWJsZSxcbi8vIHlvdSB3b24ndCBiZSBhYmxlIHRvIGNhbGwgcmVjYWxsQ2FjaGUoY2FjaGUpLCBhbmQgdGhlIGNhY2hlIHdpbGxcbi8vIGF1dG9tYXRpY2FsbHkgZGlzYXBwZWFyIGZyb20gdGhlIHZhcnNCeUNhY2hlIFdlYWtNYXAuXG5leHBvcnQgZnVuY3Rpb24gcmVjYWxsQ2FjaGUoY2FjaGUpIHtcbiAgICBnZXRDYWNoZUluZm8oY2FjaGUpLnZhcnMuZm9yRWFjaChmdW5jdGlvbiAocnYpIHsgcmV0dXJuIHJ2LmF0dGFjaENhY2hlKGNhY2hlKTsgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFrZVZhcih2YWx1ZSkge1xuICAgIHZhciBjYWNoZXMgPSBuZXcgU2V0KCk7XG4gICAgdmFyIGxpc3RlbmVycyA9IG5ldyBTZXQoKTtcbiAgICB2YXIgcnYgPSBmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICBjYWNoZXMuZm9yRWFjaChmdW5jdGlvbiAoY2FjaGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSW52YWxpZGF0ZSBhbnkgZmllbGRzIHdpdGggY3VzdG9tIHJlYWQgZnVuY3Rpb25zIHRoYXRcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc3VtZWQgdGhpcyB2YXJpYWJsZSwgc28gcXVlcnkgcmVzdWx0cyBpbnZvbHZpbmcgdGhvc2VcbiAgICAgICAgICAgICAgICAgICAgLy8gZmllbGRzIHdpbGwgYmUgcmVjb21wdXRlZCB0aGUgbmV4dCB0aW1lIHdlIHJlYWQgdGhlbS5cbiAgICAgICAgICAgICAgICAgICAgZ2V0Q2FjaGVJbmZvKGNhY2hlKS5kZXAuZGlydHkocnYpO1xuICAgICAgICAgICAgICAgICAgICAvLyBCcm9hZGNhc3QgY2hhbmdlcyB0byBhbnkgY2FjaGVzIHRoYXQgaGF2ZSBwcmV2aW91c2x5IHJlYWRcbiAgICAgICAgICAgICAgICAgICAgLy8gZnJvbSB0aGlzIHZhcmlhYmxlLlxuICAgICAgICAgICAgICAgICAgICBicm9hZGNhc3QoY2FjaGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIEZpbmFsbHksIG5vdGlmeSBhbnkgbGlzdGVuZXJzIGFkZGVkIHZpYSBydi5vbk5leHRDaGFuZ2UuXG4gICAgICAgICAgICAgICAgdmFyIG9sZExpc3RlbmVycyA9IEFycmF5LmZyb20obGlzdGVuZXJzKTtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICBvbGRMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHsgcmV0dXJuIGxpc3RlbmVyKHZhbHVlKTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBXaGVuIHJlYWRpbmcgZnJvbSB0aGUgdmFyaWFibGUsIG9idGFpbiB0aGUgY3VycmVudCBjYWNoZSBmcm9tXG4gICAgICAgICAgICAvLyBjb250ZXh0IHZpYSBjYWNoZVNsb3QuIFRoaXMgaXNuJ3QgZW50aXJlbHkgZm9vbHByb29mLCBidXQgaXQnc1xuICAgICAgICAgICAgLy8gdGhlIHNhbWUgc3lzdGVtIHRoYXQgcG93ZXJzIHZhckRlcC5cbiAgICAgICAgICAgIHZhciBjYWNoZSA9IGNhY2hlU2xvdC5nZXRWYWx1ZSgpO1xuICAgICAgICAgICAgaWYgKGNhY2hlKSB7XG4gICAgICAgICAgICAgICAgYXR0YWNoKGNhY2hlKTtcbiAgICAgICAgICAgICAgICBnZXRDYWNoZUluZm8oY2FjaGUpLmRlcChydik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgcnYub25OZXh0Q2hhbmdlID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVycy5hZGQobGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgYXR0YWNoID0gKHJ2LmF0dGFjaENhY2hlID0gZnVuY3Rpb24gKGNhY2hlKSB7XG4gICAgICAgIGNhY2hlcy5hZGQoY2FjaGUpO1xuICAgICAgICBnZXRDYWNoZUluZm8oY2FjaGUpLnZhcnMuYWRkKHJ2KTtcbiAgICAgICAgcmV0dXJuIHJ2O1xuICAgIH0pO1xuICAgIHJ2LmZvcmdldENhY2hlID0gZnVuY3Rpb24gKGNhY2hlKSB7IHJldHVybiBjYWNoZXMuZGVsZXRlKGNhY2hlKTsgfTtcbiAgICByZXR1cm4gcnY7XG59XG5mdW5jdGlvbiBicm9hZGNhc3QoY2FjaGUpIHtcbiAgICBpZiAoY2FjaGUuYnJvYWRjYXN0V2F0Y2hlcykge1xuICAgICAgICBjYWNoZS5icm9hZGNhc3RXYXRjaGVzKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3RpdmVWYXJzLmpzLm1hcCJdLCJuYW1lcyI6WyJkZXAiLCJTbG90IiwiY2FjaGVTbG90IiwiY2FjaGVJbmZvTWFwIiwiV2Vha01hcCIsImdldENhY2hlSW5mbyIsImNhY2hlIiwiaW5mbyIsImdldCIsInNldCIsInZhcnMiLCJTZXQiLCJmb3JnZXRDYWNoZSIsImZvckVhY2giLCJydiIsInJlY2FsbENhY2hlIiwiYXR0YWNoQ2FjaGUiLCJtYWtlVmFyIiwidmFsdWUiLCJjYWNoZXMiLCJsaXN0ZW5lcnMiLCJuZXdWYWx1ZSIsImFyZ3VtZW50cyIsImxlbmd0aCIsImRpcnR5IiwiYnJvYWRjYXN0Iiwib2xkTGlzdGVuZXJzIiwiQXJyYXkiLCJmcm9tIiwiY2xlYXIiLCJsaXN0ZW5lciIsImdldFZhbHVlIiwiYXR0YWNoIiwib25OZXh0Q2hhbmdlIiwiYWRkIiwiZGVsZXRlIiwiYnJvYWRjYXN0V2F0Y2hlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/cache/inmemory/readFromStore.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/readFromStore.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StoreReader: () => (/* binding */ StoreReader)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! optimism */ \"(rsc)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/compact.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _entityStore_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./entityStore.js */ \"(rsc)/./node_modules/@apollo/client/cache/inmemory/entityStore.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _core_types_common_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../core/types/common.js */ \"(rsc)/./node_modules/@apollo/client/cache/core/types/common.js\");\n/* harmony import */ var _object_canon_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./object-canon.js */ \"(rsc)/./node_modules/@apollo/client/cache/inmemory/object-canon.js\");\n\n\n\n\n\n\n\n\n\nfunction execSelectionSetKeyArgs(options) {\n    return [\n        options.selectionSet,\n        options.objectOrReference,\n        options.context,\n        // We split out this property so we can pass different values\n        // independently without modifying options.context itself.\n        options.context.canonizeResults\n    ];\n}\nvar StoreReader = /** @class */ function() {\n    function StoreReader(config) {\n        var _this = this;\n        this.knownResults = new (_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.canUseWeakMap ? WeakMap : Map)();\n        this.config = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.compact)(config, {\n            addTypename: config.addTypename !== false,\n            canonizeResults: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.shouldCanonizeResults)(config)\n        });\n        this.canon = config.canon || new _object_canon_js__WEBPACK_IMPORTED_MODULE_5__.ObjectCanon();\n        // memoized functions in this class will be \"garbage-collected\"\n        // by recreating the whole `StoreReader` in\n        // `InMemoryCache.resetResultsCache`\n        // (triggered from `InMemoryCache.gc` with `resetResultCache: true`)\n        this.executeSelectionSet = (0,optimism__WEBPACK_IMPORTED_MODULE_1__.wrap)(function(options) {\n            var _a;\n            var canonizeResults = options.context.canonizeResults;\n            var peekArgs = execSelectionSetKeyArgs(options);\n            // Negate this boolean option so we can find out if we've already read\n            // this result using the other boolean value.\n            peekArgs[3] = !canonizeResults;\n            var other = (_a = _this.executeSelectionSet).peek.apply(_a, peekArgs);\n            if (other) {\n                if (canonizeResults) {\n                    return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, other), {\n                        // If we previously read this result without canonizing it, we can\n                        // reuse that result simply by canonizing it now.\n                        result: _this.canon.admit(other.result)\n                    });\n                }\n                // If we previously read this result with canonization enabled, we can\n                // return that canonized result as-is.\n                return other;\n            }\n            (0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.maybeDependOnExistenceOfEntity)(options.context.store, options.enclosingRef.__ref);\n            // Finally, if we didn't find any useful previous results, run the real\n            // execSelectionSetImpl method with the given options.\n            return _this.execSelectionSetImpl(options);\n        }, {\n            max: this.config.resultCacheMaxSize || _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.cacheSizes[\"inMemoryCache.executeSelectionSet\"] || 50000 /* defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"] */ ,\n            keyArgs: execSelectionSetKeyArgs,\n            // Note that the parameters of makeCacheKey are determined by the\n            // array returned by keyArgs.\n            makeCacheKey: function(selectionSet, parent, context, canonizeResults) {\n                if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.supportsResultCaching)(context.store)) {\n                    return context.store.makeCacheKey(selectionSet, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(parent) ? parent.__ref : parent, context.varString, canonizeResults);\n                }\n            }\n        });\n        this.executeSubSelectedArray = (0,optimism__WEBPACK_IMPORTED_MODULE_1__.wrap)(function(options) {\n            (0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.maybeDependOnExistenceOfEntity)(options.context.store, options.enclosingRef.__ref);\n            return _this.execSubSelectedArrayImpl(options);\n        }, {\n            max: this.config.resultCacheMaxSize || _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.cacheSizes[\"inMemoryCache.executeSubSelectedArray\"] || 10000 /* defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"] */ ,\n            makeCacheKey: function(_a) {\n                var field = _a.field, array = _a.array, context = _a.context;\n                if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.supportsResultCaching)(context.store)) {\n                    return context.store.makeCacheKey(field, array, context.varString);\n                }\n            }\n        });\n    }\n    StoreReader.prototype.resetCanon = function() {\n        this.canon = new _object_canon_js__WEBPACK_IMPORTED_MODULE_5__.ObjectCanon();\n    };\n    /**\n     * Given a store and a query, return as much of the result as possible and\n     * identify if any data was missing from the store.\n     */ StoreReader.prototype.diffQueryAgainstStore = function(_a) {\n        var store = _a.store, query = _a.query, _b = _a.rootId, rootId = _b === void 0 ? \"ROOT_QUERY\" : _b, variables = _a.variables, _c = _a.returnPartialData, returnPartialData = _c === void 0 ? true : _c, _d = _a.canonizeResults, canonizeResults = _d === void 0 ? this.config.canonizeResults : _d;\n        var policies = this.config.cache.policies;\n        variables = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.getDefaultValues)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.getQueryDefinition)(query))), variables);\n        var rootRef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.makeReference)(rootId);\n        var execResult = this.executeSelectionSet({\n            selectionSet: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.getMainDefinition)(query).selectionSet,\n            objectOrReference: rootRef,\n            enclosingRef: rootRef,\n            context: (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({\n                store: store,\n                query: query,\n                policies: policies,\n                variables: variables,\n                varString: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.canonicalStringify)(variables),\n                canonizeResults: canonizeResults\n            }, (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.extractFragmentContext)(query, this.config.fragments))\n        });\n        var missing;\n        if (execResult.missing) {\n            // For backwards compatibility we still report an array of\n            // MissingFieldError objects, even though there will only ever be at most\n            // one of them, now that all missing field error messages are grouped\n            // together in the execResult.missing tree.\n            missing = [\n                new _core_types_common_js__WEBPACK_IMPORTED_MODULE_12__.MissingFieldError(firstMissing(execResult.missing), execResult.missing, query, variables)\n            ];\n            if (!returnPartialData) {\n                throw missing[0];\n            }\n        }\n        return {\n            result: execResult.result,\n            complete: !missing,\n            missing: missing\n        };\n    };\n    StoreReader.prototype.isFresh = function(result, parent, selectionSet, context) {\n        if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.supportsResultCaching)(context.store) && this.knownResults.get(result) === selectionSet) {\n            var latest = this.executeSelectionSet.peek(selectionSet, parent, context, // If result is canonical, then it could only have been previously\n            // cached by the canonizing version of executeSelectionSet, so we can\n            // avoid checking both possibilities here.\n            this.canon.isKnown(result));\n            if (latest && result === latest.result) {\n                return true;\n            }\n        }\n        return false;\n    };\n    // Uncached version of executeSelectionSet.\n    StoreReader.prototype.execSelectionSetImpl = function(_a) {\n        var _this = this;\n        var selectionSet = _a.selectionSet, objectOrReference = _a.objectOrReference, enclosingRef = _a.enclosingRef, context = _a.context;\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(objectOrReference) && !context.policies.rootTypenamesById[objectOrReference.__ref] && !context.store.has(objectOrReference.__ref)) {\n            return {\n                result: this.canon.empty,\n                missing: \"Dangling reference to missing \".concat(objectOrReference.__ref, \" object\")\n            };\n        }\n        var variables = context.variables, policies = context.policies, store = context.store;\n        var typename = store.getFieldValue(objectOrReference, \"__typename\");\n        var objectsToMerge = [];\n        var missing;\n        var missingMerger = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.DeepMerger();\n        if (this.config.addTypename && typeof typename === \"string\" && !policies.rootIdsByTypename[typename]) {\n            // Ensure we always include a default value for the __typename\n            // field, if we have one, and this.config.addTypename is true. Note\n            // that this field can be overridden by other merged objects.\n            objectsToMerge.push({\n                __typename: typename\n            });\n        }\n        function handleMissing(result, resultName) {\n            var _a;\n            if (result.missing) {\n                missing = missingMerger.merge(missing, (_a = {}, _a[resultName] = result.missing, _a));\n            }\n            return result.result;\n        }\n        var workSet = new Set(selectionSet.selections);\n        workSet.forEach(function(selection) {\n            var _a, _b;\n            // Omit fields with directives @skip(if: <truthy value>) or\n            // @include(if: <falsy value>).\n            if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.shouldInclude)(selection, variables)) return;\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isField)(selection)) {\n                var fieldValue = policies.readField({\n                    fieldName: selection.name.value,\n                    field: selection,\n                    variables: context.variables,\n                    from: objectOrReference\n                }, context);\n                var resultName = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.resultKeyNameFromField)(selection);\n                if (fieldValue === void 0) {\n                    if (!_utilities_index_js__WEBPACK_IMPORTED_MODULE_15__.addTypenameToDocument.added(selection)) {\n                        missing = missingMerger.merge(missing, (_a = {}, _a[resultName] = \"Can't find field '\".concat(selection.name.value, \"' on \").concat((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(objectOrReference) ? objectOrReference.__ref + \" object\" : \"object \" + JSON.stringify(objectOrReference, null, 2)), _a));\n                    }\n                } else if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_16__.isArray)(fieldValue)) {\n                    fieldValue = handleMissing(_this.executeSubSelectedArray({\n                        field: selection,\n                        array: fieldValue,\n                        enclosingRef: enclosingRef,\n                        context: context\n                    }), resultName);\n                } else if (!selection.selectionSet) {\n                    // If the field does not have a selection set, then we handle it\n                    // as a scalar value. To keep this.canon from canonicalizing\n                    // this value, we use this.canon.pass to wrap fieldValue in a\n                    // Pass object that this.canon.admit will later unwrap as-is.\n                    if (context.canonizeResults) {\n                        fieldValue = _this.canon.pass(fieldValue);\n                    }\n                } else if (fieldValue != null) {\n                    // In this case, because we know the field has a selection set,\n                    // it must be trying to query a GraphQLObjectType, which is why\n                    // fieldValue must be != null.\n                    fieldValue = handleMissing(_this.executeSelectionSet({\n                        selectionSet: selection.selectionSet,\n                        objectOrReference: fieldValue,\n                        enclosingRef: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(fieldValue) ? fieldValue : enclosingRef,\n                        context: context\n                    }), resultName);\n                }\n                if (fieldValue !== void 0) {\n                    objectsToMerge.push((_b = {}, _b[resultName] = fieldValue, _b));\n                }\n            } else {\n                var fragment = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_17__.getFragmentFromSelection)(selection, context.lookupFragment);\n                if (!fragment && selection.kind === graphql__WEBPACK_IMPORTED_MODULE_18__.Kind.FRAGMENT_SPREAD) {\n                    throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(9, selection.name.value);\n                }\n                if (fragment && policies.fragmentMatches(fragment, typename)) {\n                    fragment.selectionSet.selections.forEach(workSet.add, workSet);\n                }\n            }\n        });\n        var result = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.mergeDeepArray)(objectsToMerge);\n        var finalResult = {\n            result: result,\n            missing: missing\n        };\n        var frozen = context.canonizeResults ? this.canon.admit(finalResult) : (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_19__.maybeDeepFreeze)(finalResult);\n        // Store this result with its selection set so that we can quickly\n        // recognize it again in the StoreReader#isFresh method.\n        if (frozen.result) {\n            this.knownResults.set(frozen.result, selectionSet);\n        }\n        return frozen;\n    };\n    // Uncached version of executeSubSelectedArray.\n    StoreReader.prototype.execSubSelectedArrayImpl = function(_a) {\n        var _this = this;\n        var field = _a.field, array = _a.array, enclosingRef = _a.enclosingRef, context = _a.context;\n        var missing;\n        var missingMerger = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.DeepMerger();\n        function handleMissing(childResult, i) {\n            var _a;\n            if (childResult.missing) {\n                missing = missingMerger.merge(missing, (_a = {}, _a[i] = childResult.missing, _a));\n            }\n            return childResult.result;\n        }\n        if (field.selectionSet) {\n            array = array.filter(context.store.canRead);\n        }\n        array = array.map(function(item, i) {\n            // null value in array\n            if (item === null) {\n                return null;\n            }\n            // This is a nested array, recurse\n            if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_16__.isArray)(item)) {\n                return handleMissing(_this.executeSubSelectedArray({\n                    field: field,\n                    array: item,\n                    enclosingRef: enclosingRef,\n                    context: context\n                }), i);\n            }\n            // This is an object, run the selection set on it\n            if (field.selectionSet) {\n                return handleMissing(_this.executeSelectionSet({\n                    selectionSet: field.selectionSet,\n                    objectOrReference: item,\n                    enclosingRef: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(item) ? item : enclosingRef,\n                    context: context\n                }), i);\n            }\n            if (globalThis.__DEV__ !== false) {\n                assertSelectionSetForIdValue(context.store, field, item);\n            }\n            return item;\n        });\n        return {\n            result: context.canonizeResults ? this.canon.admit(array) : array,\n            missing: missing\n        };\n    };\n    return StoreReader;\n}();\n\nfunction firstMissing(tree) {\n    try {\n        JSON.stringify(tree, function(_, value) {\n            if (typeof value === \"string\") throw value;\n            return value;\n        });\n    } catch (result) {\n        return result;\n    }\n}\nfunction assertSelectionSetForIdValue(store, field, fieldValue) {\n    if (!field.selectionSet) {\n        var workSet_1 = new Set([\n            fieldValue\n        ]);\n        workSet_1.forEach(function(value) {\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_20__.isNonNullObject)(value)) {\n                (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(value), 10, (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.getTypenameFromStoreObject)(store, value), field.name.value);\n                Object.values(value).forEach(workSet_1.add, workSet_1);\n            }\n        });\n    }\n} //# sourceMappingURL=readFromStore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/cache/inmemory/readFromStore.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/cache/inmemory/writeToStore.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/cache/inmemory/writeToStore.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StoreWriter: () => (/* binding */ StoreWriter)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/equality */ \"(rsc)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wry/trie */ \"(rsc)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/cloneDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/@apollo/client/cache/inmemory/helpers.js\");\n/* harmony import */ var _policies_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./policies.js */ \"(rsc)/./node_modules/@apollo/client/cache/inmemory/policies.js\");\n\n\n\n\n\n\n\n\n// Since there are only four possible combinations of context.clientOnly and\n// context.deferred values, we should need at most four \"flavors\" of any given\n// WriteContext. To avoid creating multiple copies of the same context, we cache\n// the contexts in the context.flavors Map (shared by all flavors) according to\n// their clientOnly and deferred values (always in that order).\nfunction getContextFlavor(context, clientOnly, deferred) {\n    var key = \"\".concat(clientOnly).concat(deferred);\n    var flavored = context.flavors.get(key);\n    if (!flavored) {\n        context.flavors.set(key, flavored = context.clientOnly === clientOnly && context.deferred === deferred ? context : (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, context), {\n            clientOnly: clientOnly,\n            deferred: deferred\n        }));\n    }\n    return flavored;\n}\nvar StoreWriter = /** @class */ function() {\n    function StoreWriter(cache, reader, fragments) {\n        this.cache = cache;\n        this.reader = reader;\n        this.fragments = fragments;\n    }\n    StoreWriter.prototype.writeToStore = function(store, _a) {\n        var _this = this;\n        var query = _a.query, result = _a.result, dataId = _a.dataId, variables = _a.variables, overwrite = _a.overwrite;\n        var operationDefinition = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.getOperationDefinition)(query);\n        var merger = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.makeProcessedFieldsMerger)();\n        variables = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.getDefaultValues)(operationDefinition)), variables);\n        var context = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({\n            store: store,\n            written: Object.create(null),\n            merge: function(existing, incoming) {\n                return merger.merge(existing, incoming);\n            },\n            variables: variables,\n            varString: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.canonicalStringify)(variables)\n        }, (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.extractFragmentContext)(query, this.fragments)), {\n            overwrite: !!overwrite,\n            incomingById: new Map(),\n            clientOnly: false,\n            deferred: false,\n            flavors: new Map()\n        });\n        var ref = this.processSelectionSet({\n            result: result || Object.create(null),\n            dataId: dataId,\n            selectionSet: operationDefinition.selectionSet,\n            mergeTree: {\n                map: new Map()\n            },\n            context: context\n        });\n        if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(ref)) {\n            throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(11, result);\n        }\n        // So far, the store has not been modified, so now it's time to process\n        // context.incomingById and merge those incoming fields into context.store.\n        context.incomingById.forEach(function(_a, dataId) {\n            var storeObject = _a.storeObject, mergeTree = _a.mergeTree, fieldNodeSet = _a.fieldNodeSet;\n            var entityRef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.makeReference)(dataId);\n            if (mergeTree && mergeTree.map.size) {\n                var applied = _this.applyMerges(mergeTree, entityRef, storeObject, context);\n                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(applied)) {\n                    // Assume References returned by applyMerges have already been merged\n                    // into the store. See makeMergeObjectsFunction in policies.ts for an\n                    // example of how this can happen.\n                    return;\n                }\n                // Otherwise, applyMerges returned a StoreObject, whose fields we should\n                // merge into the store (see store.merge statement below).\n                storeObject = applied;\n            }\n            if (globalThis.__DEV__ !== false && !context.overwrite) {\n                var fieldsWithSelectionSets_1 = Object.create(null);\n                fieldNodeSet.forEach(function(field) {\n                    if (field.selectionSet) {\n                        fieldsWithSelectionSets_1[field.name.value] = true;\n                    }\n                });\n                var hasSelectionSet_1 = function(storeFieldName) {\n                    return fieldsWithSelectionSets_1[(0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.fieldNameFromStoreName)(storeFieldName)] === true;\n                };\n                var hasMergeFunction_1 = function(storeFieldName) {\n                    var childTree = mergeTree && mergeTree.map.get(storeFieldName);\n                    return Boolean(childTree && childTree.info && childTree.info.merge);\n                };\n                Object.keys(storeObject).forEach(function(storeFieldName) {\n                    // If a merge function was defined for this field, trust that it\n                    // did the right thing about (not) clobbering data. If the field\n                    // has no selection set, it's a scalar field, so it doesn't need\n                    // a merge function (even if it's an object, like JSON data).\n                    if (hasSelectionSet_1(storeFieldName) && !hasMergeFunction_1(storeFieldName)) {\n                        warnAboutDataLoss(entityRef, storeObject, storeFieldName, context.store);\n                    }\n                });\n            }\n            store.merge(dataId, storeObject);\n        });\n        // Any IDs written explicitly to the cache will be retained as\n        // reachable root IDs for garbage collection purposes. Although this\n        // logic includes root IDs like ROOT_QUERY and ROOT_MUTATION, their\n        // retainment counts are effectively ignored because cache.gc() always\n        // includes them in its root ID set.\n        store.retain(ref.__ref);\n        return ref;\n    };\n    StoreWriter.prototype.processSelectionSet = function(_a) {\n        var _this = this;\n        var dataId = _a.dataId, result = _a.result, selectionSet = _a.selectionSet, context = _a.context, // This object allows processSelectionSet to report useful information\n        // to its callers without explicitly returning that information.\n        mergeTree = _a.mergeTree;\n        var policies = this.cache.policies;\n        // This variable will be repeatedly updated using context.merge to\n        // accumulate all fields that need to be written into the store.\n        var incoming = Object.create(null);\n        // If typename was not passed in, infer it. Note that typename is\n        // always passed in for tricky-to-infer cases such as \"Query\" for\n        // ROOT_QUERY.\n        var typename = dataId && policies.rootTypenamesById[dataId] || (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.getTypenameFromResult)(result, selectionSet, context.fragmentMap) || dataId && context.store.get(dataId, \"__typename\");\n        if (\"string\" === typeof typename) {\n            incoming.__typename = typename;\n        }\n        // This readField function will be passed as context.readField in the\n        // KeyFieldsContext object created within policies.identify (called below).\n        // In addition to reading from the existing context.store (thanks to the\n        // policies.readField(options, context) line at the very bottom), this\n        // version of readField can read from Reference objects that are currently\n        // pending in context.incomingById, which is important whenever keyFields\n        // need to be extracted from a child object that processSelectionSet has\n        // turned into a Reference.\n        var readField = function() {\n            var options = (0,_policies_js__WEBPACK_IMPORTED_MODULE_8__.normalizeReadFieldOptions)(arguments, incoming, context.variables);\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(options.from)) {\n                var info = context.incomingById.get(options.from.__ref);\n                if (info) {\n                    var result_1 = policies.readField((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), {\n                        from: info.storeObject\n                    }), context);\n                    if (result_1 !== void 0) {\n                        return result_1;\n                    }\n                }\n            }\n            return policies.readField(options, context);\n        };\n        var fieldNodeSet = new Set();\n        this.flattenFields(selectionSet, result, // This WriteContext will be the default context value for fields returned\n        // by the flattenFields method, but some fields may be assigned a modified\n        // context, depending on the presence of @client and other directives.\n        context, typename).forEach(function(context, field) {\n            var _a;\n            var resultFieldKey = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.resultKeyNameFromField)(field);\n            var value = result[resultFieldKey];\n            fieldNodeSet.add(field);\n            if (value !== void 0) {\n                var storeFieldName = policies.getStoreFieldName({\n                    typename: typename,\n                    fieldName: field.name.value,\n                    field: field,\n                    variables: context.variables\n                });\n                var childTree = getChildMergeTree(mergeTree, storeFieldName);\n                var incomingValue = _this.processFieldValue(value, field, // Reset context.clientOnly and context.deferred to their default\n                // values before processing nested selection sets.\n                field.selectionSet ? getContextFlavor(context, false, false) : context, childTree);\n                // To determine if this field holds a child object with a merge function\n                // defined in its type policy (see PR #7070), we need to figure out the\n                // child object's __typename.\n                var childTypename = void 0;\n                // The field's value can be an object that has a __typename only if the\n                // field has a selection set. Otherwise incomingValue is scalar.\n                if (field.selectionSet && ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(incomingValue) || (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.storeValueIsStoreObject)(incomingValue))) {\n                    childTypename = readField(\"__typename\", incomingValue);\n                }\n                var merge = policies.getMergeFunction(typename, field.name.value, childTypename);\n                if (merge) {\n                    childTree.info = {\n                        // TODO Check compatibility against any existing childTree.field?\n                        field: field,\n                        typename: typename,\n                        merge: merge\n                    };\n                } else {\n                    maybeRecycleChildMergeTree(mergeTree, storeFieldName);\n                }\n                incoming = context.merge(incoming, (_a = {}, _a[storeFieldName] = incomingValue, _a));\n            } else if (globalThis.__DEV__ !== false && !context.clientOnly && !context.deferred && !_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.addTypenameToDocument.added(field) && // If the field has a read function, it may be a synthetic field or\n            // provide a default value, so its absence from the written data should\n            // not be cause for alarm.\n            !policies.getReadFunction(typename, field.name.value)) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(12, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.resultKeyNameFromField)(field), result);\n            }\n        });\n        // Identify the result object, even if dataId was already provided,\n        // since we always need keyObject below.\n        try {\n            var _b = policies.identify(result, {\n                typename: typename,\n                selectionSet: selectionSet,\n                fragmentMap: context.fragmentMap,\n                storeObject: incoming,\n                readField: readField\n            }), id = _b[0], keyObject = _b[1];\n            // If dataId was not provided, fall back to the id just generated by\n            // policies.identify.\n            dataId = dataId || id;\n            // Write any key fields that were used during identification, even if\n            // they were not mentioned in the original query.\n            if (keyObject) {\n                // TODO Reverse the order of the arguments?\n                incoming = context.merge(incoming, keyObject);\n            }\n        } catch (e) {\n            // If dataId was provided, tolerate failure of policies.identify.\n            if (!dataId) throw e;\n        }\n        if (\"string\" === typeof dataId) {\n            var dataRef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.makeReference)(dataId);\n            // Avoid processing the same entity object using the same selection\n            // set more than once. We use an array instead of a Set since most\n            // entity IDs will be written using only one selection set, so the\n            // size of this array is likely to be very small, meaning indexOf is\n            // likely to be faster than Set.prototype.has.\n            var sets = context.written[dataId] || (context.written[dataId] = []);\n            if (sets.indexOf(selectionSet) >= 0) return dataRef;\n            sets.push(selectionSet);\n            // If we're about to write a result object into the store, but we\n            // happen to know that the exact same (===) result object would be\n            // returned if we were to reread the result with the same inputs,\n            // then we can skip the rest of the processSelectionSet work for\n            // this object, and immediately return a Reference to it.\n            if (this.reader && this.reader.isFresh(result, dataRef, selectionSet, context)) {\n                return dataRef;\n            }\n            var previous_1 = context.incomingById.get(dataId);\n            if (previous_1) {\n                previous_1.storeObject = context.merge(previous_1.storeObject, incoming);\n                previous_1.mergeTree = mergeMergeTrees(previous_1.mergeTree, mergeTree);\n                fieldNodeSet.forEach(function(field) {\n                    return previous_1.fieldNodeSet.add(field);\n                });\n            } else {\n                context.incomingById.set(dataId, {\n                    storeObject: incoming,\n                    // Save a reference to mergeTree only if it is not empty, because\n                    // empty MergeTrees may be recycled by maybeRecycleChildMergeTree and\n                    // reused for entirely different parts of the result tree.\n                    mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,\n                    fieldNodeSet: fieldNodeSet\n                });\n            }\n            return dataRef;\n        }\n        return incoming;\n    };\n    StoreWriter.prototype.processFieldValue = function(value, field, context, mergeTree) {\n        var _this = this;\n        if (!field.selectionSet || value === null) {\n            // In development, we need to clone scalar values so that they can be\n            // safely frozen with maybeDeepFreeze in readFromStore.ts. In production,\n            // it's cheaper to store the scalar values directly in the cache.\n            return globalThis.__DEV__ !== false ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.cloneDeep)(value) : value;\n        }\n        if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(value)) {\n            return value.map(function(item, i) {\n                var value = _this.processFieldValue(item, field, context, getChildMergeTree(mergeTree, i));\n                maybeRecycleChildMergeTree(mergeTree, i);\n                return value;\n            });\n        }\n        return this.processSelectionSet({\n            result: value,\n            selectionSet: field.selectionSet,\n            context: context,\n            mergeTree: mergeTree\n        });\n    };\n    // Implements https://spec.graphql.org/draft/#sec-Field-Collection, but with\n    // some additions for tracking @client and @defer directives.\n    StoreWriter.prototype.flattenFields = function(selectionSet, result, context, typename) {\n        if (typename === void 0) {\n            typename = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.getTypenameFromResult)(result, selectionSet, context.fragmentMap);\n        }\n        var fieldMap = new Map();\n        var policies = this.cache.policies;\n        var limitingTrie = new _wry_trie__WEBPACK_IMPORTED_MODULE_2__.Trie(false); // No need for WeakMap, since limitingTrie does not escape.\n        (function flatten(selectionSet, inheritedContext) {\n            var visitedNode = limitingTrie.lookup(selectionSet, // Because we take inheritedClientOnly and inheritedDeferred into\n            // consideration here (in addition to selectionSet), it's possible for\n            // the same selection set to be flattened more than once, if it appears\n            // in the query with different @client and/or @directive configurations.\n            inheritedContext.clientOnly, inheritedContext.deferred);\n            if (visitedNode.visited) return;\n            visitedNode.visited = true;\n            selectionSet.selections.forEach(function(selection) {\n                if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.shouldInclude)(selection, context.variables)) return;\n                var clientOnly = inheritedContext.clientOnly, deferred = inheritedContext.deferred;\n                if (// Since the presence of @client or @defer on this field can only\n                // cause clientOnly or deferred to become true, we can skip the\n                // forEach loop if both clientOnly and deferred are already true.\n                !(clientOnly && deferred) && (0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isNonEmptyArray)(selection.directives)) {\n                    selection.directives.forEach(function(dir) {\n                        var name = dir.name.value;\n                        if (name === \"client\") clientOnly = true;\n                        if (name === \"defer\") {\n                            var args = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.argumentsObjectFromField)(dir, context.variables);\n                            // The @defer directive takes an optional args.if boolean\n                            // argument, similar to @include(if: boolean). Note that\n                            // @defer(if: false) does not make context.deferred false, but\n                            // instead behaves as if there was no @defer directive.\n                            if (!args || args.if !== false) {\n                                deferred = true;\n                            }\n                        // TODO In the future, we may want to record args.label using\n                        // context.deferred, if a label is specified.\n                        }\n                    });\n                }\n                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isField)(selection)) {\n                    var existing = fieldMap.get(selection);\n                    if (existing) {\n                        // If this field has been visited along another recursive path\n                        // before, the final context should have clientOnly or deferred set\n                        // to true only if *all* paths have the directive (hence the &&).\n                        clientOnly = clientOnly && existing.clientOnly;\n                        deferred = deferred && existing.deferred;\n                    }\n                    fieldMap.set(selection, getContextFlavor(context, clientOnly, deferred));\n                } else {\n                    var fragment = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.getFragmentFromSelection)(selection, context.lookupFragment);\n                    if (!fragment && selection.kind === graphql__WEBPACK_IMPORTED_MODULE_14__.Kind.FRAGMENT_SPREAD) {\n                        throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(13, selection.name.value);\n                    }\n                    if (fragment && policies.fragmentMatches(fragment, typename, result, context.variables)) {\n                        flatten(fragment.selectionSet, getContextFlavor(context, clientOnly, deferred));\n                    }\n                }\n            });\n        })(selectionSet, context);\n        return fieldMap;\n    };\n    StoreWriter.prototype.applyMerges = function(mergeTree, existing, incoming, context, getStorageArgs) {\n        var _a;\n        var _this = this;\n        if (mergeTree.map.size && !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(incoming)) {\n            var e_1 = // Items in the same position in different arrays are not\n            // necessarily related to each other, so when incoming is an array\n            // we process its elements as if there was no existing data.\n            !(0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(incoming) && // Likewise, existing must be either a Reference or a StoreObject\n            // in order for its fields to be safe to merge with the fields of\n            // the incoming object.\n            ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(existing) || (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.storeValueIsStoreObject)(existing)) ? existing : void 0;\n            // This narrowing is implied by mergeTree.map.size > 0 and\n            // !isReference(incoming), though TypeScript understandably cannot\n            // hope to infer this type.\n            var i_1 = incoming;\n            // The options.storage objects provided to read and merge functions\n            // are derived from the identity of the parent object plus a\n            // sequence of storeFieldName strings/numbers identifying the nested\n            // field name path of each field value to be merged.\n            if (e_1 && !getStorageArgs) {\n                getStorageArgs = [\n                    (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(e_1) ? e_1.__ref : e_1\n                ];\n            }\n            // It's possible that applying merge functions to this subtree will\n            // not change the incoming data, so this variable tracks the fields\n            // that did change, so we can create a new incoming object when (and\n            // only when) at least one incoming field has changed. We use a Map\n            // to preserve the type of numeric keys.\n            var changedFields_1;\n            var getValue_1 = function(from, name) {\n                return (0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(from) ? typeof name === \"number\" ? from[name] : void 0 : context.store.getFieldValue(from, String(name));\n            };\n            mergeTree.map.forEach(function(childTree, storeFieldName) {\n                var eVal = getValue_1(e_1, storeFieldName);\n                var iVal = getValue_1(i_1, storeFieldName);\n                // If we have no incoming data, leave any existing data untouched.\n                if (void 0 === iVal) return;\n                if (getStorageArgs) {\n                    getStorageArgs.push(storeFieldName);\n                }\n                var aVal = _this.applyMerges(childTree, eVal, iVal, context, getStorageArgs);\n                if (aVal !== iVal) {\n                    changedFields_1 = changedFields_1 || new Map();\n                    changedFields_1.set(storeFieldName, aVal);\n                }\n                if (getStorageArgs) {\n                    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(getStorageArgs.pop() === storeFieldName);\n                }\n            });\n            if (changedFields_1) {\n                // Shallow clone i so we can add changed fields to it.\n                incoming = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(i_1) ? i_1.slice(0) : (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, i_1);\n                changedFields_1.forEach(function(value, name) {\n                    incoming[name] = value;\n                });\n            }\n        }\n        if (mergeTree.info) {\n            return this.cache.policies.runMergeFunction(existing, incoming, mergeTree.info, context, getStorageArgs && (_a = context.store).getStorage.apply(_a, getStorageArgs));\n        }\n        return incoming;\n    };\n    return StoreWriter;\n}();\n\nvar emptyMergeTreePool = [];\nfunction getChildMergeTree(_a, name) {\n    var map = _a.map;\n    if (!map.has(name)) {\n        map.set(name, emptyMergeTreePool.pop() || {\n            map: new Map()\n        });\n    }\n    return map.get(name);\n}\nfunction mergeMergeTrees(left, right) {\n    if (left === right || !right || mergeTreeIsEmpty(right)) return left;\n    if (!left || mergeTreeIsEmpty(left)) return right;\n    var info = left.info && right.info ? (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, left.info), right.info) : left.info || right.info;\n    var needToMergeMaps = left.map.size && right.map.size;\n    var map = needToMergeMaps ? new Map() : left.map.size ? left.map : right.map;\n    var merged = {\n        info: info,\n        map: map\n    };\n    if (needToMergeMaps) {\n        var remainingRightKeys_1 = new Set(right.map.keys());\n        left.map.forEach(function(leftTree, key) {\n            merged.map.set(key, mergeMergeTrees(leftTree, right.map.get(key)));\n            remainingRightKeys_1.delete(key);\n        });\n        remainingRightKeys_1.forEach(function(key) {\n            merged.map.set(key, mergeMergeTrees(right.map.get(key), left.map.get(key)));\n        });\n    }\n    return merged;\n}\nfunction mergeTreeIsEmpty(tree) {\n    return !tree || !(tree.info || tree.map.size);\n}\nfunction maybeRecycleChildMergeTree(_a, name) {\n    var map = _a.map;\n    var childTree = map.get(name);\n    if (childTree && mergeTreeIsEmpty(childTree)) {\n        emptyMergeTreePool.push(childTree);\n        map.delete(name);\n    }\n}\nvar warnings = new Set();\n// Note that this function is unused in production, and thus should be\n// pruned by any well-configured minifier.\nfunction warnAboutDataLoss(existingRef, incomingObj, storeFieldName, store) {\n    var getChild = function(objOrRef) {\n        var child = store.getFieldValue(objOrRef, storeFieldName);\n        return typeof child === \"object\" && child;\n    };\n    var existing = getChild(existingRef);\n    if (!existing) return;\n    var incoming = getChild(incomingObj);\n    if (!incoming) return;\n    // It's always safe to replace a reference, since it refers to data\n    // safely stored elsewhere.\n    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(existing)) return;\n    // If the values are structurally equivalent, we do not need to worry\n    // about incoming replacing existing.\n    if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(existing, incoming)) return;\n    // If we're replacing every key of the existing object, then the\n    // existing data would be overwritten even if the objects were\n    // normalized, so warning would not be helpful here.\n    if (Object.keys(existing).every(function(key) {\n        return store.getFieldValue(incoming, key) !== void 0;\n    })) {\n        return;\n    }\n    var parentType = store.getFieldValue(existingRef, \"__typename\") || store.getFieldValue(incomingObj, \"__typename\");\n    var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.fieldNameFromStoreName)(storeFieldName);\n    var typeDotName = \"\".concat(parentType, \".\").concat(fieldName);\n    // Avoid warning more than once for the same type and field name.\n    if (warnings.has(typeDotName)) return;\n    warnings.add(typeDotName);\n    var childTypenames = [];\n    // Arrays do not have __typename fields, and always need a custom merge\n    // function, even if their elements are normalized entities.\n    if (!(0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(existing) && !(0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(incoming)) {\n        [\n            existing,\n            incoming\n        ].forEach(function(child) {\n            var typename = store.getFieldValue(child, \"__typename\");\n            if (typeof typename === \"string\" && !childTypenames.includes(typename)) {\n                childTypenames.push(typename);\n            }\n        });\n    }\n    globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(14, fieldName, parentType, childTypenames.length ? \"either ensure all objects of type \" + childTypenames.join(\" and \") + \" have an ID or a custom merge function, or \" : \"\", typeDotName, existing, incoming);\n} //# sourceMappingURL=writeToStore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/cache/inmemory/writeToStore.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/core/ApolloClient.js":
/*!**********************************************************!*\
  !*** ./node_modules/@apollo/client/core/ApolloClient.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloClient: () => (/* binding */ ApolloClient),\n/* harmony export */   mergeOptions: () => (/* reexport safe */ _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeOptions)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _link_core_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../link/core/index.js */ \"(rsc)/./node_modules/@apollo/client/link/core/ApolloLink.js\");\n/* harmony import */ var _link_core_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../link/core/index.js */ \"(rsc)/./node_modules/@apollo/client/link/core/execute.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../version.js */ \"(rsc)/./node_modules/@apollo/client/version.js\");\n/* harmony import */ var _link_http_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../link/http/index.js */ \"(rsc)/./node_modules/@apollo/client/link/http/HttpLink.js\");\n/* harmony import */ var _QueryManager_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./QueryManager.js */ \"(rsc)/./node_modules/@apollo/client/core/QueryManager.js\");\n/* harmony import */ var _LocalState_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./LocalState.js */ \"(rsc)/./node_modules/@apollo/client/core/LocalState.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/mergeOptions.js\");\n/* harmony import */ var _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utilities/caching/getMemoryInternals.js */ \"(rsc)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n\n\n\n\n\n\n\nvar hasSuggestedDevtools = false;\n// Though mergeOptions now resides in @apollo/client/utilities, it was\n// previously declared and exported from this module, and then reexported from\n// @apollo/client/core. Since we need to preserve that API anyway, the easiest\n// solution is to reexport mergeOptions where it was previously declared (here).\n\n\n\n/**\n * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries\n * and mutations) to a GraphQL spec-compliant server over an {@link ApolloLink} instance,\n * receive results from the server and cache the results in a store. It also delivers updates\n * to GraphQL queries through {@link Observable} instances.\n */ var ApolloClient = /** @class */ function() {\n    /**\n     * Constructs an instance of {@link ApolloClient}.\n     *\n     * @example\n     * ```js\n     * import { ApolloClient, InMemoryCache } from '@apollo/client';\n     *\n     * const cache = new InMemoryCache();\n     *\n     * const client = new ApolloClient({\n     *   // Provide required constructor fields\n     *   cache: cache,\n     *   uri: 'http://localhost:4000/',\n     *\n     *   // Provide some optional constructor fields\n     *   name: 'react-web-client',\n     *   version: '1.3',\n     *   queryDeduplication: false,\n     *   defaultOptions: {\n     *     watchQuery: {\n     *       fetchPolicy: 'cache-and-network',\n     *     },\n     *   },\n     * });\n     * ```\n     */ function ApolloClient(options) {\n        var _this = this;\n        this.resetStoreCallbacks = [];\n        this.clearStoreCallbacks = [];\n        if (!options.cache) {\n            throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(15);\n        }\n        var uri = options.uri, credentials = options.credentials, headers = options.headers, cache = options.cache, documentTransform = options.documentTransform, _a = options.ssrMode, ssrMode = _a === void 0 ? false : _a, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, // Expose the client instance as window.__APOLLO_CLIENT__ and call\n        // onBroadcast in queryManager.broadcastQueries to enable browser\n        // devtools, but disable them by default in production.\n        _c = options.connectToDevTools, // Expose the client instance as window.__APOLLO_CLIENT__ and call\n        // onBroadcast in queryManager.broadcastQueries to enable browser\n        // devtools, but disable them by default in production.\n        connectToDevTools = _c === void 0 ?  false && 0 : _c, _d = options.queryDeduplication, queryDeduplication = _d === void 0 ? true : _d, defaultOptions = options.defaultOptions, defaultContext = options.defaultContext, _e = options.assumeImmutableResults, assumeImmutableResults = _e === void 0 ? cache.assumeImmutableResults : _e, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwarenessName = options.name, clientAwarenessVersion = options.version;\n        var link = options.link;\n        if (!link) {\n            link = uri ? new _link_http_index_js__WEBPACK_IMPORTED_MODULE_2__.HttpLink({\n                uri: uri,\n                credentials: credentials,\n                headers: headers\n            }) : _link_core_index_js__WEBPACK_IMPORTED_MODULE_3__.ApolloLink.empty();\n        }\n        this.link = link;\n        this.cache = cache;\n        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n        this.queryDeduplication = queryDeduplication;\n        this.defaultOptions = defaultOptions || Object.create(null);\n        this.typeDefs = typeDefs;\n        if (ssrForceFetchDelay) {\n            setTimeout(function() {\n                return _this.disableNetworkFetches = false;\n            }, ssrForceFetchDelay);\n        }\n        this.watchQuery = this.watchQuery.bind(this);\n        this.query = this.query.bind(this);\n        this.mutate = this.mutate.bind(this);\n        this.resetStore = this.resetStore.bind(this);\n        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n        this.version = _version_js__WEBPACK_IMPORTED_MODULE_4__.version;\n        this.localState = new _LocalState_js__WEBPACK_IMPORTED_MODULE_5__.LocalState({\n            cache: cache,\n            client: this,\n            resolvers: resolvers,\n            fragmentMatcher: fragmentMatcher\n        });\n        this.queryManager = new _QueryManager_js__WEBPACK_IMPORTED_MODULE_6__.QueryManager({\n            cache: this.cache,\n            link: this.link,\n            defaultOptions: this.defaultOptions,\n            defaultContext: defaultContext,\n            documentTransform: documentTransform,\n            queryDeduplication: queryDeduplication,\n            ssrMode: ssrMode,\n            clientAwareness: {\n                name: clientAwarenessName,\n                version: clientAwarenessVersion\n            },\n            localState: this.localState,\n            assumeImmutableResults: assumeImmutableResults,\n            onBroadcast: connectToDevTools ? function() {\n                if (_this.devToolsHookCb) {\n                    _this.devToolsHookCb({\n                        action: {},\n                        state: {\n                            queries: _this.queryManager.getQueryStore(),\n                            mutations: _this.queryManager.mutationStore || {}\n                        },\n                        dataWithOptimisticResults: _this.cache.extract(true)\n                    });\n                }\n            } : void 0\n        });\n        if (connectToDevTools) this.connectToDevTools();\n    }\n    ApolloClient.prototype.connectToDevTools = function() {\n        if (false) { var devtoolsSymbol, windowWithDevTools; }\n        /**\n         * Suggest installing the devtools for developers who don't have them\n         */ if (!hasSuggestedDevtools && globalThis.__DEV__ !== false) {\n            hasSuggestedDevtools = true;\n            setTimeout(function() {\n                if (false) { var url, ua, nav; }\n            }, 10000);\n        }\n    };\n    Object.defineProperty(ApolloClient.prototype, \"documentTransform\", {\n        /**\n         * The `DocumentTransform` used to modify GraphQL documents before a request\n         * is made. If a custom `DocumentTransform` is not provided, this will be the\n         * default document transform.\n         */ get: function() {\n            return this.queryManager.documentTransform;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Call this method to terminate any active client processes, making it safe\n     * to dispose of this `ApolloClient` instance.\n     */ ApolloClient.prototype.stop = function() {\n        this.queryManager.stop();\n    };\n    /**\n     * This watches the cache store of the query according to the options specified and\n     * returns an {@link ObservableQuery}. We can subscribe to this {@link ObservableQuery} and\n     * receive updated results through a GraphQL observer when the cache store changes.\n     *\n     * Note that this method is not an implementation of GraphQL subscriptions. Rather,\n     * it uses Apollo's store in order to reactively deliver updates to your query results.\n     *\n     * For example, suppose you call watchQuery on a GraphQL query that fetches a person's\n     * first and last name and this person has a particular object identifier, provided by\n     * dataIdFromObject. Later, a different query fetches that same person's\n     * first and last name and the first name has now changed. Then, any observers associated\n     * with the results of the first query will be updated with a new result object.\n     *\n     * Note that if the cache does not change, the subscriber will *not* be notified.\n     *\n     * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for\n     * a description of store reactivity.\n     */ ApolloClient.prototype.watchQuery = function(options) {\n        if (this.defaultOptions.watchQuery) {\n            options = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeOptions)(this.defaultOptions.watchQuery, options);\n        }\n        // XXX Overwriting options is probably not the best way to do this long term...\n        if (this.disableNetworkFetches && (options.fetchPolicy === \"network-only\" || options.fetchPolicy === \"cache-and-network\")) {\n            options = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, options), {\n                fetchPolicy: \"cache-first\"\n            });\n        }\n        return this.queryManager.watchQuery(options);\n    };\n    /**\n     * This resolves a single query according to the options specified and\n     * returns a `Promise` which is either resolved with the resulting data\n     * or rejected with an error.\n     *\n     * @param options - An object of type {@link QueryOptions} that allows us to\n     * describe how this query should be treated e.g. whether it should hit the\n     * server at all or just resolve from the cache, etc.\n     */ ApolloClient.prototype.query = function(options) {\n        if (this.defaultOptions.query) {\n            options = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeOptions)(this.defaultOptions.query, options);\n        }\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(options.fetchPolicy !== \"cache-and-network\", 16);\n        if (this.disableNetworkFetches && options.fetchPolicy === \"network-only\") {\n            options = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, options), {\n                fetchPolicy: \"cache-first\"\n            });\n        }\n        return this.queryManager.query(options);\n    };\n    /**\n     * This resolves a single mutation according to the options specified and returns a\n     * Promise which is either resolved with the resulting data or rejected with an\n     * error.\n     *\n     * It takes options as an object with the following keys and values:\n     */ ApolloClient.prototype.mutate = function(options) {\n        if (this.defaultOptions.mutate) {\n            options = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeOptions)(this.defaultOptions.mutate, options);\n        }\n        return this.queryManager.mutate(options);\n    };\n    /**\n     * This subscribes to a graphql subscription according to the options specified and returns an\n     * {@link Observable} which either emits received data or an error.\n     */ ApolloClient.prototype.subscribe = function(options) {\n        return this.queryManager.startGraphQLSubscription(options);\n    };\n    /**\n     * Tries to read some data from the store in the shape of the provided\n     * GraphQL query without making a network request. This method will start at\n     * the root query. To start at a specific id returned by `dataIdFromObject`\n     * use `readFragment`.\n     *\n     * @param optimistic - Set to `true` to allow `readQuery` to return\n     * optimistic results. Is `false` by default.\n     */ ApolloClient.prototype.readQuery = function(options, optimistic) {\n        if (optimistic === void 0) {\n            optimistic = false;\n        }\n        return this.cache.readQuery(options, optimistic);\n    };\n    /**\n     * Tries to read some data from the store in the shape of the provided\n     * GraphQL fragment without making a network request. This method will read a\n     * GraphQL fragment from any arbitrary id that is currently cached, unlike\n     * `readQuery` which will only read from the root query.\n     *\n     * You must pass in a GraphQL document with a single fragment or a document\n     * with multiple fragments that represent what you are reading. If you pass\n     * in a document with multiple fragments then you must also specify a\n     * `fragmentName`.\n     *\n     * @param optimistic - Set to `true` to allow `readFragment` to return\n     * optimistic results. Is `false` by default.\n     */ ApolloClient.prototype.readFragment = function(options, optimistic) {\n        if (optimistic === void 0) {\n            optimistic = false;\n        }\n        return this.cache.readFragment(options, optimistic);\n    };\n    /**\n     * Writes some data in the shape of the provided GraphQL query directly to\n     * the store. This method will start at the root query. To start at a\n     * specific id returned by `dataIdFromObject` then use `writeFragment`.\n     */ ApolloClient.prototype.writeQuery = function(options) {\n        var ref = this.cache.writeQuery(options);\n        if (options.broadcast !== false) {\n            this.queryManager.broadcastQueries();\n        }\n        return ref;\n    };\n    /**\n     * Writes some data in the shape of the provided GraphQL fragment directly to\n     * the store. This method will write to a GraphQL fragment from any arbitrary\n     * id that is currently cached, unlike `writeQuery` which will only write\n     * from the root query.\n     *\n     * You must pass in a GraphQL document with a single fragment or a document\n     * with multiple fragments that represent what you are writing. If you pass\n     * in a document with multiple fragments then you must also specify a\n     * `fragmentName`.\n     */ ApolloClient.prototype.writeFragment = function(options) {\n        var ref = this.cache.writeFragment(options);\n        if (options.broadcast !== false) {\n            this.queryManager.broadcastQueries();\n        }\n        return ref;\n    };\n    ApolloClient.prototype.__actionHookForDevTools = function(cb) {\n        this.devToolsHookCb = cb;\n    };\n    ApolloClient.prototype.__requestRaw = function(payload) {\n        return (0,_link_core_index_js__WEBPACK_IMPORTED_MODULE_8__.execute)(this.link, payload);\n    };\n    /**\n     * Resets your entire store by clearing out your cache and then re-executing\n     * all of your active queries. This makes it so that you may guarantee that\n     * there is no data left in your store from a time before you called this\n     * method.\n     *\n     * `resetStore()` is useful when your user just logged out. You’ve removed the\n     * user session, and you now want to make sure that any references to data you\n     * might have fetched while the user session was active is gone.\n     *\n     * It is important to remember that `resetStore()` *will* refetch any active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     */ ApolloClient.prototype.resetStore = function() {\n        var _this = this;\n        return Promise.resolve().then(function() {\n            return _this.queryManager.clearStore({\n                discardWatches: false\n            });\n        }).then(function() {\n            return Promise.all(_this.resetStoreCallbacks.map(function(fn) {\n                return fn();\n            }));\n        }).then(function() {\n            return _this.reFetchObservableQueries();\n        });\n    };\n    /**\n     * Remove all data from the store. Unlike `resetStore`, `clearStore` will\n     * not refetch any active queries.\n     */ ApolloClient.prototype.clearStore = function() {\n        var _this = this;\n        return Promise.resolve().then(function() {\n            return _this.queryManager.clearStore({\n                discardWatches: true\n            });\n        }).then(function() {\n            return Promise.all(_this.clearStoreCallbacks.map(function(fn) {\n                return fn();\n            }));\n        });\n    };\n    /**\n     * Allows callbacks to be registered that are executed when the store is\n     * reset. `onResetStore` returns an unsubscribe function that can be used\n     * to remove registered callbacks.\n     */ ApolloClient.prototype.onResetStore = function(cb) {\n        var _this = this;\n        this.resetStoreCallbacks.push(cb);\n        return function() {\n            _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function(c) {\n                return c !== cb;\n            });\n        };\n    };\n    /**\n     * Allows callbacks to be registered that are executed when the store is\n     * cleared. `onClearStore` returns an unsubscribe function that can be used\n     * to remove registered callbacks.\n     */ ApolloClient.prototype.onClearStore = function(cb) {\n        var _this = this;\n        this.clearStoreCallbacks.push(cb);\n        return function() {\n            _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function(c) {\n                return c !== cb;\n            });\n        };\n    };\n    /**\n     * Refetches all of your active queries.\n     *\n     * `reFetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage\n     *\n     * It is important to remember that `reFetchObservableQueries()` *will* refetch any active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.\n     */ ApolloClient.prototype.reFetchObservableQueries = function(includeStandby) {\n        return this.queryManager.reFetchObservableQueries(includeStandby);\n    };\n    /**\n     * Refetches specified active queries. Similar to \"reFetchObservableQueries()\" but with a specific list of queries.\n     *\n     * `refetchQueries()` is useful for use cases to imperatively refresh a selection of queries.\n     *\n     * It is important to remember that `refetchQueries()` *will* refetch specified active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     */ ApolloClient.prototype.refetchQueries = function(options) {\n        var map = this.queryManager.refetchQueries(options);\n        var queries = [];\n        var results = [];\n        map.forEach(function(result, obsQuery) {\n            queries.push(obsQuery);\n            results.push(result);\n        });\n        var result = Promise.all(results);\n        // In case you need the raw results immediately, without awaiting\n        // Promise.all(results):\n        result.queries = queries;\n        result.results = results;\n        // If you decide to ignore the result Promise because you're using\n        // result.queries and result.results instead, you shouldn't have to worry\n        // about preventing uncaught rejections for the Promise.all result.\n        result.catch(function(error) {\n            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.debug(17, error);\n        });\n        return result;\n    };\n    /**\n     * Get all currently active `ObservableQuery` objects, in a `Map` keyed by\n     * query ID strings.\n     *\n     * An \"active\" query is one that has observers and a `fetchPolicy` other than\n     * \"standby\" or \"cache-only\".\n     *\n     * You can include all `ObservableQuery` objects (including the inactive ones)\n     * by passing \"all\" instead of \"active\", or you can include just a subset of\n     * active queries by passing an array of query names or DocumentNode objects.\n     */ ApolloClient.prototype.getObservableQueries = function(include) {\n        if (include === void 0) {\n            include = \"active\";\n        }\n        return this.queryManager.getObservableQueries(include);\n    };\n    /**\n     * Exposes the cache's complete state, in a serializable format for later restoration.\n     */ ApolloClient.prototype.extract = function(optimistic) {\n        return this.cache.extract(optimistic);\n    };\n    /**\n     * Replaces existing state in the cache (if any) with the values expressed by\n     * `serializedState`.\n     *\n     * Called when hydrating a cache (server side rendering, or offline storage),\n     * and also (potentially) during hot reloads.\n     */ ApolloClient.prototype.restore = function(serializedState) {\n        return this.cache.restore(serializedState);\n    };\n    /**\n     * Add additional local resolvers.\n     */ ApolloClient.prototype.addResolvers = function(resolvers) {\n        this.localState.addResolvers(resolvers);\n    };\n    /**\n     * Set (override existing) local resolvers.\n     */ ApolloClient.prototype.setResolvers = function(resolvers) {\n        this.localState.setResolvers(resolvers);\n    };\n    /**\n     * Get all registered local resolvers.\n     */ ApolloClient.prototype.getResolvers = function() {\n        return this.localState.getResolvers();\n    };\n    /**\n     * Set a custom local state fragment matcher.\n     */ ApolloClient.prototype.setLocalStateFragmentMatcher = function(fragmentMatcher) {\n        this.localState.setFragmentMatcher(fragmentMatcher);\n    };\n    /**\n     * Define a new ApolloLink (or link chain) that Apollo Client will use.\n     */ ApolloClient.prototype.setLink = function(newLink) {\n        this.link = this.queryManager.link = newLink;\n    };\n    Object.defineProperty(ApolloClient.prototype, \"defaultContext\", {\n        get: function() {\n            return this.queryManager.defaultContext;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return ApolloClient;\n}();\n\nif (globalThis.__DEV__ !== false) {\n    ApolloClient.prototype.getMemoryInternals = _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_9__.getApolloClientMemoryInternals;\n} //# sourceMappingURL=ApolloClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/core/ApolloClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/core/LocalState.js":
/*!********************************************************!*\
  !*** ./node_modules/@apollo/client/core/LocalState.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LocalState: () => (/* binding */ LocalState)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/visitor.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/predicates.mjs\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _cache_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../cache/index.js */ \"(rsc)/./node_modules/@apollo/client/cache/inmemory/reactiveVars.js\");\n\n\n\n\n\nvar LocalState = /** @class */ function() {\n    function LocalState(_a) {\n        var cache = _a.cache, client = _a.client, resolvers = _a.resolvers, fragmentMatcher = _a.fragmentMatcher;\n        this.selectionsToResolveCache = new WeakMap();\n        this.cache = cache;\n        if (client) {\n            this.client = client;\n        }\n        if (resolvers) {\n            this.addResolvers(resolvers);\n        }\n        if (fragmentMatcher) {\n            this.setFragmentMatcher(fragmentMatcher);\n        }\n    }\n    LocalState.prototype.addResolvers = function(resolvers) {\n        var _this = this;\n        this.resolvers = this.resolvers || {};\n        if (Array.isArray(resolvers)) {\n            resolvers.forEach(function(resolverGroup) {\n                _this.resolvers = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)(_this.resolvers, resolverGroup);\n            });\n        } else {\n            this.resolvers = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)(this.resolvers, resolvers);\n        }\n    };\n    LocalState.prototype.setResolvers = function(resolvers) {\n        this.resolvers = {};\n        this.addResolvers(resolvers);\n    };\n    LocalState.prototype.getResolvers = function() {\n        return this.resolvers || {};\n    };\n    // Run local client resolvers against the incoming query and remote data.\n    // Locally resolved field values are merged with the incoming remote data,\n    // and returned. Note that locally resolved fields will overwrite\n    // remote data using the same field name.\n    LocalState.prototype.runResolvers = function(_a) {\n        var document = _a.document, remoteResult = _a.remoteResult, context = _a.context, variables = _a.variables, _b = _a.onlyRunForcedResolvers, onlyRunForcedResolvers = _b === void 0 ? false : _b;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function() {\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_c) {\n                if (document) {\n                    return [\n                        2 /*return*/ ,\n                        this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function(localResult) {\n                            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, remoteResult), {\n                                data: localResult.result\n                            });\n                        })\n                    ];\n                }\n                return [\n                    2 /*return*/ ,\n                    remoteResult\n                ];\n            });\n        });\n    };\n    LocalState.prototype.setFragmentMatcher = function(fragmentMatcher) {\n        this.fragmentMatcher = fragmentMatcher;\n    };\n    LocalState.prototype.getFragmentMatcher = function() {\n        return this.fragmentMatcher;\n    };\n    // Client queries contain everything in the incoming document (if a @client\n    // directive is found).\n    LocalState.prototype.clientQuery = function(document) {\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.hasDirectives)([\n            \"client\"\n        ], document)) {\n            if (this.resolvers) {\n                return document;\n            }\n        }\n        return null;\n    };\n    // Server queries are stripped of all @client based selection sets.\n    LocalState.prototype.serverQuery = function(document) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.removeClientSetsFromDocument)(document);\n    };\n    LocalState.prototype.prepareContext = function(context) {\n        var cache = this.cache;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, context), {\n            cache: cache,\n            // Getting an entry's cache key is useful for local state resolvers.\n            getCacheKey: function(obj) {\n                return cache.identify(obj);\n            }\n        });\n    };\n    // To support `@client @export(as: \"someVar\")` syntax, we'll first resolve\n    // @client @export fields locally, then pass the resolved values back to be\n    // used alongside the original operation variables.\n    LocalState.prototype.addExportedVariables = function(document, variables, context) {\n        if (variables === void 0) {\n            variables = {};\n        }\n        if (context === void 0) {\n            context = {};\n        }\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function() {\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_a) {\n                if (document) {\n                    return [\n                        2 /*return*/ ,\n                        this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function(data) {\n                            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, variables), data.exportedVariables);\n                        })\n                    ];\n                }\n                return [\n                    2 /*return*/ ,\n                    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, variables)\n                ];\n            });\n        });\n    };\n    LocalState.prototype.shouldForceResolvers = function(document) {\n        var forceResolvers = false;\n        (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(document, {\n            Directive: {\n                enter: function(node) {\n                    if (node.name.value === \"client\" && node.arguments) {\n                        forceResolvers = node.arguments.some(function(arg) {\n                            return arg.name.value === \"always\" && arg.value.kind === \"BooleanValue\" && arg.value.value === true;\n                        });\n                        if (forceResolvers) {\n                            return graphql__WEBPACK_IMPORTED_MODULE_5__.BREAK;\n                        }\n                    }\n                }\n            }\n        });\n        return forceResolvers;\n    };\n    // Query the cache and return matching data.\n    LocalState.prototype.buildRootValueFromCache = function(document, variables) {\n        return this.cache.diff({\n            query: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.buildQueryFromSelectionSet)(document),\n            variables: variables,\n            returnPartialData: true,\n            optimistic: false\n        }).result;\n    };\n    LocalState.prototype.resolveDocument = function(document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n        if (context === void 0) {\n            context = {};\n        }\n        if (variables === void 0) {\n            variables = {};\n        }\n        if (fragmentMatcher === void 0) {\n            fragmentMatcher = function() {\n                return true;\n            };\n        }\n        if (onlyRunForcedResolvers === void 0) {\n            onlyRunForcedResolvers = false;\n        }\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function() {\n            var mainDefinition, fragments, fragmentMap, selectionsToResolve, definitionOperation, defaultOperationType, _a, cache, client, execContext, isClientFieldDescendant;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_b) {\n                mainDefinition = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.getMainDefinition)(document);\n                fragments = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.getFragmentDefinitions)(document);\n                fragmentMap = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.createFragmentMap)(fragments);\n                selectionsToResolve = this.collectSelectionsToResolve(mainDefinition, fragmentMap);\n                definitionOperation = mainDefinition.operation;\n                defaultOperationType = definitionOperation ? definitionOperation.charAt(0).toUpperCase() + definitionOperation.slice(1) : \"Query\";\n                _a = this, cache = _a.cache, client = _a.client;\n                execContext = {\n                    fragmentMap: fragmentMap,\n                    context: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, context), {\n                        cache: cache,\n                        client: client\n                    }),\n                    variables: variables,\n                    fragmentMatcher: fragmentMatcher,\n                    defaultOperationType: defaultOperationType,\n                    exportedVariables: {},\n                    selectionsToResolve: selectionsToResolve,\n                    onlyRunForcedResolvers: onlyRunForcedResolvers\n                };\n                isClientFieldDescendant = false;\n                return [\n                    2 /*return*/ ,\n                    this.resolveSelectionSet(mainDefinition.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function(result) {\n                        return {\n                            result: result,\n                            exportedVariables: execContext.exportedVariables\n                        };\n                    })\n                ];\n            });\n        });\n    };\n    LocalState.prototype.resolveSelectionSet = function(selectionSet, isClientFieldDescendant, rootValue, execContext) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function() {\n            var fragmentMap, context, variables, resultsToMerge, execute;\n            var _this = this;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_a) {\n                fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n                resultsToMerge = [\n                    rootValue\n                ];\n                execute = function(selection) {\n                    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(_this, void 0, void 0, function() {\n                        var fragment, typeCondition;\n                        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_a) {\n                            if (!isClientFieldDescendant && !execContext.selectionsToResolve.has(selection)) {\n                                // Skip selections without @client directives\n                                // (still processing if one of the ancestors or one of the child fields has @client directive)\n                                return [\n                                    2 /*return*/ \n                                ];\n                            }\n                            if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.shouldInclude)(selection, variables)) {\n                                // Skip this entirely.\n                                return [\n                                    2 /*return*/ \n                                ];\n                            }\n                            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.isField)(selection)) {\n                                return [\n                                    2 /*return*/ ,\n                                    this.resolveField(selection, isClientFieldDescendant, rootValue, execContext).then(function(fieldResult) {\n                                        var _a;\n                                        if (typeof fieldResult !== \"undefined\") {\n                                            resultsToMerge.push((_a = {}, _a[(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.resultKeyNameFromField)(selection)] = fieldResult, _a));\n                                        }\n                                    })\n                                ];\n                            }\n                            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.isInlineFragment)(selection)) {\n                                fragment = selection;\n                            } else {\n                                // This is a named fragment.\n                                fragment = fragmentMap[selection.name.value];\n                                (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragment, 18, selection.name.value);\n                            }\n                            if (fragment && fragment.typeCondition) {\n                                typeCondition = fragment.typeCondition.name.value;\n                                if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                                    return [\n                                        2 /*return*/ ,\n                                        this.resolveSelectionSet(fragment.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function(fragmentResult) {\n                                            resultsToMerge.push(fragmentResult);\n                                        })\n                                    ];\n                                }\n                            }\n                            return [\n                                2 /*return*/ \n                            ];\n                        });\n                    });\n                };\n                return [\n                    2 /*return*/ ,\n                    Promise.all(selectionSet.selections.map(execute)).then(function() {\n                        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.mergeDeepArray)(resultsToMerge);\n                    })\n                ];\n            });\n        });\n    };\n    LocalState.prototype.resolveField = function(field, isClientFieldDescendant, rootValue, execContext) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function() {\n            var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n            var _this = this;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_a) {\n                if (!rootValue) {\n                    return [\n                        2 /*return*/ ,\n                        null\n                    ];\n                }\n                variables = execContext.variables;\n                fieldName = field.name.value;\n                aliasedFieldName = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.resultKeyNameFromField)(field);\n                aliasUsed = fieldName !== aliasedFieldName;\n                defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n                resultPromise = Promise.resolve(defaultResult);\n                // Usually all local resolvers are run when passing through here, but\n                // if we've specifically identified that we only want to run forced\n                // resolvers (that is, resolvers for fields marked with\n                // `@client(always: true)`), then we'll skip running non-forced resolvers.\n                if (!execContext.onlyRunForcedResolvers || this.shouldForceResolvers(field)) {\n                    resolverType = rootValue.__typename || execContext.defaultOperationType;\n                    resolverMap = this.resolvers && this.resolvers[resolverType];\n                    if (resolverMap) {\n                        resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n                        if (resolve) {\n                            resultPromise = Promise.resolve(// In case the resolve function accesses reactive variables,\n                            // set cacheSlot to the current cache instance.\n                            _cache_index_js__WEBPACK_IMPORTED_MODULE_9__.cacheSlot.withValue(this.cache, resolve, [\n                                rootValue,\n                                (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.argumentsObjectFromField)(field, variables),\n                                execContext.context,\n                                {\n                                    field: field,\n                                    fragmentMap: execContext.fragmentMap\n                                }\n                            ]));\n                        }\n                    }\n                }\n                return [\n                    2 /*return*/ ,\n                    resultPromise.then(function(result) {\n                        var _a, _b;\n                        if (result === void 0) {\n                            result = defaultResult;\n                        }\n                        // If an @export directive is associated with the current field, store\n                        // the `as` export variable name and current result for later use.\n                        if (field.directives) {\n                            field.directives.forEach(function(directive) {\n                                if (directive.name.value === \"export\" && directive.arguments) {\n                                    directive.arguments.forEach(function(arg) {\n                                        if (arg.name.value === \"as\" && arg.value.kind === \"StringValue\") {\n                                            execContext.exportedVariables[arg.value.value] = result;\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                        // Handle all scalar types here.\n                        if (!field.selectionSet) {\n                            return result;\n                        }\n                        // From here down, the field has a selection set, which means it's trying\n                        // to query a GraphQLObjectType.\n                        if (result == null) {\n                            // Basically any field in a GraphQL response can be null, or missing\n                            return result;\n                        }\n                        var isClientField = (_b = (_a = field.directives) === null || _a === void 0 ? void 0 : _a.some(function(d) {\n                            return d.name.value === \"client\";\n                        })) !== null && _b !== void 0 ? _b : false;\n                        if (Array.isArray(result)) {\n                            return _this.resolveSubSelectedArray(field, isClientFieldDescendant || isClientField, result, execContext);\n                        }\n                        // Returned value is an object, and the query has a sub-selection. Recurse.\n                        if (field.selectionSet) {\n                            return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant || isClientField, result, execContext);\n                        }\n                    })\n                ];\n            });\n        });\n    };\n    LocalState.prototype.resolveSubSelectedArray = function(field, isClientFieldDescendant, result, execContext) {\n        var _this = this;\n        return Promise.all(result.map(function(item) {\n            if (item === null) {\n                return null;\n            }\n            // This is a nested array, recurse.\n            if (Array.isArray(item)) {\n                return _this.resolveSubSelectedArray(field, isClientFieldDescendant, item, execContext);\n            }\n            // This is an object, run the selection set on it.\n            if (field.selectionSet) {\n                return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant, item, execContext);\n            }\n        }));\n    };\n    // Collect selection nodes on paths from document root down to all @client directives.\n    // This function takes into account transitive fragment spreads.\n    // Complexity equals to a single `visit` over the full document.\n    LocalState.prototype.collectSelectionsToResolve = function(mainDefinition, fragmentMap) {\n        var isSingleASTNode = function(node) {\n            return !Array.isArray(node);\n        };\n        var selectionsToResolveCache = this.selectionsToResolveCache;\n        function collectByDefinition(definitionNode) {\n            if (!selectionsToResolveCache.has(definitionNode)) {\n                var matches_1 = new Set();\n                selectionsToResolveCache.set(definitionNode, matches_1);\n                (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(definitionNode, {\n                    Directive: function(node, _, __, ___, ancestors) {\n                        if (node.name.value === \"client\") {\n                            ancestors.forEach(function(node) {\n                                if (isSingleASTNode(node) && (0,graphql__WEBPACK_IMPORTED_MODULE_10__.isSelectionNode)(node)) {\n                                    matches_1.add(node);\n                                }\n                            });\n                        }\n                    },\n                    FragmentSpread: function(spread, _, __, ___, ancestors) {\n                        var fragment = fragmentMap[spread.name.value];\n                        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragment, 19, spread.name.value);\n                        var fragmentSelections = collectByDefinition(fragment);\n                        if (fragmentSelections.size > 0) {\n                            // Fragment for this spread contains @client directive (either directly or transitively)\n                            // Collect selection nodes on paths from the root down to fields with the @client directive\n                            ancestors.forEach(function(node) {\n                                if (isSingleASTNode(node) && (0,graphql__WEBPACK_IMPORTED_MODULE_10__.isSelectionNode)(node)) {\n                                    matches_1.add(node);\n                                }\n                            });\n                            matches_1.add(spread);\n                            fragmentSelections.forEach(function(selection) {\n                                matches_1.add(selection);\n                            });\n                        }\n                    }\n                });\n            }\n            return selectionsToResolveCache.get(definitionNode);\n        }\n        return collectByDefinition(mainDefinition);\n    };\n    return LocalState;\n}();\n //# sourceMappingURL=LocalState.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/core/LocalState.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/core/ObservableQuery.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/client/core/ObservableQuery.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ObservableQuery: () => (/* binding */ ObservableQuery),\n/* harmony export */   logMissingFieldErrors: () => (/* binding */ logMissingFieldErrors),\n/* harmony export */   reobserveCacheFirst: () => (/* binding */ reobserveCacheFirst)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/equality */ \"(rsc)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./networkStatus.js */ \"(rsc)/./node_modules/@apollo/client/core/networkStatus.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/compact.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/cloneDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/observables/iteration.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/observables/subclassing.js\");\n/* harmony import */ var _equalByQuery_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./equalByQuery.js */ \"(rsc)/./node_modules/@apollo/client/core/equalByQuery.js\");\n\n\n\n\n\n\nvar assign = Object.assign, hasOwnProperty = Object.hasOwnProperty;\nvar ObservableQuery = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(ObservableQuery, _super);\n    function ObservableQuery(_a) {\n        var queryManager = _a.queryManager, queryInfo = _a.queryInfo, options = _a.options;\n        var _this = _super.call(this, function(observer) {\n            // Zen Observable has its own error function, so in order to log correctly\n            // we need to provide a custom error callback.\n            try {\n                var subObserver = observer._subscription._observer;\n                if (subObserver && !subObserver.error) {\n                    subObserver.error = defaultSubscriptionObserverErrorCallback;\n                }\n            } catch (_a) {}\n            var first = !_this.observers.size;\n            _this.observers.add(observer);\n            // Deliver most recent error or result.\n            var last = _this.last;\n            if (last && last.error) {\n                observer.error && observer.error(last.error);\n            } else if (last && last.result) {\n                observer.next && observer.next(last.result);\n            }\n            // Initiate observation of this query if it hasn't been reported to\n            // the QueryManager yet.\n            if (first) {\n                // Blindly catching here prevents unhandled promise rejections,\n                // and is safe because the ObservableQuery handles this error with\n                // this.observer.error, so we're not just swallowing the error by\n                // ignoring it here.\n                _this.reobserve().catch(function() {});\n            }\n            return function() {\n                if (_this.observers.delete(observer) && !_this.observers.size) {\n                    _this.tearDownQuery();\n                }\n            };\n        }) || this;\n        _this.observers = new Set();\n        _this.subscriptions = new Set();\n        // related classes\n        _this.queryInfo = queryInfo;\n        _this.queryManager = queryManager;\n        // active state\n        _this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);\n        _this.isTornDown = false;\n        var _b = queryManager.defaultOptions.watchQuery, _c = _b === void 0 ? {} : _b, _d = _c.fetchPolicy, defaultFetchPolicy = _d === void 0 ? \"cache-first\" : _d;\n        var _e = options.fetchPolicy, fetchPolicy = _e === void 0 ? defaultFetchPolicy : _e, // Make sure we don't store \"standby\" as the initialFetchPolicy.\n        _f = options.initialFetchPolicy, // Make sure we don't store \"standby\" as the initialFetchPolicy.\n        initialFetchPolicy = _f === void 0 ? fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy : _f;\n        _this.options = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {\n            // Remember the initial options.fetchPolicy so we can revert back to this\n            // policy when variables change. This information can also be specified\n            // (or overridden) by providing options.initialFetchPolicy explicitly.\n            initialFetchPolicy: initialFetchPolicy,\n            // This ensures this.options.fetchPolicy always has a string value, in\n            // case options.fetchPolicy was not provided.\n            fetchPolicy: fetchPolicy\n        });\n        _this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n        var opDef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.getOperationDefinition)(_this.query);\n        _this.queryName = opDef && opDef.name && opDef.name.value;\n        return _this;\n    }\n    Object.defineProperty(ObservableQuery.prototype, \"query\", {\n        // The `query` computed property will always reflect the document transformed\n        // by the last run query. `this.options.query` will always reflect the raw\n        // untransformed query to ensure document transforms with runtime conditionals\n        // are run on the original document.\n        get: function() {\n            return this.lastQuery || this.options.query;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n        // Computed shorthand for this.options.variables, preserved for\n        // backwards compatibility.\n        /**\n         * An object containing the variables that were provided for the query.\n         */ get: function() {\n            return this.options.variables;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ObservableQuery.prototype.result = function() {\n        var _this = this;\n        return new Promise(function(resolve, reject) {\n            // TODO: this code doesn’t actually make sense insofar as the observer\n            // will never exist in this.observers due how zen-observable wraps observables.\n            // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169\n            var observer = {\n                next: function(result) {\n                    resolve(result);\n                    // Stop the query within the QueryManager if we can before\n                    // this function returns.\n                    //\n                    // We do this in order to prevent observers piling up within\n                    // the QueryManager. Notice that we only fully unsubscribe\n                    // from the subscription in a setTimeout(..., 0)  call. This call can\n                    // actually be handled by the browser at a much later time. If queries\n                    // are fired in the meantime, observers that should have been removed\n                    // from the QueryManager will continue to fire, causing an unnecessary\n                    // performance hit.\n                    _this.observers.delete(observer);\n                    if (!_this.observers.size) {\n                        _this.queryManager.removeQuery(_this.queryId);\n                    }\n                    setTimeout(function() {\n                        subscription.unsubscribe();\n                    }, 0);\n                },\n                error: reject\n            };\n            var subscription = _this.subscribe(observer);\n        });\n    };\n    /** @internal */ ObservableQuery.prototype.resetDiff = function() {\n        this.queryInfo.resetDiff();\n    };\n    ObservableQuery.prototype.getCurrentResult = function(saveAsLastResult) {\n        if (saveAsLastResult === void 0) {\n            saveAsLastResult = true;\n        }\n        // Use the last result as long as the variables match this.variables.\n        var lastResult = this.getLastResult(true);\n        var networkStatus = this.queryInfo.networkStatus || lastResult && lastResult.networkStatus || _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.ready;\n        var result = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, lastResult), {\n            loading: (0,_networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.isNetworkRequestInFlight)(networkStatus),\n            networkStatus: networkStatus\n        });\n        var _a = this.options.fetchPolicy, fetchPolicy = _a === void 0 ? \"cache-first\" : _a;\n        if (// These fetch policies should never deliver data from the cache, unless\n        // redelivering a previously delivered result.\n        skipCacheDataFor(fetchPolicy) || // If this.options.query has @client(always: true) fields, we cannot\n        // trust diff.result, since it was read from the cache without running\n        // local resolvers (and it's too late to run resolvers now, since we must\n        // return a result synchronously).\n        this.queryManager.getDocumentInfo(this.query).hasForcedResolvers) {\n        // Fall through.\n        } else if (this.waitForOwnResult) {\n            // This would usually be a part of `QueryInfo.getDiff()`.\n            // which we skip in the waitForOwnResult case since we are not\n            // interested in the diff.\n            this.queryInfo[\"updateWatch\"]();\n        } else {\n            var diff = this.queryInfo.getDiff();\n            if (diff.complete || this.options.returnPartialData) {\n                result.data = diff.result;\n            }\n            if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(result.data, {})) {\n                result.data = void 0;\n            }\n            if (diff.complete) {\n                // Similar to setting result.partial to false, but taking advantage of the\n                // falsiness of missing fields.\n                delete result.partial;\n                // If the diff is complete, and we're using a FetchPolicy that\n                // terminates after a complete cache read, we can assume the next result\n                // we receive will have NetworkStatus.ready and !loading.\n                if (diff.complete && result.networkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.loading && (fetchPolicy === \"cache-first\" || fetchPolicy === \"cache-only\")) {\n                    result.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.ready;\n                    result.loading = false;\n                }\n            } else {\n                result.partial = true;\n            }\n            if (globalThis.__DEV__ !== false && !diff.complete && !this.options.partialRefetch && !result.loading && !result.data && !result.error) {\n                logMissingFieldErrors(diff.missing);\n            }\n        }\n        if (saveAsLastResult) {\n            this.updateLastResult(result);\n        }\n        return result;\n    };\n    // Compares newResult to the snapshot we took of this.lastResult when it was\n    // first received.\n    ObservableQuery.prototype.isDifferentFromLastResult = function(newResult, variables) {\n        if (!this.last) {\n            return true;\n        }\n        var resultIsDifferent = this.queryManager.getDocumentInfo(this.query).hasNonreactiveDirective ? !(0,_equalByQuery_js__WEBPACK_IMPORTED_MODULE_5__.equalByQuery)(this.query, this.last.result, newResult, this.variables) : !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(this.last.result, newResult);\n        return resultIsDifferent || variables && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(this.last.variables, variables);\n    };\n    ObservableQuery.prototype.getLast = function(key, variablesMustMatch) {\n        var last = this.last;\n        if (last && last[key] && (!variablesMustMatch || (0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(last.variables, this.variables))) {\n            return last[key];\n        }\n    };\n    ObservableQuery.prototype.getLastResult = function(variablesMustMatch) {\n        return this.getLast(\"result\", variablesMustMatch);\n    };\n    ObservableQuery.prototype.getLastError = function(variablesMustMatch) {\n        return this.getLast(\"error\", variablesMustMatch);\n    };\n    ObservableQuery.prototype.resetLastResults = function() {\n        delete this.last;\n        this.isTornDown = false;\n    };\n    ObservableQuery.prototype.resetQueryStoreErrors = function() {\n        this.queryManager.resetErrors(this.queryId);\n    };\n    /**\n     * Update the variables of this observable query, and fetch the new results.\n     * This method should be preferred over `setVariables` in most use cases.\n     *\n     * @param variables - The new set of variables. If there are missing variables,\n     * the previous values of those variables will be used.\n     */ ObservableQuery.prototype.refetch = function(variables) {\n        var _a;\n        var reobserveOptions = {\n            // Always disable polling for refetches.\n            pollInterval: 0\n        };\n        // Unless the provided fetchPolicy always consults the network\n        // (no-cache, network-only, or cache-and-network), override it with\n        // network-only to force the refetch for this fetchQuery call.\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy === \"cache-and-network\") {\n            reobserveOptions.fetchPolicy = fetchPolicy;\n        } else if (fetchPolicy === \"no-cache\") {\n            reobserveOptions.fetchPolicy = \"no-cache\";\n        } else {\n            reobserveOptions.fetchPolicy = \"network-only\";\n        }\n        if (globalThis.__DEV__ !== false && variables && hasOwnProperty.call(variables, \"variables\")) {\n            var queryDef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.getQueryDefinition)(this.query);\n            var vars = queryDef.variableDefinitions;\n            if (!vars || !vars.some(function(v) {\n                return v.variable.name.value === \"variables\";\n            })) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(20, variables, ((_a = queryDef.name) === null || _a === void 0 ? void 0 : _a.value) || queryDef);\n            }\n        }\n        if (variables && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(this.options.variables, variables)) {\n            // Update the existing options with new variables\n            reobserveOptions.variables = this.options.variables = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, this.options.variables), variables);\n        }\n        this.queryInfo.resetLastWrite();\n        return this.reobserve(reobserveOptions, _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.refetch);\n    };\n    /**\n     * A function that helps you fetch the next set of results for a [paginated list field](https://www.apollographql.com/docs/react/pagination/core-api/).\n     */ ObservableQuery.prototype.fetchMore = function(fetchMoreOptions) {\n        var _this = this;\n        var combinedOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, fetchMoreOptions.query ? fetchMoreOptions : (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, this.options), {\n            query: this.options.query\n        }), fetchMoreOptions), {\n            variables: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, this.options.variables), fetchMoreOptions.variables)\n        })), {\n            // The fetchMore request goes immediately to the network and does\n            // not automatically write its result to the cache (hence no-cache\n            // instead of network-only), because we allow the caller of\n            // fetchMore to provide an updateQuery callback that determines how\n            // the data gets written to the cache.\n            fetchPolicy: \"no-cache\"\n        });\n        combinedOptions.query = this.transformDocument(combinedOptions.query);\n        var qid = this.queryManager.generateQueryId();\n        // If a temporary query is passed to `fetchMore`, we don't want to store\n        // it as the last query result since it may be an optimized query for\n        // pagination. We will however run the transforms on the original document\n        // as well as the document passed in `fetchMoreOptions` to ensure the cache\n        // uses the most up-to-date document which may rely on runtime conditionals.\n        this.lastQuery = fetchMoreOptions.query ? this.transformDocument(this.options.query) : combinedOptions.query;\n        // Simulate a loading result for the original query with\n        // result.networkStatus === NetworkStatus.fetchMore.\n        var queryInfo = this.queryInfo;\n        var originalNetworkStatus = queryInfo.networkStatus;\n        queryInfo.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.fetchMore;\n        if (combinedOptions.notifyOnNetworkStatusChange) {\n            this.observe();\n        }\n        var updatedQuerySet = new Set();\n        return this.queryManager.fetchQuery(qid, combinedOptions, _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.fetchMore).then(function(fetchMoreResult) {\n            _this.queryManager.removeQuery(qid);\n            if (queryInfo.networkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.fetchMore) {\n                queryInfo.networkStatus = originalNetworkStatus;\n            }\n            // Performing this cache update inside a cache.batch transaction ensures\n            // any affected cache.watch watchers are notified at most once about any\n            // updates. Most watchers will be using the QueryInfo class, which\n            // responds to notifications by calling reobserveCacheFirst to deliver\n            // fetchMore cache results back to this ObservableQuery.\n            _this.queryManager.cache.batch({\n                update: function(cache) {\n                    var updateQuery = fetchMoreOptions.updateQuery;\n                    if (updateQuery) {\n                        cache.updateQuery({\n                            query: _this.query,\n                            variables: _this.variables,\n                            returnPartialData: true,\n                            optimistic: false\n                        }, function(previous) {\n                            return updateQuery(previous, {\n                                fetchMoreResult: fetchMoreResult.data,\n                                variables: combinedOptions.variables\n                            });\n                        });\n                    } else {\n                        // If we're using a field policy instead of updateQuery, the only\n                        // thing we need to do is write the new data to the cache using\n                        // combinedOptions.variables (instead of this.variables, which is\n                        // what this.updateQuery uses, because it works by abusing the\n                        // original field value, keyed by the original variables).\n                        cache.writeQuery({\n                            query: combinedOptions.query,\n                            variables: combinedOptions.variables,\n                            data: fetchMoreResult.data\n                        });\n                    }\n                },\n                onWatchUpdated: function(watch) {\n                    // Record the DocumentNode associated with any watched query whose\n                    // data were updated by the cache writes above.\n                    updatedQuerySet.add(watch.query);\n                }\n            });\n            return fetchMoreResult;\n        }).finally(function() {\n            // In case the cache writes above did not generate a broadcast\n            // notification (which would have been intercepted by onWatchUpdated),\n            // likely because the written data were the same as what was already in\n            // the cache, we still want fetchMore to deliver its final loading:false\n            // result with the unchanged data.\n            if (!updatedQuerySet.has(_this.query)) {\n                reobserveCacheFirst(_this);\n            }\n        });\n    };\n    // XXX the subscription variables are separate from the query variables.\n    // if you want to update subscription variables, right now you have to do that separately,\n    // and you can only do it by stopping the subscription and then subscribing again with new variables.\n    /**\n     * A function that enables you to execute a [subscription](https://www.apollographql.com/docs/react/data/subscriptions/), usually to subscribe to specific fields that were included in the query.\n     *\n     * This function returns _another_ function that you can call to terminate the subscription.\n     */ ObservableQuery.prototype.subscribeToMore = function(options) {\n        var _this = this;\n        var subscription = this.queryManager.startGraphQLSubscription({\n            query: options.document,\n            variables: options.variables,\n            context: options.context\n        }).subscribe({\n            next: function(subscriptionData) {\n                var updateQuery = options.updateQuery;\n                if (updateQuery) {\n                    _this.updateQuery(function(previous, _a) {\n                        var variables = _a.variables;\n                        return updateQuery(previous, {\n                            subscriptionData: subscriptionData,\n                            variables: variables\n                        });\n                    });\n                }\n            },\n            error: function(err) {\n                if (options.onError) {\n                    options.onError(err);\n                    return;\n                }\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(21, err);\n            }\n        });\n        this.subscriptions.add(subscription);\n        return function() {\n            if (_this.subscriptions.delete(subscription)) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n    ObservableQuery.prototype.setOptions = function(newOptions) {\n        return this.reobserve(newOptions);\n    };\n    ObservableQuery.prototype.silentSetOptions = function(newOptions) {\n        var mergedOptions = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.compact)(this.options, newOptions || {});\n        assign(this.options, mergedOptions);\n    };\n    /**\n     * Update the variables of this observable query, and fetch the new results\n     * if they've changed. Most users should prefer `refetch` instead of\n     * `setVariables` in order to to be properly notified of results even when\n     * they come from the cache.\n     *\n     * Note: the `next` callback will *not* fire if the variables have not changed\n     * or if the result is coming from cache.\n     *\n     * Note: the promise will return the old results immediately if the variables\n     * have not changed.\n     *\n     * Note: the promise will return null immediately if the query is not active\n     * (there are no subscribers).\n     *\n     * @param variables - The new set of variables. If there are missing variables,\n     * the previous values of those variables will be used.\n     */ ObservableQuery.prototype.setVariables = function(variables) {\n        if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(this.variables, variables)) {\n            // If we have no observers, then we don't actually want to make a network\n            // request. As soon as someone observes the query, the request will kick\n            // off. For now, we just store any changes. (See #1077)\n            return this.observers.size ? this.result() : Promise.resolve();\n        }\n        this.options.variables = variables;\n        // See comment above\n        if (!this.observers.size) {\n            return Promise.resolve();\n        }\n        return this.reobserve({\n            // Reset options.fetchPolicy to its original value.\n            fetchPolicy: this.options.initialFetchPolicy,\n            variables: variables\n        }, _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.setVariables);\n    };\n    /**\n     * A function that enables you to update the query's cached result without executing a followup GraphQL operation.\n     *\n     * See [using updateQuery and updateFragment](https://www.apollographql.com/docs/react/caching/cache-interaction/#using-updatequery-and-updatefragment) for additional information.\n     */ ObservableQuery.prototype.updateQuery = function(mapFn) {\n        var queryManager = this.queryManager;\n        var result = queryManager.cache.diff({\n            query: this.options.query,\n            variables: this.variables,\n            returnPartialData: true,\n            optimistic: false\n        }).result;\n        var newResult = mapFn(result, {\n            variables: this.variables\n        });\n        if (newResult) {\n            queryManager.cache.writeQuery({\n                query: this.options.query,\n                data: newResult,\n                variables: this.variables\n            });\n            queryManager.broadcastQueries();\n        }\n    };\n    /**\n     * A function that instructs the query to begin re-executing at a specified interval (in milliseconds).\n     */ ObservableQuery.prototype.startPolling = function(pollInterval) {\n        this.options.pollInterval = pollInterval;\n        this.updatePolling();\n    };\n    /**\n     * A function that instructs the query to stop polling after a previous call to `startPolling`.\n     */ ObservableQuery.prototype.stopPolling = function() {\n        this.options.pollInterval = 0;\n        this.updatePolling();\n    };\n    // Update options.fetchPolicy according to options.nextFetchPolicy.\n    ObservableQuery.prototype.applyNextFetchPolicy = function(reason, // It's possible to use this method to apply options.nextFetchPolicy to\n    // options.fetchPolicy even if options !== this.options, though that happens\n    // most often when the options are temporary, used for only one request and\n    // then thrown away, so nextFetchPolicy may not end up mattering.\n    options) {\n        if (options.nextFetchPolicy) {\n            var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? \"cache-first\" : _a, _b = options.initialFetchPolicy, initialFetchPolicy = _b === void 0 ? fetchPolicy : _b;\n            if (fetchPolicy === \"standby\") {\n            // Do nothing, leaving options.fetchPolicy unchanged.\n            } else if (typeof options.nextFetchPolicy === \"function\") {\n                // When someone chooses \"cache-and-network\" or \"network-only\" as their\n                // initial FetchPolicy, they often do not want future cache updates to\n                // trigger unconditional network requests, which is what repeatedly\n                // applying the \"cache-and-network\" or \"network-only\" policies would\n                // seem to imply. Instead, when the cache reports an update after the\n                // initial network request, it may be desirable for subsequent network\n                // requests to be triggered only if the cache result is incomplete. To\n                // that end, the options.nextFetchPolicy option provides an easy way to\n                // update options.fetchPolicy after the initial network request, without\n                // having to call observableQuery.setOptions.\n                options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n                    reason: reason,\n                    options: options,\n                    observable: this,\n                    initialFetchPolicy: initialFetchPolicy\n                });\n            } else if (reason === \"variables-changed\") {\n                options.fetchPolicy = initialFetchPolicy;\n            } else {\n                options.fetchPolicy = options.nextFetchPolicy;\n            }\n        }\n        return options.fetchPolicy;\n    };\n    ObservableQuery.prototype.fetch = function(options, newNetworkStatus, query) {\n        // TODO Make sure we update the networkStatus (and infer fetchVariables)\n        // before actually committing to the fetch.\n        this.queryManager.setObservableQuery(this);\n        return this.queryManager[\"fetchConcastWithInfo\"](this.queryId, options, newNetworkStatus, query);\n    };\n    // Turns polling on or off based on this.options.pollInterval.\n    ObservableQuery.prototype.updatePolling = function() {\n        var _this = this;\n        // Avoid polling in SSR mode\n        if (this.queryManager.ssrMode) {\n            return;\n        }\n        var _a = this, pollingInfo = _a.pollingInfo, pollInterval = _a.options.pollInterval;\n        if (!pollInterval) {\n            if (pollingInfo) {\n                clearTimeout(pollingInfo.timeout);\n                delete this.pollingInfo;\n            }\n            return;\n        }\n        if (pollingInfo && pollingInfo.interval === pollInterval) {\n            return;\n        }\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(pollInterval, 22);\n        var info = pollingInfo || (this.pollingInfo = {});\n        info.interval = pollInterval;\n        var maybeFetch = function() {\n            var _a, _b;\n            if (_this.pollingInfo) {\n                if (!(0,_networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.isNetworkRequestInFlight)(_this.queryInfo.networkStatus) && !((_b = (_a = _this.options).skipPollAttempt) === null || _b === void 0 ? void 0 : _b.call(_a))) {\n                    _this.reobserve({\n                        // Most fetchPolicy options don't make sense to use in a polling context, as\n                        // users wouldn't want to be polling the cache directly. However, network-only and\n                        // no-cache are both useful for when the user wants to control whether or not the\n                        // polled results are written to the cache.\n                        fetchPolicy: _this.options.initialFetchPolicy === \"no-cache\" ? \"no-cache\" : \"network-only\"\n                    }, _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.poll).then(poll, poll);\n                } else {\n                    poll();\n                }\n            }\n        };\n        var poll = function() {\n            var info = _this.pollingInfo;\n            if (info) {\n                clearTimeout(info.timeout);\n                info.timeout = setTimeout(maybeFetch, info.interval);\n            }\n        };\n        poll();\n    };\n    ObservableQuery.prototype.updateLastResult = function(newResult, variables) {\n        if (variables === void 0) {\n            variables = this.variables;\n        }\n        var error = this.getLastError();\n        // Preserve this.last.error unless the variables have changed.\n        if (error && this.last && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(variables, this.last.variables)) {\n            error = void 0;\n        }\n        return this.last = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n            result: this.queryManager.assumeImmutableResults ? newResult : (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.cloneDeep)(newResult),\n            variables: variables\n        }, error ? {\n            error: error\n        } : null);\n    };\n    ObservableQuery.prototype.reobserveAsConcast = function(newOptions, newNetworkStatus) {\n        var _this = this;\n        this.isTornDown = false;\n        var useDisposableConcast = // Refetching uses a disposable Concast to allow refetches using different\n        // options/variables, without permanently altering the options of the\n        // original ObservableQuery.\n        newNetworkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.refetch || // The fetchMore method does not actually call the reobserve method, but,\n        // if it did, it would definitely use a disposable Concast.\n        newNetworkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.fetchMore || // Polling uses a disposable Concast so the polling options (which force\n        // fetchPolicy to be \"network-only\" or \"no-cache\") won't override the original options.\n        newNetworkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.poll;\n        // Save the old variables, since Object.assign may modify them below.\n        var oldVariables = this.options.variables;\n        var oldFetchPolicy = this.options.fetchPolicy;\n        var mergedOptions = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.compact)(this.options, newOptions || {});\n        var options = useDisposableConcast ? // Disposable Concast fetches receive a shallow copy of this.options\n        // (merged with newOptions), leaving this.options unmodified.\n        mergedOptions : assign(this.options, mergedOptions);\n        // Don't update options.query with the transformed query to avoid\n        // overwriting this.options.query when we aren't using a disposable concast.\n        // We want to ensure we can re-run the custom document transforms the next\n        // time a request is made against the original query.\n        var query = this.transformDocument(options.query);\n        this.lastQuery = query;\n        if (!useDisposableConcast) {\n            // We can skip calling updatePolling if we're not changing this.options.\n            this.updatePolling();\n            // Reset options.fetchPolicy to its original value when variables change,\n            // unless a new fetchPolicy was provided by newOptions.\n            if (newOptions && newOptions.variables && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(newOptions.variables, oldVariables) && // Don't mess with the fetchPolicy if it's currently \"standby\".\n            options.fetchPolicy !== \"standby\" && // If we're changing the fetchPolicy anyway, don't try to change it here\n            // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.\n            options.fetchPolicy === oldFetchPolicy) {\n                this.applyNextFetchPolicy(\"variables-changed\", options);\n                if (newNetworkStatus === void 0) {\n                    newNetworkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.setVariables;\n                }\n            }\n        }\n        this.waitForOwnResult && (this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy));\n        var finishWaitingForOwnResult = function() {\n            if (_this.concast === concast) {\n                _this.waitForOwnResult = false;\n            }\n        };\n        var variables = options.variables && (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options.variables);\n        var _a = this.fetch(options, newNetworkStatus, query), concast = _a.concast, fromLink = _a.fromLink;\n        var observer = {\n            next: function(result) {\n                if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(_this.variables, variables)) {\n                    finishWaitingForOwnResult();\n                    _this.reportResult(result, variables);\n                }\n            },\n            error: function(error) {\n                if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(_this.variables, variables)) {\n                    finishWaitingForOwnResult();\n                    _this.reportError(error, variables);\n                }\n            }\n        };\n        if (!useDisposableConcast && (fromLink || !this.concast)) {\n            // We use the {add,remove}Observer methods directly to avoid wrapping\n            // observer with an unnecessary SubscriptionObserver object.\n            if (this.concast && this.observer) {\n                this.concast.removeObserver(this.observer);\n            }\n            this.concast = concast;\n            this.observer = observer;\n        }\n        concast.addObserver(observer);\n        return concast;\n    };\n    ObservableQuery.prototype.reobserve = function(newOptions, newNetworkStatus) {\n        return this.reobserveAsConcast(newOptions, newNetworkStatus).promise;\n    };\n    ObservableQuery.prototype.resubscribeAfterError = function() {\n        var args = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            args[_i] = arguments[_i];\n        }\n        // If `lastError` is set in the current when the subscription is re-created,\n        // the subscription will immediately receive the error, which will\n        // cause it to terminate again. To avoid this, we first clear\n        // the last error/result from the `observableQuery` before re-starting\n        // the subscription, and restore the last value afterwards so that the\n        // subscription has a chance to stay open.\n        var last = this.last;\n        this.resetLastResults();\n        var subscription = this.subscribe.apply(this, args);\n        this.last = last;\n        return subscription;\n    };\n    // (Re)deliver the current result to this.observers without applying fetch\n    // policies or making network requests.\n    ObservableQuery.prototype.observe = function() {\n        this.reportResult(// Passing false is important so that this.getCurrentResult doesn't\n        // save the fetchMore result as this.lastResult, causing it to be\n        // ignored due to the this.isDifferentFromLastResult check in\n        // this.reportResult.\n        this.getCurrentResult(false), this.variables);\n    };\n    ObservableQuery.prototype.reportResult = function(result, variables) {\n        var lastError = this.getLastError();\n        var isDifferent = this.isDifferentFromLastResult(result, variables);\n        // Update the last result even when isDifferentFromLastResult returns false,\n        // because the query may be using the @nonreactive directive, and we want to\n        // save the the latest version of any nonreactive subtrees (in case\n        // getCurrentResult is called), even though we skip broadcasting changes.\n        if (lastError || !result.partial || this.options.returnPartialData) {\n            this.updateLastResult(result, variables);\n        }\n        if (lastError || isDifferent) {\n            (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.iterateObserversSafely)(this.observers, \"next\", result);\n        }\n    };\n    ObservableQuery.prototype.reportError = function(error, variables) {\n        // Since we don't get the current result on errors, only the error, we\n        // must mirror the updates that occur in QueryStore.markQueryError here\n        var errorResult = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, this.getLastResult()), {\n            error: error,\n            errors: error.graphQLErrors,\n            networkStatus: _networkStatus_js__WEBPACK_IMPORTED_MODULE_4__.NetworkStatus.error,\n            loading: false\n        });\n        this.updateLastResult(errorResult, variables);\n        (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.iterateObserversSafely)(this.observers, \"error\", this.last.error = error);\n    };\n    ObservableQuery.prototype.hasObservers = function() {\n        return this.observers.size > 0;\n    };\n    ObservableQuery.prototype.tearDownQuery = function() {\n        if (this.isTornDown) return;\n        if (this.concast && this.observer) {\n            this.concast.removeObserver(this.observer);\n            delete this.concast;\n            delete this.observer;\n        }\n        this.stopPolling();\n        // stop all active GraphQL subscriptions\n        this.subscriptions.forEach(function(sub) {\n            return sub.unsubscribe();\n        });\n        this.subscriptions.clear();\n        this.queryManager.stopQuery(this.queryId);\n        this.observers.clear();\n        this.isTornDown = true;\n    };\n    ObservableQuery.prototype.transformDocument = function(document) {\n        return this.queryManager.transform(document);\n    };\n    return ObservableQuery;\n}(_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.Observable);\n\n// Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\n(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.fixObservableSubclass)(ObservableQuery);\n// Reobserve with fetchPolicy effectively set to \"cache-first\", triggering\n// delivery of any new data from the cache, possibly falling back to the network\n// if any cache data are missing. This allows _complete_ cache results to be\n// delivered without also kicking off unnecessary network requests when\n// this.options.fetchPolicy is \"cache-and-network\" or \"network-only\". When\n// this.options.fetchPolicy is any other policy (\"cache-first\", \"cache-only\",\n// \"standby\", or \"no-cache\"), we call this.reobserve() as usual.\nfunction reobserveCacheFirst(obsQuery) {\n    var _a = obsQuery.options, fetchPolicy = _a.fetchPolicy, nextFetchPolicy = _a.nextFetchPolicy;\n    if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n        return obsQuery.reobserve({\n            fetchPolicy: \"cache-first\",\n            // Use a temporary nextFetchPolicy function that replaces itself with the\n            // previous nextFetchPolicy value and returns the original fetchPolicy.\n            nextFetchPolicy: function(currentFetchPolicy, context) {\n                // Replace this nextFetchPolicy function in the options object with the\n                // original this.options.nextFetchPolicy value.\n                this.nextFetchPolicy = nextFetchPolicy;\n                // If the original nextFetchPolicy value was a function, give it a\n                // chance to decide what happens here.\n                if (typeof this.nextFetchPolicy === \"function\") {\n                    return this.nextFetchPolicy(currentFetchPolicy, context);\n                }\n                // Otherwise go back to the original this.options.fetchPolicy.\n                return fetchPolicy;\n            }\n        });\n    }\n    return obsQuery.reobserve();\n}\nfunction defaultSubscriptionObserverErrorCallback(error) {\n    globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(23, error.message, error.stack);\n}\nfunction logMissingFieldErrors(missing) {\n    if (globalThis.__DEV__ !== false && missing) {\n        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.debug(24, missing);\n    }\n}\nfunction skipCacheDataFor(fetchPolicy /* `undefined` would mean `\"cache-first\"` */ ) {\n    return fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\" || fetchPolicy === \"standby\";\n} //# sourceMappingURL=ObservableQuery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY29yZS9PYnNlcnZhYmxlUXVlcnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNEM7QUFDYztBQUNwQjtBQUN1QztBQUNzRjtBQUNsSDtBQUNqRCxJQUFJYyxTQUFTQyxPQUFPRCxNQUFNLEVBQUVFLGlCQUFpQkQsT0FBT0MsY0FBYztBQUNsRSxJQUFJQyxrQkFBa0IsV0FBVyxHQUFJLFNBQVVDLE1BQU07SUFDakRqQixnREFBU0EsQ0FBQ2dCLGlCQUFpQkM7SUFDM0IsU0FBU0QsZ0JBQWdCRSxFQUFFO1FBQ3ZCLElBQUlDLGVBQWVELEdBQUdDLFlBQVksRUFBRUMsWUFBWUYsR0FBR0UsU0FBUyxFQUFFQyxVQUFVSCxHQUFHRyxPQUFPO1FBQ2xGLElBQUlDLFFBQVFMLE9BQU9NLElBQUksQ0FBQyxJQUFJLEVBQUUsU0FBVUMsUUFBUTtZQUM1QywwRUFBMEU7WUFDMUUsOENBQThDO1lBQzlDLElBQUk7Z0JBQ0EsSUFBSUMsY0FBY0QsU0FBU0UsYUFBYSxDQUFDQyxTQUFTO2dCQUNsRCxJQUFJRixlQUFlLENBQUNBLFlBQVlHLEtBQUssRUFBRTtvQkFDbkNILFlBQVlHLEtBQUssR0FBR0M7Z0JBQ3hCO1lBQ0osRUFDQSxPQUFPWCxJQUFJLENBQUU7WUFDYixJQUFJWSxRQUFRLENBQUNSLE1BQU1TLFNBQVMsQ0FBQ0MsSUFBSTtZQUNqQ1YsTUFBTVMsU0FBUyxDQUFDRSxHQUFHLENBQUNUO1lBQ3BCLHVDQUF1QztZQUN2QyxJQUFJVSxPQUFPWixNQUFNWSxJQUFJO1lBQ3JCLElBQUlBLFFBQVFBLEtBQUtOLEtBQUssRUFBRTtnQkFDcEJKLFNBQVNJLEtBQUssSUFBSUosU0FBU0ksS0FBSyxDQUFDTSxLQUFLTixLQUFLO1lBQy9DLE9BQ0ssSUFBSU0sUUFBUUEsS0FBS0MsTUFBTSxFQUFFO2dCQUMxQlgsU0FBU1ksSUFBSSxJQUFJWixTQUFTWSxJQUFJLENBQUNGLEtBQUtDLE1BQU07WUFDOUM7WUFDQSxtRUFBbUU7WUFDbkUsd0JBQXdCO1lBQ3hCLElBQUlMLE9BQU87Z0JBQ1AsK0RBQStEO2dCQUMvRCxrRUFBa0U7Z0JBQ2xFLGlFQUFpRTtnQkFDakUsb0JBQW9CO2dCQUNwQlIsTUFBTWUsU0FBUyxHQUFHQyxLQUFLLENBQUMsWUFBYztZQUMxQztZQUNBLE9BQU87Z0JBQ0gsSUFBSWhCLE1BQU1TLFNBQVMsQ0FBQ1EsTUFBTSxDQUFDZixhQUFhLENBQUNGLE1BQU1TLFNBQVMsQ0FBQ0MsSUFBSSxFQUFFO29CQUMzRFYsTUFBTWtCLGFBQWE7Z0JBQ3ZCO1lBQ0o7UUFDSixNQUFNLElBQUk7UUFDVmxCLE1BQU1TLFNBQVMsR0FBRyxJQUFJVTtRQUN0Qm5CLE1BQU1vQixhQUFhLEdBQUcsSUFBSUQ7UUFDMUIsa0JBQWtCO1FBQ2xCbkIsTUFBTUYsU0FBUyxHQUFHQTtRQUNsQkUsTUFBTUgsWUFBWSxHQUFHQTtRQUNyQixlQUFlO1FBQ2ZHLE1BQU1xQixnQkFBZ0IsR0FBR0MsaUJBQWlCdkIsUUFBUXdCLFdBQVc7UUFDN0R2QixNQUFNd0IsVUFBVSxHQUFHO1FBQ25CLElBQUlDLEtBQUs1QixhQUFhNkIsY0FBYyxDQUFDQyxVQUFVLEVBQUVDLEtBQUtILE9BQU8sS0FBSyxJQUFJLENBQUMsSUFBSUEsSUFBSUksS0FBS0QsR0FBR0wsV0FBVyxFQUFFTyxxQkFBcUJELE9BQU8sS0FBSyxJQUFJLGdCQUFnQkE7UUFDekosSUFBSUUsS0FBS2hDLFFBQVF3QixXQUFXLEVBQUVBLGNBQWNRLE9BQU8sS0FBSyxJQUFJRCxxQkFBcUJDLElBQ2pGLGdFQUFnRTtRQUNoRUMsS0FBS2pDLFFBQVFrQyxrQkFBa0IsRUFDL0IsZ0VBQWdFO1FBQ2hFQSxxQkFBcUJELE9BQU8sS0FBSyxJQUFJVCxnQkFBZ0IsWUFBWU8scUJBQXNCUCxjQUFlUztRQUN0R2hDLE1BQU1ELE9BQU8sR0FBR3RCLCtDQUFRQSxDQUFDQSwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUdzQixVQUFVO1lBQzVDLHlFQUF5RTtZQUN6RSx1RUFBdUU7WUFDdkUsc0VBQXNFO1lBQ3RFa0Msb0JBQW9CQTtZQUNwQixzRUFBc0U7WUFDdEUsNkNBQTZDO1lBQzdDVixhQUFhQTtRQUFZO1FBQzdCdkIsTUFBTWtDLE9BQU8sR0FBR3BDLFVBQVVvQyxPQUFPLElBQUlyQyxhQUFhc0MsZUFBZTtRQUNqRSxJQUFJQyxRQUFRbkQsMkVBQXNCQSxDQUFDZSxNQUFNcUMsS0FBSztRQUM5Q3JDLE1BQU1zQyxTQUFTLEdBQUdGLFNBQVNBLE1BQU1HLElBQUksSUFBSUgsTUFBTUcsSUFBSSxDQUFDQyxLQUFLO1FBQ3pELE9BQU94QztJQUNYO0lBQ0FSLE9BQU9pRCxjQUFjLENBQUMvQyxnQkFBZ0JnRCxTQUFTLEVBQUUsU0FBUztRQUN0RCw2RUFBNkU7UUFDN0UsMEVBQTBFO1FBQzFFLDhFQUE4RTtRQUM5RSxvQ0FBb0M7UUFDcENDLEtBQUs7WUFDRCxPQUFPLElBQUksQ0FBQ0MsU0FBUyxJQUFJLElBQUksQ0FBQzdDLE9BQU8sQ0FBQ3NDLEtBQUs7UUFDL0M7UUFDQVEsWUFBWTtRQUNaQyxjQUFjO0lBQ2xCO0lBQ0F0RCxPQUFPaUQsY0FBYyxDQUFDL0MsZ0JBQWdCZ0QsU0FBUyxFQUFFLGFBQWE7UUFDMUQsK0RBQStEO1FBQy9ELDJCQUEyQjtRQUMzQjs7U0FFQyxHQUNEQyxLQUFLO1lBQ0QsT0FBTyxJQUFJLENBQUM1QyxPQUFPLENBQUNnRCxTQUFTO1FBQ2pDO1FBQ0FGLFlBQVk7UUFDWkMsY0FBYztJQUNsQjtJQUNBcEQsZ0JBQWdCZ0QsU0FBUyxDQUFDN0IsTUFBTSxHQUFHO1FBQy9CLElBQUliLFFBQVEsSUFBSTtRQUNoQixPQUFPLElBQUlnRCxRQUFRLFNBQVVDLE9BQU8sRUFBRUMsTUFBTTtZQUN4QyxzRUFBc0U7WUFDdEUsK0VBQStFO1lBQy9FLGtGQUFrRjtZQUNsRixJQUFJaEQsV0FBVztnQkFDWFksTUFBTSxTQUFVRCxNQUFNO29CQUNsQm9DLFFBQVFwQztvQkFDUiwwREFBMEQ7b0JBQzFELHlCQUF5QjtvQkFDekIsRUFBRTtvQkFDRiw0REFBNEQ7b0JBQzVELDBEQUEwRDtvQkFDMUQscUVBQXFFO29CQUNyRSxzRUFBc0U7b0JBQ3RFLHFFQUFxRTtvQkFDckUsc0VBQXNFO29CQUN0RSxtQkFBbUI7b0JBQ25CYixNQUFNUyxTQUFTLENBQUNRLE1BQU0sQ0FBQ2Y7b0JBQ3ZCLElBQUksQ0FBQ0YsTUFBTVMsU0FBUyxDQUFDQyxJQUFJLEVBQUU7d0JBQ3ZCVixNQUFNSCxZQUFZLENBQUNzRCxXQUFXLENBQUNuRCxNQUFNa0MsT0FBTztvQkFDaEQ7b0JBQ0FrQixXQUFXO3dCQUNQQyxhQUFhQyxXQUFXO29CQUM1QixHQUFHO2dCQUNQO2dCQUNBaEQsT0FBTzRDO1lBQ1g7WUFDQSxJQUFJRyxlQUFlckQsTUFBTXVELFNBQVMsQ0FBQ3JEO1FBQ3ZDO0lBQ0o7SUFDQSxjQUFjLEdBQ2RSLGdCQUFnQmdELFNBQVMsQ0FBQ2MsU0FBUyxHQUFHO1FBQ2xDLElBQUksQ0FBQzFELFNBQVMsQ0FBQzBELFNBQVM7SUFDNUI7SUFDQTlELGdCQUFnQmdELFNBQVMsQ0FBQ2UsZ0JBQWdCLEdBQUcsU0FBVUMsZ0JBQWdCO1FBQ25FLElBQUlBLHFCQUFxQixLQUFLLEdBQUc7WUFBRUEsbUJBQW1CO1FBQU07UUFDNUQscUVBQXFFO1FBQ3JFLElBQUlDLGFBQWEsSUFBSSxDQUFDQyxhQUFhLENBQUM7UUFDcEMsSUFBSUMsZ0JBQWdCLElBQUksQ0FBQy9ELFNBQVMsQ0FBQytELGFBQWEsSUFDM0NGLGNBQWNBLFdBQVdFLGFBQWEsSUFDdkNoRiw0REFBYUEsQ0FBQ2lGLEtBQUs7UUFDdkIsSUFBSWpELFNBQVNwQywrQ0FBUUEsQ0FBQ0EsK0NBQVFBLENBQUMsQ0FBQyxHQUFHa0YsYUFBYTtZQUFFSSxTQUFTakYsMkVBQXdCQSxDQUFDK0U7WUFBZ0JBLGVBQWVBO1FBQWM7UUFDakksSUFBSWpFLEtBQUssSUFBSSxDQUFDRyxPQUFPLENBQUN3QixXQUFXLEVBQUVBLGNBQWMzQixPQUFPLEtBQUssSUFBSSxnQkFBZ0JBO1FBQ2pGLElBQ0Esd0VBQXdFO1FBQ3hFLDhDQUE4QztRQUM5QzBCLGlCQUFpQkMsZ0JBQ2Isb0VBQW9FO1FBQ3BFLHNFQUFzRTtRQUN0RSx5RUFBeUU7UUFDekUsa0NBQWtDO1FBQ2xDLElBQUksQ0FBQzFCLFlBQVksQ0FBQ21FLGVBQWUsQ0FBQyxJQUFJLENBQUMzQixLQUFLLEVBQUU0QixrQkFBa0IsRUFBRTtRQUNsRSxnQkFBZ0I7UUFDcEIsT0FDSyxJQUFJLElBQUksQ0FBQzVDLGdCQUFnQixFQUFFO1lBQzVCLHlEQUF5RDtZQUN6RCw4REFBOEQ7WUFDOUQsMEJBQTBCO1lBQzFCLElBQUksQ0FBQ3ZCLFNBQVMsQ0FBQyxjQUFjO1FBQ2pDLE9BQ0s7WUFDRCxJQUFJb0UsT0FBTyxJQUFJLENBQUNwRSxTQUFTLENBQUNxRSxPQUFPO1lBQ2pDLElBQUlELEtBQUtFLFFBQVEsSUFBSSxJQUFJLENBQUNyRSxPQUFPLENBQUNzRSxpQkFBaUIsRUFBRTtnQkFDakR4RCxPQUFPeUQsSUFBSSxHQUFHSixLQUFLckQsTUFBTTtZQUM3QjtZQUNBLElBQUlqQyxvREFBS0EsQ0FBQ2lDLE9BQU95RCxJQUFJLEVBQUUsQ0FBQyxJQUFJO2dCQUN4QnpELE9BQU95RCxJQUFJLEdBQUcsS0FBSztZQUN2QjtZQUNBLElBQUlKLEtBQUtFLFFBQVEsRUFBRTtnQkFDZiwwRUFBMEU7Z0JBQzFFLCtCQUErQjtnQkFDL0IsT0FBT3ZELE9BQU8wRCxPQUFPO2dCQUNyQiw4REFBOEQ7Z0JBQzlELHdFQUF3RTtnQkFDeEUseURBQXlEO2dCQUN6RCxJQUFJTCxLQUFLRSxRQUFRLElBQ2J2RCxPQUFPZ0QsYUFBYSxLQUFLaEYsNERBQWFBLENBQUNrRixPQUFPLElBQzdDeEMsQ0FBQUEsZ0JBQWdCLGlCQUFpQkEsZ0JBQWdCLFlBQVcsR0FBSTtvQkFDakVWLE9BQU9nRCxhQUFhLEdBQUdoRiw0REFBYUEsQ0FBQ2lGLEtBQUs7b0JBQzFDakQsT0FBT2tELE9BQU8sR0FBRztnQkFDckI7WUFDSixPQUNLO2dCQUNEbEQsT0FBTzBELE9BQU8sR0FBRztZQUNyQjtZQUNBLElBQUlDLFdBQVdDLE9BQU8sS0FBSyxTQUN2QixDQUFDUCxLQUFLRSxRQUFRLElBQ2QsQ0FBQyxJQUFJLENBQUNyRSxPQUFPLENBQUMyRSxjQUFjLElBQzVCLENBQUM3RCxPQUFPa0QsT0FBTyxJQUNmLENBQUNsRCxPQUFPeUQsSUFBSSxJQUNaLENBQUN6RCxPQUFPUCxLQUFLLEVBQUU7Z0JBQ2ZxRSxzQkFBc0JULEtBQUtVLE9BQU87WUFDdEM7UUFDSjtRQUNBLElBQUlsQixrQkFBa0I7WUFDbEIsSUFBSSxDQUFDbUIsZ0JBQWdCLENBQUNoRTtRQUMxQjtRQUNBLE9BQU9BO0lBQ1g7SUFDQSw0RUFBNEU7SUFDNUUsa0JBQWtCO0lBQ2xCbkIsZ0JBQWdCZ0QsU0FBUyxDQUFDb0MseUJBQXlCLEdBQUcsU0FBVUMsU0FBUyxFQUFFaEMsU0FBUztRQUNoRixJQUFJLENBQUMsSUFBSSxDQUFDbkMsSUFBSSxFQUFFO1lBQ1osT0FBTztRQUNYO1FBQ0EsSUFBSW9FLG9CQUFvQixJQUFJLENBQUNuRixZQUFZLENBQUNtRSxlQUFlLENBQUMsSUFBSSxDQUFDM0IsS0FBSyxFQUFFNEMsdUJBQXVCLEdBQ3pGLENBQUMzRiw4REFBWUEsQ0FBQyxJQUFJLENBQUMrQyxLQUFLLEVBQUUsSUFBSSxDQUFDekIsSUFBSSxDQUFDQyxNQUFNLEVBQUVrRSxXQUFXLElBQUksQ0FBQ2hDLFNBQVMsSUFDbkUsQ0FBQ25FLG9EQUFLQSxDQUFDLElBQUksQ0FBQ2dDLElBQUksQ0FBQ0MsTUFBTSxFQUFFa0U7UUFDL0IsT0FBUUMscUJBQXNCakMsYUFBYSxDQUFDbkUsb0RBQUtBLENBQUMsSUFBSSxDQUFDZ0MsSUFBSSxDQUFDbUMsU0FBUyxFQUFFQTtJQUMzRTtJQUNBckQsZ0JBQWdCZ0QsU0FBUyxDQUFDd0MsT0FBTyxHQUFHLFNBQVVDLEdBQUcsRUFBRUMsa0JBQWtCO1FBQ2pFLElBQUl4RSxPQUFPLElBQUksQ0FBQ0EsSUFBSTtRQUNwQixJQUFJQSxRQUNBQSxJQUFJLENBQUN1RSxJQUFJLElBQ1IsRUFBQ0Msc0JBQXNCeEcsb0RBQUtBLENBQUNnQyxLQUFLbUMsU0FBUyxFQUFFLElBQUksQ0FBQ0EsU0FBUyxJQUFJO1lBQ2hFLE9BQU9uQyxJQUFJLENBQUN1RSxJQUFJO1FBQ3BCO0lBQ0o7SUFDQXpGLGdCQUFnQmdELFNBQVMsQ0FBQ2tCLGFBQWEsR0FBRyxTQUFVd0Isa0JBQWtCO1FBQ2xFLE9BQU8sSUFBSSxDQUFDRixPQUFPLENBQUMsVUFBVUU7SUFDbEM7SUFDQTFGLGdCQUFnQmdELFNBQVMsQ0FBQzJDLFlBQVksR0FBRyxTQUFVRCxrQkFBa0I7UUFDakUsT0FBTyxJQUFJLENBQUNGLE9BQU8sQ0FBQyxTQUFTRTtJQUNqQztJQUNBMUYsZ0JBQWdCZ0QsU0FBUyxDQUFDNEMsZ0JBQWdCLEdBQUc7UUFDekMsT0FBTyxJQUFJLENBQUMxRSxJQUFJO1FBQ2hCLElBQUksQ0FBQ1ksVUFBVSxHQUFHO0lBQ3RCO0lBQ0E5QixnQkFBZ0JnRCxTQUFTLENBQUM2QyxxQkFBcUIsR0FBRztRQUM5QyxJQUFJLENBQUMxRixZQUFZLENBQUMyRixXQUFXLENBQUMsSUFBSSxDQUFDdEQsT0FBTztJQUM5QztJQUNBOzs7Ozs7S0FNQyxHQUNEeEMsZ0JBQWdCZ0QsU0FBUyxDQUFDK0MsT0FBTyxHQUFHLFNBQVUxQyxTQUFTO1FBQ25ELElBQUluRDtRQUNKLElBQUk4RixtQkFBbUI7WUFDbkIsd0NBQXdDO1lBQ3hDQyxjQUFjO1FBQ2xCO1FBQ0EsOERBQThEO1FBQzlELG1FQUFtRTtRQUNuRSw4REFBOEQ7UUFDOUQsSUFBSXBFLGNBQWMsSUFBSSxDQUFDeEIsT0FBTyxDQUFDd0IsV0FBVztRQUMxQyxJQUFJQSxnQkFBZ0IscUJBQXFCO1lBQ3JDbUUsaUJBQWlCbkUsV0FBVyxHQUFHQTtRQUNuQyxPQUNLLElBQUlBLGdCQUFnQixZQUFZO1lBQ2pDbUUsaUJBQWlCbkUsV0FBVyxHQUFHO1FBQ25DLE9BQ0s7WUFDRG1FLGlCQUFpQm5FLFdBQVcsR0FBRztRQUNuQztRQUNBLElBQUlpRCxXQUFXQyxPQUFPLEtBQUssU0FBUzFCLGFBQWF0RCxlQUFlUSxJQUFJLENBQUM4QyxXQUFXLGNBQWM7WUFDMUYsSUFBSTZDLFdBQVd2Ryx1RUFBa0JBLENBQUMsSUFBSSxDQUFDZ0QsS0FBSztZQUM1QyxJQUFJd0QsT0FBT0QsU0FBU0UsbUJBQW1CO1lBQ3ZDLElBQUksQ0FBQ0QsUUFBUSxDQUFDQSxLQUFLRSxJQUFJLENBQUMsU0FBVUMsQ0FBQztnQkFBSSxPQUFPQSxFQUFFQyxRQUFRLENBQUMxRCxJQUFJLENBQUNDLEtBQUssS0FBSztZQUFhLElBQUk7Z0JBQ3JGZ0MsV0FBV0MsT0FBTyxLQUFLLFNBQVM5RixrRUFBU0EsQ0FBQ3VILElBQUksQ0FDMUMsSUFDQW5ELFdBQ0EsQ0FBQyxDQUFDbkQsS0FBS2dHLFNBQVNyRCxJQUFJLE1BQU0sUUFBUTNDLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBRzRDLEtBQUssS0FBS29EO1lBRWhGO1FBQ0o7UUFDQSxJQUFJN0MsYUFBYSxDQUFDbkUsb0RBQUtBLENBQUMsSUFBSSxDQUFDbUIsT0FBTyxDQUFDZ0QsU0FBUyxFQUFFQSxZQUFZO1lBQ3hELGlEQUFpRDtZQUNqRDJDLGlCQUFpQjNDLFNBQVMsR0FBRyxJQUFJLENBQUNoRCxPQUFPLENBQUNnRCxTQUFTLEdBQUd0RSwrQ0FBUUEsQ0FBQ0EsK0NBQVFBLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQ3NCLE9BQU8sQ0FBQ2dELFNBQVMsR0FBR0E7UUFDekc7UUFDQSxJQUFJLENBQUNqRCxTQUFTLENBQUNxRyxjQUFjO1FBQzdCLE9BQU8sSUFBSSxDQUFDcEYsU0FBUyxDQUFDMkUsa0JBQWtCN0csNERBQWFBLENBQUM0RyxPQUFPO0lBQ2pFO0lBQ0E7O0tBRUMsR0FDRC9GLGdCQUFnQmdELFNBQVMsQ0FBQzBELFNBQVMsR0FBRyxTQUFVQyxnQkFBZ0I7UUFDNUQsSUFBSXJHLFFBQVEsSUFBSTtRQUNoQixJQUFJc0csa0JBQWtCN0gsK0NBQVFBLENBQUNBLCtDQUFRQSxDQUFDLENBQUMsR0FBSTRILGlCQUFpQmhFLEtBQUssR0FBR2dFLG1CQUFvQjVILCtDQUFRQSxDQUFDQSwrQ0FBUUEsQ0FBQ0EsK0NBQVFBLENBQUNBLCtDQUFRQSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUNzQixPQUFPLEdBQUc7WUFBRXNDLE9BQU8sSUFBSSxDQUFDdEMsT0FBTyxDQUFDc0MsS0FBSztRQUFDLElBQUlnRSxtQkFBbUI7WUFBRXRELFdBQVd0RSwrQ0FBUUEsQ0FBQ0EsK0NBQVFBLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQ3NCLE9BQU8sQ0FBQ2dELFNBQVMsR0FBR3NELGlCQUFpQnRELFNBQVM7UUFBRSxLQUFPO1lBQy9SLGlFQUFpRTtZQUNqRSxrRUFBa0U7WUFDbEUsMkRBQTJEO1lBQzNELG1FQUFtRTtZQUNuRSxzQ0FBc0M7WUFDdEN4QixhQUFhO1FBQVc7UUFDNUIrRSxnQkFBZ0JqRSxLQUFLLEdBQUcsSUFBSSxDQUFDa0UsaUJBQWlCLENBQUNELGdCQUFnQmpFLEtBQUs7UUFDcEUsSUFBSW1FLE1BQU0sSUFBSSxDQUFDM0csWUFBWSxDQUFDc0MsZUFBZTtRQUMzQyx3RUFBd0U7UUFDeEUscUVBQXFFO1FBQ3JFLDBFQUEwRTtRQUMxRSwyRUFBMkU7UUFDM0UsNEVBQTRFO1FBQzVFLElBQUksQ0FBQ1MsU0FBUyxHQUNWeUQsaUJBQWlCaEUsS0FBSyxHQUNsQixJQUFJLENBQUNrRSxpQkFBaUIsQ0FBQyxJQUFJLENBQUN4RyxPQUFPLENBQUNzQyxLQUFLLElBQ3ZDaUUsZ0JBQWdCakUsS0FBSztRQUMvQix3REFBd0Q7UUFDeEQsb0RBQW9EO1FBQ3BELElBQUl2QyxZQUFZLElBQUksQ0FBQ0EsU0FBUztRQUM5QixJQUFJMkcsd0JBQXdCM0csVUFBVStELGFBQWE7UUFDbkQvRCxVQUFVK0QsYUFBYSxHQUFHaEYsNERBQWFBLENBQUN1SCxTQUFTO1FBQ2pELElBQUlFLGdCQUFnQkksMkJBQTJCLEVBQUU7WUFDN0MsSUFBSSxDQUFDQyxPQUFPO1FBQ2hCO1FBQ0EsSUFBSUMsa0JBQWtCLElBQUl6RjtRQUMxQixPQUFPLElBQUksQ0FBQ3RCLFlBQVksQ0FDbkJnSCxVQUFVLENBQUNMLEtBQUtGLGlCQUFpQnpILDREQUFhQSxDQUFDdUgsU0FBUyxFQUN4RFUsSUFBSSxDQUFDLFNBQVVDLGVBQWU7WUFDL0IvRyxNQUFNSCxZQUFZLENBQUNzRCxXQUFXLENBQUNxRDtZQUMvQixJQUFJMUcsVUFBVStELGFBQWEsS0FBS2hGLDREQUFhQSxDQUFDdUgsU0FBUyxFQUFFO2dCQUNyRHRHLFVBQVUrRCxhQUFhLEdBQUc0QztZQUM5QjtZQUNBLHdFQUF3RTtZQUN4RSx3RUFBd0U7WUFDeEUsa0VBQWtFO1lBQ2xFLHNFQUFzRTtZQUN0RSx3REFBd0Q7WUFDeER6RyxNQUFNSCxZQUFZLENBQUNtSCxLQUFLLENBQUNDLEtBQUssQ0FBQztnQkFDM0JDLFFBQVEsU0FBVUYsS0FBSztvQkFDbkIsSUFBSUcsY0FBY2QsaUJBQWlCYyxXQUFXO29CQUM5QyxJQUFJQSxhQUFhO3dCQUNiSCxNQUFNRyxXQUFXLENBQUM7NEJBQ2Q5RSxPQUFPckMsTUFBTXFDLEtBQUs7NEJBQ2xCVSxXQUFXL0MsTUFBTStDLFNBQVM7NEJBQzFCc0IsbUJBQW1COzRCQUNuQitDLFlBQVk7d0JBQ2hCLEdBQUcsU0FBVUMsUUFBUTs0QkFDakIsT0FBT0YsWUFBWUUsVUFBVTtnQ0FDekJOLGlCQUFpQkEsZ0JBQWdCekMsSUFBSTtnQ0FDckN2QixXQUFXdUQsZ0JBQWdCdkQsU0FBUzs0QkFDeEM7d0JBQ0o7b0JBQ0osT0FDSzt3QkFDRCxpRUFBaUU7d0JBQ2pFLCtEQUErRDt3QkFDL0QsaUVBQWlFO3dCQUNqRSw4REFBOEQ7d0JBQzlELDBEQUEwRDt3QkFDMURpRSxNQUFNTSxVQUFVLENBQUM7NEJBQ2JqRixPQUFPaUUsZ0JBQWdCakUsS0FBSzs0QkFDNUJVLFdBQVd1RCxnQkFBZ0J2RCxTQUFTOzRCQUNwQ3VCLE1BQU15QyxnQkFBZ0J6QyxJQUFJO3dCQUM5QjtvQkFDSjtnQkFDSjtnQkFDQWlELGdCQUFnQixTQUFVQyxLQUFLO29CQUMzQixrRUFBa0U7b0JBQ2xFLCtDQUErQztvQkFDL0NaLGdCQUFnQmpHLEdBQUcsQ0FBQzZHLE1BQU1uRixLQUFLO2dCQUNuQztZQUNKO1lBQ0EsT0FBTzBFO1FBQ1gsR0FDS1UsT0FBTyxDQUFDO1lBQ1QsOERBQThEO1lBQzlELHNFQUFzRTtZQUN0RSx1RUFBdUU7WUFDdkUsd0VBQXdFO1lBQ3hFLGtDQUFrQztZQUNsQyxJQUFJLENBQUNiLGdCQUFnQmMsR0FBRyxDQUFDMUgsTUFBTXFDLEtBQUssR0FBRztnQkFDbkNzRixvQkFBb0IzSDtZQUN4QjtRQUNKO0lBQ0o7SUFDQSx3RUFBd0U7SUFDeEUsMEZBQTBGO0lBQzFGLHFHQUFxRztJQUNyRzs7OztLQUlDLEdBQ0ROLGdCQUFnQmdELFNBQVMsQ0FBQ2tGLGVBQWUsR0FBRyxTQUFVN0gsT0FBTztRQUN6RCxJQUFJQyxRQUFRLElBQUk7UUFDaEIsSUFBSXFELGVBQWUsSUFBSSxDQUFDeEQsWUFBWSxDQUMvQmdJLHdCQUF3QixDQUFDO1lBQzFCeEYsT0FBT3RDLFFBQVErSCxRQUFRO1lBQ3ZCL0UsV0FBV2hELFFBQVFnRCxTQUFTO1lBQzVCZ0YsU0FBU2hJLFFBQVFnSSxPQUFPO1FBQzVCLEdBQ0t4RSxTQUFTLENBQUM7WUFDWHpDLE1BQU0sU0FBVWtILGdCQUFnQjtnQkFDNUIsSUFBSWIsY0FBY3BILFFBQVFvSCxXQUFXO2dCQUNyQyxJQUFJQSxhQUFhO29CQUNibkgsTUFBTW1ILFdBQVcsQ0FBQyxTQUFVRSxRQUFRLEVBQUV6SCxFQUFFO3dCQUNwQyxJQUFJbUQsWUFBWW5ELEdBQUdtRCxTQUFTO3dCQUM1QixPQUFPb0UsWUFBWUUsVUFBVTs0QkFDekJXLGtCQUFrQkE7NEJBQ2xCakYsV0FBV0E7d0JBQ2Y7b0JBQ0o7Z0JBQ0o7WUFDSjtZQUNBekMsT0FBTyxTQUFVMkgsR0FBRztnQkFDaEIsSUFBSWxJLFFBQVFtSSxPQUFPLEVBQUU7b0JBQ2pCbkksUUFBUW1JLE9BQU8sQ0FBQ0Q7b0JBQ2hCO2dCQUNKO2dCQUNBekQsV0FBV0MsT0FBTyxLQUFLLFNBQVM5RixrRUFBU0EsQ0FBQzJCLEtBQUssQ0FBQyxJQUFJMkg7WUFDeEQ7UUFDSjtRQUNBLElBQUksQ0FBQzdHLGFBQWEsQ0FBQ1QsR0FBRyxDQUFDMEM7UUFDdkIsT0FBTztZQUNILElBQUlyRCxNQUFNb0IsYUFBYSxDQUFDSCxNQUFNLENBQUNvQyxlQUFlO2dCQUMxQ0EsYUFBYUMsV0FBVztZQUM1QjtRQUNKO0lBQ0o7SUFDQTVELGdCQUFnQmdELFNBQVMsQ0FBQ3lGLFVBQVUsR0FBRyxTQUFVQyxVQUFVO1FBQ3ZELE9BQU8sSUFBSSxDQUFDckgsU0FBUyxDQUFDcUg7SUFDMUI7SUFDQTFJLGdCQUFnQmdELFNBQVMsQ0FBQzJGLGdCQUFnQixHQUFHLFNBQVVELFVBQVU7UUFDN0QsSUFBSUUsZ0JBQWdCdEosNERBQU9BLENBQUMsSUFBSSxDQUFDZSxPQUFPLEVBQUVxSSxjQUFjLENBQUM7UUFDekQ3SSxPQUFPLElBQUksQ0FBQ1EsT0FBTyxFQUFFdUk7SUFDekI7SUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FpQkMsR0FDRDVJLGdCQUFnQmdELFNBQVMsQ0FBQzZGLFlBQVksR0FBRyxTQUFVeEYsU0FBUztRQUN4RCxJQUFJbkUsb0RBQUtBLENBQUMsSUFBSSxDQUFDbUUsU0FBUyxFQUFFQSxZQUFZO1lBQ2xDLHlFQUF5RTtZQUN6RSx3RUFBd0U7WUFDeEUsdURBQXVEO1lBQ3ZELE9BQU8sSUFBSSxDQUFDdEMsU0FBUyxDQUFDQyxJQUFJLEdBQUcsSUFBSSxDQUFDRyxNQUFNLEtBQUttQyxRQUFRQyxPQUFPO1FBQ2hFO1FBQ0EsSUFBSSxDQUFDbEQsT0FBTyxDQUFDZ0QsU0FBUyxHQUFHQTtRQUN6QixvQkFBb0I7UUFDcEIsSUFBSSxDQUFDLElBQUksQ0FBQ3RDLFNBQVMsQ0FBQ0MsSUFBSSxFQUFFO1lBQ3RCLE9BQU9zQyxRQUFRQyxPQUFPO1FBQzFCO1FBQ0EsT0FBTyxJQUFJLENBQUNsQyxTQUFTLENBQUM7WUFDbEIsbURBQW1EO1lBQ25EUSxhQUFhLElBQUksQ0FBQ3hCLE9BQU8sQ0FBQ2tDLGtCQUFrQjtZQUM1Q2MsV0FBV0E7UUFDZixHQUFHbEUsNERBQWFBLENBQUMwSixZQUFZO0lBQ2pDO0lBQ0E7Ozs7S0FJQyxHQUNEN0ksZ0JBQWdCZ0QsU0FBUyxDQUFDeUUsV0FBVyxHQUFHLFNBQVVxQixLQUFLO1FBQ25ELElBQUkzSSxlQUFlLElBQUksQ0FBQ0EsWUFBWTtRQUNwQyxJQUFJZ0IsU0FBU2hCLGFBQWFtSCxLQUFLLENBQUM5QyxJQUFJLENBQUM7WUFDakM3QixPQUFPLElBQUksQ0FBQ3RDLE9BQU8sQ0FBQ3NDLEtBQUs7WUFDekJVLFdBQVcsSUFBSSxDQUFDQSxTQUFTO1lBQ3pCc0IsbUJBQW1CO1lBQ25CK0MsWUFBWTtRQUNoQixHQUFHdkcsTUFBTTtRQUNULElBQUlrRSxZQUFZeUQsTUFBTTNILFFBQVE7WUFDMUJrQyxXQUFXLElBQUksQ0FBQ0EsU0FBUztRQUM3QjtRQUNBLElBQUlnQyxXQUFXO1lBQ1hsRixhQUFhbUgsS0FBSyxDQUFDTSxVQUFVLENBQUM7Z0JBQzFCakYsT0FBTyxJQUFJLENBQUN0QyxPQUFPLENBQUNzQyxLQUFLO2dCQUN6QmlDLE1BQU1TO2dCQUNOaEMsV0FBVyxJQUFJLENBQUNBLFNBQVM7WUFDN0I7WUFDQWxELGFBQWE0SSxnQkFBZ0I7UUFDakM7SUFDSjtJQUNBOztLQUVDLEdBQ0QvSSxnQkFBZ0JnRCxTQUFTLENBQUNnRyxZQUFZLEdBQUcsU0FBVS9DLFlBQVk7UUFDM0QsSUFBSSxDQUFDNUYsT0FBTyxDQUFDNEYsWUFBWSxHQUFHQTtRQUM1QixJQUFJLENBQUNnRCxhQUFhO0lBQ3RCO0lBQ0E7O0tBRUMsR0FDRGpKLGdCQUFnQmdELFNBQVMsQ0FBQ2tHLFdBQVcsR0FBRztRQUNwQyxJQUFJLENBQUM3SSxPQUFPLENBQUM0RixZQUFZLEdBQUc7UUFDNUIsSUFBSSxDQUFDZ0QsYUFBYTtJQUN0QjtJQUNBLG1FQUFtRTtJQUNuRWpKLGdCQUFnQmdELFNBQVMsQ0FBQ21HLG9CQUFvQixHQUFHLFNBQVVDLE1BQU0sRUFDakUsdUVBQXVFO0lBQ3ZFLDRFQUE0RTtJQUM1RSwyRUFBMkU7SUFDM0UsaUVBQWlFO0lBQ2pFL0ksT0FBTztRQUNILElBQUlBLFFBQVFnSixlQUFlLEVBQUU7WUFDekIsSUFBSW5KLEtBQUtHLFFBQVF3QixXQUFXLEVBQUVBLGNBQWMzQixPQUFPLEtBQUssSUFBSSxnQkFBZ0JBLElBQUk2QixLQUFLMUIsUUFBUWtDLGtCQUFrQixFQUFFQSxxQkFBcUJSLE9BQU8sS0FBSyxJQUFJRixjQUFjRTtZQUNwSyxJQUFJRixnQkFBZ0IsV0FBVztZQUMzQixxREFBcUQ7WUFDekQsT0FDSyxJQUFJLE9BQU94QixRQUFRZ0osZUFBZSxLQUFLLFlBQVk7Z0JBQ3BELHNFQUFzRTtnQkFDdEUsc0VBQXNFO2dCQUN0RSxtRUFBbUU7Z0JBQ25FLG9FQUFvRTtnQkFDcEUscUVBQXFFO2dCQUNyRSxzRUFBc0U7Z0JBQ3RFLHNFQUFzRTtnQkFDdEUsdUVBQXVFO2dCQUN2RSx3RUFBd0U7Z0JBQ3hFLDZDQUE2QztnQkFDN0NoSixRQUFRd0IsV0FBVyxHQUFHeEIsUUFBUWdKLGVBQWUsQ0FBQ3hILGFBQWE7b0JBQ3ZEdUgsUUFBUUE7b0JBQ1IvSSxTQUFTQTtvQkFDVGlKLFlBQVksSUFBSTtvQkFDaEIvRyxvQkFBb0JBO2dCQUN4QjtZQUNKLE9BQ0ssSUFBSTZHLFdBQVcscUJBQXFCO2dCQUNyQy9JLFFBQVF3QixXQUFXLEdBQUdVO1lBQzFCLE9BQ0s7Z0JBQ0RsQyxRQUFRd0IsV0FBVyxHQUFHeEIsUUFBUWdKLGVBQWU7WUFDakQ7UUFDSjtRQUNBLE9BQU9oSixRQUFRd0IsV0FBVztJQUM5QjtJQUNBN0IsZ0JBQWdCZ0QsU0FBUyxDQUFDdUcsS0FBSyxHQUFHLFNBQVVsSixPQUFPLEVBQUVtSixnQkFBZ0IsRUFBRTdHLEtBQUs7UUFDeEUsd0VBQXdFO1FBQ3hFLDJDQUEyQztRQUMzQyxJQUFJLENBQUN4QyxZQUFZLENBQUNzSixrQkFBa0IsQ0FBQyxJQUFJO1FBQ3pDLE9BQU8sSUFBSSxDQUFDdEosWUFBWSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQ3FDLE9BQU8sRUFBRW5DLFNBQVNtSixrQkFBa0I3RztJQUM5RjtJQUNBLDhEQUE4RDtJQUM5RDNDLGdCQUFnQmdELFNBQVMsQ0FBQ2lHLGFBQWEsR0FBRztRQUN0QyxJQUFJM0ksUUFBUSxJQUFJO1FBQ2hCLDRCQUE0QjtRQUM1QixJQUFJLElBQUksQ0FBQ0gsWUFBWSxDQUFDdUosT0FBTyxFQUFFO1lBQzNCO1FBQ0o7UUFDQSxJQUFJeEosS0FBSyxJQUFJLEVBQUV5SixjQUFjekosR0FBR3lKLFdBQVcsRUFBRTFELGVBQWUvRixHQUFHRyxPQUFPLENBQUM0RixZQUFZO1FBQ25GLElBQUksQ0FBQ0EsY0FBYztZQUNmLElBQUkwRCxhQUFhO2dCQUNiQyxhQUFhRCxZQUFZRSxPQUFPO2dCQUNoQyxPQUFPLElBQUksQ0FBQ0YsV0FBVztZQUMzQjtZQUNBO1FBQ0o7UUFDQSxJQUFJQSxlQUFlQSxZQUFZRyxRQUFRLEtBQUs3RCxjQUFjO1lBQ3REO1FBQ0o7UUFDQWhILHNFQUFTQSxDQUFDZ0gsY0FBYztRQUN4QixJQUFJOEQsT0FBT0osZUFBZ0IsS0FBSSxDQUFDQSxXQUFXLEdBQUcsQ0FBQztRQUMvQ0ksS0FBS0QsUUFBUSxHQUFHN0Q7UUFDaEIsSUFBSStELGFBQWE7WUFDYixJQUFJOUosSUFBSTZCO1lBQ1IsSUFBSXpCLE1BQU1xSixXQUFXLEVBQUU7Z0JBQ25CLElBQUksQ0FBQ3ZLLDJFQUF3QkEsQ0FBQ2tCLE1BQU1GLFNBQVMsQ0FBQytELGFBQWEsS0FDdkQsQ0FBRSxFQUFDcEMsS0FBSyxDQUFDN0IsS0FBS0ksTUFBTUQsT0FBTyxFQUFFNEosZUFBZSxNQUFNLFFBQVFsSSxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUd4QixJQUFJLENBQUNMLEdBQUUsR0FBSTtvQkFDakdJLE1BQU1lLFNBQVMsQ0FBQzt3QkFDWiw0RUFBNEU7d0JBQzVFLGtGQUFrRjt3QkFDbEYsaUZBQWlGO3dCQUNqRiwyQ0FBMkM7d0JBQzNDUSxhQUFhdkIsTUFBTUQsT0FBTyxDQUFDa0Msa0JBQWtCLEtBQUssYUFDOUMsYUFDRTtvQkFDVixHQUFHcEQsNERBQWFBLENBQUMrSyxJQUFJLEVBQUU5QyxJQUFJLENBQUM4QyxNQUFNQTtnQkFDdEMsT0FDSztvQkFDREE7Z0JBQ0o7WUFDSjtRQUNKO1FBQ0EsSUFBSUEsT0FBTztZQUNQLElBQUlILE9BQU96SixNQUFNcUosV0FBVztZQUM1QixJQUFJSSxNQUFNO2dCQUNOSCxhQUFhRyxLQUFLRixPQUFPO2dCQUN6QkUsS0FBS0YsT0FBTyxHQUFHbkcsV0FBV3NHLFlBQVlELEtBQUtELFFBQVE7WUFDdkQ7UUFDSjtRQUNBSTtJQUNKO0lBQ0FsSyxnQkFBZ0JnRCxTQUFTLENBQUNtQyxnQkFBZ0IsR0FBRyxTQUFVRSxTQUFTLEVBQUVoQyxTQUFTO1FBQ3ZFLElBQUlBLGNBQWMsS0FBSyxHQUFHO1lBQUVBLFlBQVksSUFBSSxDQUFDQSxTQUFTO1FBQUU7UUFDeEQsSUFBSXpDLFFBQVEsSUFBSSxDQUFDK0UsWUFBWTtRQUM3Qiw4REFBOEQ7UUFDOUQsSUFBSS9FLFNBQVMsSUFBSSxDQUFDTSxJQUFJLElBQUksQ0FBQ2hDLG9EQUFLQSxDQUFDbUUsV0FBVyxJQUFJLENBQUNuQyxJQUFJLENBQUNtQyxTQUFTLEdBQUc7WUFDOUR6QyxRQUFRLEtBQUs7UUFDakI7UUFDQSxPQUFRLElBQUksQ0FBQ00sSUFBSSxHQUFHbkMsK0NBQVFBLENBQUM7WUFBRW9DLFFBQVEsSUFBSSxDQUFDaEIsWUFBWSxDQUFDZ0ssc0JBQXNCLEdBQ3ZFOUUsWUFDRWhHLDhEQUFTQSxDQUFDZ0c7WUFBWWhDLFdBQVdBO1FBQVUsR0FBSXpDLFFBQVE7WUFBRUEsT0FBT0E7UUFBTSxJQUFJO0lBQ3hGO0lBQ0FaLGdCQUFnQmdELFNBQVMsQ0FBQ29ILGtCQUFrQixHQUFHLFNBQVUxQixVQUFVLEVBQUVjLGdCQUFnQjtRQUNqRixJQUFJbEosUUFBUSxJQUFJO1FBQ2hCLElBQUksQ0FBQ3dCLFVBQVUsR0FBRztRQUNsQixJQUFJdUksdUJBQ0osMEVBQTBFO1FBQzFFLHFFQUFxRTtRQUNyRSw0QkFBNEI7UUFDNUJiLHFCQUFxQnJLLDREQUFhQSxDQUFDNEcsT0FBTyxJQUN0Qyx5RUFBeUU7UUFDekUsMkRBQTJEO1FBQzNEeUQscUJBQXFCckssNERBQWFBLENBQUN1SCxTQUFTLElBQzVDLHdFQUF3RTtRQUN4RSx1RkFBdUY7UUFDdkY4QyxxQkFBcUJySyw0REFBYUEsQ0FBQytLLElBQUk7UUFDM0MscUVBQXFFO1FBQ3JFLElBQUlJLGVBQWUsSUFBSSxDQUFDakssT0FBTyxDQUFDZ0QsU0FBUztRQUN6QyxJQUFJa0gsaUJBQWlCLElBQUksQ0FBQ2xLLE9BQU8sQ0FBQ3dCLFdBQVc7UUFDN0MsSUFBSStHLGdCQUFnQnRKLDREQUFPQSxDQUFDLElBQUksQ0FBQ2UsT0FBTyxFQUFFcUksY0FBYyxDQUFDO1FBQ3pELElBQUlySSxVQUFVZ0ssdUJBQ1Ysb0VBQW9FO1FBQ3BFLDZEQUE2RDtRQUM3RHpCLGdCQUNFL0ksT0FBTyxJQUFJLENBQUNRLE9BQU8sRUFBRXVJO1FBQzNCLGlFQUFpRTtRQUNqRSw0RUFBNEU7UUFDNUUsMEVBQTBFO1FBQzFFLHFEQUFxRDtRQUNyRCxJQUFJakcsUUFBUSxJQUFJLENBQUNrRSxpQkFBaUIsQ0FBQ3hHLFFBQVFzQyxLQUFLO1FBQ2hELElBQUksQ0FBQ08sU0FBUyxHQUFHUDtRQUNqQixJQUFJLENBQUMwSCxzQkFBc0I7WUFDdkIsd0VBQXdFO1lBQ3hFLElBQUksQ0FBQ3BCLGFBQWE7WUFDbEIseUVBQXlFO1lBQ3pFLHVEQUF1RDtZQUN2RCxJQUFJUCxjQUNBQSxXQUFXckYsU0FBUyxJQUNwQixDQUFDbkUsb0RBQUtBLENBQUN3SixXQUFXckYsU0FBUyxFQUFFaUgsaUJBQzdCLCtEQUErRDtZQUMvRGpLLFFBQVF3QixXQUFXLEtBQUssYUFDeEIsd0VBQXdFO1lBQ3hFLHFFQUFxRTtZQUNyRXhCLFFBQVF3QixXQUFXLEtBQUswSSxnQkFBZ0I7Z0JBQ3hDLElBQUksQ0FBQ3BCLG9CQUFvQixDQUFDLHFCQUFxQjlJO2dCQUMvQyxJQUFJbUoscUJBQXFCLEtBQUssR0FBRztvQkFDN0JBLG1CQUFtQnJLLDREQUFhQSxDQUFDMEosWUFBWTtnQkFDakQ7WUFDSjtRQUNKO1FBQ0EsSUFBSSxDQUFDbEgsZ0JBQWdCLElBQUssS0FBSSxDQUFDQSxnQkFBZ0IsR0FBR0MsaUJBQWlCdkIsUUFBUXdCLFdBQVc7UUFDdEYsSUFBSTJJLDRCQUE0QjtZQUM1QixJQUFJbEssTUFBTW1LLE9BQU8sS0FBS0EsU0FBUztnQkFDM0JuSyxNQUFNcUIsZ0JBQWdCLEdBQUc7WUFDN0I7UUFDSjtRQUNBLElBQUkwQixZQUFZaEQsUUFBUWdELFNBQVMsSUFBSXRFLCtDQUFRQSxDQUFDLENBQUMsR0FBR3NCLFFBQVFnRCxTQUFTO1FBQ25FLElBQUluRCxLQUFLLElBQUksQ0FBQ3FKLEtBQUssQ0FBQ2xKLFNBQVNtSixrQkFBa0I3RyxRQUFROEgsVUFBVXZLLEdBQUd1SyxPQUFPLEVBQUVDLFdBQVd4SyxHQUFHd0ssUUFBUTtRQUNuRyxJQUFJbEssV0FBVztZQUNYWSxNQUFNLFNBQVVELE1BQU07Z0JBQ2xCLElBQUlqQyxvREFBS0EsQ0FBQ29CLE1BQU0rQyxTQUFTLEVBQUVBLFlBQVk7b0JBQ25DbUg7b0JBQ0FsSyxNQUFNcUssWUFBWSxDQUFDeEosUUFBUWtDO2dCQUMvQjtZQUNKO1lBQ0F6QyxPQUFPLFNBQVVBLEtBQUs7Z0JBQ2xCLElBQUkxQixvREFBS0EsQ0FBQ29CLE1BQU0rQyxTQUFTLEVBQUVBLFlBQVk7b0JBQ25DbUg7b0JBQ0FsSyxNQUFNc0ssV0FBVyxDQUFDaEssT0FBT3lDO2dCQUM3QjtZQUNKO1FBQ0o7UUFDQSxJQUFJLENBQUNnSCx3QkFBeUJLLENBQUFBLFlBQVksQ0FBQyxJQUFJLENBQUNELE9BQU8sR0FBRztZQUN0RCxxRUFBcUU7WUFDckUsNERBQTREO1lBQzVELElBQUksSUFBSSxDQUFDQSxPQUFPLElBQUksSUFBSSxDQUFDakssUUFBUSxFQUFFO2dCQUMvQixJQUFJLENBQUNpSyxPQUFPLENBQUNJLGNBQWMsQ0FBQyxJQUFJLENBQUNySyxRQUFRO1lBQzdDO1lBQ0EsSUFBSSxDQUFDaUssT0FBTyxHQUFHQTtZQUNmLElBQUksQ0FBQ2pLLFFBQVEsR0FBR0E7UUFDcEI7UUFDQWlLLFFBQVFLLFdBQVcsQ0FBQ3RLO1FBQ3BCLE9BQU9pSztJQUNYO0lBQ0F6SyxnQkFBZ0JnRCxTQUFTLENBQUMzQixTQUFTLEdBQUcsU0FBVXFILFVBQVUsRUFBRWMsZ0JBQWdCO1FBQ3hFLE9BQU8sSUFBSSxDQUFDWSxrQkFBa0IsQ0FBQzFCLFlBQVljLGtCQUN0Q3VCLE9BQU87SUFDaEI7SUFDQS9LLGdCQUFnQmdELFNBQVMsQ0FBQ2dJLHFCQUFxQixHQUFHO1FBQzlDLElBQUlDLE9BQU8sRUFBRTtRQUNiLElBQUssSUFBSUMsS0FBSyxHQUFHQSxLQUFLQyxVQUFVQyxNQUFNLEVBQUVGLEtBQU07WUFDMUNELElBQUksQ0FBQ0MsR0FBRyxHQUFHQyxTQUFTLENBQUNELEdBQUc7UUFDNUI7UUFDQSw0RUFBNEU7UUFDNUUsa0VBQWtFO1FBQ2xFLDZEQUE2RDtRQUM3RCxzRUFBc0U7UUFDdEUsc0VBQXNFO1FBQ3RFLDBDQUEwQztRQUMxQyxJQUFJaEssT0FBTyxJQUFJLENBQUNBLElBQUk7UUFDcEIsSUFBSSxDQUFDMEUsZ0JBQWdCO1FBQ3JCLElBQUlqQyxlQUFlLElBQUksQ0FBQ0UsU0FBUyxDQUFDd0gsS0FBSyxDQUFDLElBQUksRUFBRUo7UUFDOUMsSUFBSSxDQUFDL0osSUFBSSxHQUFHQTtRQUNaLE9BQU95QztJQUNYO0lBQ0EsMEVBQTBFO0lBQzFFLHVDQUF1QztJQUN2QzNELGdCQUFnQmdELFNBQVMsQ0FBQ2lFLE9BQU8sR0FBRztRQUNoQyxJQUFJLENBQUMwRCxZQUFZLENBQ2pCLG1FQUFtRTtRQUNuRSxpRUFBaUU7UUFDakUsNkRBQTZEO1FBQzdELHFCQUFxQjtRQUNyQixJQUFJLENBQUM1RyxnQkFBZ0IsQ0FBQyxRQUFRLElBQUksQ0FBQ1YsU0FBUztJQUNoRDtJQUNBckQsZ0JBQWdCZ0QsU0FBUyxDQUFDMkgsWUFBWSxHQUFHLFNBQVV4SixNQUFNLEVBQUVrQyxTQUFTO1FBQ2hFLElBQUlpSSxZQUFZLElBQUksQ0FBQzNGLFlBQVk7UUFDakMsSUFBSTRGLGNBQWMsSUFBSSxDQUFDbkcseUJBQXlCLENBQUNqRSxRQUFRa0M7UUFDekQsNEVBQTRFO1FBQzVFLDRFQUE0RTtRQUM1RSxtRUFBbUU7UUFDbkUseUVBQXlFO1FBQ3pFLElBQUlpSSxhQUFhLENBQUNuSyxPQUFPMEQsT0FBTyxJQUFJLElBQUksQ0FBQ3hFLE9BQU8sQ0FBQ3NFLGlCQUFpQixFQUFFO1lBQ2hFLElBQUksQ0FBQ1EsZ0JBQWdCLENBQUNoRSxRQUFRa0M7UUFDbEM7UUFDQSxJQUFJaUksYUFBYUMsYUFBYTtZQUMxQjlMLDJFQUFzQkEsQ0FBQyxJQUFJLENBQUNzQixTQUFTLEVBQUUsUUFBUUk7UUFDbkQ7SUFDSjtJQUNBbkIsZ0JBQWdCZ0QsU0FBUyxDQUFDNEgsV0FBVyxHQUFHLFNBQVVoSyxLQUFLLEVBQUV5QyxTQUFTO1FBQzlELHNFQUFzRTtRQUN0RSx1RUFBdUU7UUFDdkUsSUFBSW1JLGNBQWN6TSwrQ0FBUUEsQ0FBQ0EsK0NBQVFBLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQ21GLGFBQWEsS0FBSztZQUFFdEQsT0FBT0E7WUFBTzZLLFFBQVE3SyxNQUFNOEssYUFBYTtZQUFFdkgsZUFBZWhGLDREQUFhQSxDQUFDeUIsS0FBSztZQUFFeUQsU0FBUztRQUFNO1FBQy9KLElBQUksQ0FBQ2MsZ0JBQWdCLENBQUNxRyxhQUFhbkk7UUFDbkM1RCwyRUFBc0JBLENBQUMsSUFBSSxDQUFDc0IsU0FBUyxFQUFFLFNBQVUsSUFBSSxDQUFDRyxJQUFJLENBQUNOLEtBQUssR0FBR0E7SUFDdkU7SUFDQVosZ0JBQWdCZ0QsU0FBUyxDQUFDMkksWUFBWSxHQUFHO1FBQ3JDLE9BQU8sSUFBSSxDQUFDNUssU0FBUyxDQUFDQyxJQUFJLEdBQUc7SUFDakM7SUFDQWhCLGdCQUFnQmdELFNBQVMsQ0FBQ3hCLGFBQWEsR0FBRztRQUN0QyxJQUFJLElBQUksQ0FBQ00sVUFBVSxFQUNmO1FBQ0osSUFBSSxJQUFJLENBQUMySSxPQUFPLElBQUksSUFBSSxDQUFDakssUUFBUSxFQUFFO1lBQy9CLElBQUksQ0FBQ2lLLE9BQU8sQ0FBQ0ksY0FBYyxDQUFDLElBQUksQ0FBQ3JLLFFBQVE7WUFDekMsT0FBTyxJQUFJLENBQUNpSyxPQUFPO1lBQ25CLE9BQU8sSUFBSSxDQUFDakssUUFBUTtRQUN4QjtRQUNBLElBQUksQ0FBQzBJLFdBQVc7UUFDaEIsd0NBQXdDO1FBQ3hDLElBQUksQ0FBQ3hILGFBQWEsQ0FBQ2tLLE9BQU8sQ0FBQyxTQUFVQyxHQUFHO1lBQUksT0FBT0EsSUFBSWpJLFdBQVc7UUFBSTtRQUN0RSxJQUFJLENBQUNsQyxhQUFhLENBQUNvSyxLQUFLO1FBQ3hCLElBQUksQ0FBQzNMLFlBQVksQ0FBQzRMLFNBQVMsQ0FBQyxJQUFJLENBQUN2SixPQUFPO1FBQ3hDLElBQUksQ0FBQ3pCLFNBQVMsQ0FBQytLLEtBQUs7UUFDcEIsSUFBSSxDQUFDaEssVUFBVSxHQUFHO0lBQ3RCO0lBQ0E5QixnQkFBZ0JnRCxTQUFTLENBQUM2RCxpQkFBaUIsR0FBRyxTQUFVdUIsUUFBUTtRQUM1RCxPQUFPLElBQUksQ0FBQ2pJLFlBQVksQ0FBQzZMLFNBQVMsQ0FBQzVEO0lBQ3ZDO0lBQ0EsT0FBT3BJO0FBQ1gsRUFBRVIsMkRBQVVBO0FBQ2U7QUFDM0Isb0VBQW9FO0FBQ3BFLDZDQUE2QztBQUM3Q0UsMkVBQXFCQSxDQUFDTTtBQUN0QiwwRUFBMEU7QUFDMUUsZ0ZBQWdGO0FBQ2hGLDRFQUE0RTtBQUM1RSx1RUFBdUU7QUFDdkUsMEVBQTBFO0FBQzFFLDZFQUE2RTtBQUM3RSxnRUFBZ0U7QUFDekQsU0FBU2lJLG9CQUFvQmdFLFFBQVE7SUFDeEMsSUFBSS9MLEtBQUsrTCxTQUFTNUwsT0FBTyxFQUFFd0IsY0FBYzNCLEdBQUcyQixXQUFXLEVBQUV3SCxrQkFBa0JuSixHQUFHbUosZUFBZTtJQUM3RixJQUFJeEgsZ0JBQWdCLHVCQUF1QkEsZ0JBQWdCLGdCQUFnQjtRQUN2RSxPQUFPb0ssU0FBUzVLLFNBQVMsQ0FBQztZQUN0QlEsYUFBYTtZQUNiLHlFQUF5RTtZQUN6RSx1RUFBdUU7WUFDdkV3SCxpQkFBaUIsU0FBVTZDLGtCQUFrQixFQUFFN0QsT0FBTztnQkFDbEQsdUVBQXVFO2dCQUN2RSwrQ0FBK0M7Z0JBQy9DLElBQUksQ0FBQ2dCLGVBQWUsR0FBR0E7Z0JBQ3ZCLGtFQUFrRTtnQkFDbEUsc0NBQXNDO2dCQUN0QyxJQUFJLE9BQU8sSUFBSSxDQUFDQSxlQUFlLEtBQUssWUFBWTtvQkFDNUMsT0FBTyxJQUFJLENBQUNBLGVBQWUsQ0FBQzZDLG9CQUFvQjdEO2dCQUNwRDtnQkFDQSw4REFBOEQ7Z0JBQzlELE9BQU94RztZQUNYO1FBQ0o7SUFDSjtJQUNBLE9BQU9vSyxTQUFTNUssU0FBUztBQUM3QjtBQUNBLFNBQVNSLHlDQUF5Q0QsS0FBSztJQUNuRGtFLFdBQVdDLE9BQU8sS0FBSyxTQUFTOUYsa0VBQVNBLENBQUMyQixLQUFLLENBQUMsSUFBSUEsTUFBTXVMLE9BQU8sRUFBRXZMLE1BQU13TCxLQUFLO0FBQ2xGO0FBQ08sU0FBU25ILHNCQUFzQkMsT0FBTztJQUN6QyxJQUFJSixXQUFXQyxPQUFPLEtBQUssU0FBU0csU0FBUztRQUN6Q0osV0FBV0MsT0FBTyxLQUFLLFNBQVM5RixrRUFBU0EsQ0FBQ29OLEtBQUssQ0FBQyxJQUFJbkg7SUFDeEQ7QUFDSjtBQUNBLFNBQVN0RCxpQkFBaUJDLFlBQVksMENBQTBDLEdBQTNDO0lBQ2pDLE9BQVFBLGdCQUFnQixrQkFDcEJBLGdCQUFnQixjQUNoQkEsZ0JBQWdCO0FBQ3hCLEVBQ0EsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktZG9jcy1mcm9uLWVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2NvcmUvT2JzZXJ2YWJsZVF1ZXJ5LmpzPzdmNmYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19hc3NpZ24sIF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9nbG9iYWxzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBlcXVhbCB9IGZyb20gXCJAd3J5L2VxdWFsaXR5XCI7XG5pbXBvcnQgeyBOZXR3b3JrU3RhdHVzLCBpc05ldHdvcmtSZXF1ZXN0SW5GbGlnaHQgfSBmcm9tIFwiLi9uZXR3b3JrU3RhdHVzLmpzXCI7XG5pbXBvcnQgeyBjbG9uZURlZXAsIGNvbXBhY3QsIGdldE9wZXJhdGlvbkRlZmluaXRpb24sIE9ic2VydmFibGUsIGl0ZXJhdGVPYnNlcnZlcnNTYWZlbHksIGZpeE9ic2VydmFibGVTdWJjbGFzcywgZ2V0UXVlcnlEZWZpbml0aW9uLCB9IGZyb20gXCIuLi91dGlsaXRpZXMvaW5kZXguanNcIjtcbmltcG9ydCB7IGVxdWFsQnlRdWVyeSB9IGZyb20gXCIuL2VxdWFsQnlRdWVyeS5qc1wiO1xudmFyIGFzc2lnbiA9IE9iamVjdC5hc3NpZ24sIGhhc093blByb3BlcnR5ID0gT2JqZWN0Lmhhc093blByb3BlcnR5O1xudmFyIE9ic2VydmFibGVRdWVyeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoT2JzZXJ2YWJsZVF1ZXJ5LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE9ic2VydmFibGVRdWVyeShfYSkge1xuICAgICAgICB2YXIgcXVlcnlNYW5hZ2VyID0gX2EucXVlcnlNYW5hZ2VyLCBxdWVyeUluZm8gPSBfYS5xdWVyeUluZm8sIG9wdGlvbnMgPSBfYS5vcHRpb25zO1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIC8vIFplbiBPYnNlcnZhYmxlIGhhcyBpdHMgb3duIGVycm9yIGZ1bmN0aW9uLCBzbyBpbiBvcmRlciB0byBsb2cgY29ycmVjdGx5XG4gICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIHByb3ZpZGUgYSBjdXN0b20gZXJyb3IgY2FsbGJhY2suXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBzdWJPYnNlcnZlciA9IG9ic2VydmVyLl9zdWJzY3JpcHRpb24uX29ic2VydmVyO1xuICAgICAgICAgICAgICAgIGlmIChzdWJPYnNlcnZlciAmJiAhc3ViT2JzZXJ2ZXIuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgc3ViT2JzZXJ2ZXIuZXJyb3IgPSBkZWZhdWx0U3Vic2NyaXB0aW9uT2JzZXJ2ZXJFcnJvckNhbGxiYWNrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChfYSkgeyB9XG4gICAgICAgICAgICB2YXIgZmlyc3QgPSAhX3RoaXMub2JzZXJ2ZXJzLnNpemU7XG4gICAgICAgICAgICBfdGhpcy5vYnNlcnZlcnMuYWRkKG9ic2VydmVyKTtcbiAgICAgICAgICAgIC8vIERlbGl2ZXIgbW9zdCByZWNlbnQgZXJyb3Igb3IgcmVzdWx0LlxuICAgICAgICAgICAgdmFyIGxhc3QgPSBfdGhpcy5sYXN0O1xuICAgICAgICAgICAgaWYgKGxhc3QgJiYgbGFzdC5lcnJvcikge1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yICYmIG9ic2VydmVyLmVycm9yKGxhc3QuZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobGFzdCAmJiBsYXN0LnJlc3VsdCkge1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQgJiYgb2JzZXJ2ZXIubmV4dChsYXN0LnJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJbml0aWF0ZSBvYnNlcnZhdGlvbiBvZiB0aGlzIHF1ZXJ5IGlmIGl0IGhhc24ndCBiZWVuIHJlcG9ydGVkIHRvXG4gICAgICAgICAgICAvLyB0aGUgUXVlcnlNYW5hZ2VyIHlldC5cbiAgICAgICAgICAgIGlmIChmaXJzdCkge1xuICAgICAgICAgICAgICAgIC8vIEJsaW5kbHkgY2F0Y2hpbmcgaGVyZSBwcmV2ZW50cyB1bmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb25zLFxuICAgICAgICAgICAgICAgIC8vIGFuZCBpcyBzYWZlIGJlY2F1c2UgdGhlIE9ic2VydmFibGVRdWVyeSBoYW5kbGVzIHRoaXMgZXJyb3Igd2l0aFxuICAgICAgICAgICAgICAgIC8vIHRoaXMub2JzZXJ2ZXIuZXJyb3IsIHNvIHdlJ3JlIG5vdCBqdXN0IHN3YWxsb3dpbmcgdGhlIGVycm9yIGJ5XG4gICAgICAgICAgICAgICAgLy8gaWdub3JpbmcgaXQgaGVyZS5cbiAgICAgICAgICAgICAgICBfdGhpcy5yZW9ic2VydmUoKS5jYXRjaChmdW5jdGlvbiAoKSB7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMub2JzZXJ2ZXJzLmRlbGV0ZShvYnNlcnZlcikgJiYgIV90aGlzLm9ic2VydmVycy5zaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnRlYXJEb3duUXVlcnkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5vYnNlcnZlcnMgPSBuZXcgU2V0KCk7XG4gICAgICAgIF90aGlzLnN1YnNjcmlwdGlvbnMgPSBuZXcgU2V0KCk7XG4gICAgICAgIC8vIHJlbGF0ZWQgY2xhc3Nlc1xuICAgICAgICBfdGhpcy5xdWVyeUluZm8gPSBxdWVyeUluZm87XG4gICAgICAgIF90aGlzLnF1ZXJ5TWFuYWdlciA9IHF1ZXJ5TWFuYWdlcjtcbiAgICAgICAgLy8gYWN0aXZlIHN0YXRlXG4gICAgICAgIF90aGlzLndhaXRGb3JPd25SZXN1bHQgPSBza2lwQ2FjaGVEYXRhRm9yKG9wdGlvbnMuZmV0Y2hQb2xpY3kpO1xuICAgICAgICBfdGhpcy5pc1Rvcm5Eb3duID0gZmFsc2U7XG4gICAgICAgIHZhciBfYiA9IHF1ZXJ5TWFuYWdlci5kZWZhdWx0T3B0aW9ucy53YXRjaFF1ZXJ5LCBfYyA9IF9iID09PSB2b2lkIDAgPyB7fSA6IF9iLCBfZCA9IF9jLmZldGNoUG9saWN5LCBkZWZhdWx0RmV0Y2hQb2xpY3kgPSBfZCA9PT0gdm9pZCAwID8gXCJjYWNoZS1maXJzdFwiIDogX2Q7XG4gICAgICAgIHZhciBfZSA9IG9wdGlvbnMuZmV0Y2hQb2xpY3ksIGZldGNoUG9saWN5ID0gX2UgPT09IHZvaWQgMCA/IGRlZmF1bHRGZXRjaFBvbGljeSA6IF9lLCBcbiAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGRvbid0IHN0b3JlIFwic3RhbmRieVwiIGFzIHRoZSBpbml0aWFsRmV0Y2hQb2xpY3kuXG4gICAgICAgIF9mID0gb3B0aW9ucy5pbml0aWFsRmV0Y2hQb2xpY3ksIFxuICAgICAgICAvLyBNYWtlIHN1cmUgd2UgZG9uJ3Qgc3RvcmUgXCJzdGFuZGJ5XCIgYXMgdGhlIGluaXRpYWxGZXRjaFBvbGljeS5cbiAgICAgICAgaW5pdGlhbEZldGNoUG9saWN5ID0gX2YgPT09IHZvaWQgMCA/IGZldGNoUG9saWN5ID09PSBcInN0YW5kYnlcIiA/IGRlZmF1bHRGZXRjaFBvbGljeSA6IChmZXRjaFBvbGljeSkgOiBfZjtcbiAgICAgICAgX3RoaXMub3B0aW9ucyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBvcHRpb25zKSwgeyBcbiAgICAgICAgICAgIC8vIFJlbWVtYmVyIHRoZSBpbml0aWFsIG9wdGlvbnMuZmV0Y2hQb2xpY3kgc28gd2UgY2FuIHJldmVydCBiYWNrIHRvIHRoaXNcbiAgICAgICAgICAgIC8vIHBvbGljeSB3aGVuIHZhcmlhYmxlcyBjaGFuZ2UuIFRoaXMgaW5mb3JtYXRpb24gY2FuIGFsc28gYmUgc3BlY2lmaWVkXG4gICAgICAgICAgICAvLyAob3Igb3ZlcnJpZGRlbikgYnkgcHJvdmlkaW5nIG9wdGlvbnMuaW5pdGlhbEZldGNoUG9saWN5IGV4cGxpY2l0bHkuXG4gICAgICAgICAgICBpbml0aWFsRmV0Y2hQb2xpY3k6IGluaXRpYWxGZXRjaFBvbGljeSwgXG4gICAgICAgICAgICAvLyBUaGlzIGVuc3VyZXMgdGhpcy5vcHRpb25zLmZldGNoUG9saWN5IGFsd2F5cyBoYXMgYSBzdHJpbmcgdmFsdWUsIGluXG4gICAgICAgICAgICAvLyBjYXNlIG9wdGlvbnMuZmV0Y2hQb2xpY3kgd2FzIG5vdCBwcm92aWRlZC5cbiAgICAgICAgICAgIGZldGNoUG9saWN5OiBmZXRjaFBvbGljeSB9KTtcbiAgICAgICAgX3RoaXMucXVlcnlJZCA9IHF1ZXJ5SW5mby5xdWVyeUlkIHx8IHF1ZXJ5TWFuYWdlci5nZW5lcmF0ZVF1ZXJ5SWQoKTtcbiAgICAgICAgdmFyIG9wRGVmID0gZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbihfdGhpcy5xdWVyeSk7XG4gICAgICAgIF90aGlzLnF1ZXJ5TmFtZSA9IG9wRGVmICYmIG9wRGVmLm5hbWUgJiYgb3BEZWYubmFtZS52YWx1ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoT2JzZXJ2YWJsZVF1ZXJ5LnByb3RvdHlwZSwgXCJxdWVyeVwiLCB7XG4gICAgICAgIC8vIFRoZSBgcXVlcnlgIGNvbXB1dGVkIHByb3BlcnR5IHdpbGwgYWx3YXlzIHJlZmxlY3QgdGhlIGRvY3VtZW50IHRyYW5zZm9ybWVkXG4gICAgICAgIC8vIGJ5IHRoZSBsYXN0IHJ1biBxdWVyeS4gYHRoaXMub3B0aW9ucy5xdWVyeWAgd2lsbCBhbHdheXMgcmVmbGVjdCB0aGUgcmF3XG4gICAgICAgIC8vIHVudHJhbnNmb3JtZWQgcXVlcnkgdG8gZW5zdXJlIGRvY3VtZW50IHRyYW5zZm9ybXMgd2l0aCBydW50aW1lIGNvbmRpdGlvbmFsc1xuICAgICAgICAvLyBhcmUgcnVuIG9uIHRoZSBvcmlnaW5hbCBkb2N1bWVudC5cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sYXN0UXVlcnkgfHwgdGhpcy5vcHRpb25zLnF1ZXJ5O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE9ic2VydmFibGVRdWVyeS5wcm90b3R5cGUsIFwidmFyaWFibGVzXCIsIHtcbiAgICAgICAgLy8gQ29tcHV0ZWQgc2hvcnRoYW5kIGZvciB0aGlzLm9wdGlvbnMudmFyaWFibGVzLCBwcmVzZXJ2ZWQgZm9yXG4gICAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICAgICAgICAvKipcbiAgICAgICAgICogQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHZhcmlhYmxlcyB0aGF0IHdlcmUgcHJvdmlkZWQgZm9yIHRoZSBxdWVyeS5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy52YXJpYWJsZXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYnNlcnZhYmxlUXVlcnkucHJvdG90eXBlLnJlc3VsdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IHRoaXMgY29kZSBkb2VzbuKAmXQgYWN0dWFsbHkgbWFrZSBzZW5zZSBpbnNvZmFyIGFzIHRoZSBvYnNlcnZlclxuICAgICAgICAgICAgLy8gd2lsbCBuZXZlciBleGlzdCBpbiB0aGlzLm9ic2VydmVycyBkdWUgaG93IHplbi1vYnNlcnZhYmxlIHdyYXBzIG9ic2VydmFibGVzLlxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3plbnBhcnNpbmcvemVuLW9ic2VydmFibGUvYmxvYi9tYXN0ZXIvc3JjL09ic2VydmFibGUuanMjTDE2OVxuICAgICAgICAgICAgdmFyIG9ic2VydmVyID0ge1xuICAgICAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAvLyBTdG9wIHRoZSBxdWVyeSB3aXRoaW4gdGhlIFF1ZXJ5TWFuYWdlciBpZiB3ZSBjYW4gYmVmb3JlXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgZnVuY3Rpb24gcmV0dXJucy5cbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgZG8gdGhpcyBpbiBvcmRlciB0byBwcmV2ZW50IG9ic2VydmVycyBwaWxpbmcgdXAgd2l0aGluXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBRdWVyeU1hbmFnZXIuIE5vdGljZSB0aGF0IHdlIG9ubHkgZnVsbHkgdW5zdWJzY3JpYmVcbiAgICAgICAgICAgICAgICAgICAgLy8gZnJvbSB0aGUgc3Vic2NyaXB0aW9uIGluIGEgc2V0VGltZW91dCguLi4sIDApICBjYWxsLiBUaGlzIGNhbGwgY2FuXG4gICAgICAgICAgICAgICAgICAgIC8vIGFjdHVhbGx5IGJlIGhhbmRsZWQgYnkgdGhlIGJyb3dzZXIgYXQgYSBtdWNoIGxhdGVyIHRpbWUuIElmIHF1ZXJpZXNcbiAgICAgICAgICAgICAgICAgICAgLy8gYXJlIGZpcmVkIGluIHRoZSBtZWFudGltZSwgb2JzZXJ2ZXJzIHRoYXQgc2hvdWxkIGhhdmUgYmVlbiByZW1vdmVkXG4gICAgICAgICAgICAgICAgICAgIC8vIGZyb20gdGhlIFF1ZXJ5TWFuYWdlciB3aWxsIGNvbnRpbnVlIHRvIGZpcmUsIGNhdXNpbmcgYW4gdW5uZWNlc3NhcnlcbiAgICAgICAgICAgICAgICAgICAgLy8gcGVyZm9ybWFuY2UgaGl0LlxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vYnNlcnZlcnMuZGVsZXRlKG9ic2VydmVyKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5vYnNlcnZlcnMuc2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucXVlcnlNYW5hZ2VyLnJlbW92ZVF1ZXJ5KF90aGlzLnF1ZXJ5SWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IHJlamVjdCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gX3RoaXMuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgT2JzZXJ2YWJsZVF1ZXJ5LnByb3RvdHlwZS5yZXNldERpZmYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucXVlcnlJbmZvLnJlc2V0RGlmZigpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZVF1ZXJ5LnByb3RvdHlwZS5nZXRDdXJyZW50UmVzdWx0ID0gZnVuY3Rpb24gKHNhdmVBc0xhc3RSZXN1bHQpIHtcbiAgICAgICAgaWYgKHNhdmVBc0xhc3RSZXN1bHQgPT09IHZvaWQgMCkgeyBzYXZlQXNMYXN0UmVzdWx0ID0gdHJ1ZTsgfVxuICAgICAgICAvLyBVc2UgdGhlIGxhc3QgcmVzdWx0IGFzIGxvbmcgYXMgdGhlIHZhcmlhYmxlcyBtYXRjaCB0aGlzLnZhcmlhYmxlcy5cbiAgICAgICAgdmFyIGxhc3RSZXN1bHQgPSB0aGlzLmdldExhc3RSZXN1bHQodHJ1ZSk7XG4gICAgICAgIHZhciBuZXR3b3JrU3RhdHVzID0gdGhpcy5xdWVyeUluZm8ubmV0d29ya1N0YXR1cyB8fFxuICAgICAgICAgICAgKGxhc3RSZXN1bHQgJiYgbGFzdFJlc3VsdC5uZXR3b3JrU3RhdHVzKSB8fFxuICAgICAgICAgICAgTmV0d29ya1N0YXR1cy5yZWFkeTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBsYXN0UmVzdWx0KSwgeyBsb2FkaW5nOiBpc05ldHdvcmtSZXF1ZXN0SW5GbGlnaHQobmV0d29ya1N0YXR1cyksIG5ldHdvcmtTdGF0dXM6IG5ldHdvcmtTdGF0dXMgfSk7XG4gICAgICAgIHZhciBfYSA9IHRoaXMub3B0aW9ucy5mZXRjaFBvbGljeSwgZmV0Y2hQb2xpY3kgPSBfYSA9PT0gdm9pZCAwID8gXCJjYWNoZS1maXJzdFwiIDogX2E7XG4gICAgICAgIGlmIChcbiAgICAgICAgLy8gVGhlc2UgZmV0Y2ggcG9saWNpZXMgc2hvdWxkIG5ldmVyIGRlbGl2ZXIgZGF0YSBmcm9tIHRoZSBjYWNoZSwgdW5sZXNzXG4gICAgICAgIC8vIHJlZGVsaXZlcmluZyBhIHByZXZpb3VzbHkgZGVsaXZlcmVkIHJlc3VsdC5cbiAgICAgICAgc2tpcENhY2hlRGF0YUZvcihmZXRjaFBvbGljeSkgfHxcbiAgICAgICAgICAgIC8vIElmIHRoaXMub3B0aW9ucy5xdWVyeSBoYXMgQGNsaWVudChhbHdheXM6IHRydWUpIGZpZWxkcywgd2UgY2Fubm90XG4gICAgICAgICAgICAvLyB0cnVzdCBkaWZmLnJlc3VsdCwgc2luY2UgaXQgd2FzIHJlYWQgZnJvbSB0aGUgY2FjaGUgd2l0aG91dCBydW5uaW5nXG4gICAgICAgICAgICAvLyBsb2NhbCByZXNvbHZlcnMgKGFuZCBpdCdzIHRvbyBsYXRlIHRvIHJ1biByZXNvbHZlcnMgbm93LCBzaW5jZSB3ZSBtdXN0XG4gICAgICAgICAgICAvLyByZXR1cm4gYSByZXN1bHQgc3luY2hyb25vdXNseSkuXG4gICAgICAgICAgICB0aGlzLnF1ZXJ5TWFuYWdlci5nZXREb2N1bWVudEluZm8odGhpcy5xdWVyeSkuaGFzRm9yY2VkUmVzb2x2ZXJzKSB7XG4gICAgICAgICAgICAvLyBGYWxsIHRocm91Z2guXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy53YWl0Rm9yT3duUmVzdWx0KSB7XG4gICAgICAgICAgICAvLyBUaGlzIHdvdWxkIHVzdWFsbHkgYmUgYSBwYXJ0IG9mIGBRdWVyeUluZm8uZ2V0RGlmZigpYC5cbiAgICAgICAgICAgIC8vIHdoaWNoIHdlIHNraXAgaW4gdGhlIHdhaXRGb3JPd25SZXN1bHQgY2FzZSBzaW5jZSB3ZSBhcmUgbm90XG4gICAgICAgICAgICAvLyBpbnRlcmVzdGVkIGluIHRoZSBkaWZmLlxuICAgICAgICAgICAgdGhpcy5xdWVyeUluZm9bXCJ1cGRhdGVXYXRjaFwiXSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGRpZmYgPSB0aGlzLnF1ZXJ5SW5mby5nZXREaWZmKCk7XG4gICAgICAgICAgICBpZiAoZGlmZi5jb21wbGV0ZSB8fCB0aGlzLm9wdGlvbnMucmV0dXJuUGFydGlhbERhdGEpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQuZGF0YSA9IGRpZmYucmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVxdWFsKHJlc3VsdC5kYXRhLCB7fSkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQuZGF0YSA9IHZvaWQgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkaWZmLmNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgLy8gU2ltaWxhciB0byBzZXR0aW5nIHJlc3VsdC5wYXJ0aWFsIHRvIGZhbHNlLCBidXQgdGFraW5nIGFkdmFudGFnZSBvZiB0aGVcbiAgICAgICAgICAgICAgICAvLyBmYWxzaW5lc3Mgb2YgbWlzc2luZyBmaWVsZHMuXG4gICAgICAgICAgICAgICAgZGVsZXRlIHJlc3VsdC5wYXJ0aWFsO1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBkaWZmIGlzIGNvbXBsZXRlLCBhbmQgd2UncmUgdXNpbmcgYSBGZXRjaFBvbGljeSB0aGF0XG4gICAgICAgICAgICAgICAgLy8gdGVybWluYXRlcyBhZnRlciBhIGNvbXBsZXRlIGNhY2hlIHJlYWQsIHdlIGNhbiBhc3N1bWUgdGhlIG5leHQgcmVzdWx0XG4gICAgICAgICAgICAgICAgLy8gd2UgcmVjZWl2ZSB3aWxsIGhhdmUgTmV0d29ya1N0YXR1cy5yZWFkeSBhbmQgIWxvYWRpbmcuXG4gICAgICAgICAgICAgICAgaWYgKGRpZmYuY29tcGxldGUgJiZcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lm5ldHdvcmtTdGF0dXMgPT09IE5ldHdvcmtTdGF0dXMubG9hZGluZyAmJlxuICAgICAgICAgICAgICAgICAgICAoZmV0Y2hQb2xpY3kgPT09IFwiY2FjaGUtZmlyc3RcIiB8fCBmZXRjaFBvbGljeSA9PT0gXCJjYWNoZS1vbmx5XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5uZXR3b3JrU3RhdHVzID0gTmV0d29ya1N0YXR1cy5yZWFkeTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucGFydGlhbCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSAmJlxuICAgICAgICAgICAgICAgICFkaWZmLmNvbXBsZXRlICYmXG4gICAgICAgICAgICAgICAgIXRoaXMub3B0aW9ucy5wYXJ0aWFsUmVmZXRjaCAmJlxuICAgICAgICAgICAgICAgICFyZXN1bHQubG9hZGluZyAmJlxuICAgICAgICAgICAgICAgICFyZXN1bHQuZGF0YSAmJlxuICAgICAgICAgICAgICAgICFyZXN1bHQuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBsb2dNaXNzaW5nRmllbGRFcnJvcnMoZGlmZi5taXNzaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc2F2ZUFzTGFzdFJlc3VsdCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVMYXN0UmVzdWx0KHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIC8vIENvbXBhcmVzIG5ld1Jlc3VsdCB0byB0aGUgc25hcHNob3Qgd2UgdG9vayBvZiB0aGlzLmxhc3RSZXN1bHQgd2hlbiBpdCB3YXNcbiAgICAvLyBmaXJzdCByZWNlaXZlZC5cbiAgICBPYnNlcnZhYmxlUXVlcnkucHJvdG90eXBlLmlzRGlmZmVyZW50RnJvbUxhc3RSZXN1bHQgPSBmdW5jdGlvbiAobmV3UmVzdWx0LCB2YXJpYWJsZXMpIHtcbiAgICAgICAgaWYgKCF0aGlzLmxhc3QpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHRJc0RpZmZlcmVudCA9IHRoaXMucXVlcnlNYW5hZ2VyLmdldERvY3VtZW50SW5mbyh0aGlzLnF1ZXJ5KS5oYXNOb25yZWFjdGl2ZURpcmVjdGl2ZSA/XG4gICAgICAgICAgICAhZXF1YWxCeVF1ZXJ5KHRoaXMucXVlcnksIHRoaXMubGFzdC5yZXN1bHQsIG5ld1Jlc3VsdCwgdGhpcy52YXJpYWJsZXMpXG4gICAgICAgICAgICA6ICFlcXVhbCh0aGlzLmxhc3QucmVzdWx0LCBuZXdSZXN1bHQpO1xuICAgICAgICByZXR1cm4gKHJlc3VsdElzRGlmZmVyZW50IHx8ICh2YXJpYWJsZXMgJiYgIWVxdWFsKHRoaXMubGFzdC52YXJpYWJsZXMsIHZhcmlhYmxlcykpKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVRdWVyeS5wcm90b3R5cGUuZ2V0TGFzdCA9IGZ1bmN0aW9uIChrZXksIHZhcmlhYmxlc011c3RNYXRjaCkge1xuICAgICAgICB2YXIgbGFzdCA9IHRoaXMubGFzdDtcbiAgICAgICAgaWYgKGxhc3QgJiZcbiAgICAgICAgICAgIGxhc3Rba2V5XSAmJlxuICAgICAgICAgICAgKCF2YXJpYWJsZXNNdXN0TWF0Y2ggfHwgZXF1YWwobGFzdC52YXJpYWJsZXMsIHRoaXMudmFyaWFibGVzKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBsYXN0W2tleV07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9ic2VydmFibGVRdWVyeS5wcm90b3R5cGUuZ2V0TGFzdFJlc3VsdCA9IGZ1bmN0aW9uICh2YXJpYWJsZXNNdXN0TWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TGFzdChcInJlc3VsdFwiLCB2YXJpYWJsZXNNdXN0TWF0Y2gpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZVF1ZXJ5LnByb3RvdHlwZS5nZXRMYXN0RXJyb3IgPSBmdW5jdGlvbiAodmFyaWFibGVzTXVzdE1hdGNoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldExhc3QoXCJlcnJvclwiLCB2YXJpYWJsZXNNdXN0TWF0Y2gpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZVF1ZXJ5LnByb3RvdHlwZS5yZXNldExhc3RSZXN1bHRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWxldGUgdGhpcy5sYXN0O1xuICAgICAgICB0aGlzLmlzVG9ybkRvd24gPSBmYWxzZTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVRdWVyeS5wcm90b3R5cGUucmVzZXRRdWVyeVN0b3JlRXJyb3JzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnF1ZXJ5TWFuYWdlci5yZXNldEVycm9ycyh0aGlzLnF1ZXJ5SWQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSB2YXJpYWJsZXMgb2YgdGhpcyBvYnNlcnZhYmxlIHF1ZXJ5LCBhbmQgZmV0Y2ggdGhlIG5ldyByZXN1bHRzLlxuICAgICAqIFRoaXMgbWV0aG9kIHNob3VsZCBiZSBwcmVmZXJyZWQgb3ZlciBgc2V0VmFyaWFibGVzYCBpbiBtb3N0IHVzZSBjYXNlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YXJpYWJsZXMgLSBUaGUgbmV3IHNldCBvZiB2YXJpYWJsZXMuIElmIHRoZXJlIGFyZSBtaXNzaW5nIHZhcmlhYmxlcyxcbiAgICAgKiB0aGUgcHJldmlvdXMgdmFsdWVzIG9mIHRob3NlIHZhcmlhYmxlcyB3aWxsIGJlIHVzZWQuXG4gICAgICovXG4gICAgT2JzZXJ2YWJsZVF1ZXJ5LnByb3RvdHlwZS5yZWZldGNoID0gZnVuY3Rpb24gKHZhcmlhYmxlcykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciByZW9ic2VydmVPcHRpb25zID0ge1xuICAgICAgICAgICAgLy8gQWx3YXlzIGRpc2FibGUgcG9sbGluZyBmb3IgcmVmZXRjaGVzLlxuICAgICAgICAgICAgcG9sbEludGVydmFsOiAwLFxuICAgICAgICB9O1xuICAgICAgICAvLyBVbmxlc3MgdGhlIHByb3ZpZGVkIGZldGNoUG9saWN5IGFsd2F5cyBjb25zdWx0cyB0aGUgbmV0d29ya1xuICAgICAgICAvLyAobm8tY2FjaGUsIG5ldHdvcmstb25seSwgb3IgY2FjaGUtYW5kLW5ldHdvcmspLCBvdmVycmlkZSBpdCB3aXRoXG4gICAgICAgIC8vIG5ldHdvcmstb25seSB0byBmb3JjZSB0aGUgcmVmZXRjaCBmb3IgdGhpcyBmZXRjaFF1ZXJ5IGNhbGwuXG4gICAgICAgIHZhciBmZXRjaFBvbGljeSA9IHRoaXMub3B0aW9ucy5mZXRjaFBvbGljeTtcbiAgICAgICAgaWYgKGZldGNoUG9saWN5ID09PSBcImNhY2hlLWFuZC1uZXR3b3JrXCIpIHtcbiAgICAgICAgICAgIHJlb2JzZXJ2ZU9wdGlvbnMuZmV0Y2hQb2xpY3kgPSBmZXRjaFBvbGljeTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChmZXRjaFBvbGljeSA9PT0gXCJuby1jYWNoZVwiKSB7XG4gICAgICAgICAgICByZW9ic2VydmVPcHRpb25zLmZldGNoUG9saWN5ID0gXCJuby1jYWNoZVwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVvYnNlcnZlT3B0aW9ucy5mZXRjaFBvbGljeSA9IFwibmV0d29yay1vbmx5XCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UgJiYgdmFyaWFibGVzICYmIGhhc093blByb3BlcnR5LmNhbGwodmFyaWFibGVzLCBcInZhcmlhYmxlc1wiKSkge1xuICAgICAgICAgICAgdmFyIHF1ZXJ5RGVmID0gZ2V0UXVlcnlEZWZpbml0aW9uKHRoaXMucXVlcnkpO1xuICAgICAgICAgICAgdmFyIHZhcnMgPSBxdWVyeURlZi52YXJpYWJsZURlZmluaXRpb25zO1xuICAgICAgICAgICAgaWYgKCF2YXJzIHx8ICF2YXJzLnNvbWUoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHYudmFyaWFibGUubmFtZS52YWx1ZSA9PT0gXCJ2YXJpYWJsZXNcIjsgfSkpIHtcbiAgICAgICAgICAgICAgICBnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlICYmIGludmFyaWFudC53YXJuKFxuICAgICAgICAgICAgICAgICAgICAyMCxcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVzLFxuICAgICAgICAgICAgICAgICAgICAoKF9hID0gcXVlcnlEZWYubmFtZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnZhbHVlKSB8fCBxdWVyeURlZlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhcmlhYmxlcyAmJiAhZXF1YWwodGhpcy5vcHRpb25zLnZhcmlhYmxlcywgdmFyaWFibGVzKSkge1xuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBleGlzdGluZyBvcHRpb25zIHdpdGggbmV3IHZhcmlhYmxlc1xuICAgICAgICAgICAgcmVvYnNlcnZlT3B0aW9ucy52YXJpYWJsZXMgPSB0aGlzLm9wdGlvbnMudmFyaWFibGVzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMub3B0aW9ucy52YXJpYWJsZXMpLCB2YXJpYWJsZXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucXVlcnlJbmZvLnJlc2V0TGFzdFdyaXRlKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnJlb2JzZXJ2ZShyZW9ic2VydmVPcHRpb25zLCBOZXR3b3JrU3RhdHVzLnJlZmV0Y2gpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQSBmdW5jdGlvbiB0aGF0IGhlbHBzIHlvdSBmZXRjaCB0aGUgbmV4dCBzZXQgb2YgcmVzdWx0cyBmb3IgYSBbcGFnaW5hdGVkIGxpc3QgZmllbGRdKGh0dHBzOi8vd3d3LmFwb2xsb2dyYXBocWwuY29tL2RvY3MvcmVhY3QvcGFnaW5hdGlvbi9jb3JlLWFwaS8pLlxuICAgICAqL1xuICAgIE9ic2VydmFibGVRdWVyeS5wcm90b3R5cGUuZmV0Y2hNb3JlID0gZnVuY3Rpb24gKGZldGNoTW9yZU9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGNvbWJpbmVkT3B0aW9ucyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCAoZmV0Y2hNb3JlT3B0aW9ucy5xdWVyeSA/IGZldGNoTW9yZU9wdGlvbnMgOiAoX19hc3NpZ24oX19hc3NpZ24oX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMub3B0aW9ucyksIHsgcXVlcnk6IHRoaXMub3B0aW9ucy5xdWVyeSB9KSwgZmV0Y2hNb3JlT3B0aW9ucyksIHsgdmFyaWFibGVzOiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5vcHRpb25zLnZhcmlhYmxlcyksIGZldGNoTW9yZU9wdGlvbnMudmFyaWFibGVzKSB9KSkpKSwgeyBcbiAgICAgICAgICAgIC8vIFRoZSBmZXRjaE1vcmUgcmVxdWVzdCBnb2VzIGltbWVkaWF0ZWx5IHRvIHRoZSBuZXR3b3JrIGFuZCBkb2VzXG4gICAgICAgICAgICAvLyBub3QgYXV0b21hdGljYWxseSB3cml0ZSBpdHMgcmVzdWx0IHRvIHRoZSBjYWNoZSAoaGVuY2Ugbm8tY2FjaGVcbiAgICAgICAgICAgIC8vIGluc3RlYWQgb2YgbmV0d29yay1vbmx5KSwgYmVjYXVzZSB3ZSBhbGxvdyB0aGUgY2FsbGVyIG9mXG4gICAgICAgICAgICAvLyBmZXRjaE1vcmUgdG8gcHJvdmlkZSBhbiB1cGRhdGVRdWVyeSBjYWxsYmFjayB0aGF0IGRldGVybWluZXMgaG93XG4gICAgICAgICAgICAvLyB0aGUgZGF0YSBnZXRzIHdyaXR0ZW4gdG8gdGhlIGNhY2hlLlxuICAgICAgICAgICAgZmV0Y2hQb2xpY3k6IFwibm8tY2FjaGVcIiB9KTtcbiAgICAgICAgY29tYmluZWRPcHRpb25zLnF1ZXJ5ID0gdGhpcy50cmFuc2Zvcm1Eb2N1bWVudChjb21iaW5lZE9wdGlvbnMucXVlcnkpO1xuICAgICAgICB2YXIgcWlkID0gdGhpcy5xdWVyeU1hbmFnZXIuZ2VuZXJhdGVRdWVyeUlkKCk7XG4gICAgICAgIC8vIElmIGEgdGVtcG9yYXJ5IHF1ZXJ5IGlzIHBhc3NlZCB0byBgZmV0Y2hNb3JlYCwgd2UgZG9uJ3Qgd2FudCB0byBzdG9yZVxuICAgICAgICAvLyBpdCBhcyB0aGUgbGFzdCBxdWVyeSByZXN1bHQgc2luY2UgaXQgbWF5IGJlIGFuIG9wdGltaXplZCBxdWVyeSBmb3JcbiAgICAgICAgLy8gcGFnaW5hdGlvbi4gV2Ugd2lsbCBob3dldmVyIHJ1biB0aGUgdHJhbnNmb3JtcyBvbiB0aGUgb3JpZ2luYWwgZG9jdW1lbnRcbiAgICAgICAgLy8gYXMgd2VsbCBhcyB0aGUgZG9jdW1lbnQgcGFzc2VkIGluIGBmZXRjaE1vcmVPcHRpb25zYCB0byBlbnN1cmUgdGhlIGNhY2hlXG4gICAgICAgIC8vIHVzZXMgdGhlIG1vc3QgdXAtdG8tZGF0ZSBkb2N1bWVudCB3aGljaCBtYXkgcmVseSBvbiBydW50aW1lIGNvbmRpdGlvbmFscy5cbiAgICAgICAgdGhpcy5sYXN0UXVlcnkgPVxuICAgICAgICAgICAgZmV0Y2hNb3JlT3B0aW9ucy5xdWVyeSA/XG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm1Eb2N1bWVudCh0aGlzLm9wdGlvbnMucXVlcnkpXG4gICAgICAgICAgICAgICAgOiBjb21iaW5lZE9wdGlvbnMucXVlcnk7XG4gICAgICAgIC8vIFNpbXVsYXRlIGEgbG9hZGluZyByZXN1bHQgZm9yIHRoZSBvcmlnaW5hbCBxdWVyeSB3aXRoXG4gICAgICAgIC8vIHJlc3VsdC5uZXR3b3JrU3RhdHVzID09PSBOZXR3b3JrU3RhdHVzLmZldGNoTW9yZS5cbiAgICAgICAgdmFyIHF1ZXJ5SW5mbyA9IHRoaXMucXVlcnlJbmZvO1xuICAgICAgICB2YXIgb3JpZ2luYWxOZXR3b3JrU3RhdHVzID0gcXVlcnlJbmZvLm5ldHdvcmtTdGF0dXM7XG4gICAgICAgIHF1ZXJ5SW5mby5uZXR3b3JrU3RhdHVzID0gTmV0d29ya1N0YXR1cy5mZXRjaE1vcmU7XG4gICAgICAgIGlmIChjb21iaW5lZE9wdGlvbnMubm90aWZ5T25OZXR3b3JrU3RhdHVzQ2hhbmdlKSB7XG4gICAgICAgICAgICB0aGlzLm9ic2VydmUoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdXBkYXRlZFF1ZXJ5U2V0ID0gbmV3IFNldCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5xdWVyeU1hbmFnZXJcbiAgICAgICAgICAgIC5mZXRjaFF1ZXJ5KHFpZCwgY29tYmluZWRPcHRpb25zLCBOZXR3b3JrU3RhdHVzLmZldGNoTW9yZSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChmZXRjaE1vcmVSZXN1bHQpIHtcbiAgICAgICAgICAgIF90aGlzLnF1ZXJ5TWFuYWdlci5yZW1vdmVRdWVyeShxaWQpO1xuICAgICAgICAgICAgaWYgKHF1ZXJ5SW5mby5uZXR3b3JrU3RhdHVzID09PSBOZXR3b3JrU3RhdHVzLmZldGNoTW9yZSkge1xuICAgICAgICAgICAgICAgIHF1ZXJ5SW5mby5uZXR3b3JrU3RhdHVzID0gb3JpZ2luYWxOZXR3b3JrU3RhdHVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUGVyZm9ybWluZyB0aGlzIGNhY2hlIHVwZGF0ZSBpbnNpZGUgYSBjYWNoZS5iYXRjaCB0cmFuc2FjdGlvbiBlbnN1cmVzXG4gICAgICAgICAgICAvLyBhbnkgYWZmZWN0ZWQgY2FjaGUud2F0Y2ggd2F0Y2hlcnMgYXJlIG5vdGlmaWVkIGF0IG1vc3Qgb25jZSBhYm91dCBhbnlcbiAgICAgICAgICAgIC8vIHVwZGF0ZXMuIE1vc3Qgd2F0Y2hlcnMgd2lsbCBiZSB1c2luZyB0aGUgUXVlcnlJbmZvIGNsYXNzLCB3aGljaFxuICAgICAgICAgICAgLy8gcmVzcG9uZHMgdG8gbm90aWZpY2F0aW9ucyBieSBjYWxsaW5nIHJlb2JzZXJ2ZUNhY2hlRmlyc3QgdG8gZGVsaXZlclxuICAgICAgICAgICAgLy8gZmV0Y2hNb3JlIGNhY2hlIHJlc3VsdHMgYmFjayB0byB0aGlzIE9ic2VydmFibGVRdWVyeS5cbiAgICAgICAgICAgIF90aGlzLnF1ZXJ5TWFuYWdlci5jYWNoZS5iYXRjaCh7XG4gICAgICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAoY2FjaGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZVF1ZXJ5ID0gZmV0Y2hNb3JlT3B0aW9ucy51cGRhdGVRdWVyeTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVwZGF0ZVF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS51cGRhdGVRdWVyeSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnk6IF90aGlzLnF1ZXJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlczogX3RoaXMudmFyaWFibGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblBhcnRpYWxEYXRhOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGltaXN0aWM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHByZXZpb3VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZVF1ZXJ5KHByZXZpb3VzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZldGNoTW9yZVJlc3VsdDogZmV0Y2hNb3JlUmVzdWx0LmRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlczogY29tYmluZWRPcHRpb25zLnZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UncmUgdXNpbmcgYSBmaWVsZCBwb2xpY3kgaW5zdGVhZCBvZiB1cGRhdGVRdWVyeSwgdGhlIG9ubHlcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaW5nIHdlIG5lZWQgdG8gZG8gaXMgd3JpdGUgdGhlIG5ldyBkYXRhIHRvIHRoZSBjYWNoZSB1c2luZ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29tYmluZWRPcHRpb25zLnZhcmlhYmxlcyAoaW5zdGVhZCBvZiB0aGlzLnZhcmlhYmxlcywgd2hpY2ggaXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdoYXQgdGhpcy51cGRhdGVRdWVyeSB1c2VzLCBiZWNhdXNlIGl0IHdvcmtzIGJ5IGFidXNpbmcgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvcmlnaW5hbCBmaWVsZCB2YWx1ZSwga2V5ZWQgYnkgdGhlIG9yaWdpbmFsIHZhcmlhYmxlcykuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS53cml0ZVF1ZXJ5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeTogY29tYmluZWRPcHRpb25zLnF1ZXJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlczogY29tYmluZWRPcHRpb25zLnZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBmZXRjaE1vcmVSZXN1bHQuZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbldhdGNoVXBkYXRlZDogZnVuY3Rpb24gKHdhdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlY29yZCB0aGUgRG9jdW1lbnROb2RlIGFzc29jaWF0ZWQgd2l0aCBhbnkgd2F0Y2hlZCBxdWVyeSB3aG9zZVxuICAgICAgICAgICAgICAgICAgICAvLyBkYXRhIHdlcmUgdXBkYXRlZCBieSB0aGUgY2FjaGUgd3JpdGVzIGFib3ZlLlxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVkUXVlcnlTZXQuYWRkKHdhdGNoLnF1ZXJ5KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZmV0Y2hNb3JlUmVzdWx0O1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmZpbmFsbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gSW4gY2FzZSB0aGUgY2FjaGUgd3JpdGVzIGFib3ZlIGRpZCBub3QgZ2VuZXJhdGUgYSBicm9hZGNhc3RcbiAgICAgICAgICAgIC8vIG5vdGlmaWNhdGlvbiAod2hpY2ggd291bGQgaGF2ZSBiZWVuIGludGVyY2VwdGVkIGJ5IG9uV2F0Y2hVcGRhdGVkKSxcbiAgICAgICAgICAgIC8vIGxpa2VseSBiZWNhdXNlIHRoZSB3cml0dGVuIGRhdGEgd2VyZSB0aGUgc2FtZSBhcyB3aGF0IHdhcyBhbHJlYWR5IGluXG4gICAgICAgICAgICAvLyB0aGUgY2FjaGUsIHdlIHN0aWxsIHdhbnQgZmV0Y2hNb3JlIHRvIGRlbGl2ZXIgaXRzIGZpbmFsIGxvYWRpbmc6ZmFsc2VcbiAgICAgICAgICAgIC8vIHJlc3VsdCB3aXRoIHRoZSB1bmNoYW5nZWQgZGF0YS5cbiAgICAgICAgICAgIGlmICghdXBkYXRlZFF1ZXJ5U2V0LmhhcyhfdGhpcy5xdWVyeSkpIHtcbiAgICAgICAgICAgICAgICByZW9ic2VydmVDYWNoZUZpcnN0KF90aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvLyBYWFggdGhlIHN1YnNjcmlwdGlvbiB2YXJpYWJsZXMgYXJlIHNlcGFyYXRlIGZyb20gdGhlIHF1ZXJ5IHZhcmlhYmxlcy5cbiAgICAvLyBpZiB5b3Ugd2FudCB0byB1cGRhdGUgc3Vic2NyaXB0aW9uIHZhcmlhYmxlcywgcmlnaHQgbm93IHlvdSBoYXZlIHRvIGRvIHRoYXQgc2VwYXJhdGVseSxcbiAgICAvLyBhbmQgeW91IGNhbiBvbmx5IGRvIGl0IGJ5IHN0b3BwaW5nIHRoZSBzdWJzY3JpcHRpb24gYW5kIHRoZW4gc3Vic2NyaWJpbmcgYWdhaW4gd2l0aCBuZXcgdmFyaWFibGVzLlxuICAgIC8qKlxuICAgICAqIEEgZnVuY3Rpb24gdGhhdCBlbmFibGVzIHlvdSB0byBleGVjdXRlIGEgW3N1YnNjcmlwdGlvbl0oaHR0cHM6Ly93d3cuYXBvbGxvZ3JhcGhxbC5jb20vZG9jcy9yZWFjdC9kYXRhL3N1YnNjcmlwdGlvbnMvKSwgdXN1YWxseSB0byBzdWJzY3JpYmUgdG8gc3BlY2lmaWMgZmllbGRzIHRoYXQgd2VyZSBpbmNsdWRlZCBpbiB0aGUgcXVlcnkuXG4gICAgICpcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgX2Fub3RoZXJfIGZ1bmN0aW9uIHRoYXQgeW91IGNhbiBjYWxsIHRvIHRlcm1pbmF0ZSB0aGUgc3Vic2NyaXB0aW9uLlxuICAgICAqL1xuICAgIE9ic2VydmFibGVRdWVyeS5wcm90b3R5cGUuc3Vic2NyaWJlVG9Nb3JlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMucXVlcnlNYW5hZ2VyXG4gICAgICAgICAgICAuc3RhcnRHcmFwaFFMU3Vic2NyaXB0aW9uKHtcbiAgICAgICAgICAgIHF1ZXJ5OiBvcHRpb25zLmRvY3VtZW50LFxuICAgICAgICAgICAgdmFyaWFibGVzOiBvcHRpb25zLnZhcmlhYmxlcyxcbiAgICAgICAgICAgIGNvbnRleHQ6IG9wdGlvbnMuY29udGV4dCxcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHN1YnNjcmlwdGlvbkRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgdXBkYXRlUXVlcnkgPSBvcHRpb25zLnVwZGF0ZVF1ZXJ5O1xuICAgICAgICAgICAgICAgIGlmICh1cGRhdGVRdWVyeSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy51cGRhdGVRdWVyeShmdW5jdGlvbiAocHJldmlvdXMsIF9hKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFyaWFibGVzID0gX2EudmFyaWFibGVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZVF1ZXJ5KHByZXZpb3VzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uRGF0YTogc3Vic2NyaXB0aW9uRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5vbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMub25FcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UgJiYgaW52YXJpYW50LmVycm9yKDIxLCBlcnIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5hZGQoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5zdWJzY3JpcHRpb25zLmRlbGV0ZShzdWJzY3JpcHRpb24pKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlUXVlcnkucHJvdG90eXBlLnNldE9wdGlvbnMgPSBmdW5jdGlvbiAobmV3T3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW9ic2VydmUobmV3T3B0aW9ucyk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlUXVlcnkucHJvdG90eXBlLnNpbGVudFNldE9wdGlvbnMgPSBmdW5jdGlvbiAobmV3T3B0aW9ucykge1xuICAgICAgICB2YXIgbWVyZ2VkT3B0aW9ucyA9IGNvbXBhY3QodGhpcy5vcHRpb25zLCBuZXdPcHRpb25zIHx8IHt9KTtcbiAgICAgICAgYXNzaWduKHRoaXMub3B0aW9ucywgbWVyZ2VkT3B0aW9ucyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIHZhcmlhYmxlcyBvZiB0aGlzIG9ic2VydmFibGUgcXVlcnksIGFuZCBmZXRjaCB0aGUgbmV3IHJlc3VsdHNcbiAgICAgKiBpZiB0aGV5J3ZlIGNoYW5nZWQuIE1vc3QgdXNlcnMgc2hvdWxkIHByZWZlciBgcmVmZXRjaGAgaW5zdGVhZCBvZlxuICAgICAqIGBzZXRWYXJpYWJsZXNgIGluIG9yZGVyIHRvIHRvIGJlIHByb3Blcmx5IG5vdGlmaWVkIG9mIHJlc3VsdHMgZXZlbiB3aGVuXG4gICAgICogdGhleSBjb21lIGZyb20gdGhlIGNhY2hlLlxuICAgICAqXG4gICAgICogTm90ZTogdGhlIGBuZXh0YCBjYWxsYmFjayB3aWxsICpub3QqIGZpcmUgaWYgdGhlIHZhcmlhYmxlcyBoYXZlIG5vdCBjaGFuZ2VkXG4gICAgICogb3IgaWYgdGhlIHJlc3VsdCBpcyBjb21pbmcgZnJvbSBjYWNoZS5cbiAgICAgKlxuICAgICAqIE5vdGU6IHRoZSBwcm9taXNlIHdpbGwgcmV0dXJuIHRoZSBvbGQgcmVzdWx0cyBpbW1lZGlhdGVseSBpZiB0aGUgdmFyaWFibGVzXG4gICAgICogaGF2ZSBub3QgY2hhbmdlZC5cbiAgICAgKlxuICAgICAqIE5vdGU6IHRoZSBwcm9taXNlIHdpbGwgcmV0dXJuIG51bGwgaW1tZWRpYXRlbHkgaWYgdGhlIHF1ZXJ5IGlzIG5vdCBhY3RpdmVcbiAgICAgKiAodGhlcmUgYXJlIG5vIHN1YnNjcmliZXJzKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YXJpYWJsZXMgLSBUaGUgbmV3IHNldCBvZiB2YXJpYWJsZXMuIElmIHRoZXJlIGFyZSBtaXNzaW5nIHZhcmlhYmxlcyxcbiAgICAgKiB0aGUgcHJldmlvdXMgdmFsdWVzIG9mIHRob3NlIHZhcmlhYmxlcyB3aWxsIGJlIHVzZWQuXG4gICAgICovXG4gICAgT2JzZXJ2YWJsZVF1ZXJ5LnByb3RvdHlwZS5zZXRWYXJpYWJsZXMgPSBmdW5jdGlvbiAodmFyaWFibGVzKSB7XG4gICAgICAgIGlmIChlcXVhbCh0aGlzLnZhcmlhYmxlcywgdmFyaWFibGVzKSkge1xuICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSBubyBvYnNlcnZlcnMsIHRoZW4gd2UgZG9uJ3QgYWN0dWFsbHkgd2FudCB0byBtYWtlIGEgbmV0d29ya1xuICAgICAgICAgICAgLy8gcmVxdWVzdC4gQXMgc29vbiBhcyBzb21lb25lIG9ic2VydmVzIHRoZSBxdWVyeSwgdGhlIHJlcXVlc3Qgd2lsbCBraWNrXG4gICAgICAgICAgICAvLyBvZmYuIEZvciBub3csIHdlIGp1c3Qgc3RvcmUgYW55IGNoYW5nZXMuIChTZWUgIzEwNzcpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vYnNlcnZlcnMuc2l6ZSA/IHRoaXMucmVzdWx0KCkgOiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGlvbnMudmFyaWFibGVzID0gdmFyaWFibGVzO1xuICAgICAgICAvLyBTZWUgY29tbWVudCBhYm92ZVxuICAgICAgICBpZiAoIXRoaXMub2JzZXJ2ZXJzLnNpemUpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5yZW9ic2VydmUoe1xuICAgICAgICAgICAgLy8gUmVzZXQgb3B0aW9ucy5mZXRjaFBvbGljeSB0byBpdHMgb3JpZ2luYWwgdmFsdWUuXG4gICAgICAgICAgICBmZXRjaFBvbGljeTogdGhpcy5vcHRpb25zLmluaXRpYWxGZXRjaFBvbGljeSxcbiAgICAgICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgICAgICB9LCBOZXR3b3JrU3RhdHVzLnNldFZhcmlhYmxlcyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBIGZ1bmN0aW9uIHRoYXQgZW5hYmxlcyB5b3UgdG8gdXBkYXRlIHRoZSBxdWVyeSdzIGNhY2hlZCByZXN1bHQgd2l0aG91dCBleGVjdXRpbmcgYSBmb2xsb3d1cCBHcmFwaFFMIG9wZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIFNlZSBbdXNpbmcgdXBkYXRlUXVlcnkgYW5kIHVwZGF0ZUZyYWdtZW50XShodHRwczovL3d3dy5hcG9sbG9ncmFwaHFsLmNvbS9kb2NzL3JlYWN0L2NhY2hpbmcvY2FjaGUtaW50ZXJhY3Rpb24vI3VzaW5nLXVwZGF0ZXF1ZXJ5LWFuZC11cGRhdGVmcmFnbWVudCkgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24uXG4gICAgICovXG4gICAgT2JzZXJ2YWJsZVF1ZXJ5LnByb3RvdHlwZS51cGRhdGVRdWVyeSA9IGZ1bmN0aW9uIChtYXBGbikge1xuICAgICAgICB2YXIgcXVlcnlNYW5hZ2VyID0gdGhpcy5xdWVyeU1hbmFnZXI7XG4gICAgICAgIHZhciByZXN1bHQgPSBxdWVyeU1hbmFnZXIuY2FjaGUuZGlmZih7XG4gICAgICAgICAgICBxdWVyeTogdGhpcy5vcHRpb25zLnF1ZXJ5LFxuICAgICAgICAgICAgdmFyaWFibGVzOiB0aGlzLnZhcmlhYmxlcyxcbiAgICAgICAgICAgIHJldHVyblBhcnRpYWxEYXRhOiB0cnVlLFxuICAgICAgICAgICAgb3B0aW1pc3RpYzogZmFsc2UsXG4gICAgICAgIH0pLnJlc3VsdDtcbiAgICAgICAgdmFyIG5ld1Jlc3VsdCA9IG1hcEZuKHJlc3VsdCwge1xuICAgICAgICAgICAgdmFyaWFibGVzOiB0aGlzLnZhcmlhYmxlcyxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChuZXdSZXN1bHQpIHtcbiAgICAgICAgICAgIHF1ZXJ5TWFuYWdlci5jYWNoZS53cml0ZVF1ZXJ5KHtcbiAgICAgICAgICAgICAgICBxdWVyeTogdGhpcy5vcHRpb25zLnF1ZXJ5LFxuICAgICAgICAgICAgICAgIGRhdGE6IG5ld1Jlc3VsdCxcbiAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHRoaXMudmFyaWFibGVzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBxdWVyeU1hbmFnZXIuYnJvYWRjYXN0UXVlcmllcygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBIGZ1bmN0aW9uIHRoYXQgaW5zdHJ1Y3RzIHRoZSBxdWVyeSB0byBiZWdpbiByZS1leGVjdXRpbmcgYXQgYSBzcGVjaWZpZWQgaW50ZXJ2YWwgKGluIG1pbGxpc2Vjb25kcykuXG4gICAgICovXG4gICAgT2JzZXJ2YWJsZVF1ZXJ5LnByb3RvdHlwZS5zdGFydFBvbGxpbmcgPSBmdW5jdGlvbiAocG9sbEludGVydmFsKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5wb2xsSW50ZXJ2YWwgPSBwb2xsSW50ZXJ2YWw7XG4gICAgICAgIHRoaXMudXBkYXRlUG9sbGluZygpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQSBmdW5jdGlvbiB0aGF0IGluc3RydWN0cyB0aGUgcXVlcnkgdG8gc3RvcCBwb2xsaW5nIGFmdGVyIGEgcHJldmlvdXMgY2FsbCB0byBgc3RhcnRQb2xsaW5nYC5cbiAgICAgKi9cbiAgICBPYnNlcnZhYmxlUXVlcnkucHJvdG90eXBlLnN0b3BQb2xsaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMucG9sbEludGVydmFsID0gMDtcbiAgICAgICAgdGhpcy51cGRhdGVQb2xsaW5nKCk7XG4gICAgfTtcbiAgICAvLyBVcGRhdGUgb3B0aW9ucy5mZXRjaFBvbGljeSBhY2NvcmRpbmcgdG8gb3B0aW9ucy5uZXh0RmV0Y2hQb2xpY3kuXG4gICAgT2JzZXJ2YWJsZVF1ZXJ5LnByb3RvdHlwZS5hcHBseU5leHRGZXRjaFBvbGljeSA9IGZ1bmN0aW9uIChyZWFzb24sIFxuICAgIC8vIEl0J3MgcG9zc2libGUgdG8gdXNlIHRoaXMgbWV0aG9kIHRvIGFwcGx5IG9wdGlvbnMubmV4dEZldGNoUG9saWN5IHRvXG4gICAgLy8gb3B0aW9ucy5mZXRjaFBvbGljeSBldmVuIGlmIG9wdGlvbnMgIT09IHRoaXMub3B0aW9ucywgdGhvdWdoIHRoYXQgaGFwcGVuc1xuICAgIC8vIG1vc3Qgb2Z0ZW4gd2hlbiB0aGUgb3B0aW9ucyBhcmUgdGVtcG9yYXJ5LCB1c2VkIGZvciBvbmx5IG9uZSByZXF1ZXN0IGFuZFxuICAgIC8vIHRoZW4gdGhyb3duIGF3YXksIHNvIG5leHRGZXRjaFBvbGljeSBtYXkgbm90IGVuZCB1cCBtYXR0ZXJpbmcuXG4gICAgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucy5uZXh0RmV0Y2hQb2xpY3kpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IG9wdGlvbnMuZmV0Y2hQb2xpY3ksIGZldGNoUG9saWN5ID0gX2EgPT09IHZvaWQgMCA/IFwiY2FjaGUtZmlyc3RcIiA6IF9hLCBfYiA9IG9wdGlvbnMuaW5pdGlhbEZldGNoUG9saWN5LCBpbml0aWFsRmV0Y2hQb2xpY3kgPSBfYiA9PT0gdm9pZCAwID8gZmV0Y2hQb2xpY3kgOiBfYjtcbiAgICAgICAgICAgIGlmIChmZXRjaFBvbGljeSA9PT0gXCJzdGFuZGJ5XCIpIHtcbiAgICAgICAgICAgICAgICAvLyBEbyBub3RoaW5nLCBsZWF2aW5nIG9wdGlvbnMuZmV0Y2hQb2xpY3kgdW5jaGFuZ2VkLlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMubmV4dEZldGNoUG9saWN5ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBXaGVuIHNvbWVvbmUgY2hvb3NlcyBcImNhY2hlLWFuZC1uZXR3b3JrXCIgb3IgXCJuZXR3b3JrLW9ubHlcIiBhcyB0aGVpclxuICAgICAgICAgICAgICAgIC8vIGluaXRpYWwgRmV0Y2hQb2xpY3ksIHRoZXkgb2Z0ZW4gZG8gbm90IHdhbnQgZnV0dXJlIGNhY2hlIHVwZGF0ZXMgdG9cbiAgICAgICAgICAgICAgICAvLyB0cmlnZ2VyIHVuY29uZGl0aW9uYWwgbmV0d29yayByZXF1ZXN0cywgd2hpY2ggaXMgd2hhdCByZXBlYXRlZGx5XG4gICAgICAgICAgICAgICAgLy8gYXBwbHlpbmcgdGhlIFwiY2FjaGUtYW5kLW5ldHdvcmtcIiBvciBcIm5ldHdvcmstb25seVwiIHBvbGljaWVzIHdvdWxkXG4gICAgICAgICAgICAgICAgLy8gc2VlbSB0byBpbXBseS4gSW5zdGVhZCwgd2hlbiB0aGUgY2FjaGUgcmVwb3J0cyBhbiB1cGRhdGUgYWZ0ZXIgdGhlXG4gICAgICAgICAgICAgICAgLy8gaW5pdGlhbCBuZXR3b3JrIHJlcXVlc3QsIGl0IG1heSBiZSBkZXNpcmFibGUgZm9yIHN1YnNlcXVlbnQgbmV0d29ya1xuICAgICAgICAgICAgICAgIC8vIHJlcXVlc3RzIHRvIGJlIHRyaWdnZXJlZCBvbmx5IGlmIHRoZSBjYWNoZSByZXN1bHQgaXMgaW5jb21wbGV0ZS4gVG9cbiAgICAgICAgICAgICAgICAvLyB0aGF0IGVuZCwgdGhlIG9wdGlvbnMubmV4dEZldGNoUG9saWN5IG9wdGlvbiBwcm92aWRlcyBhbiBlYXN5IHdheSB0b1xuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBvcHRpb25zLmZldGNoUG9saWN5IGFmdGVyIHRoZSBpbml0aWFsIG5ldHdvcmsgcmVxdWVzdCwgd2l0aG91dFxuICAgICAgICAgICAgICAgIC8vIGhhdmluZyB0byBjYWxsIG9ic2VydmFibGVRdWVyeS5zZXRPcHRpb25zLlxuICAgICAgICAgICAgICAgIG9wdGlvbnMuZmV0Y2hQb2xpY3kgPSBvcHRpb25zLm5leHRGZXRjaFBvbGljeShmZXRjaFBvbGljeSwge1xuICAgICAgICAgICAgICAgICAgICByZWFzb246IHJlYXNvbixcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZTogdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbEZldGNoUG9saWN5OiBpbml0aWFsRmV0Y2hQb2xpY3ksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChyZWFzb24gPT09IFwidmFyaWFibGVzLWNoYW5nZWRcIikge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuZmV0Y2hQb2xpY3kgPSBpbml0aWFsRmV0Y2hQb2xpY3k7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmZldGNoUG9saWN5ID0gb3B0aW9ucy5uZXh0RmV0Y2hQb2xpY3k7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wdGlvbnMuZmV0Y2hQb2xpY3k7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlUXVlcnkucHJvdG90eXBlLmZldGNoID0gZnVuY3Rpb24gKG9wdGlvbnMsIG5ld05ldHdvcmtTdGF0dXMsIHF1ZXJ5KSB7XG4gICAgICAgIC8vIFRPRE8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgbmV0d29ya1N0YXR1cyAoYW5kIGluZmVyIGZldGNoVmFyaWFibGVzKVxuICAgICAgICAvLyBiZWZvcmUgYWN0dWFsbHkgY29tbWl0dGluZyB0byB0aGUgZmV0Y2guXG4gICAgICAgIHRoaXMucXVlcnlNYW5hZ2VyLnNldE9ic2VydmFibGVRdWVyeSh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucXVlcnlNYW5hZ2VyW1wiZmV0Y2hDb25jYXN0V2l0aEluZm9cIl0odGhpcy5xdWVyeUlkLCBvcHRpb25zLCBuZXdOZXR3b3JrU3RhdHVzLCBxdWVyeSk7XG4gICAgfTtcbiAgICAvLyBUdXJucyBwb2xsaW5nIG9uIG9yIG9mZiBiYXNlZCBvbiB0aGlzLm9wdGlvbnMucG9sbEludGVydmFsLlxuICAgIE9ic2VydmFibGVRdWVyeS5wcm90b3R5cGUudXBkYXRlUG9sbGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gQXZvaWQgcG9sbGluZyBpbiBTU1IgbW9kZVxuICAgICAgICBpZiAodGhpcy5xdWVyeU1hbmFnZXIuc3NyTW9kZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHBvbGxpbmdJbmZvID0gX2EucG9sbGluZ0luZm8sIHBvbGxJbnRlcnZhbCA9IF9hLm9wdGlvbnMucG9sbEludGVydmFsO1xuICAgICAgICBpZiAoIXBvbGxJbnRlcnZhbCkge1xuICAgICAgICAgICAgaWYgKHBvbGxpbmdJbmZvKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHBvbGxpbmdJbmZvLnRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnBvbGxpbmdJbmZvO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb2xsaW5nSW5mbyAmJiBwb2xsaW5nSW5mby5pbnRlcnZhbCA9PT0gcG9sbEludGVydmFsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaW52YXJpYW50KHBvbGxJbnRlcnZhbCwgMjIpO1xuICAgICAgICB2YXIgaW5mbyA9IHBvbGxpbmdJbmZvIHx8ICh0aGlzLnBvbGxpbmdJbmZvID0ge30pO1xuICAgICAgICBpbmZvLmludGVydmFsID0gcG9sbEludGVydmFsO1xuICAgICAgICB2YXIgbWF5YmVGZXRjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICBpZiAoX3RoaXMucG9sbGluZ0luZm8pIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzTmV0d29ya1JlcXVlc3RJbkZsaWdodChfdGhpcy5xdWVyeUluZm8ubmV0d29ya1N0YXR1cykgJiZcbiAgICAgICAgICAgICAgICAgICAgISgoX2IgPSAoX2EgPSBfdGhpcy5vcHRpb25zKS5za2lwUG9sbEF0dGVtcHQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVvYnNlcnZlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1vc3QgZmV0Y2hQb2xpY3kgb3B0aW9ucyBkb24ndCBtYWtlIHNlbnNlIHRvIHVzZSBpbiBhIHBvbGxpbmcgY29udGV4dCwgYXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVzZXJzIHdvdWxkbid0IHdhbnQgdG8gYmUgcG9sbGluZyB0aGUgY2FjaGUgZGlyZWN0bHkuIEhvd2V2ZXIsIG5ldHdvcmstb25seSBhbmRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vLWNhY2hlIGFyZSBib3RoIHVzZWZ1bCBmb3Igd2hlbiB0aGUgdXNlciB3YW50cyB0byBjb250cm9sIHdoZXRoZXIgb3Igbm90IHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcG9sbGVkIHJlc3VsdHMgYXJlIHdyaXR0ZW4gdG8gdGhlIGNhY2hlLlxuICAgICAgICAgICAgICAgICAgICAgICAgZmV0Y2hQb2xpY3k6IF90aGlzLm9wdGlvbnMuaW5pdGlhbEZldGNoUG9saWN5ID09PSBcIm5vLWNhY2hlXCIgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibm8tY2FjaGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJuZXR3b3JrLW9ubHlcIixcbiAgICAgICAgICAgICAgICAgICAgfSwgTmV0d29ya1N0YXR1cy5wb2xsKS50aGVuKHBvbGwsIHBvbGwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcG9sbCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHBvbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaW5mbyA9IF90aGlzLnBvbGxpbmdJbmZvO1xuICAgICAgICAgICAgaWYgKGluZm8pIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoaW5mby50aW1lb3V0KTtcbiAgICAgICAgICAgICAgICBpbmZvLnRpbWVvdXQgPSBzZXRUaW1lb3V0KG1heWJlRmV0Y2gsIGluZm8uaW50ZXJ2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBwb2xsKCk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlUXVlcnkucHJvdG90eXBlLnVwZGF0ZUxhc3RSZXN1bHQgPSBmdW5jdGlvbiAobmV3UmVzdWx0LCB2YXJpYWJsZXMpIHtcbiAgICAgICAgaWYgKHZhcmlhYmxlcyA9PT0gdm9pZCAwKSB7IHZhcmlhYmxlcyA9IHRoaXMudmFyaWFibGVzOyB9XG4gICAgICAgIHZhciBlcnJvciA9IHRoaXMuZ2V0TGFzdEVycm9yKCk7XG4gICAgICAgIC8vIFByZXNlcnZlIHRoaXMubGFzdC5lcnJvciB1bmxlc3MgdGhlIHZhcmlhYmxlcyBoYXZlIGNoYW5nZWQuXG4gICAgICAgIGlmIChlcnJvciAmJiB0aGlzLmxhc3QgJiYgIWVxdWFsKHZhcmlhYmxlcywgdGhpcy5sYXN0LnZhcmlhYmxlcykpIHtcbiAgICAgICAgICAgIGVycm9yID0gdm9pZCAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAodGhpcy5sYXN0ID0gX19hc3NpZ24oeyByZXN1bHQ6IHRoaXMucXVlcnlNYW5hZ2VyLmFzc3VtZUltbXV0YWJsZVJlc3VsdHMgP1xuICAgICAgICAgICAgICAgIG5ld1Jlc3VsdFxuICAgICAgICAgICAgICAgIDogY2xvbmVEZWVwKG5ld1Jlc3VsdCksIHZhcmlhYmxlczogdmFyaWFibGVzIH0sIChlcnJvciA/IHsgZXJyb3I6IGVycm9yIH0gOiBudWxsKSkpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZVF1ZXJ5LnByb3RvdHlwZS5yZW9ic2VydmVBc0NvbmNhc3QgPSBmdW5jdGlvbiAobmV3T3B0aW9ucywgbmV3TmV0d29ya1N0YXR1cykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmlzVG9ybkRvd24gPSBmYWxzZTtcbiAgICAgICAgdmFyIHVzZURpc3Bvc2FibGVDb25jYXN0ID0gXG4gICAgICAgIC8vIFJlZmV0Y2hpbmcgdXNlcyBhIGRpc3Bvc2FibGUgQ29uY2FzdCB0byBhbGxvdyByZWZldGNoZXMgdXNpbmcgZGlmZmVyZW50XG4gICAgICAgIC8vIG9wdGlvbnMvdmFyaWFibGVzLCB3aXRob3V0IHBlcm1hbmVudGx5IGFsdGVyaW5nIHRoZSBvcHRpb25zIG9mIHRoZVxuICAgICAgICAvLyBvcmlnaW5hbCBPYnNlcnZhYmxlUXVlcnkuXG4gICAgICAgIG5ld05ldHdvcmtTdGF0dXMgPT09IE5ldHdvcmtTdGF0dXMucmVmZXRjaCB8fFxuICAgICAgICAgICAgLy8gVGhlIGZldGNoTW9yZSBtZXRob2QgZG9lcyBub3QgYWN0dWFsbHkgY2FsbCB0aGUgcmVvYnNlcnZlIG1ldGhvZCwgYnV0LFxuICAgICAgICAgICAgLy8gaWYgaXQgZGlkLCBpdCB3b3VsZCBkZWZpbml0ZWx5IHVzZSBhIGRpc3Bvc2FibGUgQ29uY2FzdC5cbiAgICAgICAgICAgIG5ld05ldHdvcmtTdGF0dXMgPT09IE5ldHdvcmtTdGF0dXMuZmV0Y2hNb3JlIHx8XG4gICAgICAgICAgICAvLyBQb2xsaW5nIHVzZXMgYSBkaXNwb3NhYmxlIENvbmNhc3Qgc28gdGhlIHBvbGxpbmcgb3B0aW9ucyAod2hpY2ggZm9yY2VcbiAgICAgICAgICAgIC8vIGZldGNoUG9saWN5IHRvIGJlIFwibmV0d29yay1vbmx5XCIgb3IgXCJuby1jYWNoZVwiKSB3b24ndCBvdmVycmlkZSB0aGUgb3JpZ2luYWwgb3B0aW9ucy5cbiAgICAgICAgICAgIG5ld05ldHdvcmtTdGF0dXMgPT09IE5ldHdvcmtTdGF0dXMucG9sbDtcbiAgICAgICAgLy8gU2F2ZSB0aGUgb2xkIHZhcmlhYmxlcywgc2luY2UgT2JqZWN0LmFzc2lnbiBtYXkgbW9kaWZ5IHRoZW0gYmVsb3cuXG4gICAgICAgIHZhciBvbGRWYXJpYWJsZXMgPSB0aGlzLm9wdGlvbnMudmFyaWFibGVzO1xuICAgICAgICB2YXIgb2xkRmV0Y2hQb2xpY3kgPSB0aGlzLm9wdGlvbnMuZmV0Y2hQb2xpY3k7XG4gICAgICAgIHZhciBtZXJnZWRPcHRpb25zID0gY29tcGFjdCh0aGlzLm9wdGlvbnMsIG5ld09wdGlvbnMgfHwge30pO1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHVzZURpc3Bvc2FibGVDb25jYXN0ID9cbiAgICAgICAgICAgIC8vIERpc3Bvc2FibGUgQ29uY2FzdCBmZXRjaGVzIHJlY2VpdmUgYSBzaGFsbG93IGNvcHkgb2YgdGhpcy5vcHRpb25zXG4gICAgICAgICAgICAvLyAobWVyZ2VkIHdpdGggbmV3T3B0aW9ucyksIGxlYXZpbmcgdGhpcy5vcHRpb25zIHVubW9kaWZpZWQuXG4gICAgICAgICAgICBtZXJnZWRPcHRpb25zXG4gICAgICAgICAgICA6IGFzc2lnbih0aGlzLm9wdGlvbnMsIG1lcmdlZE9wdGlvbnMpO1xuICAgICAgICAvLyBEb24ndCB1cGRhdGUgb3B0aW9ucy5xdWVyeSB3aXRoIHRoZSB0cmFuc2Zvcm1lZCBxdWVyeSB0byBhdm9pZFxuICAgICAgICAvLyBvdmVyd3JpdGluZyB0aGlzLm9wdGlvbnMucXVlcnkgd2hlbiB3ZSBhcmVuJ3QgdXNpbmcgYSBkaXNwb3NhYmxlIGNvbmNhc3QuXG4gICAgICAgIC8vIFdlIHdhbnQgdG8gZW5zdXJlIHdlIGNhbiByZS1ydW4gdGhlIGN1c3RvbSBkb2N1bWVudCB0cmFuc2Zvcm1zIHRoZSBuZXh0XG4gICAgICAgIC8vIHRpbWUgYSByZXF1ZXN0IGlzIG1hZGUgYWdhaW5zdCB0aGUgb3JpZ2luYWwgcXVlcnkuXG4gICAgICAgIHZhciBxdWVyeSA9IHRoaXMudHJhbnNmb3JtRG9jdW1lbnQob3B0aW9ucy5xdWVyeSk7XG4gICAgICAgIHRoaXMubGFzdFF1ZXJ5ID0gcXVlcnk7XG4gICAgICAgIGlmICghdXNlRGlzcG9zYWJsZUNvbmNhc3QpIHtcbiAgICAgICAgICAgIC8vIFdlIGNhbiBza2lwIGNhbGxpbmcgdXBkYXRlUG9sbGluZyBpZiB3ZSdyZSBub3QgY2hhbmdpbmcgdGhpcy5vcHRpb25zLlxuICAgICAgICAgICAgdGhpcy51cGRhdGVQb2xsaW5nKCk7XG4gICAgICAgICAgICAvLyBSZXNldCBvcHRpb25zLmZldGNoUG9saWN5IHRvIGl0cyBvcmlnaW5hbCB2YWx1ZSB3aGVuIHZhcmlhYmxlcyBjaGFuZ2UsXG4gICAgICAgICAgICAvLyB1bmxlc3MgYSBuZXcgZmV0Y2hQb2xpY3kgd2FzIHByb3ZpZGVkIGJ5IG5ld09wdGlvbnMuXG4gICAgICAgICAgICBpZiAobmV3T3B0aW9ucyAmJlxuICAgICAgICAgICAgICAgIG5ld09wdGlvbnMudmFyaWFibGVzICYmXG4gICAgICAgICAgICAgICAgIWVxdWFsKG5ld09wdGlvbnMudmFyaWFibGVzLCBvbGRWYXJpYWJsZXMpICYmXG4gICAgICAgICAgICAgICAgLy8gRG9uJ3QgbWVzcyB3aXRoIHRoZSBmZXRjaFBvbGljeSBpZiBpdCdzIGN1cnJlbnRseSBcInN0YW5kYnlcIi5cbiAgICAgICAgICAgICAgICBvcHRpb25zLmZldGNoUG9saWN5ICE9PSBcInN0YW5kYnlcIiAmJlxuICAgICAgICAgICAgICAgIC8vIElmIHdlJ3JlIGNoYW5naW5nIHRoZSBmZXRjaFBvbGljeSBhbnl3YXksIGRvbid0IHRyeSB0byBjaGFuZ2UgaXQgaGVyZVxuICAgICAgICAgICAgICAgIC8vIHVzaW5nIGFwcGx5TmV4dEZldGNoUG9saWN5LiBUaGUgZXhwbGljaXQgb3B0aW9ucy5mZXRjaFBvbGljeSB3aW5zLlxuICAgICAgICAgICAgICAgIG9wdGlvbnMuZmV0Y2hQb2xpY3kgPT09IG9sZEZldGNoUG9saWN5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBseU5leHRGZXRjaFBvbGljeShcInZhcmlhYmxlcy1jaGFuZ2VkXCIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGlmIChuZXdOZXR3b3JrU3RhdHVzID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3TmV0d29ya1N0YXR1cyA9IE5ldHdvcmtTdGF0dXMuc2V0VmFyaWFibGVzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLndhaXRGb3JPd25SZXN1bHQgJiYgKHRoaXMud2FpdEZvck93blJlc3VsdCA9IHNraXBDYWNoZURhdGFGb3Iob3B0aW9ucy5mZXRjaFBvbGljeSkpO1xuICAgICAgICB2YXIgZmluaXNoV2FpdGluZ0Zvck93blJlc3VsdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5jb25jYXN0ID09PSBjb25jYXN0KSB7XG4gICAgICAgICAgICAgICAgX3RoaXMud2FpdEZvck93blJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgdmFyaWFibGVzID0gb3B0aW9ucy52YXJpYWJsZXMgJiYgX19hc3NpZ24oe30sIG9wdGlvbnMudmFyaWFibGVzKTtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5mZXRjaChvcHRpb25zLCBuZXdOZXR3b3JrU3RhdHVzLCBxdWVyeSksIGNvbmNhc3QgPSBfYS5jb25jYXN0LCBmcm9tTGluayA9IF9hLmZyb21MaW5rO1xuICAgICAgICB2YXIgb2JzZXJ2ZXIgPSB7XG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGVxdWFsKF90aGlzLnZhcmlhYmxlcywgdmFyaWFibGVzKSkge1xuICAgICAgICAgICAgICAgICAgICBmaW5pc2hXYWl0aW5nRm9yT3duUmVzdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnJlcG9ydFJlc3VsdChyZXN1bHQsIHZhcmlhYmxlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXF1YWwoX3RoaXMudmFyaWFibGVzLCB2YXJpYWJsZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbmlzaFdhaXRpbmdGb3JPd25SZXN1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVwb3J0RXJyb3IoZXJyb3IsIHZhcmlhYmxlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCF1c2VEaXNwb3NhYmxlQ29uY2FzdCAmJiAoZnJvbUxpbmsgfHwgIXRoaXMuY29uY2FzdCkpIHtcbiAgICAgICAgICAgIC8vIFdlIHVzZSB0aGUge2FkZCxyZW1vdmV9T2JzZXJ2ZXIgbWV0aG9kcyBkaXJlY3RseSB0byBhdm9pZCB3cmFwcGluZ1xuICAgICAgICAgICAgLy8gb2JzZXJ2ZXIgd2l0aCBhbiB1bm5lY2Vzc2FyeSBTdWJzY3JpcHRpb25PYnNlcnZlciBvYmplY3QuXG4gICAgICAgICAgICBpZiAodGhpcy5jb25jYXN0ICYmIHRoaXMub2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmNhc3QucmVtb3ZlT2JzZXJ2ZXIodGhpcy5vYnNlcnZlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNvbmNhc3QgPSBjb25jYXN0O1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZlciA9IG9ic2VydmVyO1xuICAgICAgICB9XG4gICAgICAgIGNvbmNhc3QuYWRkT2JzZXJ2ZXIob2JzZXJ2ZXIpO1xuICAgICAgICByZXR1cm4gY29uY2FzdDtcbiAgICB9O1xuICAgIE9ic2VydmFibGVRdWVyeS5wcm90b3R5cGUucmVvYnNlcnZlID0gZnVuY3Rpb24gKG5ld09wdGlvbnMsIG5ld05ldHdvcmtTdGF0dXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVvYnNlcnZlQXNDb25jYXN0KG5ld09wdGlvbnMsIG5ld05ldHdvcmtTdGF0dXMpXG4gICAgICAgICAgICAucHJvbWlzZTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVRdWVyeS5wcm90b3R5cGUucmVzdWJzY3JpYmVBZnRlckVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIGBsYXN0RXJyb3JgIGlzIHNldCBpbiB0aGUgY3VycmVudCB3aGVuIHRoZSBzdWJzY3JpcHRpb24gaXMgcmUtY3JlYXRlZCxcbiAgICAgICAgLy8gdGhlIHN1YnNjcmlwdGlvbiB3aWxsIGltbWVkaWF0ZWx5IHJlY2VpdmUgdGhlIGVycm9yLCB3aGljaCB3aWxsXG4gICAgICAgIC8vIGNhdXNlIGl0IHRvIHRlcm1pbmF0ZSBhZ2Fpbi4gVG8gYXZvaWQgdGhpcywgd2UgZmlyc3QgY2xlYXJcbiAgICAgICAgLy8gdGhlIGxhc3QgZXJyb3IvcmVzdWx0IGZyb20gdGhlIGBvYnNlcnZhYmxlUXVlcnlgIGJlZm9yZSByZS1zdGFydGluZ1xuICAgICAgICAvLyB0aGUgc3Vic2NyaXB0aW9uLCBhbmQgcmVzdG9yZSB0aGUgbGFzdCB2YWx1ZSBhZnRlcndhcmRzIHNvIHRoYXQgdGhlXG4gICAgICAgIC8vIHN1YnNjcmlwdGlvbiBoYXMgYSBjaGFuY2UgdG8gc3RheSBvcGVuLlxuICAgICAgICB2YXIgbGFzdCA9IHRoaXMubGFzdDtcbiAgICAgICAgdGhpcy5yZXNldExhc3RSZXN1bHRzKCk7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLnN1YnNjcmliZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgdGhpcy5sYXN0ID0gbGFzdDtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9O1xuICAgIC8vIChSZSlkZWxpdmVyIHRoZSBjdXJyZW50IHJlc3VsdCB0byB0aGlzLm9ic2VydmVycyB3aXRob3V0IGFwcGx5aW5nIGZldGNoXG4gICAgLy8gcG9saWNpZXMgb3IgbWFraW5nIG5ldHdvcmsgcmVxdWVzdHMuXG4gICAgT2JzZXJ2YWJsZVF1ZXJ5LnByb3RvdHlwZS5vYnNlcnZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnJlcG9ydFJlc3VsdChcbiAgICAgICAgLy8gUGFzc2luZyBmYWxzZSBpcyBpbXBvcnRhbnQgc28gdGhhdCB0aGlzLmdldEN1cnJlbnRSZXN1bHQgZG9lc24ndFxuICAgICAgICAvLyBzYXZlIHRoZSBmZXRjaE1vcmUgcmVzdWx0IGFzIHRoaXMubGFzdFJlc3VsdCwgY2F1c2luZyBpdCB0byBiZVxuICAgICAgICAvLyBpZ25vcmVkIGR1ZSB0byB0aGUgdGhpcy5pc0RpZmZlcmVudEZyb21MYXN0UmVzdWx0IGNoZWNrIGluXG4gICAgICAgIC8vIHRoaXMucmVwb3J0UmVzdWx0LlxuICAgICAgICB0aGlzLmdldEN1cnJlbnRSZXN1bHQoZmFsc2UpLCB0aGlzLnZhcmlhYmxlcyk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlUXVlcnkucHJvdG90eXBlLnJlcG9ydFJlc3VsdCA9IGZ1bmN0aW9uIChyZXN1bHQsIHZhcmlhYmxlcykge1xuICAgICAgICB2YXIgbGFzdEVycm9yID0gdGhpcy5nZXRMYXN0RXJyb3IoKTtcbiAgICAgICAgdmFyIGlzRGlmZmVyZW50ID0gdGhpcy5pc0RpZmZlcmVudEZyb21MYXN0UmVzdWx0KHJlc3VsdCwgdmFyaWFibGVzKTtcbiAgICAgICAgLy8gVXBkYXRlIHRoZSBsYXN0IHJlc3VsdCBldmVuIHdoZW4gaXNEaWZmZXJlbnRGcm9tTGFzdFJlc3VsdCByZXR1cm5zIGZhbHNlLFxuICAgICAgICAvLyBiZWNhdXNlIHRoZSBxdWVyeSBtYXkgYmUgdXNpbmcgdGhlIEBub25yZWFjdGl2ZSBkaXJlY3RpdmUsIGFuZCB3ZSB3YW50IHRvXG4gICAgICAgIC8vIHNhdmUgdGhlIHRoZSBsYXRlc3QgdmVyc2lvbiBvZiBhbnkgbm9ucmVhY3RpdmUgc3VidHJlZXMgKGluIGNhc2VcbiAgICAgICAgLy8gZ2V0Q3VycmVudFJlc3VsdCBpcyBjYWxsZWQpLCBldmVuIHRob3VnaCB3ZSBza2lwIGJyb2FkY2FzdGluZyBjaGFuZ2VzLlxuICAgICAgICBpZiAobGFzdEVycm9yIHx8ICFyZXN1bHQucGFydGlhbCB8fCB0aGlzLm9wdGlvbnMucmV0dXJuUGFydGlhbERhdGEpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTGFzdFJlc3VsdChyZXN1bHQsIHZhcmlhYmxlcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhc3RFcnJvciB8fCBpc0RpZmZlcmVudCkge1xuICAgICAgICAgICAgaXRlcmF0ZU9ic2VydmVyc1NhZmVseSh0aGlzLm9ic2VydmVycywgXCJuZXh0XCIsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9ic2VydmFibGVRdWVyeS5wcm90b3R5cGUucmVwb3J0RXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IsIHZhcmlhYmxlcykge1xuICAgICAgICAvLyBTaW5jZSB3ZSBkb24ndCBnZXQgdGhlIGN1cnJlbnQgcmVzdWx0IG9uIGVycm9ycywgb25seSB0aGUgZXJyb3IsIHdlXG4gICAgICAgIC8vIG11c3QgbWlycm9yIHRoZSB1cGRhdGVzIHRoYXQgb2NjdXIgaW4gUXVlcnlTdG9yZS5tYXJrUXVlcnlFcnJvciBoZXJlXG4gICAgICAgIHZhciBlcnJvclJlc3VsdCA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLmdldExhc3RSZXN1bHQoKSksIHsgZXJyb3I6IGVycm9yLCBlcnJvcnM6IGVycm9yLmdyYXBoUUxFcnJvcnMsIG5ldHdvcmtTdGF0dXM6IE5ldHdvcmtTdGF0dXMuZXJyb3IsIGxvYWRpbmc6IGZhbHNlIH0pO1xuICAgICAgICB0aGlzLnVwZGF0ZUxhc3RSZXN1bHQoZXJyb3JSZXN1bHQsIHZhcmlhYmxlcyk7XG4gICAgICAgIGl0ZXJhdGVPYnNlcnZlcnNTYWZlbHkodGhpcy5vYnNlcnZlcnMsIFwiZXJyb3JcIiwgKHRoaXMubGFzdC5lcnJvciA9IGVycm9yKSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlUXVlcnkucHJvdG90eXBlLmhhc09ic2VydmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub2JzZXJ2ZXJzLnNpemUgPiAwO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZVF1ZXJ5LnByb3RvdHlwZS50ZWFyRG93blF1ZXJ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc1Rvcm5Eb3duKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAodGhpcy5jb25jYXN0ICYmIHRoaXMub2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuY29uY2FzdC5yZW1vdmVPYnNlcnZlcih0aGlzLm9ic2VydmVyKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmNvbmNhc3Q7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5vYnNlcnZlcjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0b3BQb2xsaW5nKCk7XG4gICAgICAgIC8vIHN0b3AgYWxsIGFjdGl2ZSBHcmFwaFFMIHN1YnNjcmlwdGlvbnNcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViLnVuc3Vic2NyaWJlKCk7IH0pO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5xdWVyeU1hbmFnZXIuc3RvcFF1ZXJ5KHRoaXMucXVlcnlJZCk7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuaXNUb3JuRG93biA9IHRydWU7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlUXVlcnkucHJvdG90eXBlLnRyYW5zZm9ybURvY3VtZW50ID0gZnVuY3Rpb24gKGRvY3VtZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnF1ZXJ5TWFuYWdlci50cmFuc2Zvcm0oZG9jdW1lbnQpO1xuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmFibGVRdWVyeTtcbn0oT2JzZXJ2YWJsZSkpO1xuZXhwb3J0IHsgT2JzZXJ2YWJsZVF1ZXJ5IH07XG4vLyBOZWNlc3NhcnkgYmVjYXVzZSB0aGUgT2JzZXJ2YWJsZVF1ZXJ5IGNvbnN0cnVjdG9yIGhhcyBhIGRpZmZlcmVudFxuLy8gc2lnbmF0dXJlIHRoYW4gdGhlIE9ic2VydmFibGUgY29uc3RydWN0b3IuXG5maXhPYnNlcnZhYmxlU3ViY2xhc3MoT2JzZXJ2YWJsZVF1ZXJ5KTtcbi8vIFJlb2JzZXJ2ZSB3aXRoIGZldGNoUG9saWN5IGVmZmVjdGl2ZWx5IHNldCB0byBcImNhY2hlLWZpcnN0XCIsIHRyaWdnZXJpbmdcbi8vIGRlbGl2ZXJ5IG9mIGFueSBuZXcgZGF0YSBmcm9tIHRoZSBjYWNoZSwgcG9zc2libHkgZmFsbGluZyBiYWNrIHRvIHRoZSBuZXR3b3JrXG4vLyBpZiBhbnkgY2FjaGUgZGF0YSBhcmUgbWlzc2luZy4gVGhpcyBhbGxvd3MgX2NvbXBsZXRlXyBjYWNoZSByZXN1bHRzIHRvIGJlXG4vLyBkZWxpdmVyZWQgd2l0aG91dCBhbHNvIGtpY2tpbmcgb2ZmIHVubmVjZXNzYXJ5IG5ldHdvcmsgcmVxdWVzdHMgd2hlblxuLy8gdGhpcy5vcHRpb25zLmZldGNoUG9saWN5IGlzIFwiY2FjaGUtYW5kLW5ldHdvcmtcIiBvciBcIm5ldHdvcmstb25seVwiLiBXaGVuXG4vLyB0aGlzLm9wdGlvbnMuZmV0Y2hQb2xpY3kgaXMgYW55IG90aGVyIHBvbGljeSAoXCJjYWNoZS1maXJzdFwiLCBcImNhY2hlLW9ubHlcIixcbi8vIFwic3RhbmRieVwiLCBvciBcIm5vLWNhY2hlXCIpLCB3ZSBjYWxsIHRoaXMucmVvYnNlcnZlKCkgYXMgdXN1YWwuXG5leHBvcnQgZnVuY3Rpb24gcmVvYnNlcnZlQ2FjaGVGaXJzdChvYnNRdWVyeSkge1xuICAgIHZhciBfYSA9IG9ic1F1ZXJ5Lm9wdGlvbnMsIGZldGNoUG9saWN5ID0gX2EuZmV0Y2hQb2xpY3ksIG5leHRGZXRjaFBvbGljeSA9IF9hLm5leHRGZXRjaFBvbGljeTtcbiAgICBpZiAoZmV0Y2hQb2xpY3kgPT09IFwiY2FjaGUtYW5kLW5ldHdvcmtcIiB8fCBmZXRjaFBvbGljeSA9PT0gXCJuZXR3b3JrLW9ubHlcIikge1xuICAgICAgICByZXR1cm4gb2JzUXVlcnkucmVvYnNlcnZlKHtcbiAgICAgICAgICAgIGZldGNoUG9saWN5OiBcImNhY2hlLWZpcnN0XCIsXG4gICAgICAgICAgICAvLyBVc2UgYSB0ZW1wb3JhcnkgbmV4dEZldGNoUG9saWN5IGZ1bmN0aW9uIHRoYXQgcmVwbGFjZXMgaXRzZWxmIHdpdGggdGhlXG4gICAgICAgICAgICAvLyBwcmV2aW91cyBuZXh0RmV0Y2hQb2xpY3kgdmFsdWUgYW5kIHJldHVybnMgdGhlIG9yaWdpbmFsIGZldGNoUG9saWN5LlxuICAgICAgICAgICAgbmV4dEZldGNoUG9saWN5OiBmdW5jdGlvbiAoY3VycmVudEZldGNoUG9saWN5LCBjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgLy8gUmVwbGFjZSB0aGlzIG5leHRGZXRjaFBvbGljeSBmdW5jdGlvbiBpbiB0aGUgb3B0aW9ucyBvYmplY3Qgd2l0aCB0aGVcbiAgICAgICAgICAgICAgICAvLyBvcmlnaW5hbCB0aGlzLm9wdGlvbnMubmV4dEZldGNoUG9saWN5IHZhbHVlLlxuICAgICAgICAgICAgICAgIHRoaXMubmV4dEZldGNoUG9saWN5ID0gbmV4dEZldGNoUG9saWN5O1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBvcmlnaW5hbCBuZXh0RmV0Y2hQb2xpY3kgdmFsdWUgd2FzIGEgZnVuY3Rpb24sIGdpdmUgaXQgYVxuICAgICAgICAgICAgICAgIC8vIGNoYW5jZSB0byBkZWNpZGUgd2hhdCBoYXBwZW5zIGhlcmUuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm5leHRGZXRjaFBvbGljeSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5leHRGZXRjaFBvbGljeShjdXJyZW50RmV0Y2hQb2xpY3ksIGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UgZ28gYmFjayB0byB0aGUgb3JpZ2luYWwgdGhpcy5vcHRpb25zLmZldGNoUG9saWN5LlxuICAgICAgICAgICAgICAgIHJldHVybiBmZXRjaFBvbGljeTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gb2JzUXVlcnkucmVvYnNlcnZlKCk7XG59XG5mdW5jdGlvbiBkZWZhdWx0U3Vic2NyaXB0aW9uT2JzZXJ2ZXJFcnJvckNhbGxiYWNrKGVycm9yKSB7XG4gICAgZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSAmJiBpbnZhcmlhbnQuZXJyb3IoMjMsIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBsb2dNaXNzaW5nRmllbGRFcnJvcnMobWlzc2luZykge1xuICAgIGlmIChnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlICYmIG1pc3NpbmcpIHtcbiAgICAgICAgZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSAmJiBpbnZhcmlhbnQuZGVidWcoMjQsIG1pc3NpbmcpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNraXBDYWNoZURhdGFGb3IoZmV0Y2hQb2xpY3kgLyogYHVuZGVmaW5lZGAgd291bGQgbWVhbiBgXCJjYWNoZS1maXJzdFwiYCAqLykge1xuICAgIHJldHVybiAoZmV0Y2hQb2xpY3kgPT09IFwibmV0d29yay1vbmx5XCIgfHxcbiAgICAgICAgZmV0Y2hQb2xpY3kgPT09IFwibm8tY2FjaGVcIiB8fFxuICAgICAgICBmZXRjaFBvbGljeSA9PT0gXCJzdGFuZGJ5XCIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JzZXJ2YWJsZVF1ZXJ5LmpzLm1hcCJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsIl9fZXh0ZW5kcyIsImludmFyaWFudCIsImVxdWFsIiwiTmV0d29ya1N0YXR1cyIsImlzTmV0d29ya1JlcXVlc3RJbkZsaWdodCIsImNsb25lRGVlcCIsImNvbXBhY3QiLCJnZXRPcGVyYXRpb25EZWZpbml0aW9uIiwiT2JzZXJ2YWJsZSIsIml0ZXJhdGVPYnNlcnZlcnNTYWZlbHkiLCJmaXhPYnNlcnZhYmxlU3ViY2xhc3MiLCJnZXRRdWVyeURlZmluaXRpb24iLCJlcXVhbEJ5UXVlcnkiLCJhc3NpZ24iLCJPYmplY3QiLCJoYXNPd25Qcm9wZXJ0eSIsIk9ic2VydmFibGVRdWVyeSIsIl9zdXBlciIsIl9hIiwicXVlcnlNYW5hZ2VyIiwicXVlcnlJbmZvIiwib3B0aW9ucyIsIl90aGlzIiwiY2FsbCIsIm9ic2VydmVyIiwic3ViT2JzZXJ2ZXIiLCJfc3Vic2NyaXB0aW9uIiwiX29ic2VydmVyIiwiZXJyb3IiLCJkZWZhdWx0U3Vic2NyaXB0aW9uT2JzZXJ2ZXJFcnJvckNhbGxiYWNrIiwiZmlyc3QiLCJvYnNlcnZlcnMiLCJzaXplIiwiYWRkIiwibGFzdCIsInJlc3VsdCIsIm5leHQiLCJyZW9ic2VydmUiLCJjYXRjaCIsImRlbGV0ZSIsInRlYXJEb3duUXVlcnkiLCJTZXQiLCJzdWJzY3JpcHRpb25zIiwid2FpdEZvck93blJlc3VsdCIsInNraXBDYWNoZURhdGFGb3IiLCJmZXRjaFBvbGljeSIsImlzVG9ybkRvd24iLCJfYiIsImRlZmF1bHRPcHRpb25zIiwid2F0Y2hRdWVyeSIsIl9jIiwiX2QiLCJkZWZhdWx0RmV0Y2hQb2xpY3kiLCJfZSIsIl9mIiwiaW5pdGlhbEZldGNoUG9saWN5IiwicXVlcnlJZCIsImdlbmVyYXRlUXVlcnlJZCIsIm9wRGVmIiwicXVlcnkiLCJxdWVyeU5hbWUiLCJuYW1lIiwidmFsdWUiLCJkZWZpbmVQcm9wZXJ0eSIsInByb3RvdHlwZSIsImdldCIsImxhc3RRdWVyeSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ2YXJpYWJsZXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlbW92ZVF1ZXJ5Iiwic2V0VGltZW91dCIsInN1YnNjcmlwdGlvbiIsInVuc3Vic2NyaWJlIiwic3Vic2NyaWJlIiwicmVzZXREaWZmIiwiZ2V0Q3VycmVudFJlc3VsdCIsInNhdmVBc0xhc3RSZXN1bHQiLCJsYXN0UmVzdWx0IiwiZ2V0TGFzdFJlc3VsdCIsIm5ldHdvcmtTdGF0dXMiLCJyZWFkeSIsImxvYWRpbmciLCJnZXREb2N1bWVudEluZm8iLCJoYXNGb3JjZWRSZXNvbHZlcnMiLCJkaWZmIiwiZ2V0RGlmZiIsImNvbXBsZXRlIiwicmV0dXJuUGFydGlhbERhdGEiLCJkYXRhIiwicGFydGlhbCIsImdsb2JhbFRoaXMiLCJfX0RFVl9fIiwicGFydGlhbFJlZmV0Y2giLCJsb2dNaXNzaW5nRmllbGRFcnJvcnMiLCJtaXNzaW5nIiwidXBkYXRlTGFzdFJlc3VsdCIsImlzRGlmZmVyZW50RnJvbUxhc3RSZXN1bHQiLCJuZXdSZXN1bHQiLCJyZXN1bHRJc0RpZmZlcmVudCIsImhhc05vbnJlYWN0aXZlRGlyZWN0aXZlIiwiZ2V0TGFzdCIsImtleSIsInZhcmlhYmxlc011c3RNYXRjaCIsImdldExhc3RFcnJvciIsInJlc2V0TGFzdFJlc3VsdHMiLCJyZXNldFF1ZXJ5U3RvcmVFcnJvcnMiLCJyZXNldEVycm9ycyIsInJlZmV0Y2giLCJyZW9ic2VydmVPcHRpb25zIiwicG9sbEludGVydmFsIiwicXVlcnlEZWYiLCJ2YXJzIiwidmFyaWFibGVEZWZpbml0aW9ucyIsInNvbWUiLCJ2IiwidmFyaWFibGUiLCJ3YXJuIiwicmVzZXRMYXN0V3JpdGUiLCJmZXRjaE1vcmUiLCJmZXRjaE1vcmVPcHRpb25zIiwiY29tYmluZWRPcHRpb25zIiwidHJhbnNmb3JtRG9jdW1lbnQiLCJxaWQiLCJvcmlnaW5hbE5ldHdvcmtTdGF0dXMiLCJub3RpZnlPbk5ldHdvcmtTdGF0dXNDaGFuZ2UiLCJvYnNlcnZlIiwidXBkYXRlZFF1ZXJ5U2V0IiwiZmV0Y2hRdWVyeSIsInRoZW4iLCJmZXRjaE1vcmVSZXN1bHQiLCJjYWNoZSIsImJhdGNoIiwidXBkYXRlIiwidXBkYXRlUXVlcnkiLCJvcHRpbWlzdGljIiwicHJldmlvdXMiLCJ3cml0ZVF1ZXJ5Iiwib25XYXRjaFVwZGF0ZWQiLCJ3YXRjaCIsImZpbmFsbHkiLCJoYXMiLCJyZW9ic2VydmVDYWNoZUZpcnN0Iiwic3Vic2NyaWJlVG9Nb3JlIiwic3RhcnRHcmFwaFFMU3Vic2NyaXB0aW9uIiwiZG9jdW1lbnQiLCJjb250ZXh0Iiwic3Vic2NyaXB0aW9uRGF0YSIsImVyciIsIm9uRXJyb3IiLCJzZXRPcHRpb25zIiwibmV3T3B0aW9ucyIsInNpbGVudFNldE9wdGlvbnMiLCJtZXJnZWRPcHRpb25zIiwic2V0VmFyaWFibGVzIiwibWFwRm4iLCJicm9hZGNhc3RRdWVyaWVzIiwic3RhcnRQb2xsaW5nIiwidXBkYXRlUG9sbGluZyIsInN0b3BQb2xsaW5nIiwiYXBwbHlOZXh0RmV0Y2hQb2xpY3kiLCJyZWFzb24iLCJuZXh0RmV0Y2hQb2xpY3kiLCJvYnNlcnZhYmxlIiwiZmV0Y2giLCJuZXdOZXR3b3JrU3RhdHVzIiwic2V0T2JzZXJ2YWJsZVF1ZXJ5Iiwic3NyTW9kZSIsInBvbGxpbmdJbmZvIiwiY2xlYXJUaW1lb3V0IiwidGltZW91dCIsImludGVydmFsIiwiaW5mbyIsIm1heWJlRmV0Y2giLCJza2lwUG9sbEF0dGVtcHQiLCJwb2xsIiwiYXNzdW1lSW1tdXRhYmxlUmVzdWx0cyIsInJlb2JzZXJ2ZUFzQ29uY2FzdCIsInVzZURpc3Bvc2FibGVDb25jYXN0Iiwib2xkVmFyaWFibGVzIiwib2xkRmV0Y2hQb2xpY3kiLCJmaW5pc2hXYWl0aW5nRm9yT3duUmVzdWx0IiwiY29uY2FzdCIsImZyb21MaW5rIiwicmVwb3J0UmVzdWx0IiwicmVwb3J0RXJyb3IiLCJyZW1vdmVPYnNlcnZlciIsImFkZE9ic2VydmVyIiwicHJvbWlzZSIsInJlc3Vic2NyaWJlQWZ0ZXJFcnJvciIsImFyZ3MiLCJfaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFwcGx5IiwibGFzdEVycm9yIiwiaXNEaWZmZXJlbnQiLCJlcnJvclJlc3VsdCIsImVycm9ycyIsImdyYXBoUUxFcnJvcnMiLCJoYXNPYnNlcnZlcnMiLCJmb3JFYWNoIiwic3ViIiwiY2xlYXIiLCJzdG9wUXVlcnkiLCJ0cmFuc2Zvcm0iLCJvYnNRdWVyeSIsImN1cnJlbnRGZXRjaFBvbGljeSIsIm1lc3NhZ2UiLCJzdGFjayIsImRlYnVnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/core/ObservableQuery.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/core/QueryInfo.js":
/*!*******************************************************!*\
  !*** ./node_modules/@apollo/client/core/QueryInfo.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryInfo: () => (/* binding */ QueryInfo),\n/* harmony export */   shouldWriteResult: () => (/* binding */ shouldWriteResult)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/equality */ \"(rsc)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/incrementalResult.js\");\n/* harmony import */ var _ObservableQuery_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ObservableQuery.js */ \"(rsc)/./node_modules/@apollo/client/core/ObservableQuery.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/errorHandling.js\");\n/* harmony import */ var _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./networkStatus.js */ \"(rsc)/./node_modules/@apollo/client/core/networkStatus.js\");\n\n\n\n\n\n\n\nvar destructiveMethodCounts = new (_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.canUseWeakMap ? WeakMap : Map)();\nfunction wrapDestructiveCacheMethod(cache, methodName) {\n    var original = cache[methodName];\n    if (typeof original === \"function\") {\n        // @ts-expect-error this is just too generic to be typed correctly\n        cache[methodName] = function() {\n            destructiveMethodCounts.set(cache, // The %1e15 allows the count to wrap around to 0 safely every\n            // quadrillion evictions, so there's no risk of overflow. To be\n            // clear, this is more of a pedantic principle than something\n            // that matters in any conceivable practical scenario.\n            (destructiveMethodCounts.get(cache) + 1) % 1e15);\n            // @ts-expect-error this is just too generic to be typed correctly\n            return original.apply(this, arguments);\n        };\n    }\n}\nfunction cancelNotifyTimeout(info) {\n    if (info[\"notifyTimeout\"]) {\n        clearTimeout(info[\"notifyTimeout\"]);\n        info[\"notifyTimeout\"] = void 0;\n    }\n}\n// A QueryInfo object represents a single query managed by the\n// QueryManager, which tracks all QueryInfo objects by queryId in its\n// this.queries Map. QueryInfo objects store the latest results and errors\n// for the given query, and are responsible for reporting those results to\n// the corresponding ObservableQuery, via the QueryInfo.notify method.\n// Results are reported asynchronously whenever setDiff marks the\n// QueryInfo object as dirty, though a call to the QueryManager's\n// broadcastQueries method may trigger the notification before it happens\n// automatically. This class used to be a simple interface type without\n// any field privacy or meaningful methods, which is why it still has so\n// many public fields. The effort to lock down and simplify the QueryInfo\n// interface is ongoing, and further improvements are welcome.\nvar QueryInfo = /** @class */ function() {\n    function QueryInfo(queryManager, queryId) {\n        if (queryId === void 0) {\n            queryId = queryManager.generateQueryId();\n        }\n        this.queryId = queryId;\n        this.listeners = new Set();\n        this.document = null;\n        this.lastRequestId = 1;\n        this.stopped = false;\n        this.dirty = false;\n        this.observableQuery = null;\n        var cache = this.cache = queryManager.cache;\n        // Track how often cache.evict is called, since we want eviction to\n        // override the feud-stopping logic in the markResult method, by\n        // causing shouldWrite to return true. Wrapping the cache.evict method\n        // is a bit of a hack, but it saves us from having to make eviction\n        // counting an official part of the ApolloCache API.\n        if (!destructiveMethodCounts.has(cache)) {\n            destructiveMethodCounts.set(cache, 0);\n            wrapDestructiveCacheMethod(cache, \"evict\");\n            wrapDestructiveCacheMethod(cache, \"modify\");\n            wrapDestructiveCacheMethod(cache, \"reset\");\n        }\n    }\n    QueryInfo.prototype.init = function(query) {\n        var networkStatus = query.networkStatus || _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.NetworkStatus.loading;\n        if (this.variables && this.networkStatus !== _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.NetworkStatus.loading && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(this.variables, query.variables)) {\n            networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.NetworkStatus.setVariables;\n        }\n        if (!(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(query.variables, this.variables)) {\n            this.lastDiff = void 0;\n        }\n        Object.assign(this, {\n            document: query.document,\n            variables: query.variables,\n            networkError: null,\n            graphQLErrors: this.graphQLErrors || [],\n            networkStatus: networkStatus\n        });\n        if (query.observableQuery) {\n            this.setObservableQuery(query.observableQuery);\n        }\n        if (query.lastRequestId) {\n            this.lastRequestId = query.lastRequestId;\n        }\n        return this;\n    };\n    QueryInfo.prototype.reset = function() {\n        cancelNotifyTimeout(this);\n        this.dirty = false;\n    };\n    QueryInfo.prototype.resetDiff = function() {\n        this.lastDiff = void 0;\n    };\n    QueryInfo.prototype.getDiff = function() {\n        var options = this.getDiffOptions();\n        if (this.lastDiff && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(options, this.lastDiff.options)) {\n            return this.lastDiff.diff;\n        }\n        this.updateWatch(this.variables);\n        var oq = this.observableQuery;\n        if (oq && oq.options.fetchPolicy === \"no-cache\") {\n            return {\n                complete: false\n            };\n        }\n        var diff = this.cache.diff(options);\n        this.updateLastDiff(diff, options);\n        return diff;\n    };\n    QueryInfo.prototype.updateLastDiff = function(diff, options) {\n        this.lastDiff = diff ? {\n            diff: diff,\n            options: options || this.getDiffOptions()\n        } : void 0;\n    };\n    QueryInfo.prototype.getDiffOptions = function(variables) {\n        var _a;\n        if (variables === void 0) {\n            variables = this.variables;\n        }\n        return {\n            query: this.document,\n            variables: variables,\n            returnPartialData: true,\n            optimistic: true,\n            canonizeResults: (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a.options.canonizeResults\n        };\n    };\n    QueryInfo.prototype.setDiff = function(diff) {\n        var _this = this;\n        var oldDiff = this.lastDiff && this.lastDiff.diff;\n        this.updateLastDiff(diff);\n        if (!this.dirty && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(oldDiff && oldDiff.result, diff && diff.result)) {\n            this.dirty = true;\n            if (!this.notifyTimeout) {\n                this.notifyTimeout = setTimeout(function() {\n                    return _this.notify();\n                }, 0);\n            }\n        }\n    };\n    QueryInfo.prototype.setObservableQuery = function(oq) {\n        var _this = this;\n        if (oq === this.observableQuery) return;\n        if (this.oqListener) {\n            this.listeners.delete(this.oqListener);\n        }\n        this.observableQuery = oq;\n        if (oq) {\n            oq[\"queryInfo\"] = this;\n            this.listeners.add(this.oqListener = function() {\n                var diff = _this.getDiff();\n                if (diff.fromOptimisticTransaction) {\n                    // If this diff came from an optimistic transaction, deliver the\n                    // current cache data to the ObservableQuery, but don't perform a\n                    // reobservation, since oq.reobserveCacheFirst might make a network\n                    // request, and we never want to trigger network requests in the\n                    // middle of optimistic updates.\n                    oq[\"observe\"]();\n                } else {\n                    // Otherwise, make the ObservableQuery \"reobserve\" the latest data\n                    // using a temporary fetch policy of \"cache-first\", so complete cache\n                    // results have a chance to be delivered without triggering additional\n                    // network requests, even when options.fetchPolicy is \"network-only\"\n                    // or \"cache-and-network\". All other fetch policies are preserved by\n                    // this method, and are handled by calling oq.reobserve(). If this\n                    // reobservation is spurious, isDifferentFromLastResult still has a\n                    // chance to catch it before delivery to ObservableQuery subscribers.\n                    (0,_ObservableQuery_js__WEBPACK_IMPORTED_MODULE_3__.reobserveCacheFirst)(oq);\n                }\n            });\n        } else {\n            delete this.oqListener;\n        }\n    };\n    QueryInfo.prototype.notify = function() {\n        var _this = this;\n        cancelNotifyTimeout(this);\n        if (this.shouldNotify()) {\n            this.listeners.forEach(function(listener) {\n                return listener(_this);\n            });\n        }\n        this.dirty = false;\n    };\n    QueryInfo.prototype.shouldNotify = function() {\n        if (!this.dirty || !this.listeners.size) {\n            return false;\n        }\n        if ((0,_networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.isNetworkRequestInFlight)(this.networkStatus) && this.observableQuery) {\n            var fetchPolicy = this.observableQuery.options.fetchPolicy;\n            if (fetchPolicy !== \"cache-only\" && fetchPolicy !== \"cache-and-network\") {\n                return false;\n            }\n        }\n        return true;\n    };\n    QueryInfo.prototype.stop = function() {\n        if (!this.stopped) {\n            this.stopped = true;\n            // Cancel the pending notify timeout\n            this.reset();\n            this.cancel();\n            // Revert back to the no-op version of cancel inherited from\n            // QueryInfo.prototype.\n            this.cancel = QueryInfo.prototype.cancel;\n            var oq = this.observableQuery;\n            if (oq) oq.stopPolling();\n        }\n    };\n    // This method is a no-op by default, until/unless overridden by the\n    // updateWatch method.\n    QueryInfo.prototype.cancel = function() {};\n    QueryInfo.prototype.updateWatch = function(variables) {\n        var _this = this;\n        if (variables === void 0) {\n            variables = this.variables;\n        }\n        var oq = this.observableQuery;\n        if (oq && oq.options.fetchPolicy === \"no-cache\") {\n            return;\n        }\n        var watchOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, this.getDiffOptions(variables)), {\n            watcher: this,\n            callback: function(diff) {\n                return _this.setDiff(diff);\n            }\n        });\n        if (!this.lastWatch || !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(watchOptions, this.lastWatch)) {\n            this.cancel();\n            this.cancel = this.cache.watch(this.lastWatch = watchOptions);\n        }\n    };\n    QueryInfo.prototype.resetLastWrite = function() {\n        this.lastWrite = void 0;\n    };\n    QueryInfo.prototype.shouldWrite = function(result, variables) {\n        var lastWrite = this.lastWrite;\n        return !(lastWrite && // If cache.evict has been called since the last time we wrote this\n        // data into the cache, there's a chance writing this result into\n        // the cache will repair what was evicted.\n        lastWrite.dmCount === destructiveMethodCounts.get(this.cache) && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(variables, lastWrite.variables) && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(result.data, lastWrite.result.data));\n    };\n    QueryInfo.prototype.markResult = function(result, document, options, cacheWriteBehavior) {\n        var _this = this;\n        result = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, result);\n        var merger = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.DeepMerger();\n        var graphQLErrors = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.isNonEmptyArray)(result.errors) ? result.errors.slice(0) : [];\n        // Cancel the pending notify timeout (if it exists) to prevent extraneous network\n        // requests. To allow future notify timeouts, diff and dirty are reset as well.\n        this.reset();\n        if (\"incremental\" in result && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.isNonEmptyArray)(result.incremental)) {\n            var mergedData = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.mergeIncrementalData)(this.getDiff().result, result);\n            result.data = mergedData;\n        // Detect the first chunk of a deferred query and merge it with existing\n        // cache data. This ensures a `cache-first` fetch policy that returns\n        // partial cache data or a `cache-and-network` fetch policy that already\n        // has full data in the cache does not complain when trying to merge the\n        // initial deferred server data with existing cache data.\n        } else if (\"hasNext\" in result && result.hasNext) {\n            var diff = this.getDiff();\n            result.data = merger.merge(diff.result, result.data);\n        }\n        this.graphQLErrors = graphQLErrors;\n        if (options.fetchPolicy === \"no-cache\") {\n            this.updateLastDiff({\n                result: result.data,\n                complete: true\n            }, this.getDiffOptions(options.variables));\n        } else if (cacheWriteBehavior !== 0 /* CacheWriteBehavior.FORBID */ ) {\n            if (shouldWriteResult(result, options.errorPolicy)) {\n                // Using a transaction here so we have a chance to read the result\n                // back from the cache before the watch callback fires as a result\n                // of writeQuery, so we can store the new diff quietly and ignore\n                // it when we receive it redundantly from the watch callback.\n                this.cache.performTransaction(function(cache) {\n                    if (_this.shouldWrite(result, options.variables)) {\n                        cache.writeQuery({\n                            query: document,\n                            data: result.data,\n                            variables: options.variables,\n                            overwrite: cacheWriteBehavior === 1 /* CacheWriteBehavior.OVERWRITE */ \n                        });\n                        _this.lastWrite = {\n                            // Make a shallow defensive copy of the result object, in case we\n                            // later later modify result.data in place, since we don't want\n                            // that mutation affecting the saved lastWrite.result.data.\n                            result: (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, result),\n                            variables: options.variables,\n                            dmCount: destructiveMethodCounts.get(_this.cache)\n                        };\n                    } else {\n                        // If result is the same as the last result we received from\n                        // the network (and the variables match too), avoid writing\n                        // result into the cache again. The wisdom of skipping this\n                        // cache write is far from obvious, since any cache write\n                        // could be the one that puts the cache back into a desired\n                        // state, fixing corruption or missing data. However, if we\n                        // always write every network result into the cache, we enable\n                        // feuds between queries competing to update the same data in\n                        // incompatible ways, which can lead to an endless cycle of\n                        // cache broadcasts and useless network requests. As with any\n                        // feud, eventually one side must step back from the brink,\n                        // letting the other side(s) have the last word(s). There may\n                        // be other points where we could break this cycle, such as\n                        // silencing the broadcast for cache.writeQuery (not a good\n                        // idea, since it just delays the feud a bit) or somehow\n                        // avoiding the network request that just happened (also bad,\n                        // because the server could return useful new data). All\n                        // options considered, skipping this cache write seems to be\n                        // the least damaging place to break the cycle, because it\n                        // reflects the intuition that we recently wrote this exact\n                        // result into the cache, so the cache *should* already/still\n                        // contain this data. If some other query has clobbered that\n                        // data in the meantime, that's too bad, but there will be no\n                        // winners if every query blindly reverts to its own version\n                        // of the data. This approach also gives the network a chance\n                        // to return new data, which will be written into the cache as\n                        // usual, notifying only those queries that are directly\n                        // affected by the cache updates, as usual. In the future, an\n                        // even more sophisticated cache could perhaps prevent or\n                        // mitigate the clobbering somehow, but that would make this\n                        // particular cache write even less important, and thus\n                        // skipping it would be even safer than it is today.\n                        if (_this.lastDiff && _this.lastDiff.diff.complete) {\n                            // Reuse data from the last good (complete) diff that we\n                            // received, when possible.\n                            result.data = _this.lastDiff.diff.result;\n                            return;\n                        }\n                    // If the previous this.diff was incomplete, fall through to\n                    // re-reading the latest data with cache.diff, below.\n                    }\n                    var diffOptions = _this.getDiffOptions(options.variables);\n                    var diff = cache.diff(diffOptions);\n                    // In case the QueryManager stops this QueryInfo before its\n                    // results are delivered, it's important to avoid restarting the\n                    // cache watch when markResult is called. We also avoid updating\n                    // the watch if we are writing a result that doesn't match the current\n                    // variables to avoid race conditions from broadcasting the wrong\n                    // result.\n                    if (!_this.stopped && (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__.equal)(_this.variables, options.variables)) {\n                        // Any time we're about to update this.diff, we need to make\n                        // sure we've started watching the cache.\n                        _this.updateWatch(options.variables);\n                    }\n                    // If we're allowed to write to the cache, update result.data to be\n                    // the result as re-read from the cache, rather than the raw network\n                    // result. Set without setDiff to avoid triggering a notify call,\n                    // since we have other ways of notifying for this result.\n                    _this.updateLastDiff(diff, diffOptions);\n                    result.data = diff.result;\n                });\n            } else {\n                this.lastWrite = void 0;\n            }\n        }\n        return result;\n    };\n    QueryInfo.prototype.markReady = function() {\n        this.networkError = null;\n        return this.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.NetworkStatus.ready;\n    };\n    QueryInfo.prototype.markError = function(error) {\n        this.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_2__.NetworkStatus.error;\n        this.lastWrite = void 0;\n        this.reset();\n        if (error.graphQLErrors) {\n            this.graphQLErrors = error.graphQLErrors;\n        }\n        if (error.networkError) {\n            this.networkError = error.networkError;\n        }\n        return error;\n    };\n    return QueryInfo;\n}();\n\nfunction shouldWriteResult(result, errorPolicy) {\n    if (errorPolicy === void 0) {\n        errorPolicy = \"none\";\n    }\n    var ignoreErrors = errorPolicy === \"ignore\" || errorPolicy === \"all\";\n    var writeWithErrors = !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.graphQLResultHasError)(result);\n    if (!writeWithErrors && ignoreErrors && result.data) {\n        writeWithErrors = true;\n    }\n    return writeWithErrors;\n} //# sourceMappingURL=QueryInfo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/core/QueryInfo.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/core/QueryManager.js":
/*!**********************************************************!*\
  !*** ./node_modules/@apollo/client/core/QueryManager.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryManager: () => (/* binding */ QueryManager)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/equality */ \"(rsc)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _link_core_index_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../link/core/index.js */ \"(rsc)/./node_modules/@apollo/client/link/core/execute.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../utilities/common/incrementalResult.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/incrementalResult.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _cache_index_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../cache/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/DocumentTransform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/observables/asyncMap.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/errorHandling.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/makeUniqueId.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/observables/Concast.js\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../errors/index.js */ \"(rsc)/./node_modules/@apollo/client/errors/index.js\");\n/* harmony import */ var _ObservableQuery_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./ObservableQuery.js */ \"(rsc)/./node_modules/@apollo/client/core/ObservableQuery.js\");\n/* harmony import */ var _networkStatus_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./networkStatus.js */ \"(rsc)/./node_modules/@apollo/client/core/networkStatus.js\");\n/* harmony import */ var _LocalState_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./LocalState.js */ \"(rsc)/./node_modules/@apollo/client/core/LocalState.js\");\n/* harmony import */ var _QueryInfo_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./QueryInfo.js */ \"(rsc)/./node_modules/@apollo/client/core/QueryInfo.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/print.js\");\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wry/trie */ \"(rsc)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/caching/caches.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar IGNORE = Object.create(null);\n\n\nvar QueryManager = /** @class */ function() {\n    function QueryManager(_a) {\n        var cache = _a.cache, link = _a.link, defaultOptions = _a.defaultOptions, documentTransform = _a.documentTransform, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, onBroadcast = _a.onBroadcast, _c = _a.ssrMode, ssrMode = _c === void 0 ? false : _c, _d = _a.clientAwareness, clientAwareness = _d === void 0 ? {} : _d, localState = _a.localState, _e = _a.assumeImmutableResults, assumeImmutableResults = _e === void 0 ? !!cache.assumeImmutableResults : _e, defaultContext = _a.defaultContext;\n        var _this = this;\n        this.clientAwareness = {};\n        // All the queries that the QueryManager is currently managing (not\n        // including mutations and subscriptions).\n        this.queries = new Map();\n        // Maps from queryId strings to Promise rejection functions for\n        // currently active queries and fetches.\n        // Use protected instead of private field so\n        // @apollo/experimental-nextjs-app-support can access type info.\n        this.fetchCancelFns = new Map();\n        this.transformCache = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.AutoCleanedWeakCache(_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.cacheSizes[\"queryManager.getDocumentInfo\"] || 2000 /* defaultCacheSizes[\"queryManager.getDocumentInfo\"] */ );\n        this.queryIdCounter = 1;\n        this.requestIdCounter = 1;\n        this.mutationIdCounter = 1;\n        // Use protected instead of private field so\n        // @apollo/experimental-nextjs-app-support can access type info.\n        this.inFlightLinkObservables = new _wry_trie__WEBPACK_IMPORTED_MODULE_2__.Trie(false);\n        var defaultDocumentTransform = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.DocumentTransform(function(document) {\n            return _this.cache.transformDocument(document);\n        }, // Allow the apollo cache to manage its own transform caches\n        {\n            cache: false\n        });\n        this.cache = cache;\n        this.link = link;\n        this.defaultOptions = defaultOptions || Object.create(null);\n        this.queryDeduplication = queryDeduplication;\n        this.clientAwareness = clientAwareness;\n        this.localState = localState || new _LocalState_js__WEBPACK_IMPORTED_MODULE_6__.LocalState({\n            cache: cache\n        });\n        this.ssrMode = ssrMode;\n        this.assumeImmutableResults = assumeImmutableResults;\n        this.documentTransform = documentTransform ? defaultDocumentTransform.concat(documentTransform)// The custom document transform may add new fragment spreads or new\n        // field selections, so we want to give the cache a chance to run\n        // again. For example, the InMemoryCache adds __typename to field\n        // selections and fragments from the fragment registry.\n        .concat(defaultDocumentTransform) : defaultDocumentTransform;\n        this.defaultContext = defaultContext || Object.create(null);\n        if (this.onBroadcast = onBroadcast) {\n            this.mutationStore = Object.create(null);\n        }\n        // TODO: remove before we release 3.9\n        Object.defineProperty(this.inFlightLinkObservables, \"get\", {\n            value: function() {\n                throw new Error(\"This version of Apollo Client requires at least @apollo/experimental-nextjs-app-support version 0.5.2.\");\n            }\n        });\n    }\n    /**\n     * Call this method to terminate any active query processes, making it safe\n     * to dispose of this QueryManager instance.\n     */ QueryManager.prototype.stop = function() {\n        var _this = this;\n        this.queries.forEach(function(_info, queryId) {\n            _this.stopQueryNoBroadcast(queryId);\n        });\n        this.cancelPendingFetches((0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(25));\n    };\n    QueryManager.prototype.cancelPendingFetches = function(error) {\n        this.fetchCancelFns.forEach(function(cancel) {\n            return cancel(error);\n        });\n        this.fetchCancelFns.clear();\n    };\n    QueryManager.prototype.mutate = function(_a) {\n        var _b, _c;\n        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueries = _a.updateQueries, _d = _a.refetchQueries, refetchQueries = _d === void 0 ? [] : _d, _e = _a.awaitRefetchQueries, awaitRefetchQueries = _e === void 0 ? false : _e, updateWithProxyFn = _a.update, onQueryUpdated = _a.onQueryUpdated, _f = _a.fetchPolicy, fetchPolicy = _f === void 0 ? ((_b = this.defaultOptions.mutate) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || \"network-only\" : _f, _g = _a.errorPolicy, errorPolicy = _g === void 0 ? ((_c = this.defaultOptions.mutate) === null || _c === void 0 ? void 0 : _c.errorPolicy) || \"none\" : _g, keepRootFields = _a.keepRootFields, context = _a.context;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function() {\n            var mutationId, hasClientExports, mutationStoreValue, isOptimistic, self;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__generator)(this, function(_h) {\n                switch(_h.label){\n                    case 0:\n                        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(mutation, 26);\n                        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\", 27);\n                        mutationId = this.generateMutationId();\n                        mutation = this.cache.transformForLink(this.transform(mutation));\n                        hasClientExports = this.getDocumentInfo(mutation).hasClientExports;\n                        variables = this.getVariables(mutation, variables);\n                        if (!hasClientExports) return [\n                            3 /*break*/ ,\n                            2\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            this.localState.addExportedVariables(mutation, variables, context)\n                        ];\n                    case 1:\n                        variables = _h.sent();\n                        _h.label = 2;\n                    case 2:\n                        mutationStoreValue = this.mutationStore && (this.mutationStore[mutationId] = {\n                            mutation: mutation,\n                            variables: variables,\n                            loading: true,\n                            error: null\n                        });\n                        isOptimistic = optimisticResponse && this.markMutationOptimistic(optimisticResponse, {\n                            mutationId: mutationId,\n                            document: mutation,\n                            variables: variables,\n                            fetchPolicy: fetchPolicy,\n                            errorPolicy: errorPolicy,\n                            context: context,\n                            updateQueries: updateQueries,\n                            update: updateWithProxyFn,\n                            keepRootFields: keepRootFields\n                        });\n                        this.broadcastQueries();\n                        self = this;\n                        return [\n                            2 /*return*/ ,\n                            new Promise(function(resolve, reject) {\n                                return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.asyncMap)(self.getObservableFromLink(mutation, (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, context), {\n                                    optimisticResponse: isOptimistic ? optimisticResponse : void 0\n                                }), variables, false), function(result) {\n                                    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.graphQLResultHasError)(result) && errorPolicy === \"none\") {\n                                        throw new _errors_index_js__WEBPACK_IMPORTED_MODULE_10__.ApolloError({\n                                            graphQLErrors: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.getGraphQLErrorsFromResult)(result)\n                                        });\n                                    }\n                                    if (mutationStoreValue) {\n                                        mutationStoreValue.loading = false;\n                                        mutationStoreValue.error = null;\n                                    }\n                                    var storeResult = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, result);\n                                    if (typeof refetchQueries === \"function\") {\n                                        refetchQueries = refetchQueries(storeResult);\n                                    }\n                                    if (errorPolicy === \"ignore\" && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.graphQLResultHasError)(storeResult)) {\n                                        delete storeResult.errors;\n                                    }\n                                    return self.markMutationResult({\n                                        mutationId: mutationId,\n                                        result: storeResult,\n                                        document: mutation,\n                                        variables: variables,\n                                        fetchPolicy: fetchPolicy,\n                                        errorPolicy: errorPolicy,\n                                        context: context,\n                                        update: updateWithProxyFn,\n                                        updateQueries: updateQueries,\n                                        awaitRefetchQueries: awaitRefetchQueries,\n                                        refetchQueries: refetchQueries,\n                                        removeOptimistic: isOptimistic ? mutationId : void 0,\n                                        onQueryUpdated: onQueryUpdated,\n                                        keepRootFields: keepRootFields\n                                    });\n                                }).subscribe({\n                                    next: function(storeResult) {\n                                        self.broadcastQueries();\n                                        // Since mutations might receive multiple payloads from the\n                                        // ApolloLink chain (e.g. when used with @defer),\n                                        // we resolve with a SingleExecutionResult or after the final\n                                        // ExecutionPatchResult has arrived and we have assembled the\n                                        // multipart response into a single result.\n                                        if (!(\"hasNext\" in storeResult) || storeResult.hasNext === false) {\n                                            resolve(storeResult);\n                                        }\n                                    },\n                                    error: function(err) {\n                                        if (mutationStoreValue) {\n                                            mutationStoreValue.loading = false;\n                                            mutationStoreValue.error = err;\n                                        }\n                                        if (isOptimistic) {\n                                            self.cache.removeOptimistic(mutationId);\n                                        }\n                                        self.broadcastQueries();\n                                        reject(err instanceof _errors_index_js__WEBPACK_IMPORTED_MODULE_10__.ApolloError ? err : new _errors_index_js__WEBPACK_IMPORTED_MODULE_10__.ApolloError({\n                                            networkError: err\n                                        }));\n                                    }\n                                });\n                            })\n                        ];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.markMutationResult = function(mutation, cache) {\n        var _this = this;\n        if (cache === void 0) {\n            cache = this.cache;\n        }\n        var result = mutation.result;\n        var cacheWrites = [];\n        var skipCache = mutation.fetchPolicy === \"no-cache\";\n        if (!skipCache && (0,_QueryInfo_js__WEBPACK_IMPORTED_MODULE_11__.shouldWriteResult)(result, mutation.errorPolicy)) {\n            if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.isExecutionPatchIncrementalResult)(result)) {\n                cacheWrites.push({\n                    result: result.data,\n                    dataId: \"ROOT_MUTATION\",\n                    query: mutation.document,\n                    variables: mutation.variables\n                });\n            }\n            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.isExecutionPatchIncrementalResult)(result) && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.isNonEmptyArray)(result.incremental)) {\n                var diff = cache.diff({\n                    id: \"ROOT_MUTATION\",\n                    // The cache complains if passed a mutation where it expects a\n                    // query, so we transform mutations and subscriptions to queries\n                    // (only once, thanks to this.transformCache).\n                    query: this.getDocumentInfo(mutation.document).asQuery,\n                    variables: mutation.variables,\n                    optimistic: false,\n                    returnPartialData: true\n                });\n                var mergedData = void 0;\n                if (diff.result) {\n                    mergedData = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.mergeIncrementalData)(diff.result, result);\n                }\n                if (typeof mergedData !== \"undefined\") {\n                    // cast the ExecutionPatchResult to FetchResult here since\n                    // ExecutionPatchResult never has `data` when returned from the server\n                    result.data = mergedData;\n                    cacheWrites.push({\n                        result: mergedData,\n                        dataId: \"ROOT_MUTATION\",\n                        query: mutation.document,\n                        variables: mutation.variables\n                    });\n                }\n            }\n            var updateQueries_1 = mutation.updateQueries;\n            if (updateQueries_1) {\n                this.queries.forEach(function(_a, queryId) {\n                    var observableQuery = _a.observableQuery;\n                    var queryName = observableQuery && observableQuery.queryName;\n                    if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n                        return;\n                    }\n                    var updater = updateQueries_1[queryName];\n                    var _b = _this.queries.get(queryId), document = _b.document, variables = _b.variables;\n                    // Read the current query result from the store.\n                    var _c = cache.diff({\n                        query: document,\n                        variables: variables,\n                        returnPartialData: true,\n                        optimistic: false\n                    }), currentQueryResult = _c.result, complete = _c.complete;\n                    if (complete && currentQueryResult) {\n                        // Run our reducer using the current query result and the mutation result.\n                        var nextQueryResult = updater(currentQueryResult, {\n                            mutationResult: result,\n                            queryName: document && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.getOperationName)(document) || void 0,\n                            queryVariables: variables\n                        });\n                        // Write the modified result back into the store if we got a new result.\n                        if (nextQueryResult) {\n                            cacheWrites.push({\n                                result: nextQueryResult,\n                                dataId: \"ROOT_QUERY\",\n                                query: document,\n                                variables: variables\n                            });\n                        }\n                    }\n                });\n            }\n        }\n        if (cacheWrites.length > 0 || mutation.refetchQueries || mutation.update || mutation.onQueryUpdated || mutation.removeOptimistic) {\n            var results_1 = [];\n            this.refetchQueries({\n                updateCache: function(cache) {\n                    if (!skipCache) {\n                        cacheWrites.forEach(function(write) {\n                            return cache.write(write);\n                        });\n                    }\n                    // If the mutation has some writes associated with it then we need to\n                    // apply those writes to the store by running this reducer again with\n                    // a write action.\n                    var update = mutation.update;\n                    // Determine whether result is a SingleExecutionResult,\n                    // or the final ExecutionPatchResult.\n                    var isFinalResult = !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.isExecutionPatchResult)(result) || (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.isExecutionPatchIncrementalResult)(result) && !result.hasNext;\n                    if (update) {\n                        if (!skipCache) {\n                            // Re-read the ROOT_MUTATION data we just wrote into the cache\n                            // (the first cache.write call in the cacheWrites.forEach loop\n                            // above), so field read functions have a chance to run for\n                            // fields within mutation result objects.\n                            var diff = cache.diff({\n                                id: \"ROOT_MUTATION\",\n                                // The cache complains if passed a mutation where it expects a\n                                // query, so we transform mutations and subscriptions to queries\n                                // (only once, thanks to this.transformCache).\n                                query: _this.getDocumentInfo(mutation.document).asQuery,\n                                variables: mutation.variables,\n                                optimistic: false,\n                                returnPartialData: true\n                            });\n                            if (diff.complete) {\n                                result = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, result), {\n                                    data: diff.result\n                                });\n                                if (\"incremental\" in result) {\n                                    delete result.incremental;\n                                }\n                                if (\"hasNext\" in result) {\n                                    delete result.hasNext;\n                                }\n                            }\n                        }\n                        // If we've received the whole response,\n                        // either a SingleExecutionResult or the final ExecutionPatchResult,\n                        // call the update function.\n                        if (isFinalResult) {\n                            update(cache, result, {\n                                context: mutation.context,\n                                variables: mutation.variables\n                            });\n                        }\n                    }\n                    // TODO Do this with cache.evict({ id: 'ROOT_MUTATION' }) but make it\n                    // shallow to allow rolling back optimistic evictions.\n                    if (!skipCache && !mutation.keepRootFields && isFinalResult) {\n                        cache.modify({\n                            id: \"ROOT_MUTATION\",\n                            fields: function(value, _a) {\n                                var fieldName = _a.fieldName, DELETE = _a.DELETE;\n                                return fieldName === \"__typename\" ? value : DELETE;\n                            }\n                        });\n                    }\n                },\n                include: mutation.refetchQueries,\n                // Write the final mutation.result to the root layer of the cache.\n                optimistic: false,\n                // Remove the corresponding optimistic layer at the same time as we\n                // write the final non-optimistic result.\n                removeOptimistic: mutation.removeOptimistic,\n                // Let the caller of client.mutate optionally determine the refetching\n                // behavior for watched queries after the mutation.update function runs.\n                // If no onQueryUpdated function was provided for this mutation, pass\n                // null instead of undefined to disable the default refetching behavior.\n                onQueryUpdated: mutation.onQueryUpdated || null\n            }).forEach(function(result) {\n                return results_1.push(result);\n            });\n            if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n                // Returning a promise here makes the mutation await that promise, so we\n                // include results in that promise's work if awaitRefetchQueries or an\n                // onQueryUpdated function was specified.\n                return Promise.all(results_1).then(function() {\n                    return result;\n                });\n            }\n        }\n        return Promise.resolve(result);\n    };\n    QueryManager.prototype.markMutationOptimistic = function(optimisticResponse, mutation) {\n        var _this = this;\n        var data = typeof optimisticResponse === \"function\" ? optimisticResponse(mutation.variables, {\n            IGNORE: IGNORE\n        }) : optimisticResponse;\n        if (data === IGNORE) {\n            return false;\n        }\n        this.cache.recordOptimisticTransaction(function(cache) {\n            try {\n                _this.markMutationResult((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, mutation), {\n                    result: {\n                        data: data\n                    }\n                }), cache);\n            } catch (error) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(error);\n            }\n        }, mutation.mutationId);\n        return true;\n    };\n    QueryManager.prototype.fetchQuery = function(queryId, options, networkStatus) {\n        return this.fetchConcastWithInfo(queryId, options, networkStatus).concast.promise;\n    };\n    QueryManager.prototype.getQueryStore = function() {\n        var store = Object.create(null);\n        this.queries.forEach(function(info, queryId) {\n            store[queryId] = {\n                variables: info.variables,\n                networkStatus: info.networkStatus,\n                networkError: info.networkError,\n                graphQLErrors: info.graphQLErrors\n            };\n        });\n        return store;\n    };\n    QueryManager.prototype.resetErrors = function(queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo) {\n            queryInfo.networkError = undefined;\n            queryInfo.graphQLErrors = [];\n        }\n    };\n    QueryManager.prototype.transform = function(document) {\n        return this.documentTransform.transformDocument(document);\n    };\n    QueryManager.prototype.getDocumentInfo = function(document) {\n        var transformCache = this.transformCache;\n        if (!transformCache.has(document)) {\n            var cacheEntry = {\n                // TODO These three calls (hasClientExports, shouldForceResolvers, and\n                // usesNonreactiveDirective) are performing independent full traversals\n                // of the transformed document. We should consider merging these\n                // traversals into a single pass in the future, though the work is\n                // cached after the first time.\n                hasClientExports: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_15__.hasClientExports)(document),\n                hasForcedResolvers: this.localState.shouldForceResolvers(document),\n                hasNonreactiveDirective: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_15__.hasDirectives)([\n                    \"nonreactive\"\n                ], document),\n                clientQuery: this.localState.clientQuery(document),\n                serverQuery: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_16__.removeDirectivesFromDocument)([\n                    {\n                        name: \"client\",\n                        remove: true\n                    },\n                    {\n                        name: \"connection\"\n                    },\n                    {\n                        name: \"nonreactive\"\n                    }\n                ], document),\n                defaultVars: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.getDefaultValues)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.getOperationDefinition)(document)),\n                // Transform any mutation or subscription operations to query operations\n                // so we can read/write them from/to the cache.\n                asQuery: (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, document), {\n                    definitions: document.definitions.map(function(def) {\n                        if (def.kind === \"OperationDefinition\" && def.operation !== \"query\") {\n                            return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, def), {\n                                operation: \"query\"\n                            });\n                        }\n                        return def;\n                    })\n                })\n            };\n            transformCache.set(document, cacheEntry);\n        }\n        return transformCache.get(document);\n    };\n    QueryManager.prototype.getVariables = function(document, variables) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, this.getDocumentInfo(document).defaultVars), variables);\n    };\n    QueryManager.prototype.watchQuery = function(options) {\n        var query = this.transform(options.query);\n        // assign variable default values if supplied\n        // NOTE: We don't modify options.query here with the transformed query to\n        // ensure observable.options.query is set to the raw untransformed query.\n        options = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, options), {\n            variables: this.getVariables(query, options.variables)\n        });\n        if (typeof options.notifyOnNetworkStatusChange === \"undefined\") {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var queryInfo = new _QueryInfo_js__WEBPACK_IMPORTED_MODULE_11__.QueryInfo(this);\n        var observable = new _ObservableQuery_js__WEBPACK_IMPORTED_MODULE_17__.ObservableQuery({\n            queryManager: this,\n            queryInfo: queryInfo,\n            options: options\n        });\n        observable[\"lastQuery\"] = query;\n        this.queries.set(observable.queryId, queryInfo);\n        // We give queryInfo the transformed query to ensure the first cache diff\n        // uses the transformed query instead of the raw query\n        queryInfo.init({\n            document: query,\n            observableQuery: observable,\n            variables: observable.variables\n        });\n        return observable;\n    };\n    QueryManager.prototype.query = function(options, queryId) {\n        var _this = this;\n        if (queryId === void 0) {\n            queryId = this.generateQueryId();\n        }\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(options.query, 28);\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(options.query.kind === \"Document\", 29);\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!options.returnPartialData, 30);\n        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!options.pollInterval, 31);\n        return this.fetchQuery(queryId, (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, options), {\n            query: this.transform(options.query)\n        })).finally(function() {\n            return _this.stopQuery(queryId);\n        });\n    };\n    QueryManager.prototype.generateQueryId = function() {\n        return String(this.queryIdCounter++);\n    };\n    QueryManager.prototype.generateRequestId = function() {\n        return this.requestIdCounter++;\n    };\n    QueryManager.prototype.generateMutationId = function() {\n        return String(this.mutationIdCounter++);\n    };\n    QueryManager.prototype.stopQueryInStore = function(queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function(queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo) queryInfo.stop();\n    };\n    QueryManager.prototype.clearStore = function(options) {\n        if (options === void 0) {\n            options = {\n                discardWatches: true\n            };\n        }\n        // Before we have sent the reset action to the store, we can no longer\n        // rely on the results returned by in-flight requests since these may\n        // depend on values that previously existed in the data portion of the\n        // store. So, we cancel the promises and observers that we have issued\n        // so far and not yet resolved (in the case of queries).\n        this.cancelPendingFetches((0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(32));\n        this.queries.forEach(function(queryInfo) {\n            if (queryInfo.observableQuery) {\n                // Set loading to true so listeners don't trigger unless they want\n                // results with partial data.\n                queryInfo.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_18__.NetworkStatus.loading;\n            } else {\n                queryInfo.stop();\n            }\n        });\n        if (this.mutationStore) {\n            this.mutationStore = Object.create(null);\n        }\n        // begin removing data from the store\n        return this.cache.reset(options);\n    };\n    QueryManager.prototype.getObservableQueries = function(include) {\n        var _this = this;\n        if (include === void 0) {\n            include = \"active\";\n        }\n        var queries = new Map();\n        var queryNamesAndDocs = new Map();\n        var legacyQueryOptions = new Set();\n        if (Array.isArray(include)) {\n            include.forEach(function(desc) {\n                if (typeof desc === \"string\") {\n                    queryNamesAndDocs.set(desc, false);\n                } else if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_19__.isDocumentNode)(desc)) {\n                    queryNamesAndDocs.set(_this.transform(desc), false);\n                } else if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_20__.isNonNullObject)(desc) && desc.query) {\n                    legacyQueryOptions.add(desc);\n                }\n            });\n        }\n        this.queries.forEach(function(_a, queryId) {\n            var oq = _a.observableQuery, document = _a.document;\n            if (oq) {\n                if (include === \"all\") {\n                    queries.set(queryId, oq);\n                    return;\n                }\n                var queryName = oq.queryName, fetchPolicy = oq.options.fetchPolicy;\n                if (fetchPolicy === \"standby\" || include === \"active\" && !oq.hasObservers()) {\n                    return;\n                }\n                if (include === \"active\" || queryName && queryNamesAndDocs.has(queryName) || document && queryNamesAndDocs.has(document)) {\n                    queries.set(queryId, oq);\n                    if (queryName) queryNamesAndDocs.set(queryName, true);\n                    if (document) queryNamesAndDocs.set(document, true);\n                }\n            }\n        });\n        if (legacyQueryOptions.size) {\n            legacyQueryOptions.forEach(function(options) {\n                // We will be issuing a fresh network request for this query, so we\n                // pre-allocate a new query ID here, using a special prefix to enable\n                // cleaning up these temporary queries later, after fetching.\n                var queryId = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_21__.makeUniqueId)(\"legacyOneTimeQuery\");\n                var queryInfo = _this.getQuery(queryId).init({\n                    document: options.query,\n                    variables: options.variables\n                });\n                var oq = new _ObservableQuery_js__WEBPACK_IMPORTED_MODULE_17__.ObservableQuery({\n                    queryManager: _this,\n                    queryInfo: queryInfo,\n                    options: (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, options), {\n                        fetchPolicy: \"network-only\"\n                    })\n                });\n                (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(oq.queryId === queryId);\n                queryInfo.setObservableQuery(oq);\n                queries.set(queryId, oq);\n            });\n        }\n        if (globalThis.__DEV__ !== false && queryNamesAndDocs.size) {\n            queryNamesAndDocs.forEach(function(included, nameOrDoc) {\n                if (!included) {\n                    globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(typeof nameOrDoc === \"string\" ? 33 : 34, nameOrDoc);\n                }\n            });\n        }\n        return queries;\n    };\n    QueryManager.prototype.reFetchObservableQueries = function(includeStandby) {\n        var _this = this;\n        if (includeStandby === void 0) {\n            includeStandby = false;\n        }\n        var observableQueryPromises = [];\n        this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function(observableQuery, queryId) {\n            var fetchPolicy = observableQuery.options.fetchPolicy;\n            observableQuery.resetLastResults();\n            if (includeStandby || fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\") {\n                observableQueryPromises.push(observableQuery.refetch());\n            }\n            _this.getQuery(queryId).setDiff(null);\n        });\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.setObservableQuery = function(observableQuery) {\n        this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n    };\n    QueryManager.prototype.startGraphQLSubscription = function(_a) {\n        var _this = this;\n        var query = _a.query, fetchPolicy = _a.fetchPolicy, _b = _a.errorPolicy, errorPolicy = _b === void 0 ? \"none\" : _b, variables = _a.variables, _c = _a.context, context = _c === void 0 ? {} : _c;\n        query = this.transform(query);\n        variables = this.getVariables(query, variables);\n        var makeObservable = function(variables) {\n            return _this.getObservableFromLink(query, context, variables).map(function(result) {\n                if (fetchPolicy !== \"no-cache\") {\n                    // the subscription interface should handle not sending us results we no longer subscribe to.\n                    // XXX I don't think we ever send in an object with errors, but we might in the future...\n                    if ((0,_QueryInfo_js__WEBPACK_IMPORTED_MODULE_11__.shouldWriteResult)(result, errorPolicy)) {\n                        _this.cache.write({\n                            query: query,\n                            result: result.data,\n                            dataId: \"ROOT_SUBSCRIPTION\",\n                            variables: variables\n                        });\n                    }\n                    _this.broadcastQueries();\n                }\n                var hasErrors = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.graphQLResultHasError)(result);\n                var hasProtocolErrors = (0,_errors_index_js__WEBPACK_IMPORTED_MODULE_10__.graphQLResultHasProtocolErrors)(result);\n                if (hasErrors || hasProtocolErrors) {\n                    var errors = {};\n                    if (hasErrors) {\n                        errors.graphQLErrors = result.errors;\n                    }\n                    if (hasProtocolErrors) {\n                        errors.protocolErrors = result.extensions[_errors_index_js__WEBPACK_IMPORTED_MODULE_10__.PROTOCOL_ERRORS_SYMBOL];\n                    }\n                    // `errorPolicy` is a mechanism for handling GraphQL errors, according\n                    // to our documentation, so we throw protocol errors regardless of the\n                    // set error policy.\n                    if (errorPolicy === \"none\" || hasProtocolErrors) {\n                        throw new _errors_index_js__WEBPACK_IMPORTED_MODULE_10__.ApolloError(errors);\n                    }\n                }\n                if (errorPolicy === \"ignore\") {\n                    delete result.errors;\n                }\n                return result;\n            });\n        };\n        if (this.getDocumentInfo(query).hasClientExports) {\n            var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n            return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_22__.Observable(function(observer) {\n                var sub = null;\n                observablePromise_1.then(function(observable) {\n                    return sub = observable.subscribe(observer);\n                }, observer.error);\n                return function() {\n                    return sub && sub.unsubscribe();\n                };\n            });\n        }\n        return makeObservable(variables);\n    };\n    QueryManager.prototype.stopQuery = function(queryId) {\n        this.stopQueryNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryNoBroadcast = function(queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function(queryId) {\n        // teardown all links\n        // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n        // that each add their reject functions to fetchCancelFns.\n        // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n        // The same queryId could have two rejection fns for two promises\n        this.fetchCancelFns.delete(queryId);\n        if (this.queries.has(queryId)) {\n            this.getQuery(queryId).stop();\n            this.queries.delete(queryId);\n        }\n    };\n    QueryManager.prototype.broadcastQueries = function() {\n        if (this.onBroadcast) this.onBroadcast();\n        this.queries.forEach(function(info) {\n            return info.notify();\n        });\n    };\n    QueryManager.prototype.getLocalState = function() {\n        return this.localState;\n    };\n    QueryManager.prototype.getObservableFromLink = function(query, context, variables, // Prefer context.queryDeduplication if specified.\n    deduplication) {\n        var _this = this;\n        var _a;\n        if (deduplication === void 0) {\n            deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication;\n        }\n        var observable;\n        var _b = this.getDocumentInfo(query), serverQuery = _b.serverQuery, clientQuery = _b.clientQuery;\n        if (serverQuery) {\n            var _c = this, inFlightLinkObservables_1 = _c.inFlightLinkObservables, link = _c.link;\n            var operation = {\n                query: serverQuery,\n                variables: variables,\n                operationName: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.getOperationName)(serverQuery) || void 0,\n                context: this.prepareContext((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, context), {\n                    forceFetch: !deduplication\n                }))\n            };\n            context = operation.context;\n            if (deduplication) {\n                var printedServerQuery_1 = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_23__.print)(serverQuery);\n                var varJson_1 = (0,_cache_index_js__WEBPACK_IMPORTED_MODULE_24__.canonicalStringify)(variables);\n                var entry = inFlightLinkObservables_1.lookup(printedServerQuery_1, varJson_1);\n                observable = entry.observable;\n                if (!observable) {\n                    var concast = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_25__.Concast([\n                        (0,_link_core_index_js__WEBPACK_IMPORTED_MODULE_26__.execute)(link, operation)\n                    ]);\n                    observable = entry.observable = concast;\n                    concast.beforeNext(function() {\n                        inFlightLinkObservables_1.remove(printedServerQuery_1, varJson_1);\n                    });\n                }\n            } else {\n                observable = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_25__.Concast([\n                    (0,_link_core_index_js__WEBPACK_IMPORTED_MODULE_26__.execute)(link, operation)\n                ]);\n            }\n        } else {\n            observable = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_25__.Concast([\n                _utilities_index_js__WEBPACK_IMPORTED_MODULE_22__.Observable.of({\n                    data: {}\n                })\n            ]);\n            context = this.prepareContext(context);\n        }\n        if (clientQuery) {\n            observable = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.asyncMap)(observable, function(result) {\n                return _this.localState.runResolvers({\n                    document: clientQuery,\n                    remoteResult: result,\n                    context: context,\n                    variables: variables\n                });\n            });\n        }\n        return observable;\n    };\n    QueryManager.prototype.getResultsFromLink = function(queryInfo, cacheWriteBehavior, options) {\n        var requestId = queryInfo.lastRequestId = this.generateRequestId();\n        // Performing transformForLink here gives this.cache a chance to fill in\n        // missing fragment definitions (for example) before sending this document\n        // through the link chain.\n        var linkDocument = this.cache.transformForLink(options.query);\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.asyncMap)(this.getObservableFromLink(linkDocument, options.context, options.variables), function(result) {\n            var graphQLErrors = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.getGraphQLErrorsFromResult)(result);\n            var hasErrors = graphQLErrors.length > 0;\n            // If we interrupted this request by calling getResultsFromLink again\n            // with the same QueryInfo object, we ignore the old results.\n            if (requestId >= queryInfo.lastRequestId) {\n                if (hasErrors && options.errorPolicy === \"none\") {\n                    // Throwing here effectively calls observer.error.\n                    throw queryInfo.markError(new _errors_index_js__WEBPACK_IMPORTED_MODULE_10__.ApolloError({\n                        graphQLErrors: graphQLErrors\n                    }));\n                }\n                // Use linkDocument rather than queryInfo.document so the\n                // operation/fragments used to write the result are the same as the\n                // ones used to obtain it from the link.\n                result = queryInfo.markResult(result, linkDocument, options, cacheWriteBehavior);\n                queryInfo.markReady();\n            }\n            var aqr = {\n                data: result.data,\n                loading: false,\n                networkStatus: _networkStatus_js__WEBPACK_IMPORTED_MODULE_18__.NetworkStatus.ready\n            };\n            if (hasErrors && options.errorPolicy !== \"ignore\") {\n                aqr.errors = graphQLErrors;\n                aqr.networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_18__.NetworkStatus.error;\n            }\n            return aqr;\n        }, function(networkError) {\n            var error = (0,_errors_index_js__WEBPACK_IMPORTED_MODULE_10__.isApolloError)(networkError) ? networkError : new _errors_index_js__WEBPACK_IMPORTED_MODULE_10__.ApolloError({\n                networkError: networkError\n            });\n            // Avoid storing errors from older interrupted queries.\n            if (requestId >= queryInfo.lastRequestId) {\n                queryInfo.markError(error);\n            }\n            throw error;\n        });\n    };\n    QueryManager.prototype.fetchConcastWithInfo = function(queryId, options, // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus, query) {\n        var _this = this;\n        if (networkStatus === void 0) {\n            networkStatus = _networkStatus_js__WEBPACK_IMPORTED_MODULE_18__.NetworkStatus.loading;\n        }\n        if (query === void 0) {\n            query = options.query;\n        }\n        var variables = this.getVariables(query, options.variables);\n        var queryInfo = this.getQuery(queryId);\n        var defaults = this.defaultOptions.watchQuery;\n        var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? defaults && defaults.fetchPolicy || \"cache-first\" : _a, _b = options.errorPolicy, errorPolicy = _b === void 0 ? defaults && defaults.errorPolicy || \"none\" : _b, _c = options.returnPartialData, returnPartialData = _c === void 0 ? false : _c, _d = options.notifyOnNetworkStatusChange, notifyOnNetworkStatusChange = _d === void 0 ? false : _d, _e = options.context, context = _e === void 0 ? {} : _e;\n        var normalized = Object.assign({}, options, {\n            query: query,\n            variables: variables,\n            fetchPolicy: fetchPolicy,\n            errorPolicy: errorPolicy,\n            returnPartialData: returnPartialData,\n            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n            context: context\n        });\n        var fromVariables = function(variables) {\n            // Since normalized is always a fresh copy of options, it's safe to\n            // modify its properties here, rather than creating yet another new\n            // WatchQueryOptions object.\n            normalized.variables = variables;\n            var sourcesWithInfo = _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n            if (// If we're in standby, postpone advancing options.fetchPolicy using\n            // applyNextFetchPolicy.\n            normalized.fetchPolicy !== \"standby\" && // The \"standby\" policy currently returns [] from fetchQueryByPolicy, so\n            // this is another way to detect when nothing was done/fetched.\n            sourcesWithInfo.sources.length > 0 && queryInfo.observableQuery) {\n                queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n            }\n            return sourcesWithInfo;\n        };\n        // This cancel function needs to be set before the concast is created,\n        // in case concast creation synchronously cancels the request.\n        var cleanupCancelFn = function() {\n            return _this.fetchCancelFns.delete(queryId);\n        };\n        this.fetchCancelFns.set(queryId, function(reason) {\n            cleanupCancelFn();\n            // This delay ensures the concast variable has been initialized.\n            setTimeout(function() {\n                return concast.cancel(reason);\n            });\n        });\n        var concast, containsDataFromLink;\n        // If the query has @export(as: ...) directives, then we need to\n        // process those directives asynchronously. When there are no\n        // @export directives (the common case), we deliberately avoid\n        // wrapping the result of this.fetchQueryByPolicy in a Promise,\n        // since the timing of result delivery is (unfortunately) important\n        // for backwards compatibility. TODO This code could be simpler if\n        // we deprecated and removed LocalState.\n        if (this.getDocumentInfo(normalized.query).hasClientExports) {\n            concast = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_25__.Concast(this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables).then(function(sourcesWithInfo) {\n                return sourcesWithInfo.sources;\n            }));\n            // there is just no way we can synchronously get the *right* value here,\n            // so we will assume `true`, which is the behaviour before the bug fix in\n            // #10597. This means that bug is not fixed in that case, and is probably\n            // un-fixable with reasonable effort for the edge case of @export as\n            // directives.\n            containsDataFromLink = true;\n        } else {\n            var sourcesWithInfo = fromVariables(normalized.variables);\n            containsDataFromLink = sourcesWithInfo.fromLink;\n            concast = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_25__.Concast(sourcesWithInfo.sources);\n        }\n        concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n        return {\n            concast: concast,\n            fromLink: containsDataFromLink\n        };\n    };\n    QueryManager.prototype.refetchQueries = function(_a) {\n        var _this = this;\n        var updateCache = _a.updateCache, include = _a.include, _b = _a.optimistic, optimistic = _b === void 0 ? false : _b, _c = _a.removeOptimistic, removeOptimistic = _c === void 0 ? optimistic ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_21__.makeUniqueId)(\"refetchQueries\") : void 0 : _c, onQueryUpdated = _a.onQueryUpdated;\n        var includedQueriesById = new Map();\n        if (include) {\n            this.getObservableQueries(include).forEach(function(oq, queryId) {\n                includedQueriesById.set(queryId, {\n                    oq: oq,\n                    lastDiff: _this.getQuery(queryId).getDiff()\n                });\n            });\n        }\n        var results = new Map();\n        if (updateCache) {\n            this.cache.batch({\n                update: updateCache,\n                // Since you can perform any combination of cache reads and/or writes in\n                // the cache.batch update function, its optimistic option can be either\n                // a boolean or a string, representing three distinct modes of\n                // operation:\n                //\n                // * false: read/write only the root layer\n                // * true: read/write the topmost layer\n                // * string: read/write a fresh optimistic layer with that ID string\n                //\n                // When typeof optimistic === \"string\", a new optimistic layer will be\n                // temporarily created within cache.batch with that string as its ID. If\n                // we then pass that same string as the removeOptimistic option, we can\n                // make cache.batch immediately remove the optimistic layer after\n                // running the updateCache function, triggering only one broadcast.\n                //\n                // However, the refetchQueries method accepts only true or false for its\n                // optimistic option (not string). We interpret true to mean a temporary\n                // optimistic layer should be created, to allow efficiently rolling back\n                // the effect of the updateCache function, which involves passing a\n                // string instead of true as the optimistic option to cache.batch, when\n                // refetchQueries receives optimistic: true.\n                //\n                // In other words, we are deliberately not supporting the use case of\n                // writing to an *existing* optimistic layer (using the refetchQueries\n                // updateCache function), since that would potentially interfere with\n                // other optimistic updates in progress. Instead, you can read/write\n                // only the root layer by passing optimistic: false to refetchQueries,\n                // or you can read/write a brand new optimistic layer that will be\n                // automatically removed by passing optimistic: true.\n                optimistic: optimistic && removeOptimistic || false,\n                // The removeOptimistic option can also be provided by itself, even if\n                // optimistic === false, to remove some previously-added optimistic\n                // layer safely and efficiently, like we do in markMutationResult.\n                //\n                // If an explicit removeOptimistic string is provided with optimistic:\n                // true, the removeOptimistic string will determine the ID of the\n                // temporary optimistic layer, in case that ever matters.\n                removeOptimistic: removeOptimistic,\n                onWatchUpdated: function(watch, diff, lastDiff) {\n                    var oq = watch.watcher instanceof _QueryInfo_js__WEBPACK_IMPORTED_MODULE_11__.QueryInfo && watch.watcher.observableQuery;\n                    if (oq) {\n                        if (onQueryUpdated) {\n                            // Since we're about to handle this query now, remove it from\n                            // includedQueriesById, in case it was added earlier because of\n                            // options.include.\n                            includedQueriesById.delete(oq.queryId);\n                            var result = onQueryUpdated(oq, diff, lastDiff);\n                            if (result === true) {\n                                // The onQueryUpdated function requested the default refetching\n                                // behavior by returning true.\n                                result = oq.refetch();\n                            }\n                            // Record the result in the results Map, as long as onQueryUpdated\n                            // did not return false to skip/ignore this result.\n                            if (result !== false) {\n                                results.set(oq, result);\n                            }\n                            // Allow the default cache broadcast to happen, except when\n                            // onQueryUpdated returns false.\n                            return result;\n                        }\n                        if (onQueryUpdated !== null) {\n                            // If we don't have an onQueryUpdated function, and onQueryUpdated\n                            // was not disabled by passing null, make sure this query is\n                            // \"included\" like any other options.include-specified query.\n                            includedQueriesById.set(oq.queryId, {\n                                oq: oq,\n                                lastDiff: lastDiff,\n                                diff: diff\n                            });\n                        }\n                    }\n                }\n            });\n        }\n        if (includedQueriesById.size) {\n            includedQueriesById.forEach(function(_a, queryId) {\n                var oq = _a.oq, lastDiff = _a.lastDiff, diff = _a.diff;\n                var result;\n                // If onQueryUpdated is provided, we want to use it for all included\n                // queries, even the QueryOptions ones.\n                if (onQueryUpdated) {\n                    if (!diff) {\n                        var info = oq[\"queryInfo\"];\n                        info.reset(); // Force info.getDiff() to read from cache.\n                        diff = info.getDiff();\n                    }\n                    result = onQueryUpdated(oq, diff, lastDiff);\n                }\n                // Otherwise, we fall back to refetching.\n                if (!onQueryUpdated || result === true) {\n                    result = oq.refetch();\n                }\n                if (result !== false) {\n                    results.set(oq, result);\n                }\n                if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n                    _this.stopQueryNoBroadcast(queryId);\n                }\n            });\n        }\n        if (removeOptimistic) {\n            // In case no updateCache callback was provided (so cache.batch was not\n            // called above, and thus did not already remove the optimistic layer),\n            // remove it here. Since this is a no-op when the layer has already been\n            // removed, we do it even if we called cache.batch above, since it's\n            // possible this.cache is an instance of some ApolloCache subclass other\n            // than InMemoryCache, and does not fully support the removeOptimistic\n            // option for cache.batch.\n            this.cache.removeOptimistic(removeOptimistic);\n        }\n        return results;\n    };\n    QueryManager.prototype.fetchQueryByPolicy = function(queryInfo, _a, // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus) {\n        var _this = this;\n        var query = _a.query, variables = _a.variables, fetchPolicy = _a.fetchPolicy, refetchWritePolicy = _a.refetchWritePolicy, errorPolicy = _a.errorPolicy, returnPartialData = _a.returnPartialData, context = _a.context, notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n        var oldNetworkStatus = queryInfo.networkStatus;\n        queryInfo.init({\n            document: query,\n            variables: variables,\n            networkStatus: networkStatus\n        });\n        var readCache = function() {\n            return queryInfo.getDiff();\n        };\n        var resultsFromCache = function(diff, networkStatus) {\n            if (networkStatus === void 0) {\n                networkStatus = queryInfo.networkStatus || _networkStatus_js__WEBPACK_IMPORTED_MODULE_18__.NetworkStatus.loading;\n            }\n            var data = diff.result;\n            if (globalThis.__DEV__ !== false && !returnPartialData && !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(data, {})) {\n                (0,_ObservableQuery_js__WEBPACK_IMPORTED_MODULE_17__.logMissingFieldErrors)(diff.missing);\n            }\n            var fromData = function(data) {\n                return _utilities_index_js__WEBPACK_IMPORTED_MODULE_22__.Observable.of((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({\n                    data: data,\n                    loading: (0,_networkStatus_js__WEBPACK_IMPORTED_MODULE_18__.isNetworkRequestInFlight)(networkStatus),\n                    networkStatus: networkStatus\n                }, diff.complete ? null : {\n                    partial: true\n                }));\n            };\n            if (data && _this.getDocumentInfo(query).hasForcedResolvers) {\n                return _this.localState.runResolvers({\n                    document: query,\n                    remoteResult: {\n                        data: data\n                    },\n                    context: context,\n                    variables: variables,\n                    onlyRunForcedResolvers: true\n                }).then(function(resolved) {\n                    return fromData(resolved.data || void 0);\n                });\n            }\n            // Resolves https://github.com/apollographql/apollo-client/issues/10317.\n            // If errorPolicy is 'none' and notifyOnNetworkStatusChange is true,\n            // data was incorrectly returned from the cache on refetch:\n            // if diff.missing exists, we should not return cache data.\n            if (errorPolicy === \"none\" && networkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_18__.NetworkStatus.refetch && Array.isArray(diff.missing)) {\n                return fromData(void 0);\n            }\n            return fromData(data);\n        };\n        var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 /* CacheWriteBehavior.FORBID */  : networkStatus === _networkStatus_js__WEBPACK_IMPORTED_MODULE_18__.NetworkStatus.refetch && refetchWritePolicy !== \"merge\" ? 1 /* CacheWriteBehavior.OVERWRITE */  : 2 /* CacheWriteBehavior.MERGE */ ;\n        var resultsFromLink = function() {\n            return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n                query: query,\n                variables: variables,\n                context: context,\n                fetchPolicy: fetchPolicy,\n                errorPolicy: errorPolicy\n            });\n        };\n        var shouldNotify = notifyOnNetworkStatusChange && typeof oldNetworkStatus === \"number\" && oldNetworkStatus !== networkStatus && (0,_networkStatus_js__WEBPACK_IMPORTED_MODULE_18__.isNetworkRequestInFlight)(networkStatus);\n        switch(fetchPolicy){\n            default:\n            case \"cache-first\":\n                {\n                    var diff = readCache();\n                    if (diff.complete) {\n                        return {\n                            fromLink: false,\n                            sources: [\n                                resultsFromCache(diff, queryInfo.markReady())\n                            ]\n                        };\n                    }\n                    if (returnPartialData || shouldNotify) {\n                        return {\n                            fromLink: true,\n                            sources: [\n                                resultsFromCache(diff),\n                                resultsFromLink()\n                            ]\n                        };\n                    }\n                    return {\n                        fromLink: true,\n                        sources: [\n                            resultsFromLink()\n                        ]\n                    };\n                }\n            case \"cache-and-network\":\n                {\n                    var diff = readCache();\n                    if (diff.complete || returnPartialData || shouldNotify) {\n                        return {\n                            fromLink: true,\n                            sources: [\n                                resultsFromCache(diff),\n                                resultsFromLink()\n                            ]\n                        };\n                    }\n                    return {\n                        fromLink: true,\n                        sources: [\n                            resultsFromLink()\n                        ]\n                    };\n                }\n            case \"cache-only\":\n                return {\n                    fromLink: false,\n                    sources: [\n                        resultsFromCache(readCache(), queryInfo.markReady())\n                    ]\n                };\n            case \"network-only\":\n                if (shouldNotify) {\n                    return {\n                        fromLink: true,\n                        sources: [\n                            resultsFromCache(readCache()),\n                            resultsFromLink()\n                        ]\n                    };\n                }\n                return {\n                    fromLink: true,\n                    sources: [\n                        resultsFromLink()\n                    ]\n                };\n            case \"no-cache\":\n                if (shouldNotify) {\n                    return {\n                        fromLink: true,\n                        // Note that queryInfo.getDiff() for no-cache queries does not call\n                        // cache.diff, but instead returns a { complete: false } stub result\n                        // when there is no queryInfo.diff already defined.\n                        sources: [\n                            resultsFromCache(queryInfo.getDiff()),\n                            resultsFromLink()\n                        ]\n                    };\n                }\n                return {\n                    fromLink: true,\n                    sources: [\n                        resultsFromLink()\n                    ]\n                };\n            case \"standby\":\n                return {\n                    fromLink: false,\n                    sources: []\n                };\n        }\n    };\n    QueryManager.prototype.getQuery = function(queryId) {\n        if (queryId && !this.queries.has(queryId)) {\n            this.queries.set(queryId, new _QueryInfo_js__WEBPACK_IMPORTED_MODULE_11__.QueryInfo(this, queryId));\n        }\n        return this.queries.get(queryId);\n    };\n    QueryManager.prototype.prepareContext = function(context) {\n        if (context === void 0) {\n            context = {};\n        }\n        var newContext = this.localState.prepareContext(context);\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_7__.__assign)({}, this.defaultContext), newContext), {\n            clientAwareness: this.clientAwareness\n        });\n    };\n    return QueryManager;\n}();\n //# sourceMappingURL=QueryManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY29yZS9RdWVyeU1hbmFnZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF5RDtBQUNvQjtBQUN2QztBQUNVO0FBQ2dHO0FBQ3pGO0FBQ29PO0FBQzNNO0FBQ2lCO0FBQ25CO0FBQ0Q7QUFDaEM7QUFDa0I7QUFDSDtBQUNkO0FBQzlDLElBQUl1QyxpQkFBaUJDLE9BQU9DLFNBQVMsQ0FBQ0YsY0FBYztBQUNwRCxJQUFJRyxTQUFTRixPQUFPRyxNQUFNLENBQUM7QUFDTTtBQUN3QztBQUN6RSxJQUFJSSxlQUFlLFdBQVcsR0FBSTtJQUM5QixTQUFTQSxhQUFhQyxFQUFFO1FBQ3BCLElBQUlDLFFBQVFELEdBQUdDLEtBQUssRUFBRUMsT0FBT0YsR0FBR0UsSUFBSSxFQUFFQyxpQkFBaUJILEdBQUdHLGNBQWMsRUFBRUMsb0JBQW9CSixHQUFHSSxpQkFBaUIsRUFBRUMsS0FBS0wsR0FBR00sa0JBQWtCLEVBQUVBLHFCQUFxQkQsT0FBTyxLQUFLLElBQUksUUFBUUEsSUFBSUUsY0FBY1AsR0FBR08sV0FBVyxFQUFFQyxLQUFLUixHQUFHUyxPQUFPLEVBQUVBLFVBQVVELE9BQU8sS0FBSyxJQUFJLFFBQVFBLElBQUlFLEtBQUtWLEdBQUdXLGVBQWUsRUFBRUEsa0JBQWtCRCxPQUFPLEtBQUssSUFBSSxDQUFDLElBQUlBLElBQUlFLGFBQWFaLEdBQUdZLFVBQVUsRUFBRUMsS0FBS2IsR0FBR2Msc0JBQXNCLEVBQUVBLHlCQUF5QkQsT0FBTyxLQUFLLElBQUksQ0FBQyxDQUFDWixNQUFNYSxzQkFBc0IsR0FBR0QsSUFBSUUsaUJBQWlCZixHQUFHZSxjQUFjO1FBQ3RnQixJQUFJQyxRQUFRLElBQUk7UUFDaEIsSUFBSSxDQUFDTCxlQUFlLEdBQUcsQ0FBQztRQUN4QixtRUFBbUU7UUFDbkUsMENBQTBDO1FBQzFDLElBQUksQ0FBQ00sT0FBTyxHQUFHLElBQUlDO1FBQ25CLCtEQUErRDtRQUMvRCx3Q0FBd0M7UUFDeEMsNENBQTRDO1FBQzVDLGdFQUFnRTtRQUNoRSxJQUFJLENBQUNDLGNBQWMsR0FBRyxJQUFJRDtRQUMxQixJQUFJLENBQUNFLGNBQWMsR0FBRyxJQUFJdkIscUVBQW9CQSxDQUFDQywyREFBVSxDQUFDLCtCQUErQixJQUNyRixLQUFLLHFEQUFxRDtRQUM5RCxJQUFJLENBQUN1QixjQUFjLEdBQUc7UUFDdEIsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRztRQUN4QixJQUFJLENBQUNDLGlCQUFpQixHQUFHO1FBQ3pCLDRDQUE0QztRQUM1QyxnRUFBZ0U7UUFDaEUsSUFBSSxDQUFDQyx1QkFBdUIsR0FBRyxJQUFJNUIsMkNBQUlBLENBQUM7UUFDeEMsSUFBSTZCLDJCQUEyQixJQUFJaEQsa0VBQWlCQSxDQUFDLFNBQVVpRCxRQUFRO1lBQUksT0FBT1YsTUFBTWYsS0FBSyxDQUFDMEIsaUJBQWlCLENBQUNEO1FBQVcsR0FDM0gsNERBQTREO1FBQzVEO1lBQUV6QixPQUFPO1FBQU07UUFDZixJQUFJLENBQUNBLEtBQUssR0FBR0E7UUFDYixJQUFJLENBQUNDLElBQUksR0FBR0E7UUFDWixJQUFJLENBQUNDLGNBQWMsR0FBR0Esa0JBQWtCWCxPQUFPRyxNQUFNLENBQUM7UUFDdEQsSUFBSSxDQUFDVyxrQkFBa0IsR0FBR0E7UUFDMUIsSUFBSSxDQUFDSyxlQUFlLEdBQUdBO1FBQ3ZCLElBQUksQ0FBQ0MsVUFBVSxHQUFHQSxjQUFjLElBQUkxQixzREFBVUEsQ0FBQztZQUFFZSxPQUFPQTtRQUFNO1FBQzlELElBQUksQ0FBQ1EsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0ssc0JBQXNCLEdBQUdBO1FBQzlCLElBQUksQ0FBQ1YsaUJBQWlCLEdBQ2xCQSxvQkFDSXFCLHlCQUNLRyxNQUFNLENBQUN4QixrQkFDUixvRUFBb0U7UUFDcEUsaUVBQWlFO1FBQ2pFLGlFQUFpRTtRQUNqRSx1REFBdUQ7U0FDdER3QixNQUFNLENBQUNILDRCQUNWQTtRQUNWLElBQUksQ0FBQ1YsY0FBYyxHQUFHQSxrQkFBa0J2QixPQUFPRyxNQUFNLENBQUM7UUFDdEQsSUFBSyxJQUFJLENBQUNZLFdBQVcsR0FBR0EsYUFBYztZQUNsQyxJQUFJLENBQUNzQixhQUFhLEdBQUdyQyxPQUFPRyxNQUFNLENBQUM7UUFDdkM7UUFDQSxxQ0FBcUM7UUFDckNILE9BQU9zQyxjQUFjLENBQUMsSUFBSSxDQUFDTix1QkFBdUIsRUFBRSxPQUFPO1lBQ3ZETyxPQUFPO2dCQUNILE1BQU0sSUFBSUMsTUFBTTtZQUNwQjtRQUNKO0lBQ0o7SUFDQTs7O0tBR0MsR0FDRGpDLGFBQWFOLFNBQVMsQ0FBQ3dDLElBQUksR0FBRztRQUMxQixJQUFJakIsUUFBUSxJQUFJO1FBQ2hCLElBQUksQ0FBQ0MsT0FBTyxDQUFDaUIsT0FBTyxDQUFDLFNBQVVDLEtBQUssRUFBRUMsT0FBTztZQUN6Q3BCLE1BQU1xQixvQkFBb0IsQ0FBQ0Q7UUFDL0I7UUFDQSxJQUFJLENBQUNFLG9CQUFvQixDQUFDbEYsOEVBQWlCQSxDQUFDO0lBQ2hEO0lBQ0EyQyxhQUFhTixTQUFTLENBQUM2QyxvQkFBb0IsR0FBRyxTQUFVQyxLQUFLO1FBQ3pELElBQUksQ0FBQ3BCLGNBQWMsQ0FBQ2UsT0FBTyxDQUFDLFNBQVVNLE1BQU07WUFBSSxPQUFPQSxPQUFPRDtRQUFRO1FBQ3RFLElBQUksQ0FBQ3BCLGNBQWMsQ0FBQ3NCLEtBQUs7SUFDN0I7SUFDQTFDLGFBQWFOLFNBQVMsQ0FBQ2lELE1BQU0sR0FBRyxTQUFVMUMsRUFBRTtRQUN4QyxJQUFJSyxJQUFJRztRQUNSLElBQUltQyxXQUFXM0MsR0FBRzJDLFFBQVEsRUFBRUMsWUFBWTVDLEdBQUc0QyxTQUFTLEVBQUVDLHFCQUFxQjdDLEdBQUc2QyxrQkFBa0IsRUFBRUMsZ0JBQWdCOUMsR0FBRzhDLGFBQWEsRUFBRXBDLEtBQUtWLEdBQUcrQyxjQUFjLEVBQUVBLGlCQUFpQnJDLE9BQU8sS0FBSyxJQUFJLEVBQUUsR0FBR0EsSUFBSUcsS0FBS2IsR0FBR2dELG1CQUFtQixFQUFFQSxzQkFBc0JuQyxPQUFPLEtBQUssSUFBSSxRQUFRQSxJQUFJb0Msb0JBQW9CakQsR0FBR2tELE1BQU0sRUFBRUMsaUJBQWlCbkQsR0FBR21ELGNBQWMsRUFBRUMsS0FBS3BELEdBQUdxRCxXQUFXLEVBQUVBLGNBQWNELE9BQU8sS0FBSyxJQUFJLENBQUMsQ0FBQy9DLEtBQUssSUFBSSxDQUFDRixjQUFjLENBQUN1QyxNQUFNLE1BQU0sUUFBUXJDLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR2dELFdBQVcsS0FBSyxpQkFBaUJELElBQUlFLEtBQUt0RCxHQUFHdUQsV0FBVyxFQUFFQSxjQUFjRCxPQUFPLEtBQUssSUFBSSxDQUFDLENBQUM5QyxLQUFLLElBQUksQ0FBQ0wsY0FBYyxDQUFDdUMsTUFBTSxNQUFNLFFBQVFsQyxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUcrQyxXQUFXLEtBQUssU0FBU0QsSUFBSUUsaUJBQWlCeEQsR0FBR3dELGNBQWMsRUFBRUMsVUFBVXpELEdBQUd5RCxPQUFPO1FBQzlzQixPQUFPeEcsZ0RBQVNBLENBQUMsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7WUFDbkMsSUFBSXlHLFlBQVkzRixrQkFBa0I0RixvQkFBb0JDLGNBQWNDO1lBQ3BFLE9BQU8zRyxrREFBV0EsQ0FBQyxJQUFJLEVBQUUsU0FBVTRHLEVBQUU7Z0JBQ2pDLE9BQVFBLEdBQUdDLEtBQUs7b0JBQ1osS0FBSzt3QkFDRDVHLHNFQUFTQSxDQUFDd0YsVUFBVTt3QkFDcEJ4RixzRUFBU0EsQ0FBQ2tHLGdCQUFnQixrQkFBa0JBLGdCQUFnQixZQUFZO3dCQUN4RUssYUFBYSxJQUFJLENBQUNNLGtCQUFrQjt3QkFDcENyQixXQUFXLElBQUksQ0FBQzFDLEtBQUssQ0FBQ2dFLGdCQUFnQixDQUFDLElBQUksQ0FBQ0MsU0FBUyxDQUFDdkI7d0JBQ3RENUUsbUJBQW1CLElBQUksQ0FBQ29HLGVBQWUsQ0FBQ3hCLFVBQVU1RSxnQkFBZ0I7d0JBQ2xFNkUsWUFBWSxJQUFJLENBQUN3QixZQUFZLENBQUN6QixVQUFVQzt3QkFDeEMsSUFBSSxDQUFDN0Usa0JBQWtCLE9BQU87NEJBQUMsRUFBRSxPQUFPOzRCQUFJO3lCQUFFO3dCQUM5QyxPQUFPOzRCQUFDLEVBQUUsT0FBTzs0QkFBSSxJQUFJLENBQUM2QyxVQUFVLENBQUN5RCxvQkFBb0IsQ0FBQzFCLFVBQVVDLFdBQVdhO3lCQUFTO29CQUM1RixLQUFLO3dCQUNEYixZQUFha0IsR0FBR1EsSUFBSTt3QkFDcEJSLEdBQUdDLEtBQUssR0FBRztvQkFDZixLQUFLO3dCQUNESixxQkFBcUIsSUFBSSxDQUFDOUIsYUFBYSxJQUNsQyxLQUFJLENBQUNBLGFBQWEsQ0FBQzZCLFdBQVcsR0FBRzs0QkFDOUJmLFVBQVVBOzRCQUNWQyxXQUFXQTs0QkFDWDJCLFNBQVM7NEJBQ1RoQyxPQUFPO3dCQUNYO3dCQUNKcUIsZUFBZWYsc0JBQ1gsSUFBSSxDQUFDMkIsc0JBQXNCLENBQUMzQixvQkFBb0I7NEJBQzVDYSxZQUFZQTs0QkFDWmhDLFVBQVVpQjs0QkFDVkMsV0FBV0E7NEJBQ1hTLGFBQWFBOzRCQUNiRSxhQUFhQTs0QkFDYkUsU0FBU0E7NEJBQ1RYLGVBQWVBOzRCQUNmSSxRQUFRRDs0QkFDUk8sZ0JBQWdCQTt3QkFDcEI7d0JBQ0osSUFBSSxDQUFDaUIsZ0JBQWdCO3dCQUNyQlosT0FBTyxJQUFJO3dCQUNYLE9BQU87NEJBQUMsRUFBRSxRQUFROzRCQUFJLElBQUlhLFFBQVEsU0FBVUMsT0FBTyxFQUFFQyxNQUFNO2dDQUNuRCxPQUFPekcsNkRBQVFBLENBQUMwRixLQUFLZ0IscUJBQXFCLENBQUNsQyxVQUFVM0YsK0NBQVFBLENBQUNBLCtDQUFRQSxDQUFDLENBQUMsR0FBR3lHLFVBQVU7b0NBQUVaLG9CQUFvQmUsZUFBZWYscUJBQXFCLEtBQUs7Z0NBQUUsSUFBSUQsV0FBVyxRQUFRLFNBQVVrQyxNQUFNO29DQUN6TCxJQUFJOUcsMEVBQXFCQSxDQUFDOEcsV0FBV3ZCLGdCQUFnQixRQUFRO3dDQUN6RCxNQUFNLElBQUk1RSwwREFBV0EsQ0FBQzs0Q0FDbEJvRyxlQUFlOUcsK0VBQTBCQSxDQUFDNkc7d0NBQzlDO29DQUNKO29DQUNBLElBQUluQixvQkFBb0I7d0NBQ3BCQSxtQkFBbUJZLE9BQU8sR0FBRzt3Q0FDN0JaLG1CQUFtQnBCLEtBQUssR0FBRztvQ0FDL0I7b0NBQ0EsSUFBSXlDLGNBQWNoSSwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUc4SDtvQ0FDL0IsSUFBSSxPQUFPL0IsbUJBQW1CLFlBQVk7d0NBQ3RDQSxpQkFBaUJBLGVBQWVpQztvQ0FDcEM7b0NBQ0EsSUFBSXpCLGdCQUFnQixZQUFZdkYsMEVBQXFCQSxDQUFDZ0gsY0FBYzt3Q0FDaEUsT0FBT0EsWUFBWUMsTUFBTTtvQ0FDN0I7b0NBQ0EsT0FBT3BCLEtBQUtxQixrQkFBa0IsQ0FBQzt3Q0FDM0J4QixZQUFZQTt3Q0FDWm9CLFFBQVFFO3dDQUNSdEQsVUFBVWlCO3dDQUNWQyxXQUFXQTt3Q0FDWFMsYUFBYUE7d0NBQ2JFLGFBQWFBO3dDQUNiRSxTQUFTQTt3Q0FDVFAsUUFBUUQ7d0NBQ1JILGVBQWVBO3dDQUNmRSxxQkFBcUJBO3dDQUNyQkQsZ0JBQWdCQTt3Q0FDaEJvQyxrQkFBa0J2QixlQUFlRixhQUFhLEtBQUs7d0NBQ25EUCxnQkFBZ0JBO3dDQUNoQkssZ0JBQWdCQTtvQ0FDcEI7Z0NBQ0osR0FBRzRCLFNBQVMsQ0FBQztvQ0FDVEMsTUFBTSxTQUFVTCxXQUFXO3dDQUN2Qm5CLEtBQUtZLGdCQUFnQjt3Q0FDckIsMkRBQTJEO3dDQUMzRCxpREFBaUQ7d0NBQ2pELDZEQUE2RDt3Q0FDN0QsNkRBQTZEO3dDQUM3RCwyQ0FBMkM7d0NBQzNDLElBQUksQ0FBRSxjQUFhTyxXQUFVLEtBQU1BLFlBQVlNLE9BQU8sS0FBSyxPQUFPOzRDQUM5RFgsUUFBUUs7d0NBQ1o7b0NBQ0o7b0NBQ0F6QyxPQUFPLFNBQVVnRCxHQUFHO3dDQUNoQixJQUFJNUIsb0JBQW9COzRDQUNwQkEsbUJBQW1CWSxPQUFPLEdBQUc7NENBQzdCWixtQkFBbUJwQixLQUFLLEdBQUdnRDt3Q0FDL0I7d0NBQ0EsSUFBSTNCLGNBQWM7NENBQ2RDLEtBQUs1RCxLQUFLLENBQUNrRixnQkFBZ0IsQ0FBQ3pCO3dDQUNoQzt3Q0FDQUcsS0FBS1ksZ0JBQWdCO3dDQUNyQkcsT0FBT1csZUFBZTVHLDBEQUFXQSxHQUFHNEcsTUFBTyxJQUFJNUcsMERBQVdBLENBQUM7NENBQ3ZENkcsY0FBY0Q7d0NBQ2xCO29DQUNKO2dDQUNKOzRCQUNKO3lCQUFHO2dCQUNmO1lBQ0o7UUFDSjtJQUNKO0lBQ0F4RixhQUFhTixTQUFTLENBQUN5RixrQkFBa0IsR0FBRyxTQUFVdkMsUUFBUSxFQUFFMUMsS0FBSztRQUNqRSxJQUFJZSxRQUFRLElBQUk7UUFDaEIsSUFBSWYsVUFBVSxLQUFLLEdBQUc7WUFBRUEsUUFBUSxJQUFJLENBQUNBLEtBQUs7UUFBRTtRQUM1QyxJQUFJNkUsU0FBU25DLFNBQVNtQyxNQUFNO1FBQzVCLElBQUlXLGNBQWMsRUFBRTtRQUNwQixJQUFJQyxZQUFZL0MsU0FBU1UsV0FBVyxLQUFLO1FBQ3pDLElBQUksQ0FBQ3FDLGFBQWF0RyxpRUFBaUJBLENBQUMwRixRQUFRbkMsU0FBU1ksV0FBVyxHQUFHO1lBQy9ELElBQUksQ0FBQy9GLHVGQUFpQ0EsQ0FBQ3NILFNBQVM7Z0JBQzVDVyxZQUFZRSxJQUFJLENBQUM7b0JBQ2JiLFFBQVFBLE9BQU9jLElBQUk7b0JBQ25CQyxRQUFRO29CQUNSQyxPQUFPbkQsU0FBU2pCLFFBQVE7b0JBQ3hCa0IsV0FBV0QsU0FBU0MsU0FBUztnQkFDakM7WUFDSjtZQUNBLElBQUlwRix1RkFBaUNBLENBQUNzSCxXQUNsQzFHLHFFQUFlQSxDQUFDMEcsT0FBT2lCLFdBQVcsR0FBRztnQkFDckMsSUFBSUMsT0FBTy9GLE1BQU0rRixJQUFJLENBQUM7b0JBQ2xCQyxJQUFJO29CQUNKLDhEQUE4RDtvQkFDOUQsZ0VBQWdFO29CQUNoRSw4Q0FBOEM7b0JBQzlDSCxPQUFPLElBQUksQ0FBQzNCLGVBQWUsQ0FBQ3hCLFNBQVNqQixRQUFRLEVBQUV3RSxPQUFPO29CQUN0RHRELFdBQVdELFNBQVNDLFNBQVM7b0JBQzdCdUQsWUFBWTtvQkFDWkMsbUJBQW1CO2dCQUN2QjtnQkFDQSxJQUFJQyxhQUFhLEtBQUs7Z0JBQ3RCLElBQUlMLEtBQUtsQixNQUFNLEVBQUU7b0JBQ2J1QixhQUFhM0gsMEVBQW9CQSxDQUFDc0gsS0FBS2xCLE1BQU0sRUFBRUE7Z0JBQ25EO2dCQUNBLElBQUksT0FBT3VCLGVBQWUsYUFBYTtvQkFDbkMsMERBQTBEO29CQUMxRCxzRUFBc0U7b0JBQ3RFdkIsT0FBT2MsSUFBSSxHQUFHUztvQkFDZFosWUFBWUUsSUFBSSxDQUFDO3dCQUNiYixRQUFRdUI7d0JBQ1JSLFFBQVE7d0JBQ1JDLE9BQU9uRCxTQUFTakIsUUFBUTt3QkFDeEJrQixXQUFXRCxTQUFTQyxTQUFTO29CQUNqQztnQkFDSjtZQUNKO1lBQ0EsSUFBSTBELGtCQUFrQjNELFNBQVNHLGFBQWE7WUFDNUMsSUFBSXdELGlCQUFpQjtnQkFDakIsSUFBSSxDQUFDckYsT0FBTyxDQUFDaUIsT0FBTyxDQUFDLFNBQVVsQyxFQUFFLEVBQUVvQyxPQUFPO29CQUN0QyxJQUFJbUUsa0JBQWtCdkcsR0FBR3VHLGVBQWU7b0JBQ3hDLElBQUlDLFlBQVlELG1CQUFtQkEsZ0JBQWdCQyxTQUFTO29CQUM1RCxJQUFJLENBQUNBLGFBQWEsQ0FBQ2pILGVBQWVrSCxJQUFJLENBQUNILGlCQUFpQkUsWUFBWTt3QkFDaEU7b0JBQ0o7b0JBQ0EsSUFBSUUsVUFBVUosZUFBZSxDQUFDRSxVQUFVO29CQUN4QyxJQUFJbkcsS0FBS1csTUFBTUMsT0FBTyxDQUFDMEYsR0FBRyxDQUFDdkUsVUFBVVYsV0FBV3JCLEdBQUdxQixRQUFRLEVBQUVrQixZQUFZdkMsR0FBR3VDLFNBQVM7b0JBQ3JGLGdEQUFnRDtvQkFDaEQsSUFBSXBDLEtBQUtQLE1BQU0rRixJQUFJLENBQUM7d0JBQ2hCRixPQUFPcEU7d0JBQ1BrQixXQUFXQTt3QkFDWHdELG1CQUFtQjt3QkFDbkJELFlBQVk7b0JBQ2hCLElBQUlTLHFCQUFxQnBHLEdBQUdzRSxNQUFNLEVBQUUrQixXQUFXckcsR0FBR3FHLFFBQVE7b0JBQzFELElBQUlBLFlBQVlELG9CQUFvQjt3QkFDaEMsMEVBQTBFO3dCQUMxRSxJQUFJRSxrQkFBa0JKLFFBQVFFLG9CQUFvQjs0QkFDOUNHLGdCQUFnQmpDOzRCQUNoQjBCLFdBQVcsWUFBYTFJLHNFQUFnQkEsQ0FBQzRELGFBQWMsS0FBSzs0QkFDNURzRixnQkFBZ0JwRTt3QkFDcEI7d0JBQ0Esd0VBQXdFO3dCQUN4RSxJQUFJa0UsaUJBQWlCOzRCQUNqQnJCLFlBQVlFLElBQUksQ0FBQztnQ0FDYmIsUUFBUWdDO2dDQUNSakIsUUFBUTtnQ0FDUkMsT0FBT3BFO2dDQUNQa0IsV0FBV0E7NEJBQ2Y7d0JBQ0o7b0JBQ0o7Z0JBQ0o7WUFDSjtRQUNKO1FBQ0EsSUFBSTZDLFlBQVl3QixNQUFNLEdBQUcsS0FDckJ0RSxTQUFTSSxjQUFjLElBQ3ZCSixTQUFTTyxNQUFNLElBQ2ZQLFNBQVNRLGNBQWMsSUFDdkJSLFNBQVN3QyxnQkFBZ0IsRUFBRTtZQUMzQixJQUFJK0IsWUFBWSxFQUFFO1lBQ2xCLElBQUksQ0FBQ25FLGNBQWMsQ0FBQztnQkFDaEJvRSxhQUFhLFNBQVVsSCxLQUFLO29CQUN4QixJQUFJLENBQUN5RixXQUFXO3dCQUNaRCxZQUFZdkQsT0FBTyxDQUFDLFNBQVVrRixLQUFLOzRCQUFJLE9BQU9uSCxNQUFNbUgsS0FBSyxDQUFDQTt3QkFBUTtvQkFDdEU7b0JBQ0EscUVBQXFFO29CQUNyRSxxRUFBcUU7b0JBQ3JFLGtCQUFrQjtvQkFDbEIsSUFBSWxFLFNBQVNQLFNBQVNPLE1BQU07b0JBQzVCLHVEQUF1RDtvQkFDdkQscUNBQXFDO29CQUNyQyxJQUFJbUUsZ0JBQWdCLENBQUM1Siw0RUFBc0JBLENBQUNxSCxXQUN2Q3RILHVGQUFpQ0EsQ0FBQ3NILFdBQVcsQ0FBQ0EsT0FBT1EsT0FBTztvQkFDakUsSUFBSXBDLFFBQVE7d0JBQ1IsSUFBSSxDQUFDd0MsV0FBVzs0QkFDWiw4REFBOEQ7NEJBQzlELDhEQUE4RDs0QkFDOUQsMkRBQTJEOzRCQUMzRCx5Q0FBeUM7NEJBQ3pDLElBQUlNLE9BQU8vRixNQUFNK0YsSUFBSSxDQUFDO2dDQUNsQkMsSUFBSTtnQ0FDSiw4REFBOEQ7Z0NBQzlELGdFQUFnRTtnQ0FDaEUsOENBQThDO2dDQUM5Q0gsT0FBTzlFLE1BQU1tRCxlQUFlLENBQUN4QixTQUFTakIsUUFBUSxFQUFFd0UsT0FBTztnQ0FDdkR0RCxXQUFXRCxTQUFTQyxTQUFTO2dDQUM3QnVELFlBQVk7Z0NBQ1pDLG1CQUFtQjs0QkFDdkI7NEJBQ0EsSUFBSUosS0FBS2EsUUFBUSxFQUFFO2dDQUNmL0IsU0FBUzlILCtDQUFRQSxDQUFDQSwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUc4SCxTQUFTO29DQUFFYyxNQUFNSSxLQUFLbEIsTUFBTTtnQ0FBQztnQ0FDNUQsSUFBSSxpQkFBaUJBLFFBQVE7b0NBQ3pCLE9BQU9BLE9BQU9pQixXQUFXO2dDQUM3QjtnQ0FDQSxJQUFJLGFBQWFqQixRQUFRO29DQUNyQixPQUFPQSxPQUFPUSxPQUFPO2dDQUN6Qjs0QkFDSjt3QkFDSjt3QkFDQSx3Q0FBd0M7d0JBQ3hDLG9FQUFvRTt3QkFDcEUsNEJBQTRCO3dCQUM1QixJQUFJK0IsZUFBZTs0QkFDZm5FLE9BQU9qRCxPQUFPNkUsUUFBUTtnQ0FDbEJyQixTQUFTZCxTQUFTYyxPQUFPO2dDQUN6QmIsV0FBV0QsU0FBU0MsU0FBUzs0QkFDakM7d0JBQ0o7b0JBQ0o7b0JBQ0EscUVBQXFFO29CQUNyRSxzREFBc0Q7b0JBQ3RELElBQUksQ0FBQzhDLGFBQWEsQ0FBQy9DLFNBQVNhLGNBQWMsSUFBSTZELGVBQWU7d0JBQ3pEcEgsTUFBTXFILE1BQU0sQ0FBQzs0QkFDVHJCLElBQUk7NEJBQ0pzQixRQUFRLFNBQVV4RixLQUFLLEVBQUUvQixFQUFFO2dDQUN2QixJQUFJd0gsWUFBWXhILEdBQUd3SCxTQUFTLEVBQUVDLFNBQVN6SCxHQUFHeUgsTUFBTTtnQ0FDaEQsT0FBT0QsY0FBYyxlQUFlekYsUUFBUTBGOzRCQUNoRDt3QkFDSjtvQkFDSjtnQkFDSjtnQkFDQUMsU0FBUy9FLFNBQVNJLGNBQWM7Z0JBQ2hDLGtFQUFrRTtnQkFDbEVvRCxZQUFZO2dCQUNaLG1FQUFtRTtnQkFDbkUseUNBQXlDO2dCQUN6Q2hCLGtCQUFrQnhDLFNBQVN3QyxnQkFBZ0I7Z0JBQzNDLHNFQUFzRTtnQkFDdEUsd0VBQXdFO2dCQUN4RSxxRUFBcUU7Z0JBQ3JFLHdFQUF3RTtnQkFDeEVoQyxnQkFBZ0JSLFNBQVNRLGNBQWMsSUFBSTtZQUMvQyxHQUFHakIsT0FBTyxDQUFDLFNBQVU0QyxNQUFNO2dCQUFJLE9BQU9vQyxVQUFVdkIsSUFBSSxDQUFDYjtZQUFTO1lBQzlELElBQUluQyxTQUFTSyxtQkFBbUIsSUFBSUwsU0FBU1EsY0FBYyxFQUFFO2dCQUN6RCx3RUFBd0U7Z0JBQ3hFLHNFQUFzRTtnQkFDdEUseUNBQXlDO2dCQUN6QyxPQUFPdUIsUUFBUWlELEdBQUcsQ0FBQ1QsV0FBV1UsSUFBSSxDQUFDO29CQUFjLE9BQU85QztnQkFBUTtZQUNwRTtRQUNKO1FBQ0EsT0FBT0osUUFBUUMsT0FBTyxDQUFDRztJQUMzQjtJQUNBL0UsYUFBYU4sU0FBUyxDQUFDK0Usc0JBQXNCLEdBQUcsU0FBVTNCLGtCQUFrQixFQUFFRixRQUFRO1FBQ2xGLElBQUkzQixRQUFRLElBQUk7UUFDaEIsSUFBSTRFLE9BQU8sT0FBTy9DLHVCQUF1QixhQUNyQ0EsbUJBQW1CRixTQUFTQyxTQUFTLEVBQUU7WUFBRWxELFFBQVFBO1FBQU8sS0FDdERtRDtRQUNOLElBQUkrQyxTQUFTbEcsUUFBUTtZQUNqQixPQUFPO1FBQ1g7UUFDQSxJQUFJLENBQUNPLEtBQUssQ0FBQzRILDJCQUEyQixDQUFDLFNBQVU1SCxLQUFLO1lBQ2xELElBQUk7Z0JBQ0FlLE1BQU1rRSxrQkFBa0IsQ0FBQ2xJLCtDQUFRQSxDQUFDQSwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUcyRixXQUFXO29CQUFFbUMsUUFBUTt3QkFBRWMsTUFBTUE7b0JBQUs7Z0JBQUUsSUFBSTNGO1lBQzNGLEVBQ0EsT0FBT3NDLE9BQU87Z0JBQ1Z1RixXQUFXQyxPQUFPLEtBQUssU0FBUzVLLGtFQUFTQSxDQUFDb0YsS0FBSyxDQUFDQTtZQUNwRDtRQUNKLEdBQUdJLFNBQVNlLFVBQVU7UUFDdEIsT0FBTztJQUNYO0lBQ0EzRCxhQUFhTixTQUFTLENBQUN1SSxVQUFVLEdBQUcsU0FBVTVGLE9BQU8sRUFBRTZGLE9BQU8sRUFBRUMsYUFBYTtRQUN6RSxPQUFPLElBQUksQ0FBQ0Msb0JBQW9CLENBQUMvRixTQUFTNkYsU0FBU0MsZUFBZUUsT0FBTyxDQUNwRUMsT0FBTztJQUNoQjtJQUNBdEksYUFBYU4sU0FBUyxDQUFDNkksYUFBYSxHQUFHO1FBQ25DLElBQUlDLFFBQVEvSSxPQUFPRyxNQUFNLENBQUM7UUFDMUIsSUFBSSxDQUFDc0IsT0FBTyxDQUFDaUIsT0FBTyxDQUFDLFNBQVVzRyxJQUFJLEVBQUVwRyxPQUFPO1lBQ3hDbUcsS0FBSyxDQUFDbkcsUUFBUSxHQUFHO2dCQUNiUSxXQUFXNEYsS0FBSzVGLFNBQVM7Z0JBQ3pCc0YsZUFBZU0sS0FBS04sYUFBYTtnQkFDakMxQyxjQUFjZ0QsS0FBS2hELFlBQVk7Z0JBQy9CVCxlQUFleUQsS0FBS3pELGFBQWE7WUFDckM7UUFDSjtRQUNBLE9BQU93RDtJQUNYO0lBQ0F4SSxhQUFhTixTQUFTLENBQUNnSixXQUFXLEdBQUcsU0FBVXJHLE9BQU87UUFDbEQsSUFBSXNHLFlBQVksSUFBSSxDQUFDekgsT0FBTyxDQUFDMEYsR0FBRyxDQUFDdkU7UUFDakMsSUFBSXNHLFdBQVc7WUFDWEEsVUFBVWxELFlBQVksR0FBR21EO1lBQ3pCRCxVQUFVM0QsYUFBYSxHQUFHLEVBQUU7UUFDaEM7SUFDSjtJQUNBaEYsYUFBYU4sU0FBUyxDQUFDeUUsU0FBUyxHQUFHLFNBQVV4QyxRQUFRO1FBQ2pELE9BQU8sSUFBSSxDQUFDdEIsaUJBQWlCLENBQUN1QixpQkFBaUIsQ0FBQ0Q7SUFDcEQ7SUFDQTNCLGFBQWFOLFNBQVMsQ0FBQzBFLGVBQWUsR0FBRyxTQUFVekMsUUFBUTtRQUN2RCxJQUFJTixpQkFBaUIsSUFBSSxDQUFDQSxjQUFjO1FBQ3hDLElBQUksQ0FBQ0EsZUFBZXdILEdBQUcsQ0FBQ2xILFdBQVc7WUFDL0IsSUFBSW1ILGFBQWE7Z0JBQ2Isc0VBQXNFO2dCQUN0RSx1RUFBdUU7Z0JBQ3ZFLGdFQUFnRTtnQkFDaEUsa0VBQWtFO2dCQUNsRSwrQkFBK0I7Z0JBQy9COUssa0JBQWtCQSxzRUFBZ0JBLENBQUMyRDtnQkFDbkNvSCxvQkFBb0IsSUFBSSxDQUFDbEksVUFBVSxDQUFDbUksb0JBQW9CLENBQUNySDtnQkFDekRzSCx5QkFBeUJ6TCxtRUFBYUEsQ0FBQztvQkFBQztpQkFBYyxFQUFFbUU7Z0JBQ3hEdUgsYUFBYSxJQUFJLENBQUNySSxVQUFVLENBQUNxSSxXQUFXLENBQUN2SDtnQkFDekN3SCxhQUFheEwsa0ZBQTRCQSxDQUFDO29CQUN0Qzt3QkFBRXlMLE1BQU07d0JBQVVDLFFBQVE7b0JBQUs7b0JBQy9CO3dCQUFFRCxNQUFNO29CQUFhO29CQUNyQjt3QkFBRUEsTUFBTTtvQkFBYztpQkFDekIsRUFBRXpIO2dCQUNIMkgsYUFBYXpMLHNFQUFnQkEsQ0FBQ0MsNEVBQXNCQSxDQUFDNkQ7Z0JBQ3JELHdFQUF3RTtnQkFDeEUsK0NBQStDO2dCQUMvQ3dFLFNBQVNsSiwrQ0FBUUEsQ0FBQ0EsK0NBQVFBLENBQUMsQ0FBQyxHQUFHMEUsV0FBVztvQkFBRTRILGFBQWE1SCxTQUFTNEgsV0FBVyxDQUFDQyxHQUFHLENBQUMsU0FBVUMsR0FBRzt3QkFDdkYsSUFBSUEsSUFBSUMsSUFBSSxLQUFLLHlCQUNiRCxJQUFJRSxTQUFTLEtBQUssU0FBUzs0QkFDM0IsT0FBTzFNLCtDQUFRQSxDQUFDQSwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUd3TSxNQUFNO2dDQUFFRSxXQUFXOzRCQUFRO3dCQUM1RDt3QkFDQSxPQUFPRjtvQkFDWDtnQkFBRztZQUNYO1lBQ0FwSSxlQUFldUksR0FBRyxDQUFDakksVUFBVW1IO1FBQ2pDO1FBQ0EsT0FBT3pILGVBQWV1RixHQUFHLENBQUNqRjtJQUM5QjtJQUNBM0IsYUFBYU4sU0FBUyxDQUFDMkUsWUFBWSxHQUFHLFNBQVUxQyxRQUFRLEVBQUVrQixTQUFTO1FBQy9ELE9BQU81RiwrQ0FBUUEsQ0FBQ0EsK0NBQVFBLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQ21ILGVBQWUsQ0FBQ3pDLFVBQVUySCxXQUFXLEdBQUd6RztJQUM5RTtJQUNBN0MsYUFBYU4sU0FBUyxDQUFDbUssVUFBVSxHQUFHLFNBQVUzQixPQUFPO1FBQ2pELElBQUluQyxRQUFRLElBQUksQ0FBQzVCLFNBQVMsQ0FBQytELFFBQVFuQyxLQUFLO1FBQ3hDLDZDQUE2QztRQUM3Qyx5RUFBeUU7UUFDekUseUVBQXlFO1FBQ3pFbUMsVUFBVWpMLCtDQUFRQSxDQUFDQSwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUdpTCxVQUFVO1lBQUVyRixXQUFXLElBQUksQ0FBQ3dCLFlBQVksQ0FBQzBCLE9BQU9tQyxRQUFRckYsU0FBUztRQUFFO1FBQ25HLElBQUksT0FBT3FGLFFBQVE0QiwyQkFBMkIsS0FBSyxhQUFhO1lBQzVENUIsUUFBUTRCLDJCQUEyQixHQUFHO1FBQzFDO1FBQ0EsSUFBSW5CLFlBQVksSUFBSXZKLHFEQUFTQSxDQUFDLElBQUk7UUFDbEMsSUFBSTJLLGFBQWEsSUFBSWhMLGlFQUFlQSxDQUFDO1lBQ2pDaUwsY0FBYyxJQUFJO1lBQ2xCckIsV0FBV0E7WUFDWFQsU0FBU0E7UUFDYjtRQUNBNkIsVUFBVSxDQUFDLFlBQVksR0FBR2hFO1FBQzFCLElBQUksQ0FBQzdFLE9BQU8sQ0FBQzBJLEdBQUcsQ0FBQ0csV0FBVzFILE9BQU8sRUFBRXNHO1FBQ3JDLHlFQUF5RTtRQUN6RSxzREFBc0Q7UUFDdERBLFVBQVVzQixJQUFJLENBQUM7WUFDWHRJLFVBQVVvRTtZQUNWUyxpQkFBaUJ1RDtZQUNqQmxILFdBQVdrSCxXQUFXbEgsU0FBUztRQUNuQztRQUNBLE9BQU9rSDtJQUNYO0lBQ0EvSixhQUFhTixTQUFTLENBQUNxRyxLQUFLLEdBQUcsU0FBVW1DLE9BQU8sRUFBRTdGLE9BQU87UUFDckQsSUFBSXBCLFFBQVEsSUFBSTtRQUNoQixJQUFJb0IsWUFBWSxLQUFLLEdBQUc7WUFBRUEsVUFBVSxJQUFJLENBQUM2SCxlQUFlO1FBQUk7UUFDNUQ5TSxzRUFBU0EsQ0FBQzhLLFFBQVFuQyxLQUFLLEVBQUU7UUFDekIzSSxzRUFBU0EsQ0FBQzhLLFFBQVFuQyxLQUFLLENBQUMyRCxJQUFJLEtBQUssWUFBWTtRQUM3Q3RNLHNFQUFTQSxDQUFDLENBQUM4SyxRQUFRN0IsaUJBQWlCLEVBQUU7UUFDdENqSixzRUFBU0EsQ0FBQyxDQUFDOEssUUFBUWlDLFlBQVksRUFBRTtRQUNqQyxPQUFPLElBQUksQ0FBQ2xDLFVBQVUsQ0FBQzVGLFNBQVNwRiwrQ0FBUUEsQ0FBQ0EsK0NBQVFBLENBQUMsQ0FBQyxHQUFHaUwsVUFBVTtZQUFFbkMsT0FBTyxJQUFJLENBQUM1QixTQUFTLENBQUMrRCxRQUFRbkMsS0FBSztRQUFFLElBQUlxRSxPQUFPLENBQUM7WUFBYyxPQUFPbkosTUFBTW9KLFNBQVMsQ0FBQ2hJO1FBQVU7SUFDdEs7SUFDQXJDLGFBQWFOLFNBQVMsQ0FBQ3dLLGVBQWUsR0FBRztRQUNyQyxPQUFPSSxPQUFPLElBQUksQ0FBQ2hKLGNBQWM7SUFDckM7SUFDQXRCLGFBQWFOLFNBQVMsQ0FBQzZLLGlCQUFpQixHQUFHO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDaEosZ0JBQWdCO0lBQ2hDO0lBQ0F2QixhQUFhTixTQUFTLENBQUN1RSxrQkFBa0IsR0FBRztRQUN4QyxPQUFPcUcsT0FBTyxJQUFJLENBQUM5SSxpQkFBaUI7SUFDeEM7SUFDQXhCLGFBQWFOLFNBQVMsQ0FBQzhLLGdCQUFnQixHQUFHLFNBQVVuSSxPQUFPO1FBQ3ZELElBQUksQ0FBQ29JLDJCQUEyQixDQUFDcEk7UUFDakMsSUFBSSxDQUFDcUMsZ0JBQWdCO0lBQ3pCO0lBQ0ExRSxhQUFhTixTQUFTLENBQUMrSywyQkFBMkIsR0FBRyxTQUFVcEksT0FBTztRQUNsRSxJQUFJc0csWUFBWSxJQUFJLENBQUN6SCxPQUFPLENBQUMwRixHQUFHLENBQUN2RTtRQUNqQyxJQUFJc0csV0FDQUEsVUFBVXpHLElBQUk7SUFDdEI7SUFDQWxDLGFBQWFOLFNBQVMsQ0FBQ2dMLFVBQVUsR0FBRyxTQUFVeEMsT0FBTztRQUNqRCxJQUFJQSxZQUFZLEtBQUssR0FBRztZQUFFQSxVQUFVO2dCQUNoQ3lDLGdCQUFnQjtZQUNwQjtRQUFHO1FBQ0gsc0VBQXNFO1FBQ3RFLHFFQUFxRTtRQUNyRSxzRUFBc0U7UUFDdEUsc0VBQXNFO1FBQ3RFLHdEQUF3RDtRQUN4RCxJQUFJLENBQUNwSSxvQkFBb0IsQ0FBQ2xGLDhFQUFpQkEsQ0FBQztRQUM1QyxJQUFJLENBQUM2RCxPQUFPLENBQUNpQixPQUFPLENBQUMsU0FBVXdHLFNBQVM7WUFDcEMsSUFBSUEsVUFBVW5DLGVBQWUsRUFBRTtnQkFDM0Isa0VBQWtFO2dCQUNsRSw2QkFBNkI7Z0JBQzdCbUMsVUFBVVIsYUFBYSxHQUFHbEosNkRBQWFBLENBQUN1RixPQUFPO1lBQ25ELE9BQ0s7Z0JBQ0RtRSxVQUFVekcsSUFBSTtZQUNsQjtRQUNKO1FBQ0EsSUFBSSxJQUFJLENBQUNKLGFBQWEsRUFBRTtZQUNwQixJQUFJLENBQUNBLGFBQWEsR0FBR3JDLE9BQU9HLE1BQU0sQ0FBQztRQUN2QztRQUNBLHFDQUFxQztRQUNyQyxPQUFPLElBQUksQ0FBQ00sS0FBSyxDQUFDMEssS0FBSyxDQUFDMUM7SUFDNUI7SUFDQWxJLGFBQWFOLFNBQVMsQ0FBQ21MLG9CQUFvQixHQUFHLFNBQVVsRCxPQUFPO1FBQzNELElBQUkxRyxRQUFRLElBQUk7UUFDaEIsSUFBSTBHLFlBQVksS0FBSyxHQUFHO1lBQUVBLFVBQVU7UUFBVTtRQUM5QyxJQUFJekcsVUFBVSxJQUFJQztRQUNsQixJQUFJMkosb0JBQW9CLElBQUkzSjtRQUM1QixJQUFJNEoscUJBQXFCLElBQUlDO1FBQzdCLElBQUlDLE1BQU1DLE9BQU8sQ0FBQ3ZELFVBQVU7WUFDeEJBLFFBQVF4RixPQUFPLENBQUMsU0FBVWdKLElBQUk7Z0JBQzFCLElBQUksT0FBT0EsU0FBUyxVQUFVO29CQUMxQkwsa0JBQWtCbEIsR0FBRyxDQUFDdUIsTUFBTTtnQkFDaEMsT0FDSyxJQUFJM00sb0VBQWNBLENBQUMyTSxPQUFPO29CQUMzQkwsa0JBQWtCbEIsR0FBRyxDQUFDM0ksTUFBTWtELFNBQVMsQ0FBQ2dILE9BQU87Z0JBQ2pELE9BQ0ssSUFBSTFNLHFFQUFlQSxDQUFDME0sU0FBU0EsS0FBS3BGLEtBQUssRUFBRTtvQkFDMUNnRixtQkFBbUJLLEdBQUcsQ0FBQ0Q7Z0JBQzNCO1lBQ0o7UUFDSjtRQUNBLElBQUksQ0FBQ2pLLE9BQU8sQ0FBQ2lCLE9BQU8sQ0FBQyxTQUFVbEMsRUFBRSxFQUFFb0MsT0FBTztZQUN0QyxJQUFJZ0osS0FBS3BMLEdBQUd1RyxlQUFlLEVBQUU3RSxXQUFXMUIsR0FBRzBCLFFBQVE7WUFDbkQsSUFBSTBKLElBQUk7Z0JBQ0osSUFBSTFELFlBQVksT0FBTztvQkFDbkJ6RyxRQUFRMEksR0FBRyxDQUFDdkgsU0FBU2dKO29CQUNyQjtnQkFDSjtnQkFDQSxJQUFJNUUsWUFBWTRFLEdBQUc1RSxTQUFTLEVBQUVuRCxjQUFjK0gsR0FBR25ELE9BQU8sQ0FBQzVFLFdBQVc7Z0JBQ2xFLElBQUlBLGdCQUFnQixhQUNmcUUsWUFBWSxZQUFZLENBQUMwRCxHQUFHQyxZQUFZLElBQUs7b0JBQzlDO2dCQUNKO2dCQUNBLElBQUkzRCxZQUFZLFlBQ1hsQixhQUFhcUUsa0JBQWtCakMsR0FBRyxDQUFDcEMsY0FDbkM5RSxZQUFZbUosa0JBQWtCakMsR0FBRyxDQUFDbEgsV0FBWTtvQkFDL0NULFFBQVEwSSxHQUFHLENBQUN2SCxTQUFTZ0o7b0JBQ3JCLElBQUk1RSxXQUNBcUUsa0JBQWtCbEIsR0FBRyxDQUFDbkQsV0FBVztvQkFDckMsSUFBSTlFLFVBQ0FtSixrQkFBa0JsQixHQUFHLENBQUNqSSxVQUFVO2dCQUN4QztZQUNKO1FBQ0o7UUFDQSxJQUFJb0osbUJBQW1CUSxJQUFJLEVBQUU7WUFDekJSLG1CQUFtQjVJLE9BQU8sQ0FBQyxTQUFVK0YsT0FBTztnQkFDeEMsbUVBQW1FO2dCQUNuRSxxRUFBcUU7Z0JBQ3JFLDZEQUE2RDtnQkFDN0QsSUFBSTdGLFVBQVU5RCxrRUFBWUEsQ0FBQztnQkFDM0IsSUFBSW9LLFlBQVkxSCxNQUFNdUssUUFBUSxDQUFDbkosU0FBUzRILElBQUksQ0FBQztvQkFDekN0SSxVQUFVdUcsUUFBUW5DLEtBQUs7b0JBQ3ZCbEQsV0FBV3FGLFFBQVFyRixTQUFTO2dCQUNoQztnQkFDQSxJQUFJd0ksS0FBSyxJQUFJdE0saUVBQWVBLENBQUM7b0JBQ3pCaUwsY0FBYy9JO29CQUNkMEgsV0FBV0E7b0JBQ1hULFNBQVNqTCwrQ0FBUUEsQ0FBQ0EsK0NBQVFBLENBQUMsQ0FBQyxHQUFHaUwsVUFBVTt3QkFBRTVFLGFBQWE7b0JBQWU7Z0JBQzNFO2dCQUNBbEcsc0VBQVNBLENBQUNpTyxHQUFHaEosT0FBTyxLQUFLQTtnQkFDekJzRyxVQUFVOEMsa0JBQWtCLENBQUNKO2dCQUM3Qm5LLFFBQVEwSSxHQUFHLENBQUN2SCxTQUFTZ0o7WUFDekI7UUFDSjtRQUNBLElBQUl0RCxXQUFXQyxPQUFPLEtBQUssU0FBUzhDLGtCQUFrQlMsSUFBSSxFQUFFO1lBQ3hEVCxrQkFBa0IzSSxPQUFPLENBQUMsU0FBVXVKLFFBQVEsRUFBRUMsU0FBUztnQkFDbkQsSUFBSSxDQUFDRCxVQUFVO29CQUNYM0QsV0FBV0MsT0FBTyxLQUFLLFNBQVM1SyxrRUFBU0EsQ0FBQ3dPLElBQUksQ0FBQyxPQUFPRCxjQUFjLFdBQVcsS0FBSyxJQUFJQTtnQkFDNUY7WUFDSjtRQUNKO1FBQ0EsT0FBT3pLO0lBQ1g7SUFDQWxCLGFBQWFOLFNBQVMsQ0FBQ21NLHdCQUF3QixHQUFHLFNBQVVDLGNBQWM7UUFDdEUsSUFBSTdLLFFBQVEsSUFBSTtRQUNoQixJQUFJNkssbUJBQW1CLEtBQUssR0FBRztZQUFFQSxpQkFBaUI7UUFBTztRQUN6RCxJQUFJQywwQkFBMEIsRUFBRTtRQUNoQyxJQUFJLENBQUNsQixvQkFBb0IsQ0FBQ2lCLGlCQUFpQixRQUFRLFVBQVUzSixPQUFPLENBQUMsU0FBVXFFLGVBQWUsRUFBRW5FLE9BQU87WUFDbkcsSUFBSWlCLGNBQWNrRCxnQkFBZ0IwQixPQUFPLENBQUM1RSxXQUFXO1lBQ3JEa0QsZ0JBQWdCd0YsZ0JBQWdCO1lBQ2hDLElBQUlGLGtCQUNDeEksZ0JBQWdCLGFBQWFBLGdCQUFnQixjQUFlO2dCQUM3RHlJLHdCQUF3Qm5HLElBQUksQ0FBQ1ksZ0JBQWdCeUYsT0FBTztZQUN4RDtZQUNBaEwsTUFBTXVLLFFBQVEsQ0FBQ25KLFNBQVM2SixPQUFPLENBQUM7UUFDcEM7UUFDQSxJQUFJLENBQUN4SCxnQkFBZ0I7UUFDckIsT0FBT0MsUUFBUWlELEdBQUcsQ0FBQ21FO0lBQ3ZCO0lBQ0EvTCxhQUFhTixTQUFTLENBQUMrTCxrQkFBa0IsR0FBRyxTQUFVakYsZUFBZTtRQUNqRSxJQUFJLENBQUNnRixRQUFRLENBQUNoRixnQkFBZ0JuRSxPQUFPLEVBQUVvSixrQkFBa0IsQ0FBQ2pGO0lBQzlEO0lBQ0F4RyxhQUFhTixTQUFTLENBQUN5TSx3QkFBd0IsR0FBRyxTQUFVbE0sRUFBRTtRQUMxRCxJQUFJZ0IsUUFBUSxJQUFJO1FBQ2hCLElBQUk4RSxRQUFROUYsR0FBRzhGLEtBQUssRUFBRXpDLGNBQWNyRCxHQUFHcUQsV0FBVyxFQUFFaEQsS0FBS0wsR0FBR3VELFdBQVcsRUFBRUEsY0FBY2xELE9BQU8sS0FBSyxJQUFJLFNBQVNBLElBQUl1QyxZQUFZNUMsR0FBRzRDLFNBQVMsRUFBRXBDLEtBQUtSLEdBQUd5RCxPQUFPLEVBQUVBLFVBQVVqRCxPQUFPLEtBQUssSUFBSSxDQUFDLElBQUlBO1FBQzlMc0YsUUFBUSxJQUFJLENBQUM1QixTQUFTLENBQUM0QjtRQUN2QmxELFlBQVksSUFBSSxDQUFDd0IsWUFBWSxDQUFDMEIsT0FBT2xEO1FBQ3JDLElBQUl1SixpQkFBaUIsU0FBVXZKLFNBQVM7WUFDcEMsT0FBTzVCLE1BQU02RCxxQkFBcUIsQ0FBQ2lCLE9BQU9yQyxTQUFTYixXQUFXMkcsR0FBRyxDQUFDLFNBQVV6RSxNQUFNO2dCQUM5RSxJQUFJekIsZ0JBQWdCLFlBQVk7b0JBQzVCLDZGQUE2RjtvQkFDN0YseUZBQXlGO29CQUN6RixJQUFJakUsaUVBQWlCQSxDQUFDMEYsUUFBUXZCLGNBQWM7d0JBQ3hDdkMsTUFBTWYsS0FBSyxDQUFDbUgsS0FBSyxDQUFDOzRCQUNkdEIsT0FBT0E7NEJBQ1BoQixRQUFRQSxPQUFPYyxJQUFJOzRCQUNuQkMsUUFBUTs0QkFDUmpELFdBQVdBO3dCQUNmO29CQUNKO29CQUNBNUIsTUFBTXlELGdCQUFnQjtnQkFDMUI7Z0JBQ0EsSUFBSTJILFlBQVlwTywwRUFBcUJBLENBQUM4RztnQkFDdEMsSUFBSXVILG9CQUFvQnhOLGlGQUE4QkEsQ0FBQ2lHO2dCQUN2RCxJQUFJc0gsYUFBYUMsbUJBQW1CO29CQUNoQyxJQUFJcEgsU0FBUyxDQUFDO29CQUNkLElBQUltSCxXQUFXO3dCQUNYbkgsT0FBT0YsYUFBYSxHQUFHRCxPQUFPRyxNQUFNO29CQUN4QztvQkFDQSxJQUFJb0gsbUJBQW1CO3dCQUNuQnBILE9BQU9xSCxjQUFjLEdBQUd4SCxPQUFPeUgsVUFBVSxDQUFDbE4scUVBQXNCQSxDQUFDO29CQUNyRTtvQkFDQSxzRUFBc0U7b0JBQ3RFLHNFQUFzRTtvQkFDdEUsb0JBQW9CO29CQUNwQixJQUFJa0UsZ0JBQWdCLFVBQVU4SSxtQkFBbUI7d0JBQzdDLE1BQU0sSUFBSTFOLDBEQUFXQSxDQUFDc0c7b0JBQzFCO2dCQUNKO2dCQUNBLElBQUkxQixnQkFBZ0IsVUFBVTtvQkFDMUIsT0FBT3VCLE9BQU9HLE1BQU07Z0JBQ3hCO2dCQUNBLE9BQU9IO1lBQ1g7UUFDSjtRQUNBLElBQUksSUFBSSxDQUFDWCxlQUFlLENBQUMyQixPQUFPL0gsZ0JBQWdCLEVBQUU7WUFDOUMsSUFBSXlPLHNCQUFzQixJQUFJLENBQUM1TCxVQUFVLENBQ3BDeUQsb0JBQW9CLENBQUN5QixPQUFPbEQsV0FBV2EsU0FDdkNtRSxJQUFJLENBQUN1RTtZQUNWLE9BQU8sSUFBSWpPLDREQUFVQSxDQUFDLFNBQVV1TyxRQUFRO2dCQUNwQyxJQUFJQyxNQUFNO2dCQUNWRixvQkFBb0I1RSxJQUFJLENBQUMsU0FBVWtDLFVBQVU7b0JBQUksT0FBUTRDLE1BQU01QyxXQUFXMUUsU0FBUyxDQUFDcUg7Z0JBQVksR0FBR0EsU0FBU2xLLEtBQUs7Z0JBQ2pILE9BQU87b0JBQWMsT0FBT21LLE9BQU9BLElBQUlDLFdBQVc7Z0JBQUk7WUFDMUQ7UUFDSjtRQUNBLE9BQU9SLGVBQWV2SjtJQUMxQjtJQUNBN0MsYUFBYU4sU0FBUyxDQUFDMkssU0FBUyxHQUFHLFNBQVVoSSxPQUFPO1FBQ2hELElBQUksQ0FBQ0Msb0JBQW9CLENBQUNEO1FBQzFCLElBQUksQ0FBQ3FDLGdCQUFnQjtJQUN6QjtJQUNBMUUsYUFBYU4sU0FBUyxDQUFDNEMsb0JBQW9CLEdBQUcsU0FBVUQsT0FBTztRQUMzRCxJQUFJLENBQUNvSSwyQkFBMkIsQ0FBQ3BJO1FBQ2pDLElBQUksQ0FBQ3dLLFdBQVcsQ0FBQ3hLO0lBQ3JCO0lBQ0FyQyxhQUFhTixTQUFTLENBQUNtTixXQUFXLEdBQUcsU0FBVXhLLE9BQU87UUFDbEQscUJBQXFCO1FBQ3JCLHFGQUFxRjtRQUNyRiwwREFBMEQ7UUFDMUQsMkZBQTJGO1FBQzNGLGlFQUFpRTtRQUNqRSxJQUFJLENBQUNqQixjQUFjLENBQUMwTCxNQUFNLENBQUN6SztRQUMzQixJQUFJLElBQUksQ0FBQ25CLE9BQU8sQ0FBQzJILEdBQUcsQ0FBQ3hHLFVBQVU7WUFDM0IsSUFBSSxDQUFDbUosUUFBUSxDQUFDbkosU0FBU0gsSUFBSTtZQUMzQixJQUFJLENBQUNoQixPQUFPLENBQUM0TCxNQUFNLENBQUN6SztRQUN4QjtJQUNKO0lBQ0FyQyxhQUFhTixTQUFTLENBQUNnRixnQkFBZ0IsR0FBRztRQUN0QyxJQUFJLElBQUksQ0FBQ2xFLFdBQVcsRUFDaEIsSUFBSSxDQUFDQSxXQUFXO1FBQ3BCLElBQUksQ0FBQ1UsT0FBTyxDQUFDaUIsT0FBTyxDQUFDLFNBQVVzRyxJQUFJO1lBQUksT0FBT0EsS0FBS3NFLE1BQU07UUFBSTtJQUNqRTtJQUNBL00sYUFBYU4sU0FBUyxDQUFDc04sYUFBYSxHQUFHO1FBQ25DLE9BQU8sSUFBSSxDQUFDbk0sVUFBVTtJQUMxQjtJQUNBYixhQUFhTixTQUFTLENBQUNvRixxQkFBcUIsR0FBRyxTQUFVaUIsS0FBSyxFQUFFckMsT0FBTyxFQUFFYixTQUFTLEVBQ2xGLGtEQUFrRDtJQUNsRG9LLGFBQWE7UUFDVCxJQUFJaE0sUUFBUSxJQUFJO1FBQ2hCLElBQUloQjtRQUNKLElBQUlnTixrQkFBa0IsS0FBSyxHQUFHO1lBQUVBLGdCQUFnQixDQUFDaE4sS0FBS3lELFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUksS0FBSyxJQUFJQSxRQUFRbkQsa0JBQWtCLE1BQU0sUUFBUU4sT0FBTyxLQUFLLElBQUlBLEtBQUssSUFBSSxDQUFDTSxrQkFBa0I7UUFBRTtRQUM5TCxJQUFJd0o7UUFDSixJQUFJekosS0FBSyxJQUFJLENBQUM4RCxlQUFlLENBQUMyQixRQUFRb0QsY0FBYzdJLEdBQUc2SSxXQUFXLEVBQUVELGNBQWM1SSxHQUFHNEksV0FBVztRQUNoRyxJQUFJQyxhQUFhO1lBQ2IsSUFBSTFJLEtBQUssSUFBSSxFQUFFeU0sNEJBQTRCek0sR0FBR2dCLHVCQUF1QixFQUFFdEIsT0FBT00sR0FBR04sSUFBSTtZQUNyRixJQUFJd0osWUFBWTtnQkFDWjVELE9BQU9vRDtnQkFDUHRHLFdBQVdBO2dCQUNYc0ssZUFBZXBQLHNFQUFnQkEsQ0FBQ29MLGdCQUFnQixLQUFLO2dCQUNyRHpGLFNBQVMsSUFBSSxDQUFDMEosY0FBYyxDQUFDblEsK0NBQVFBLENBQUNBLCtDQUFRQSxDQUFDLENBQUMsR0FBR3lHLFVBQVU7b0JBQUUySixZQUFZLENBQUNKO2dCQUFjO1lBQzlGO1lBQ0F2SixVQUFVaUcsVUFBVWpHLE9BQU87WUFDM0IsSUFBSXVKLGVBQWU7Z0JBQ2YsSUFBSUssdUJBQXVCL04sMkRBQUtBLENBQUM0SjtnQkFDakMsSUFBSW9FLFlBQVkzUCxvRUFBa0JBLENBQUNpRjtnQkFDbkMsSUFBSTJLLFFBQVFOLDBCQUEwQk8sTUFBTSxDQUFDSCxzQkFBc0JDO2dCQUNuRXhELGFBQWF5RCxNQUFNekQsVUFBVTtnQkFDN0IsSUFBSSxDQUFDQSxZQUFZO29CQUNiLElBQUkxQixVQUFVLElBQUkvSix5REFBT0EsQ0FBQzt3QkFDdEJmLDZEQUFPQSxDQUFDNEMsTUFBTXdKO3FCQUNqQjtvQkFDREksYUFBYXlELE1BQU16RCxVQUFVLEdBQUcxQjtvQkFDaENBLFFBQVFxRixVQUFVLENBQUM7d0JBQ2ZSLDBCQUEwQjdELE1BQU0sQ0FBQ2lFLHNCQUFzQkM7b0JBQzNEO2dCQUNKO1lBQ0osT0FDSztnQkFDRHhELGFBQWEsSUFBSXpMLHlEQUFPQSxDQUFDO29CQUNyQmYsNkRBQU9BLENBQUM0QyxNQUFNd0o7aUJBQ2pCO1lBQ0w7UUFDSixPQUNLO1lBQ0RJLGFBQWEsSUFBSXpMLHlEQUFPQSxDQUFDO2dCQUFDSCw0REFBVUEsQ0FBQ3dQLEVBQUUsQ0FBQztvQkFBRTlILE1BQU0sQ0FBQztnQkFBRTthQUFHO1lBQ3REbkMsVUFBVSxJQUFJLENBQUMwSixjQUFjLENBQUMxSjtRQUNsQztRQUNBLElBQUl3RixhQUFhO1lBQ2JhLGFBQWEzTCw2REFBUUEsQ0FBQzJMLFlBQVksU0FBVWhGLE1BQU07Z0JBQzlDLE9BQU85RCxNQUFNSixVQUFVLENBQUMrTSxZQUFZLENBQUM7b0JBQ2pDak0sVUFBVXVIO29CQUNWMkUsY0FBYzlJO29CQUNkckIsU0FBU0E7b0JBQ1RiLFdBQVdBO2dCQUNmO1lBQ0o7UUFDSjtRQUNBLE9BQU9rSDtJQUNYO0lBQ0EvSixhQUFhTixTQUFTLENBQUNvTyxrQkFBa0IsR0FBRyxTQUFVbkYsU0FBUyxFQUFFb0Ysa0JBQWtCLEVBQUU3RixPQUFPO1FBQ3hGLElBQUk4RixZQUFhckYsVUFBVXNGLGFBQWEsR0FBRyxJQUFJLENBQUMxRCxpQkFBaUI7UUFDakUsd0VBQXdFO1FBQ3hFLDBFQUEwRTtRQUMxRSwwQkFBMEI7UUFDMUIsSUFBSTJELGVBQWUsSUFBSSxDQUFDaE8sS0FBSyxDQUFDZ0UsZ0JBQWdCLENBQUNnRSxRQUFRbkMsS0FBSztRQUM1RCxPQUFPM0gsNkRBQVFBLENBQUMsSUFBSSxDQUFDMEcscUJBQXFCLENBQUNvSixjQUFjaEcsUUFBUXhFLE9BQU8sRUFBRXdFLFFBQVFyRixTQUFTLEdBQUcsU0FBVWtDLE1BQU07WUFDMUcsSUFBSUMsZ0JBQWdCOUcsK0VBQTBCQSxDQUFDNkc7WUFDL0MsSUFBSXNILFlBQVlySCxjQUFja0MsTUFBTSxHQUFHO1lBQ3ZDLHFFQUFxRTtZQUNyRSw2REFBNkQ7WUFDN0QsSUFBSThHLGFBQWFyRixVQUFVc0YsYUFBYSxFQUFFO2dCQUN0QyxJQUFJNUIsYUFBYW5FLFFBQVExRSxXQUFXLEtBQUssUUFBUTtvQkFDN0Msa0RBQWtEO29CQUNsRCxNQUFNbUYsVUFBVXdGLFNBQVMsQ0FBQyxJQUFJdlAsMERBQVdBLENBQUM7d0JBQ3RDb0csZUFBZUE7b0JBQ25CO2dCQUNKO2dCQUNBLHlEQUF5RDtnQkFDekQsbUVBQW1FO2dCQUNuRSx3Q0FBd0M7Z0JBQ3hDRCxTQUFTNEQsVUFBVXlGLFVBQVUsQ0FBQ3JKLFFBQVFtSixjQUFjaEcsU0FBUzZGO2dCQUM3RHBGLFVBQVUwRixTQUFTO1lBQ3ZCO1lBQ0EsSUFBSUMsTUFBTTtnQkFDTnpJLE1BQU1kLE9BQU9jLElBQUk7Z0JBQ2pCckIsU0FBUztnQkFDVDJELGVBQWVsSiw2REFBYUEsQ0FBQ3NQLEtBQUs7WUFDdEM7WUFDQSxJQUFJbEMsYUFBYW5FLFFBQVExRSxXQUFXLEtBQUssVUFBVTtnQkFDL0M4SyxJQUFJcEosTUFBTSxHQUFHRjtnQkFDYnNKLElBQUluRyxhQUFhLEdBQUdsSiw2REFBYUEsQ0FBQ3VELEtBQUs7WUFDM0M7WUFDQSxPQUFPOEw7UUFDWCxHQUFHLFNBQVU3SSxZQUFZO1lBQ3JCLElBQUlqRCxRQUFRM0QsZ0VBQWFBLENBQUM0RyxnQkFBZ0JBLGVBQWdCLElBQUk3RywwREFBV0EsQ0FBQztnQkFBRTZHLGNBQWNBO1lBQWE7WUFDdkcsdURBQXVEO1lBQ3ZELElBQUl1SSxhQUFhckYsVUFBVXNGLGFBQWEsRUFBRTtnQkFDdEN0RixVQUFVd0YsU0FBUyxDQUFDM0w7WUFDeEI7WUFDQSxNQUFNQTtRQUNWO0lBQ0o7SUFDQXhDLGFBQWFOLFNBQVMsQ0FBQzBJLG9CQUFvQixHQUFHLFNBQVUvRixPQUFPLEVBQUU2RixPQUFPLEVBQ3hFLHVEQUF1RDtJQUN2RCxxRUFBcUU7SUFDckUsbUJBQW1CO0lBQ25CQyxhQUFhLEVBQUVwQyxLQUFLO1FBQ2hCLElBQUk5RSxRQUFRLElBQUk7UUFDaEIsSUFBSWtILGtCQUFrQixLQUFLLEdBQUc7WUFBRUEsZ0JBQWdCbEosNkRBQWFBLENBQUN1RixPQUFPO1FBQUU7UUFDdkUsSUFBSXVCLFVBQVUsS0FBSyxHQUFHO1lBQUVBLFFBQVFtQyxRQUFRbkMsS0FBSztRQUFFO1FBQy9DLElBQUlsRCxZQUFZLElBQUksQ0FBQ3dCLFlBQVksQ0FBQzBCLE9BQU9tQyxRQUFRckYsU0FBUztRQUMxRCxJQUFJOEYsWUFBWSxJQUFJLENBQUM2QyxRQUFRLENBQUNuSjtRQUM5QixJQUFJbU0sV0FBVyxJQUFJLENBQUNwTyxjQUFjLENBQUN5SixVQUFVO1FBQzdDLElBQUk1SixLQUFLaUksUUFBUTVFLFdBQVcsRUFBRUEsY0FBY3JELE9BQU8sS0FBSyxJQUFJLFlBQWF1TyxTQUFTbEwsV0FBVyxJQUFLLGdCQUFnQnJELElBQUlLLEtBQUs0SCxRQUFRMUUsV0FBVyxFQUFFQSxjQUFjbEQsT0FBTyxLQUFLLElBQUksWUFBYWtPLFNBQVNoTCxXQUFXLElBQUssU0FBU2xELElBQUlHLEtBQUt5SCxRQUFRN0IsaUJBQWlCLEVBQUVBLG9CQUFvQjVGLE9BQU8sS0FBSyxJQUFJLFFBQVFBLElBQUlFLEtBQUt1SCxRQUFRNEIsMkJBQTJCLEVBQUVBLDhCQUE4Qm5KLE9BQU8sS0FBSyxJQUFJLFFBQVFBLElBQUlHLEtBQUtvSCxRQUFReEUsT0FBTyxFQUFFQSxVQUFVNUMsT0FBTyxLQUFLLElBQUksQ0FBQyxJQUFJQTtRQUMxYyxJQUFJMk4sYUFBYWhQLE9BQU9pUCxNQUFNLENBQUMsQ0FBQyxHQUFHeEcsU0FBUztZQUN4Q25DLE9BQU9BO1lBQ1BsRCxXQUFXQTtZQUNYUyxhQUFhQTtZQUNiRSxhQUFhQTtZQUNiNkMsbUJBQW1CQTtZQUNuQnlELDZCQUE2QkE7WUFDN0JwRyxTQUFTQTtRQUNiO1FBQ0EsSUFBSWlMLGdCQUFnQixTQUFVOUwsU0FBUztZQUNuQyxtRUFBbUU7WUFDbkUsbUVBQW1FO1lBQ25FLDRCQUE0QjtZQUM1QjRMLFdBQVc1TCxTQUFTLEdBQUdBO1lBQ3ZCLElBQUkrTCxrQkFBa0IzTixNQUFNNE4sa0JBQWtCLENBQUNsRyxXQUFXOEYsWUFBWXRHO1lBQ3RFLElBQ0Esb0VBQW9FO1lBQ3BFLHdCQUF3QjtZQUN4QnNHLFdBQVduTCxXQUFXLEtBQUssYUFDdkIsd0VBQXdFO1lBQ3hFLCtEQUErRDtZQUMvRHNMLGdCQUFnQkUsT0FBTyxDQUFDNUgsTUFBTSxHQUFHLEtBQ2pDeUIsVUFBVW5DLGVBQWUsRUFBRTtnQkFDM0JtQyxVQUFVbkMsZUFBZSxDQUFDLHVCQUF1QixDQUFDLGVBQWUwQjtZQUNyRTtZQUNBLE9BQU8wRztRQUNYO1FBQ0Esc0VBQXNFO1FBQ3RFLDhEQUE4RDtRQUM5RCxJQUFJRyxrQkFBa0I7WUFBYyxPQUFPOU4sTUFBTUcsY0FBYyxDQUFDMEwsTUFBTSxDQUFDeks7UUFBVTtRQUNqRixJQUFJLENBQUNqQixjQUFjLENBQUN3SSxHQUFHLENBQUN2SCxTQUFTLFNBQVUyTSxNQUFNO1lBQzdDRDtZQUNBLGdFQUFnRTtZQUNoRUUsV0FBVztnQkFBYyxPQUFPNUcsUUFBUTVGLE1BQU0sQ0FBQ3VNO1lBQVM7UUFDNUQ7UUFDQSxJQUFJM0csU0FBUzZHO1FBQ2IsZ0VBQWdFO1FBQ2hFLDZEQUE2RDtRQUM3RCw4REFBOEQ7UUFDOUQsK0RBQStEO1FBQy9ELG1FQUFtRTtRQUNuRSxrRUFBa0U7UUFDbEUsd0NBQXdDO1FBQ3hDLElBQUksSUFBSSxDQUFDOUssZUFBZSxDQUFDcUssV0FBVzFJLEtBQUssRUFBRS9ILGdCQUFnQixFQUFFO1lBQ3pEcUssVUFBVSxJQUFJL0oseURBQU9BLENBQUMsSUFBSSxDQUFDdUMsVUFBVSxDQUNoQ3lELG9CQUFvQixDQUFDbUssV0FBVzFJLEtBQUssRUFBRTBJLFdBQVc1TCxTQUFTLEVBQUU0TCxXQUFXL0ssT0FBTyxFQUMvRW1FLElBQUksQ0FBQzhHLGVBQ0w5RyxJQUFJLENBQUMsU0FBVStHLGVBQWU7Z0JBQUksT0FBT0EsZ0JBQWdCRSxPQUFPO1lBQUU7WUFDdkUsd0VBQXdFO1lBQ3hFLHlFQUF5RTtZQUN6RSx5RUFBeUU7WUFDekUsb0VBQW9FO1lBQ3BFLGNBQWM7WUFDZEksdUJBQXVCO1FBQzNCLE9BQ0s7WUFDRCxJQUFJTixrQkFBa0JELGNBQWNGLFdBQVc1TCxTQUFTO1lBQ3hEcU0sdUJBQXVCTixnQkFBZ0JPLFFBQVE7WUFDL0M5RyxVQUFVLElBQUkvSix5REFBT0EsQ0FBQ3NRLGdCQUFnQkUsT0FBTztRQUNqRDtRQUNBekcsUUFBUUMsT0FBTyxDQUFDVCxJQUFJLENBQUNrSCxpQkFBaUJBO1FBQ3RDLE9BQU87WUFDSDFHLFNBQVNBO1lBQ1Q4RyxVQUFVRDtRQUNkO0lBQ0o7SUFDQWxQLGFBQWFOLFNBQVMsQ0FBQ3NELGNBQWMsR0FBRyxTQUFVL0MsRUFBRTtRQUNoRCxJQUFJZ0IsUUFBUSxJQUFJO1FBQ2hCLElBQUltRyxjQUFjbkgsR0FBR21ILFdBQVcsRUFBRU8sVUFBVTFILEdBQUcwSCxPQUFPLEVBQUVySCxLQUFLTCxHQUFHbUcsVUFBVSxFQUFFQSxhQUFhOUYsT0FBTyxLQUFLLElBQUksUUFBUUEsSUFBSUcsS0FBS1IsR0FBR21GLGdCQUFnQixFQUFFQSxtQkFBbUIzRSxPQUFPLEtBQUssSUFBSTJGLGFBQWE3SCxrRUFBWUEsQ0FBQyxvQkFBb0IsS0FBSyxJQUFJa0MsSUFBSTJDLGlCQUFpQm5ELEdBQUdtRCxjQUFjO1FBQy9RLElBQUlnTSxzQkFBc0IsSUFBSWpPO1FBQzlCLElBQUl3RyxTQUFTO1lBQ1QsSUFBSSxDQUFDa0Qsb0JBQW9CLENBQUNsRCxTQUFTeEYsT0FBTyxDQUFDLFNBQVVrSixFQUFFLEVBQUVoSixPQUFPO2dCQUM1RCtNLG9CQUFvQnhGLEdBQUcsQ0FBQ3ZILFNBQVM7b0JBQzdCZ0osSUFBSUE7b0JBQ0pnRSxVQUFVcE8sTUFBTXVLLFFBQVEsQ0FBQ25KLFNBQVNpTixPQUFPO2dCQUM3QztZQUNKO1FBQ0o7UUFDQSxJQUFJQyxVQUFVLElBQUlwTztRQUNsQixJQUFJaUcsYUFBYTtZQUNiLElBQUksQ0FBQ2xILEtBQUssQ0FBQ3NQLEtBQUssQ0FBQztnQkFDYnJNLFFBQVFpRTtnQkFDUix3RUFBd0U7Z0JBQ3hFLHVFQUF1RTtnQkFDdkUsOERBQThEO2dCQUM5RCxhQUFhO2dCQUNiLEVBQUU7Z0JBQ0YsMENBQTBDO2dCQUMxQyx1Q0FBdUM7Z0JBQ3ZDLG9FQUFvRTtnQkFDcEUsRUFBRTtnQkFDRixzRUFBc0U7Z0JBQ3RFLHdFQUF3RTtnQkFDeEUsdUVBQXVFO2dCQUN2RSxpRUFBaUU7Z0JBQ2pFLG1FQUFtRTtnQkFDbkUsRUFBRTtnQkFDRix3RUFBd0U7Z0JBQ3hFLHdFQUF3RTtnQkFDeEUsd0VBQXdFO2dCQUN4RSxtRUFBbUU7Z0JBQ25FLHVFQUF1RTtnQkFDdkUsNENBQTRDO2dCQUM1QyxFQUFFO2dCQUNGLHFFQUFxRTtnQkFDckUsc0VBQXNFO2dCQUN0RSxxRUFBcUU7Z0JBQ3JFLG9FQUFvRTtnQkFDcEUsc0VBQXNFO2dCQUN0RSxrRUFBa0U7Z0JBQ2xFLHFEQUFxRDtnQkFDckRoQixZQUFZLGNBQWVoQixvQkFBcUI7Z0JBQ2hELHNFQUFzRTtnQkFDdEUsbUVBQW1FO2dCQUNuRSxrRUFBa0U7Z0JBQ2xFLEVBQUU7Z0JBQ0Ysc0VBQXNFO2dCQUN0RSxpRUFBaUU7Z0JBQ2pFLHlEQUF5RDtnQkFDekRBLGtCQUFrQkE7Z0JBQ2xCcUssZ0JBQWdCLFNBQVVDLEtBQUssRUFBRXpKLElBQUksRUFBRW9KLFFBQVE7b0JBQzNDLElBQUloRSxLQUFLcUUsTUFBTUMsT0FBTyxZQUFZdlEscURBQVNBLElBQUlzUSxNQUFNQyxPQUFPLENBQUNuSixlQUFlO29CQUM1RSxJQUFJNkUsSUFBSTt3QkFDSixJQUFJakksZ0JBQWdCOzRCQUNoQiw2REFBNkQ7NEJBQzdELCtEQUErRDs0QkFDL0QsbUJBQW1COzRCQUNuQmdNLG9CQUFvQnRDLE1BQU0sQ0FBQ3pCLEdBQUdoSixPQUFPOzRCQUNyQyxJQUFJMEMsU0FBUzNCLGVBQWVpSSxJQUFJcEYsTUFBTW9KOzRCQUN0QyxJQUFJdEssV0FBVyxNQUFNO2dDQUNqQiwrREFBK0Q7Z0NBQy9ELDhCQUE4QjtnQ0FDOUJBLFNBQVNzRyxHQUFHWSxPQUFPOzRCQUN2Qjs0QkFDQSxrRUFBa0U7NEJBQ2xFLG1EQUFtRDs0QkFDbkQsSUFBSWxILFdBQVcsT0FBTztnQ0FDbEJ3SyxRQUFRM0YsR0FBRyxDQUFDeUIsSUFBSXRHOzRCQUNwQjs0QkFDQSwyREFBMkQ7NEJBQzNELGdDQUFnQzs0QkFDaEMsT0FBT0E7d0JBQ1g7d0JBQ0EsSUFBSTNCLG1CQUFtQixNQUFNOzRCQUN6QixrRUFBa0U7NEJBQ2xFLDREQUE0RDs0QkFDNUQsNkRBQTZEOzRCQUM3RGdNLG9CQUFvQnhGLEdBQUcsQ0FBQ3lCLEdBQUdoSixPQUFPLEVBQUU7Z0NBQUVnSixJQUFJQTtnQ0FBSWdFLFVBQVVBO2dDQUFVcEosTUFBTUE7NEJBQUs7d0JBQ2pGO29CQUNKO2dCQUNKO1lBQ0o7UUFDSjtRQUNBLElBQUltSixvQkFBb0I3RCxJQUFJLEVBQUU7WUFDMUI2RCxvQkFBb0JqTixPQUFPLENBQUMsU0FBVWxDLEVBQUUsRUFBRW9DLE9BQU87Z0JBQzdDLElBQUlnSixLQUFLcEwsR0FBR29MLEVBQUUsRUFBRWdFLFdBQVdwUCxHQUFHb1AsUUFBUSxFQUFFcEosT0FBT2hHLEdBQUdnRyxJQUFJO2dCQUN0RCxJQUFJbEI7Z0JBQ0osb0VBQW9FO2dCQUNwRSx1Q0FBdUM7Z0JBQ3ZDLElBQUkzQixnQkFBZ0I7b0JBQ2hCLElBQUksQ0FBQzZDLE1BQU07d0JBQ1AsSUFBSXdDLE9BQU80QyxFQUFFLENBQUMsWUFBWTt3QkFDMUI1QyxLQUFLbUMsS0FBSyxJQUFJLDJDQUEyQzt3QkFDekQzRSxPQUFPd0MsS0FBSzZHLE9BQU87b0JBQ3ZCO29CQUNBdkssU0FBUzNCLGVBQWVpSSxJQUFJcEYsTUFBTW9KO2dCQUN0QztnQkFDQSx5Q0FBeUM7Z0JBQ3pDLElBQUksQ0FBQ2pNLGtCQUFrQjJCLFdBQVcsTUFBTTtvQkFDcENBLFNBQVNzRyxHQUFHWSxPQUFPO2dCQUN2QjtnQkFDQSxJQUFJbEgsV0FBVyxPQUFPO29CQUNsQndLLFFBQVEzRixHQUFHLENBQUN5QixJQUFJdEc7Z0JBQ3BCO2dCQUNBLElBQUkxQyxRQUFRdU4sT0FBTyxDQUFDLHlCQUF5QixHQUFHO29CQUM1QzNPLE1BQU1xQixvQkFBb0IsQ0FBQ0Q7Z0JBQy9CO1lBQ0o7UUFDSjtRQUNBLElBQUkrQyxrQkFBa0I7WUFDbEIsdUVBQXVFO1lBQ3ZFLHVFQUF1RTtZQUN2RSx3RUFBd0U7WUFDeEUsb0VBQW9FO1lBQ3BFLHdFQUF3RTtZQUN4RSxzRUFBc0U7WUFDdEUsMEJBQTBCO1lBQzFCLElBQUksQ0FBQ2xGLEtBQUssQ0FBQ2tGLGdCQUFnQixDQUFDQTtRQUNoQztRQUNBLE9BQU9tSztJQUNYO0lBQ0F2UCxhQUFhTixTQUFTLENBQUNtUCxrQkFBa0IsR0FBRyxTQUFVbEcsU0FBUyxFQUFFMUksRUFBRSxFQUNuRSx1REFBdUQ7SUFDdkQscUVBQXFFO0lBQ3JFLG1CQUFtQjtJQUNuQmtJLGFBQWE7UUFDVCxJQUFJbEgsUUFBUSxJQUFJO1FBQ2hCLElBQUk4RSxRQUFROUYsR0FBRzhGLEtBQUssRUFBRWxELFlBQVk1QyxHQUFHNEMsU0FBUyxFQUFFUyxjQUFjckQsR0FBR3FELFdBQVcsRUFBRXVNLHFCQUFxQjVQLEdBQUc0UCxrQkFBa0IsRUFBRXJNLGNBQWN2RCxHQUFHdUQsV0FBVyxFQUFFNkMsb0JBQW9CcEcsR0FBR29HLGlCQUFpQixFQUFFM0MsVUFBVXpELEdBQUd5RCxPQUFPLEVBQUVvRyw4QkFBOEI3SixHQUFHNkosMkJBQTJCO1FBQ3BSLElBQUlnRyxtQkFBbUJuSCxVQUFVUixhQUFhO1FBQzlDUSxVQUFVc0IsSUFBSSxDQUFDO1lBQ1h0SSxVQUFVb0U7WUFDVmxELFdBQVdBO1lBQ1hzRixlQUFlQTtRQUNuQjtRQUNBLElBQUk0SCxZQUFZO1lBQWMsT0FBT3BILFVBQVUyRyxPQUFPO1FBQUk7UUFDMUQsSUFBSVUsbUJBQW1CLFNBQVUvSixJQUFJLEVBQUVrQyxhQUFhO1lBQ2hELElBQUlBLGtCQUFrQixLQUFLLEdBQUc7Z0JBQUVBLGdCQUFnQlEsVUFBVVIsYUFBYSxJQUFJbEosNkRBQWFBLENBQUN1RixPQUFPO1lBQUU7WUFDbEcsSUFBSXFCLE9BQU9JLEtBQUtsQixNQUFNO1lBQ3RCLElBQUlnRCxXQUFXQyxPQUFPLEtBQUssU0FBUyxDQUFDM0IscUJBQXFCLENBQUMvSSxvREFBS0EsQ0FBQ3VJLE1BQU0sQ0FBQyxJQUFJO2dCQUN4RTdHLDJFQUFxQkEsQ0FBQ2lILEtBQUtnSyxPQUFPO1lBQ3RDO1lBQ0EsSUFBSUMsV0FBVyxTQUFVckssSUFBSTtnQkFDekIsT0FBTzFILDREQUFVQSxDQUFDd1AsRUFBRSxDQUFDMVEsK0NBQVFBLENBQUM7b0JBQUU0SSxNQUFNQTtvQkFBTXJCLFNBQVN0Riw0RUFBd0JBLENBQUNpSjtvQkFBZ0JBLGVBQWVBO2dCQUFjLEdBQUlsQyxLQUFLYSxRQUFRLEdBQUcsT0FBTztvQkFBRXFKLFNBQVM7Z0JBQUs7WUFDMUs7WUFDQSxJQUFJdEssUUFBUTVFLE1BQU1tRCxlQUFlLENBQUMyQixPQUFPZ0Qsa0JBQWtCLEVBQUU7Z0JBQ3pELE9BQU85SCxNQUFNSixVQUFVLENBQ2xCK00sWUFBWSxDQUFDO29CQUNkak0sVUFBVW9FO29CQUNWOEgsY0FBYzt3QkFBRWhJLE1BQU1BO29CQUFLO29CQUMzQm5DLFNBQVNBO29CQUNUYixXQUFXQTtvQkFDWHVOLHdCQUF3QjtnQkFDNUIsR0FDS3ZJLElBQUksQ0FBQyxTQUFVd0ksUUFBUTtvQkFBSSxPQUFPSCxTQUFTRyxTQUFTeEssSUFBSSxJQUFJLEtBQUs7Z0JBQUk7WUFDOUU7WUFDQSx3RUFBd0U7WUFDeEUsb0VBQW9FO1lBQ3BFLDJEQUEyRDtZQUMzRCwyREFBMkQ7WUFDM0QsSUFBSXJDLGdCQUFnQixVQUNoQjJFLGtCQUFrQmxKLDZEQUFhQSxDQUFDZ04sT0FBTyxJQUN2Q2hCLE1BQU1DLE9BQU8sQ0FBQ2pGLEtBQUtnSyxPQUFPLEdBQUc7Z0JBQzdCLE9BQU9DLFNBQVMsS0FBSztZQUN6QjtZQUNBLE9BQU9BLFNBQVNySztRQUNwQjtRQUNBLElBQUlrSSxxQkFBcUJ6SyxnQkFBZ0IsYUFBYSxFQUFFLDZCQUE2QixNQUcvRSxrQkFBbUJyRSw2REFBYUEsQ0FBQ2dOLE9BQU8sSUFDdEM0RCx1QkFBdUIsVUFDdkIsRUFBRSxnQ0FBZ0MsTUFDaEMsRUFBRSw0QkFBNEI7UUFDeEMsSUFBSVMsa0JBQWtCO1lBQ2xCLE9BQU9yUCxNQUFNNk0sa0JBQWtCLENBQUNuRixXQUFXb0Ysb0JBQW9CO2dCQUMzRGhJLE9BQU9BO2dCQUNQbEQsV0FBV0E7Z0JBQ1hhLFNBQVNBO2dCQUNUSixhQUFhQTtnQkFDYkUsYUFBYUE7WUFDakI7UUFDSjtRQUNBLElBQUkrTSxlQUFlekcsK0JBQ2YsT0FBT2dHLHFCQUFxQixZQUM1QkEscUJBQXFCM0gsaUJBQ3JCakosNEVBQXdCQSxDQUFDaUo7UUFDN0IsT0FBUTdFO1lBQ0o7WUFDQSxLQUFLO2dCQUFlO29CQUNoQixJQUFJMkMsT0FBTzhKO29CQUNYLElBQUk5SixLQUFLYSxRQUFRLEVBQUU7d0JBQ2YsT0FBTzs0QkFDSHFJLFVBQVU7NEJBQ1ZMLFNBQVM7Z0NBQUNrQixpQkFBaUIvSixNQUFNMEMsVUFBVTBGLFNBQVM7NkJBQUk7d0JBQzVEO29CQUNKO29CQUNBLElBQUloSSxxQkFBcUJrSyxjQUFjO3dCQUNuQyxPQUFPOzRCQUNIcEIsVUFBVTs0QkFDVkwsU0FBUztnQ0FBQ2tCLGlCQUFpQi9KO2dDQUFPcUs7NkJBQWtCO3dCQUN4RDtvQkFDSjtvQkFDQSxPQUFPO3dCQUFFbkIsVUFBVTt3QkFBTUwsU0FBUzs0QkFBQ3dCO3lCQUFrQjtvQkFBQztnQkFDMUQ7WUFDQSxLQUFLO2dCQUFxQjtvQkFDdEIsSUFBSXJLLE9BQU84SjtvQkFDWCxJQUFJOUosS0FBS2EsUUFBUSxJQUFJVCxxQkFBcUJrSyxjQUFjO3dCQUNwRCxPQUFPOzRCQUNIcEIsVUFBVTs0QkFDVkwsU0FBUztnQ0FBQ2tCLGlCQUFpQi9KO2dDQUFPcUs7NkJBQWtCO3dCQUN4RDtvQkFDSjtvQkFDQSxPQUFPO3dCQUFFbkIsVUFBVTt3QkFBTUwsU0FBUzs0QkFBQ3dCO3lCQUFrQjtvQkFBQztnQkFDMUQ7WUFDQSxLQUFLO2dCQUNELE9BQU87b0JBQ0huQixVQUFVO29CQUNWTCxTQUFTO3dCQUFDa0IsaUJBQWlCRCxhQUFhcEgsVUFBVTBGLFNBQVM7cUJBQUk7Z0JBQ25FO1lBQ0osS0FBSztnQkFDRCxJQUFJa0MsY0FBYztvQkFDZCxPQUFPO3dCQUNIcEIsVUFBVTt3QkFDVkwsU0FBUzs0QkFBQ2tCLGlCQUFpQkQ7NEJBQWNPO3lCQUFrQjtvQkFDL0Q7Z0JBQ0o7Z0JBQ0EsT0FBTztvQkFBRW5CLFVBQVU7b0JBQU1MLFNBQVM7d0JBQUN3QjtxQkFBa0I7Z0JBQUM7WUFDMUQsS0FBSztnQkFDRCxJQUFJQyxjQUFjO29CQUNkLE9BQU87d0JBQ0hwQixVQUFVO3dCQUNWLG1FQUFtRTt3QkFDbkUsb0VBQW9FO3dCQUNwRSxtREFBbUQ7d0JBQ25ETCxTQUFTOzRCQUFDa0IsaUJBQWlCckgsVUFBVTJHLE9BQU87NEJBQUtnQjt5QkFBa0I7b0JBQ3ZFO2dCQUNKO2dCQUNBLE9BQU87b0JBQUVuQixVQUFVO29CQUFNTCxTQUFTO3dCQUFDd0I7cUJBQWtCO2dCQUFDO1lBQzFELEtBQUs7Z0JBQ0QsT0FBTztvQkFBRW5CLFVBQVU7b0JBQU9MLFNBQVMsRUFBRTtnQkFBQztRQUM5QztJQUNKO0lBQ0E5TyxhQUFhTixTQUFTLENBQUM4TCxRQUFRLEdBQUcsU0FBVW5KLE9BQU87UUFDL0MsSUFBSUEsV0FBVyxDQUFDLElBQUksQ0FBQ25CLE9BQU8sQ0FBQzJILEdBQUcsQ0FBQ3hHLFVBQVU7WUFDdkMsSUFBSSxDQUFDbkIsT0FBTyxDQUFDMEksR0FBRyxDQUFDdkgsU0FBUyxJQUFJakQscURBQVNBLENBQUMsSUFBSSxFQUFFaUQ7UUFDbEQ7UUFDQSxPQUFPLElBQUksQ0FBQ25CLE9BQU8sQ0FBQzBGLEdBQUcsQ0FBQ3ZFO0lBQzVCO0lBQ0FyQyxhQUFhTixTQUFTLENBQUMwTixjQUFjLEdBQUcsU0FBVTFKLE9BQU87UUFDckQsSUFBSUEsWUFBWSxLQUFLLEdBQUc7WUFBRUEsVUFBVSxDQUFDO1FBQUc7UUFDeEMsSUFBSThNLGFBQWEsSUFBSSxDQUFDM1AsVUFBVSxDQUFDdU0sY0FBYyxDQUFDMUo7UUFDaEQsT0FBT3pHLCtDQUFRQSxDQUFDQSwrQ0FBUUEsQ0FBQ0EsK0NBQVFBLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQytELGNBQWMsR0FBR3dQLGFBQWE7WUFBRTVQLGlCQUFpQixJQUFJLENBQUNBLGVBQWU7UUFBQztJQUNySDtJQUNBLE9BQU9aO0FBQ1g7QUFDd0IsQ0FDeEIsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktZG9jcy1mcm9uLWVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2NvcmUvUXVlcnlNYW5hZ2VyLmpzPzAxZTgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19hc3NpZ24sIF9fYXdhaXRlciwgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGludmFyaWFudCwgbmV3SW52YXJpYW50RXJyb3IgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2dsb2JhbHMvaW5kZXguanNcIjtcbmltcG9ydCB7IGVxdWFsIH0gZnJvbSBcIkB3cnkvZXF1YWxpdHlcIjtcbmltcG9ydCB7IGV4ZWN1dGUgfSBmcm9tIFwiLi4vbGluay9jb3JlL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBoYXNEaXJlY3RpdmVzLCBpc0V4ZWN1dGlvblBhdGNoSW5jcmVtZW50YWxSZXN1bHQsIGlzRXhlY3V0aW9uUGF0Y2hSZXN1bHQsIHJlbW92ZURpcmVjdGl2ZXNGcm9tRG9jdW1lbnQsIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgY2Fub25pY2FsU3RyaW5naWZ5IH0gZnJvbSBcIi4uL2NhY2hlL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0VmFsdWVzLCBnZXRPcGVyYXRpb25EZWZpbml0aW9uLCBnZXRPcGVyYXRpb25OYW1lLCBoYXNDbGllbnRFeHBvcnRzLCBncmFwaFFMUmVzdWx0SGFzRXJyb3IsIGdldEdyYXBoUUxFcnJvcnNGcm9tUmVzdWx0LCBPYnNlcnZhYmxlLCBhc3luY01hcCwgaXNOb25FbXB0eUFycmF5LCBDb25jYXN0LCBtYWtlVW5pcXVlSWQsIGlzRG9jdW1lbnROb2RlLCBpc05vbk51bGxPYmplY3QsIERvY3VtZW50VHJhbnNmb3JtLCB9IGZyb20gXCIuLi91dGlsaXRpZXMvaW5kZXguanNcIjtcbmltcG9ydCB7IG1lcmdlSW5jcmVtZW50YWxEYXRhIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9jb21tb24vaW5jcmVtZW50YWxSZXN1bHQuanNcIjtcbmltcG9ydCB7IEFwb2xsb0Vycm9yLCBpc0Fwb2xsb0Vycm9yLCBncmFwaFFMUmVzdWx0SGFzUHJvdG9jb2xFcnJvcnMsIH0gZnJvbSBcIi4uL2Vycm9ycy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZVF1ZXJ5LCBsb2dNaXNzaW5nRmllbGRFcnJvcnMgfSBmcm9tIFwiLi9PYnNlcnZhYmxlUXVlcnkuanNcIjtcbmltcG9ydCB7IE5ldHdvcmtTdGF0dXMsIGlzTmV0d29ya1JlcXVlc3RJbkZsaWdodCB9IGZyb20gXCIuL25ldHdvcmtTdGF0dXMuanNcIjtcbmltcG9ydCB7IExvY2FsU3RhdGUgfSBmcm9tIFwiLi9Mb2NhbFN0YXRlLmpzXCI7XG5pbXBvcnQgeyBRdWVyeUluZm8sIHNob3VsZFdyaXRlUmVzdWx0LCB9IGZyb20gXCIuL1F1ZXJ5SW5mby5qc1wiO1xuaW1wb3J0IHsgUFJPVE9DT0xfRVJST1JTX1NZTUJPTCB9IGZyb20gXCIuLi9lcnJvcnMvaW5kZXguanNcIjtcbmltcG9ydCB7IHByaW50IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBJR05PUkUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuaW1wb3J0IHsgVHJpZSB9IGZyb20gXCJAd3J5L3RyaWVcIjtcbmltcG9ydCB7IEF1dG9DbGVhbmVkV2Vha0NhY2hlLCBjYWNoZVNpemVzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xudmFyIFF1ZXJ5TWFuYWdlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBRdWVyeU1hbmFnZXIoX2EpIHtcbiAgICAgICAgdmFyIGNhY2hlID0gX2EuY2FjaGUsIGxpbmsgPSBfYS5saW5rLCBkZWZhdWx0T3B0aW9ucyA9IF9hLmRlZmF1bHRPcHRpb25zLCBkb2N1bWVudFRyYW5zZm9ybSA9IF9hLmRvY3VtZW50VHJhbnNmb3JtLCBfYiA9IF9hLnF1ZXJ5RGVkdXBsaWNhdGlvbiwgcXVlcnlEZWR1cGxpY2F0aW9uID0gX2IgPT09IHZvaWQgMCA/IGZhbHNlIDogX2IsIG9uQnJvYWRjYXN0ID0gX2Eub25Ccm9hZGNhc3QsIF9jID0gX2Euc3NyTW9kZSwgc3NyTW9kZSA9IF9jID09PSB2b2lkIDAgPyBmYWxzZSA6IF9jLCBfZCA9IF9hLmNsaWVudEF3YXJlbmVzcywgY2xpZW50QXdhcmVuZXNzID0gX2QgPT09IHZvaWQgMCA/IHt9IDogX2QsIGxvY2FsU3RhdGUgPSBfYS5sb2NhbFN0YXRlLCBfZSA9IF9hLmFzc3VtZUltbXV0YWJsZVJlc3VsdHMsIGFzc3VtZUltbXV0YWJsZVJlc3VsdHMgPSBfZSA9PT0gdm9pZCAwID8gISFjYWNoZS5hc3N1bWVJbW11dGFibGVSZXN1bHRzIDogX2UsIGRlZmF1bHRDb250ZXh0ID0gX2EuZGVmYXVsdENvbnRleHQ7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuY2xpZW50QXdhcmVuZXNzID0ge307XG4gICAgICAgIC8vIEFsbCB0aGUgcXVlcmllcyB0aGF0IHRoZSBRdWVyeU1hbmFnZXIgaXMgY3VycmVudGx5IG1hbmFnaW5nIChub3RcbiAgICAgICAgLy8gaW5jbHVkaW5nIG11dGF0aW9ucyBhbmQgc3Vic2NyaXB0aW9ucykuXG4gICAgICAgIHRoaXMucXVlcmllcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgLy8gTWFwcyBmcm9tIHF1ZXJ5SWQgc3RyaW5ncyB0byBQcm9taXNlIHJlamVjdGlvbiBmdW5jdGlvbnMgZm9yXG4gICAgICAgIC8vIGN1cnJlbnRseSBhY3RpdmUgcXVlcmllcyBhbmQgZmV0Y2hlcy5cbiAgICAgICAgLy8gVXNlIHByb3RlY3RlZCBpbnN0ZWFkIG9mIHByaXZhdGUgZmllbGQgc29cbiAgICAgICAgLy8gQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0IGNhbiBhY2Nlc3MgdHlwZSBpbmZvLlxuICAgICAgICB0aGlzLmZldGNoQ2FuY2VsRm5zID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUNhY2hlID0gbmV3IEF1dG9DbGVhbmVkV2Vha0NhY2hlKGNhY2hlU2l6ZXNbXCJxdWVyeU1hbmFnZXIuZ2V0RG9jdW1lbnRJbmZvXCJdIHx8XG4gICAgICAgICAgICAyMDAwIC8qIGRlZmF1bHRDYWNoZVNpemVzW1wicXVlcnlNYW5hZ2VyLmdldERvY3VtZW50SW5mb1wiXSAqLyk7XG4gICAgICAgIHRoaXMucXVlcnlJZENvdW50ZXIgPSAxO1xuICAgICAgICB0aGlzLnJlcXVlc3RJZENvdW50ZXIgPSAxO1xuICAgICAgICB0aGlzLm11dGF0aW9uSWRDb3VudGVyID0gMTtcbiAgICAgICAgLy8gVXNlIHByb3RlY3RlZCBpbnN0ZWFkIG9mIHByaXZhdGUgZmllbGQgc29cbiAgICAgICAgLy8gQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0IGNhbiBhY2Nlc3MgdHlwZSBpbmZvLlxuICAgICAgICB0aGlzLmluRmxpZ2h0TGlua09ic2VydmFibGVzID0gbmV3IFRyaWUoZmFsc2UpO1xuICAgICAgICB2YXIgZGVmYXVsdERvY3VtZW50VHJhbnNmb3JtID0gbmV3IERvY3VtZW50VHJhbnNmb3JtKGZ1bmN0aW9uIChkb2N1bWVudCkgeyByZXR1cm4gX3RoaXMuY2FjaGUudHJhbnNmb3JtRG9jdW1lbnQoZG9jdW1lbnQpOyB9LCBcbiAgICAgICAgLy8gQWxsb3cgdGhlIGFwb2xsbyBjYWNoZSB0byBtYW5hZ2UgaXRzIG93biB0cmFuc2Zvcm0gY2FjaGVzXG4gICAgICAgIHsgY2FjaGU6IGZhbHNlIH0pO1xuICAgICAgICB0aGlzLmNhY2hlID0gY2FjaGU7XG4gICAgICAgIHRoaXMubGluayA9IGxpbms7XG4gICAgICAgIHRoaXMuZGVmYXVsdE9wdGlvbnMgPSBkZWZhdWx0T3B0aW9ucyB8fCBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB0aGlzLnF1ZXJ5RGVkdXBsaWNhdGlvbiA9IHF1ZXJ5RGVkdXBsaWNhdGlvbjtcbiAgICAgICAgdGhpcy5jbGllbnRBd2FyZW5lc3MgPSBjbGllbnRBd2FyZW5lc3M7XG4gICAgICAgIHRoaXMubG9jYWxTdGF0ZSA9IGxvY2FsU3RhdGUgfHwgbmV3IExvY2FsU3RhdGUoeyBjYWNoZTogY2FjaGUgfSk7XG4gICAgICAgIHRoaXMuc3NyTW9kZSA9IHNzck1vZGU7XG4gICAgICAgIHRoaXMuYXNzdW1lSW1tdXRhYmxlUmVzdWx0cyA9IGFzc3VtZUltbXV0YWJsZVJlc3VsdHM7XG4gICAgICAgIHRoaXMuZG9jdW1lbnRUcmFuc2Zvcm0gPVxuICAgICAgICAgICAgZG9jdW1lbnRUcmFuc2Zvcm0gP1xuICAgICAgICAgICAgICAgIGRlZmF1bHREb2N1bWVudFRyYW5zZm9ybVxuICAgICAgICAgICAgICAgICAgICAuY29uY2F0KGRvY3VtZW50VHJhbnNmb3JtKVxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgY3VzdG9tIGRvY3VtZW50IHRyYW5zZm9ybSBtYXkgYWRkIG5ldyBmcmFnbWVudCBzcHJlYWRzIG9yIG5ld1xuICAgICAgICAgICAgICAgICAgICAvLyBmaWVsZCBzZWxlY3Rpb25zLCBzbyB3ZSB3YW50IHRvIGdpdmUgdGhlIGNhY2hlIGEgY2hhbmNlIHRvIHJ1blxuICAgICAgICAgICAgICAgICAgICAvLyBhZ2Fpbi4gRm9yIGV4YW1wbGUsIHRoZSBJbk1lbW9yeUNhY2hlIGFkZHMgX190eXBlbmFtZSB0byBmaWVsZFxuICAgICAgICAgICAgICAgICAgICAvLyBzZWxlY3Rpb25zIGFuZCBmcmFnbWVudHMgZnJvbSB0aGUgZnJhZ21lbnQgcmVnaXN0cnkuXG4gICAgICAgICAgICAgICAgICAgIC5jb25jYXQoZGVmYXVsdERvY3VtZW50VHJhbnNmb3JtKVxuICAgICAgICAgICAgICAgIDogZGVmYXVsdERvY3VtZW50VHJhbnNmb3JtO1xuICAgICAgICB0aGlzLmRlZmF1bHRDb250ZXh0ID0gZGVmYXVsdENvbnRleHQgfHwgT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgaWYgKCh0aGlzLm9uQnJvYWRjYXN0ID0gb25Ccm9hZGNhc3QpKSB7XG4gICAgICAgICAgICB0aGlzLm11dGF0aW9uU3RvcmUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRPRE86IHJlbW92ZSBiZWZvcmUgd2UgcmVsZWFzZSAzLjlcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuaW5GbGlnaHRMaW5rT2JzZXJ2YWJsZXMsIFwiZ2V0XCIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyB2ZXJzaW9uIG9mIEFwb2xsbyBDbGllbnQgcmVxdWlyZXMgYXQgbGVhc3QgQGFwb2xsby9leHBlcmltZW50YWwtbmV4dGpzLWFwcC1zdXBwb3J0IHZlcnNpb24gMC41LjIuXCIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGwgdGhpcyBtZXRob2QgdG8gdGVybWluYXRlIGFueSBhY3RpdmUgcXVlcnkgcHJvY2Vzc2VzLCBtYWtpbmcgaXQgc2FmZVxuICAgICAqIHRvIGRpc3Bvc2Ugb2YgdGhpcyBRdWVyeU1hbmFnZXIgaW5zdGFuY2UuXG4gICAgICovXG4gICAgUXVlcnlNYW5hZ2VyLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnF1ZXJpZXMuZm9yRWFjaChmdW5jdGlvbiAoX2luZm8sIHF1ZXJ5SWQpIHtcbiAgICAgICAgICAgIF90aGlzLnN0b3BRdWVyeU5vQnJvYWRjYXN0KHF1ZXJ5SWQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jYW5jZWxQZW5kaW5nRmV0Y2hlcyhuZXdJbnZhcmlhbnRFcnJvcigyNSkpO1xuICAgIH07XG4gICAgUXVlcnlNYW5hZ2VyLnByb3RvdHlwZS5jYW5jZWxQZW5kaW5nRmV0Y2hlcyA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICB0aGlzLmZldGNoQ2FuY2VsRm5zLmZvckVhY2goZnVuY3Rpb24gKGNhbmNlbCkgeyByZXR1cm4gY2FuY2VsKGVycm9yKTsgfSk7XG4gICAgICAgIHRoaXMuZmV0Y2hDYW5jZWxGbnMuY2xlYXIoKTtcbiAgICB9O1xuICAgIFF1ZXJ5TWFuYWdlci5wcm90b3R5cGUubXV0YXRlID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciBfYiwgX2M7XG4gICAgICAgIHZhciBtdXRhdGlvbiA9IF9hLm11dGF0aW9uLCB2YXJpYWJsZXMgPSBfYS52YXJpYWJsZXMsIG9wdGltaXN0aWNSZXNwb25zZSA9IF9hLm9wdGltaXN0aWNSZXNwb25zZSwgdXBkYXRlUXVlcmllcyA9IF9hLnVwZGF0ZVF1ZXJpZXMsIF9kID0gX2EucmVmZXRjaFF1ZXJpZXMsIHJlZmV0Y2hRdWVyaWVzID0gX2QgPT09IHZvaWQgMCA/IFtdIDogX2QsIF9lID0gX2EuYXdhaXRSZWZldGNoUXVlcmllcywgYXdhaXRSZWZldGNoUXVlcmllcyA9IF9lID09PSB2b2lkIDAgPyBmYWxzZSA6IF9lLCB1cGRhdGVXaXRoUHJveHlGbiA9IF9hLnVwZGF0ZSwgb25RdWVyeVVwZGF0ZWQgPSBfYS5vblF1ZXJ5VXBkYXRlZCwgX2YgPSBfYS5mZXRjaFBvbGljeSwgZmV0Y2hQb2xpY3kgPSBfZiA9PT0gdm9pZCAwID8gKChfYiA9IHRoaXMuZGVmYXVsdE9wdGlvbnMubXV0YXRlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZmV0Y2hQb2xpY3kpIHx8IFwibmV0d29yay1vbmx5XCIgOiBfZiwgX2cgPSBfYS5lcnJvclBvbGljeSwgZXJyb3JQb2xpY3kgPSBfZyA9PT0gdm9pZCAwID8gKChfYyA9IHRoaXMuZGVmYXVsdE9wdGlvbnMubXV0YXRlKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuZXJyb3JQb2xpY3kpIHx8IFwibm9uZVwiIDogX2csIGtlZXBSb290RmllbGRzID0gX2Eua2VlcFJvb3RGaWVsZHMsIGNvbnRleHQgPSBfYS5jb250ZXh0O1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbXV0YXRpb25JZCwgaGFzQ2xpZW50RXhwb3J0cywgbXV0YXRpb25TdG9yZVZhbHVlLCBpc09wdGltaXN0aWMsIHNlbGY7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9oKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfaC5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZhcmlhbnQobXV0YXRpb24sIDI2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGludmFyaWFudChmZXRjaFBvbGljeSA9PT0gXCJuZXR3b3JrLW9ubHlcIiB8fCBmZXRjaFBvbGljeSA9PT0gXCJuby1jYWNoZVwiLCAyNyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtdXRhdGlvbklkID0gdGhpcy5nZW5lcmF0ZU11dGF0aW9uSWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG11dGF0aW9uID0gdGhpcy5jYWNoZS50cmFuc2Zvcm1Gb3JMaW5rKHRoaXMudHJhbnNmb3JtKG11dGF0aW9uKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNDbGllbnRFeHBvcnRzID0gdGhpcy5nZXREb2N1bWVudEluZm8obXV0YXRpb24pLmhhc0NsaWVudEV4cG9ydHM7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZXMgPSB0aGlzLmdldFZhcmlhYmxlcyhtdXRhdGlvbiwgdmFyaWFibGVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaGFzQ2xpZW50RXhwb3J0cykgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmxvY2FsU3RhdGUuYWRkRXhwb3J0ZWRWYXJpYWJsZXMobXV0YXRpb24sIHZhcmlhYmxlcywgY29udGV4dCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZXMgPSAoX2guc2VudCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9oLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgbXV0YXRpb25TdG9yZVZhbHVlID0gdGhpcy5tdXRhdGlvblN0b3JlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMubXV0YXRpb25TdG9yZVttdXRhdGlvbklkXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXV0YXRpb246IG11dGF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc09wdGltaXN0aWMgPSBvcHRpbWlzdGljUmVzcG9uc2UgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcmtNdXRhdGlvbk9wdGltaXN0aWMob3B0aW1pc3RpY1Jlc3BvbnNlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG11dGF0aW9uSWQ6IG11dGF0aW9uSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50OiBtdXRhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVzOiB2YXJpYWJsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZldGNoUG9saWN5OiBmZXRjaFBvbGljeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JQb2xpY3k6IGVycm9yUG9saWN5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVRdWVyaWVzOiB1cGRhdGVRdWVyaWVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGU6IHVwZGF0ZVdpdGhQcm94eUZuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZWVwUm9vdEZpZWxkczoga2VlcFJvb3RGaWVsZHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJyb2FkY2FzdFF1ZXJpZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFzeW5jTWFwKHNlbGYuZ2V0T2JzZXJ2YWJsZUZyb21MaW5rKG11dGF0aW9uLCBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY29udGV4dCksIHsgb3B0aW1pc3RpY1Jlc3BvbnNlOiBpc09wdGltaXN0aWMgPyBvcHRpbWlzdGljUmVzcG9uc2UgOiB2b2lkIDAgfSksIHZhcmlhYmxlcywgZmFsc2UpLCBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ3JhcGhRTFJlc3VsdEhhc0Vycm9yKHJlc3VsdCkgJiYgZXJyb3JQb2xpY3kgPT09IFwibm9uZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFwb2xsb0Vycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JhcGhRTEVycm9yczogZ2V0R3JhcGhRTEVycm9yc0Zyb21SZXN1bHQocmVzdWx0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtdXRhdGlvblN0b3JlVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdXRhdGlvblN0b3JlVmFsdWUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG11dGF0aW9uU3RvcmVWYWx1ZS5lcnJvciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcmVSZXN1bHQgPSBfX2Fzc2lnbih7fSwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVmZXRjaFF1ZXJpZXMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZmV0Y2hRdWVyaWVzID0gcmVmZXRjaFF1ZXJpZXMoc3RvcmVSZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yUG9saWN5ID09PSBcImlnbm9yZVwiICYmIGdyYXBoUUxSZXN1bHRIYXNFcnJvcihzdG9yZVJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgc3RvcmVSZXN1bHQuZXJyb3JzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYubWFya011dGF0aW9uUmVzdWx0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdXRhdGlvbklkOiBtdXRhdGlvbklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogc3RvcmVSZXN1bHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQ6IG11dGF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZldGNoUG9saWN5OiBmZXRjaFBvbGljeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvclBvbGljeTogZXJyb3JQb2xpY3ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDogY29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGU6IHVwZGF0ZVdpdGhQcm94eUZuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVF1ZXJpZXM6IHVwZGF0ZVF1ZXJpZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXRSZWZldGNoUXVlcmllczogYXdhaXRSZWZldGNoUXVlcmllcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZldGNoUXVlcmllczogcmVmZXRjaFF1ZXJpZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlT3B0aW1pc3RpYzogaXNPcHRpbWlzdGljID8gbXV0YXRpb25JZCA6IHZvaWQgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblF1ZXJ5VXBkYXRlZDogb25RdWVyeVVwZGF0ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2VlcFJvb3RGaWVsZHM6IGtlZXBSb290RmllbGRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnN1YnNjcmliZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAoc3RvcmVSZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmJyb2FkY2FzdFF1ZXJpZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaW5jZSBtdXRhdGlvbnMgbWlnaHQgcmVjZWl2ZSBtdWx0aXBsZSBwYXlsb2FkcyBmcm9tIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFwb2xsb0xpbmsgY2hhaW4gKGUuZy4gd2hlbiB1c2VkIHdpdGggQGRlZmVyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSByZXNvbHZlIHdpdGggYSBTaW5nbGVFeGVjdXRpb25SZXN1bHQgb3IgYWZ0ZXIgdGhlIGZpbmFsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXhlY3V0aW9uUGF0Y2hSZXN1bHQgaGFzIGFycml2ZWQgYW5kIHdlIGhhdmUgYXNzZW1ibGVkIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG11bHRpcGFydCByZXNwb25zZSBpbnRvIGEgc2luZ2xlIHJlc3VsdC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShcImhhc05leHRcIiBpbiBzdG9yZVJlc3VsdCkgfHwgc3RvcmVSZXN1bHQuaGFzTmV4dCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzdG9yZVJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG11dGF0aW9uU3RvcmVWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdXRhdGlvblN0b3JlVmFsdWUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdXRhdGlvblN0b3JlVmFsdWUuZXJyb3IgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc09wdGltaXN0aWMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jYWNoZS5yZW1vdmVPcHRpbWlzdGljKG11dGF0aW9uSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmJyb2FkY2FzdFF1ZXJpZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyIGluc3RhbmNlb2YgQXBvbGxvRXJyb3IgPyBlcnIgOiAobmV3IEFwb2xsb0Vycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV0d29ya0Vycm9yOiBlcnIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBRdWVyeU1hbmFnZXIucHJvdG90eXBlLm1hcmtNdXRhdGlvblJlc3VsdCA9IGZ1bmN0aW9uIChtdXRhdGlvbiwgY2FjaGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKGNhY2hlID09PSB2b2lkIDApIHsgY2FjaGUgPSB0aGlzLmNhY2hlOyB9XG4gICAgICAgIHZhciByZXN1bHQgPSBtdXRhdGlvbi5yZXN1bHQ7XG4gICAgICAgIHZhciBjYWNoZVdyaXRlcyA9IFtdO1xuICAgICAgICB2YXIgc2tpcENhY2hlID0gbXV0YXRpb24uZmV0Y2hQb2xpY3kgPT09IFwibm8tY2FjaGVcIjtcbiAgICAgICAgaWYgKCFza2lwQ2FjaGUgJiYgc2hvdWxkV3JpdGVSZXN1bHQocmVzdWx0LCBtdXRhdGlvbi5lcnJvclBvbGljeSkpIHtcbiAgICAgICAgICAgIGlmICghaXNFeGVjdXRpb25QYXRjaEluY3JlbWVudGFsUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICBjYWNoZVdyaXRlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiByZXN1bHQuZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YUlkOiBcIlJPT1RfTVVUQVRJT05cIixcbiAgICAgICAgICAgICAgICAgICAgcXVlcnk6IG11dGF0aW9uLmRvY3VtZW50LFxuICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IG11dGF0aW9uLnZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0V4ZWN1dGlvblBhdGNoSW5jcmVtZW50YWxSZXN1bHQocmVzdWx0KSAmJlxuICAgICAgICAgICAgICAgIGlzTm9uRW1wdHlBcnJheShyZXN1bHQuaW5jcmVtZW50YWwpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRpZmYgPSBjYWNoZS5kaWZmKHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IFwiUk9PVF9NVVRBVElPTlwiLFxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgY2FjaGUgY29tcGxhaW5zIGlmIHBhc3NlZCBhIG11dGF0aW9uIHdoZXJlIGl0IGV4cGVjdHMgYVxuICAgICAgICAgICAgICAgICAgICAvLyBxdWVyeSwgc28gd2UgdHJhbnNmb3JtIG11dGF0aW9ucyBhbmQgc3Vic2NyaXB0aW9ucyB0byBxdWVyaWVzXG4gICAgICAgICAgICAgICAgICAgIC8vIChvbmx5IG9uY2UsIHRoYW5rcyB0byB0aGlzLnRyYW5zZm9ybUNhY2hlKS5cbiAgICAgICAgICAgICAgICAgICAgcXVlcnk6IHRoaXMuZ2V0RG9jdW1lbnRJbmZvKG11dGF0aW9uLmRvY3VtZW50KS5hc1F1ZXJ5LFxuICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IG11dGF0aW9uLnZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW1pc3RpYzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblBhcnRpYWxEYXRhOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHZhciBtZXJnZWREYXRhID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIGlmIChkaWZmLnJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBtZXJnZWREYXRhID0gbWVyZ2VJbmNyZW1lbnRhbERhdGEoZGlmZi5yZXN1bHQsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVyZ2VkRGF0YSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICAvLyBjYXN0IHRoZSBFeGVjdXRpb25QYXRjaFJlc3VsdCB0byBGZXRjaFJlc3VsdCBoZXJlIHNpbmNlXG4gICAgICAgICAgICAgICAgICAgIC8vIEV4ZWN1dGlvblBhdGNoUmVzdWx0IG5ldmVyIGhhcyBgZGF0YWAgd2hlbiByZXR1cm5lZCBmcm9tIHRoZSBzZXJ2ZXJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmRhdGEgPSBtZXJnZWREYXRhO1xuICAgICAgICAgICAgICAgICAgICBjYWNoZVdyaXRlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogbWVyZ2VkRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFJZDogXCJST09UX01VVEFUSU9OXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeTogbXV0YXRpb24uZG9jdW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IG11dGF0aW9uLnZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHVwZGF0ZVF1ZXJpZXNfMSA9IG11dGF0aW9uLnVwZGF0ZVF1ZXJpZXM7XG4gICAgICAgICAgICBpZiAodXBkYXRlUXVlcmllc18xKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5xdWVyaWVzLmZvckVhY2goZnVuY3Rpb24gKF9hLCBxdWVyeUlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvYnNlcnZhYmxlUXVlcnkgPSBfYS5vYnNlcnZhYmxlUXVlcnk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBxdWVyeU5hbWUgPSBvYnNlcnZhYmxlUXVlcnkgJiYgb2JzZXJ2YWJsZVF1ZXJ5LnF1ZXJ5TmFtZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFxdWVyeU5hbWUgfHwgIWhhc093blByb3BlcnR5LmNhbGwodXBkYXRlUXVlcmllc18xLCBxdWVyeU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZXIgPSB1cGRhdGVRdWVyaWVzXzFbcXVlcnlOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9iID0gX3RoaXMucXVlcmllcy5nZXQocXVlcnlJZCksIGRvY3VtZW50ID0gX2IuZG9jdW1lbnQsIHZhcmlhYmxlcyA9IF9iLnZhcmlhYmxlcztcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVhZCB0aGUgY3VycmVudCBxdWVyeSByZXN1bHQgZnJvbSB0aGUgc3RvcmUuXG4gICAgICAgICAgICAgICAgICAgIHZhciBfYyA9IGNhY2hlLmRpZmYoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnk6IGRvY3VtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVzOiB2YXJpYWJsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5QYXJ0aWFsRGF0YTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGltaXN0aWM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB9KSwgY3VycmVudFF1ZXJ5UmVzdWx0ID0gX2MucmVzdWx0LCBjb21wbGV0ZSA9IF9jLmNvbXBsZXRlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29tcGxldGUgJiYgY3VycmVudFF1ZXJ5UmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSdW4gb3VyIHJlZHVjZXIgdXNpbmcgdGhlIGN1cnJlbnQgcXVlcnkgcmVzdWx0IGFuZCB0aGUgbXV0YXRpb24gcmVzdWx0LlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5leHRRdWVyeVJlc3VsdCA9IHVwZGF0ZXIoY3VycmVudFF1ZXJ5UmVzdWx0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXV0YXRpb25SZXN1bHQ6IHJlc3VsdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeU5hbWU6IChkb2N1bWVudCAmJiBnZXRPcGVyYXRpb25OYW1lKGRvY3VtZW50KSkgfHwgdm9pZCAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5VmFyaWFibGVzOiB2YXJpYWJsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdyaXRlIHRoZSBtb2RpZmllZCByZXN1bHQgYmFjayBpbnRvIHRoZSBzdG9yZSBpZiB3ZSBnb3QgYSBuZXcgcmVzdWx0LlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRRdWVyeVJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlV3JpdGVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IG5leHRRdWVyeVJlc3VsdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUlkOiBcIlJPT1RfUVVFUllcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnk6IGRvY3VtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjYWNoZVdyaXRlcy5sZW5ndGggPiAwIHx8XG4gICAgICAgICAgICBtdXRhdGlvbi5yZWZldGNoUXVlcmllcyB8fFxuICAgICAgICAgICAgbXV0YXRpb24udXBkYXRlIHx8XG4gICAgICAgICAgICBtdXRhdGlvbi5vblF1ZXJ5VXBkYXRlZCB8fFxuICAgICAgICAgICAgbXV0YXRpb24ucmVtb3ZlT3B0aW1pc3RpYykge1xuICAgICAgICAgICAgdmFyIHJlc3VsdHNfMSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5yZWZldGNoUXVlcmllcyh7XG4gICAgICAgICAgICAgICAgdXBkYXRlQ2FjaGU6IGZ1bmN0aW9uIChjYWNoZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXNraXBDYWNoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVXcml0ZXMuZm9yRWFjaChmdW5jdGlvbiAod3JpdGUpIHsgcmV0dXJuIGNhY2hlLndyaXRlKHdyaXRlKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIG11dGF0aW9uIGhhcyBzb21lIHdyaXRlcyBhc3NvY2lhdGVkIHdpdGggaXQgdGhlbiB3ZSBuZWVkIHRvXG4gICAgICAgICAgICAgICAgICAgIC8vIGFwcGx5IHRob3NlIHdyaXRlcyB0byB0aGUgc3RvcmUgYnkgcnVubmluZyB0aGlzIHJlZHVjZXIgYWdhaW4gd2l0aFxuICAgICAgICAgICAgICAgICAgICAvLyBhIHdyaXRlIGFjdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZSA9IG11dGF0aW9uLnVwZGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIHdoZXRoZXIgcmVzdWx0IGlzIGEgU2luZ2xlRXhlY3V0aW9uUmVzdWx0LFxuICAgICAgICAgICAgICAgICAgICAvLyBvciB0aGUgZmluYWwgRXhlY3V0aW9uUGF0Y2hSZXN1bHQuXG4gICAgICAgICAgICAgICAgICAgIHZhciBpc0ZpbmFsUmVzdWx0ID0gIWlzRXhlY3V0aW9uUGF0Y2hSZXN1bHQocmVzdWx0KSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKGlzRXhlY3V0aW9uUGF0Y2hJbmNyZW1lbnRhbFJlc3VsdChyZXN1bHQpICYmICFyZXN1bHQuaGFzTmV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1cGRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2tpcENhY2hlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmUtcmVhZCB0aGUgUk9PVF9NVVRBVElPTiBkYXRhIHdlIGp1c3Qgd3JvdGUgaW50byB0aGUgY2FjaGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAodGhlIGZpcnN0IGNhY2hlLndyaXRlIGNhbGwgaW4gdGhlIGNhY2hlV3JpdGVzLmZvckVhY2ggbG9vcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFib3ZlKSwgc28gZmllbGQgcmVhZCBmdW5jdGlvbnMgaGF2ZSBhIGNoYW5jZSB0byBydW4gZm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmllbGRzIHdpdGhpbiBtdXRhdGlvbiByZXN1bHQgb2JqZWN0cy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlmZiA9IGNhY2hlLmRpZmYoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogXCJST09UX01VVEFUSU9OXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBjYWNoZSBjb21wbGFpbnMgaWYgcGFzc2VkIGEgbXV0YXRpb24gd2hlcmUgaXQgZXhwZWN0cyBhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHF1ZXJ5LCBzbyB3ZSB0cmFuc2Zvcm0gbXV0YXRpb25zIGFuZCBzdWJzY3JpcHRpb25zIHRvIHF1ZXJpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gKG9ubHkgb25jZSwgdGhhbmtzIHRvIHRoaXMudHJhbnNmb3JtQ2FjaGUpLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeTogX3RoaXMuZ2V0RG9jdW1lbnRJbmZvKG11dGF0aW9uLmRvY3VtZW50KS5hc1F1ZXJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IG11dGF0aW9uLnZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW1pc3RpYzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblBhcnRpYWxEYXRhOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaWZmLmNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCByZXN1bHQpLCB7IGRhdGE6IGRpZmYucmVzdWx0IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJpbmNyZW1lbnRhbFwiIGluIHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJlc3VsdC5pbmNyZW1lbnRhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCJoYXNOZXh0XCIgaW4gcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVzdWx0Lmhhc05leHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSd2ZSByZWNlaXZlZCB0aGUgd2hvbGUgcmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlaXRoZXIgYSBTaW5nbGVFeGVjdXRpb25SZXN1bHQgb3IgdGhlIGZpbmFsIEV4ZWN1dGlvblBhdGNoUmVzdWx0LFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FsbCB0aGUgdXBkYXRlIGZ1bmN0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzRmluYWxSZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUoY2FjaGUsIHJlc3VsdCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiBtdXRhdGlvbi5jb250ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IG11dGF0aW9uLnZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIERvIHRoaXMgd2l0aCBjYWNoZS5ldmljdCh7IGlkOiAnUk9PVF9NVVRBVElPTicgfSkgYnV0IG1ha2UgaXRcbiAgICAgICAgICAgICAgICAgICAgLy8gc2hhbGxvdyB0byBhbGxvdyByb2xsaW5nIGJhY2sgb3B0aW1pc3RpYyBldmljdGlvbnMuXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2tpcENhY2hlICYmICFtdXRhdGlvbi5rZWVwUm9vdEZpZWxkcyAmJiBpc0ZpbmFsUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS5tb2RpZnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBcIlJPT1RfTVVUQVRJT05cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZHM6IGZ1bmN0aW9uICh2YWx1ZSwgX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpZWxkTmFtZSA9IF9hLmZpZWxkTmFtZSwgREVMRVRFID0gX2EuREVMRVRFO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmllbGROYW1lID09PSBcIl9fdHlwZW5hbWVcIiA/IHZhbHVlIDogREVMRVRFO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5jbHVkZTogbXV0YXRpb24ucmVmZXRjaFF1ZXJpZXMsXG4gICAgICAgICAgICAgICAgLy8gV3JpdGUgdGhlIGZpbmFsIG11dGF0aW9uLnJlc3VsdCB0byB0aGUgcm9vdCBsYXllciBvZiB0aGUgY2FjaGUuXG4gICAgICAgICAgICAgICAgb3B0aW1pc3RpYzogZmFsc2UsXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBjb3JyZXNwb25kaW5nIG9wdGltaXN0aWMgbGF5ZXIgYXQgdGhlIHNhbWUgdGltZSBhcyB3ZVxuICAgICAgICAgICAgICAgIC8vIHdyaXRlIHRoZSBmaW5hbCBub24tb3B0aW1pc3RpYyByZXN1bHQuXG4gICAgICAgICAgICAgICAgcmVtb3ZlT3B0aW1pc3RpYzogbXV0YXRpb24ucmVtb3ZlT3B0aW1pc3RpYyxcbiAgICAgICAgICAgICAgICAvLyBMZXQgdGhlIGNhbGxlciBvZiBjbGllbnQubXV0YXRlIG9wdGlvbmFsbHkgZGV0ZXJtaW5lIHRoZSByZWZldGNoaW5nXG4gICAgICAgICAgICAgICAgLy8gYmVoYXZpb3IgZm9yIHdhdGNoZWQgcXVlcmllcyBhZnRlciB0aGUgbXV0YXRpb24udXBkYXRlIGZ1bmN0aW9uIHJ1bnMuXG4gICAgICAgICAgICAgICAgLy8gSWYgbm8gb25RdWVyeVVwZGF0ZWQgZnVuY3Rpb24gd2FzIHByb3ZpZGVkIGZvciB0aGlzIG11dGF0aW9uLCBwYXNzXG4gICAgICAgICAgICAgICAgLy8gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZCB0byBkaXNhYmxlIHRoZSBkZWZhdWx0IHJlZmV0Y2hpbmcgYmVoYXZpb3IuXG4gICAgICAgICAgICAgICAgb25RdWVyeVVwZGF0ZWQ6IG11dGF0aW9uLm9uUXVlcnlVcGRhdGVkIHx8IG51bGwsXG4gICAgICAgICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChyZXN1bHQpIHsgcmV0dXJuIHJlc3VsdHNfMS5wdXNoKHJlc3VsdCk7IH0pO1xuICAgICAgICAgICAgaWYgKG11dGF0aW9uLmF3YWl0UmVmZXRjaFF1ZXJpZXMgfHwgbXV0YXRpb24ub25RdWVyeVVwZGF0ZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBSZXR1cm5pbmcgYSBwcm9taXNlIGhlcmUgbWFrZXMgdGhlIG11dGF0aW9uIGF3YWl0IHRoYXQgcHJvbWlzZSwgc28gd2VcbiAgICAgICAgICAgICAgICAvLyBpbmNsdWRlIHJlc3VsdHMgaW4gdGhhdCBwcm9taXNlJ3Mgd29yayBpZiBhd2FpdFJlZmV0Y2hRdWVyaWVzIG9yIGFuXG4gICAgICAgICAgICAgICAgLy8gb25RdWVyeVVwZGF0ZWQgZnVuY3Rpb24gd2FzIHNwZWNpZmllZC5cbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocmVzdWx0c18xKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc3VsdDsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHQpO1xuICAgIH07XG4gICAgUXVlcnlNYW5hZ2VyLnByb3RvdHlwZS5tYXJrTXV0YXRpb25PcHRpbWlzdGljID0gZnVuY3Rpb24gKG9wdGltaXN0aWNSZXNwb25zZSwgbXV0YXRpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGRhdGEgPSB0eXBlb2Ygb3B0aW1pc3RpY1Jlc3BvbnNlID09PSBcImZ1bmN0aW9uXCIgP1xuICAgICAgICAgICAgb3B0aW1pc3RpY1Jlc3BvbnNlKG11dGF0aW9uLnZhcmlhYmxlcywgeyBJR05PUkU6IElHTk9SRSB9KVxuICAgICAgICAgICAgOiBvcHRpbWlzdGljUmVzcG9uc2U7XG4gICAgICAgIGlmIChkYXRhID09PSBJR05PUkUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNhY2hlLnJlY29yZE9wdGltaXN0aWNUcmFuc2FjdGlvbihmdW5jdGlvbiAoY2FjaGUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgX3RoaXMubWFya011dGF0aW9uUmVzdWx0KF9fYXNzaWduKF9fYXNzaWduKHt9LCBtdXRhdGlvbiksIHsgcmVzdWx0OiB7IGRhdGE6IGRhdGEgfSB9KSwgY2FjaGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSAmJiBpbnZhcmlhbnQuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBtdXRhdGlvbi5tdXRhdGlvbklkKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBRdWVyeU1hbmFnZXIucHJvdG90eXBlLmZldGNoUXVlcnkgPSBmdW5jdGlvbiAocXVlcnlJZCwgb3B0aW9ucywgbmV0d29ya1N0YXR1cykge1xuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaENvbmNhc3RXaXRoSW5mbyhxdWVyeUlkLCBvcHRpb25zLCBuZXR3b3JrU3RhdHVzKS5jb25jYXN0XG4gICAgICAgICAgICAucHJvbWlzZTtcbiAgICB9O1xuICAgIFF1ZXJ5TWFuYWdlci5wcm90b3R5cGUuZ2V0UXVlcnlTdG9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN0b3JlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5xdWVyaWVzLmZvckVhY2goZnVuY3Rpb24gKGluZm8sIHF1ZXJ5SWQpIHtcbiAgICAgICAgICAgIHN0b3JlW3F1ZXJ5SWRdID0ge1xuICAgICAgICAgICAgICAgIHZhcmlhYmxlczogaW5mby52YXJpYWJsZXMsXG4gICAgICAgICAgICAgICAgbmV0d29ya1N0YXR1czogaW5mby5uZXR3b3JrU3RhdHVzLFxuICAgICAgICAgICAgICAgIG5ldHdvcmtFcnJvcjogaW5mby5uZXR3b3JrRXJyb3IsXG4gICAgICAgICAgICAgICAgZ3JhcGhRTEVycm9yczogaW5mby5ncmFwaFFMRXJyb3JzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzdG9yZTtcbiAgICB9O1xuICAgIFF1ZXJ5TWFuYWdlci5wcm90b3R5cGUucmVzZXRFcnJvcnMgPSBmdW5jdGlvbiAocXVlcnlJZCkge1xuICAgICAgICB2YXIgcXVlcnlJbmZvID0gdGhpcy5xdWVyaWVzLmdldChxdWVyeUlkKTtcbiAgICAgICAgaWYgKHF1ZXJ5SW5mbykge1xuICAgICAgICAgICAgcXVlcnlJbmZvLm5ldHdvcmtFcnJvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHF1ZXJ5SW5mby5ncmFwaFFMRXJyb3JzID0gW107XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFF1ZXJ5TWFuYWdlci5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24gKGRvY3VtZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50VHJhbnNmb3JtLnRyYW5zZm9ybURvY3VtZW50KGRvY3VtZW50KTtcbiAgICB9O1xuICAgIFF1ZXJ5TWFuYWdlci5wcm90b3R5cGUuZ2V0RG9jdW1lbnRJbmZvID0gZnVuY3Rpb24gKGRvY3VtZW50KSB7XG4gICAgICAgIHZhciB0cmFuc2Zvcm1DYWNoZSA9IHRoaXMudHJhbnNmb3JtQ2FjaGU7XG4gICAgICAgIGlmICghdHJhbnNmb3JtQ2FjaGUuaGFzKGRvY3VtZW50KSkge1xuICAgICAgICAgICAgdmFyIGNhY2hlRW50cnkgPSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETyBUaGVzZSB0aHJlZSBjYWxscyAoaGFzQ2xpZW50RXhwb3J0cywgc2hvdWxkRm9yY2VSZXNvbHZlcnMsIGFuZFxuICAgICAgICAgICAgICAgIC8vIHVzZXNOb25yZWFjdGl2ZURpcmVjdGl2ZSkgYXJlIHBlcmZvcm1pbmcgaW5kZXBlbmRlbnQgZnVsbCB0cmF2ZXJzYWxzXG4gICAgICAgICAgICAgICAgLy8gb2YgdGhlIHRyYW5zZm9ybWVkIGRvY3VtZW50LiBXZSBzaG91bGQgY29uc2lkZXIgbWVyZ2luZyB0aGVzZVxuICAgICAgICAgICAgICAgIC8vIHRyYXZlcnNhbHMgaW50byBhIHNpbmdsZSBwYXNzIGluIHRoZSBmdXR1cmUsIHRob3VnaCB0aGUgd29yayBpc1xuICAgICAgICAgICAgICAgIC8vIGNhY2hlZCBhZnRlciB0aGUgZmlyc3QgdGltZS5cbiAgICAgICAgICAgICAgICBoYXNDbGllbnRFeHBvcnRzOiBoYXNDbGllbnRFeHBvcnRzKGRvY3VtZW50KSxcbiAgICAgICAgICAgICAgICBoYXNGb3JjZWRSZXNvbHZlcnM6IHRoaXMubG9jYWxTdGF0ZS5zaG91bGRGb3JjZVJlc29sdmVycyhkb2N1bWVudCksXG4gICAgICAgICAgICAgICAgaGFzTm9ucmVhY3RpdmVEaXJlY3RpdmU6IGhhc0RpcmVjdGl2ZXMoW1wibm9ucmVhY3RpdmVcIl0sIGRvY3VtZW50KSxcbiAgICAgICAgICAgICAgICBjbGllbnRRdWVyeTogdGhpcy5sb2NhbFN0YXRlLmNsaWVudFF1ZXJ5KGRvY3VtZW50KSxcbiAgICAgICAgICAgICAgICBzZXJ2ZXJRdWVyeTogcmVtb3ZlRGlyZWN0aXZlc0Zyb21Eb2N1bWVudChbXG4gICAgICAgICAgICAgICAgICAgIHsgbmFtZTogXCJjbGllbnRcIiwgcmVtb3ZlOiB0cnVlIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgbmFtZTogXCJjb25uZWN0aW9uXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiBcIm5vbnJlYWN0aXZlXCIgfSxcbiAgICAgICAgICAgICAgICBdLCBkb2N1bWVudCksXG4gICAgICAgICAgICAgICAgZGVmYXVsdFZhcnM6IGdldERlZmF1bHRWYWx1ZXMoZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbihkb2N1bWVudCkpLFxuICAgICAgICAgICAgICAgIC8vIFRyYW5zZm9ybSBhbnkgbXV0YXRpb24gb3Igc3Vic2NyaXB0aW9uIG9wZXJhdGlvbnMgdG8gcXVlcnkgb3BlcmF0aW9uc1xuICAgICAgICAgICAgICAgIC8vIHNvIHdlIGNhbiByZWFkL3dyaXRlIHRoZW0gZnJvbS90byB0aGUgY2FjaGUuXG4gICAgICAgICAgICAgICAgYXNRdWVyeTogX19hc3NpZ24oX19hc3NpZ24oe30sIGRvY3VtZW50KSwgeyBkZWZpbml0aW9uczogZG9jdW1lbnQuZGVmaW5pdGlvbnMubWFwKGZ1bmN0aW9uIChkZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWYua2luZCA9PT0gXCJPcGVyYXRpb25EZWZpbml0aW9uXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWYub3BlcmF0aW9uICE9PSBcInF1ZXJ5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIGRlZiksIHsgb3BlcmF0aW9uOiBcInF1ZXJ5XCIgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVmO1xuICAgICAgICAgICAgICAgICAgICB9KSB9KSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0cmFuc2Zvcm1DYWNoZS5zZXQoZG9jdW1lbnQsIGNhY2hlRW50cnkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1DYWNoZS5nZXQoZG9jdW1lbnQpO1xuICAgIH07XG4gICAgUXVlcnlNYW5hZ2VyLnByb3RvdHlwZS5nZXRWYXJpYWJsZXMgPSBmdW5jdGlvbiAoZG9jdW1lbnQsIHZhcmlhYmxlcykge1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuZ2V0RG9jdW1lbnRJbmZvKGRvY3VtZW50KS5kZWZhdWx0VmFycyksIHZhcmlhYmxlcyk7XG4gICAgfTtcbiAgICBRdWVyeU1hbmFnZXIucHJvdG90eXBlLndhdGNoUXVlcnkgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB2YXIgcXVlcnkgPSB0aGlzLnRyYW5zZm9ybShvcHRpb25zLnF1ZXJ5KTtcbiAgICAgICAgLy8gYXNzaWduIHZhcmlhYmxlIGRlZmF1bHQgdmFsdWVzIGlmIHN1cHBsaWVkXG4gICAgICAgIC8vIE5PVEU6IFdlIGRvbid0IG1vZGlmeSBvcHRpb25zLnF1ZXJ5IGhlcmUgd2l0aCB0aGUgdHJhbnNmb3JtZWQgcXVlcnkgdG9cbiAgICAgICAgLy8gZW5zdXJlIG9ic2VydmFibGUub3B0aW9ucy5xdWVyeSBpcyBzZXQgdG8gdGhlIHJhdyB1bnRyYW5zZm9ybWVkIHF1ZXJ5LlxuICAgICAgICBvcHRpb25zID0gX19hc3NpZ24oX19hc3NpZ24oe30sIG9wdGlvbnMpLCB7IHZhcmlhYmxlczogdGhpcy5nZXRWYXJpYWJsZXMocXVlcnksIG9wdGlvbnMudmFyaWFibGVzKSB9KTtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLm5vdGlmeU9uTmV0d29ya1N0YXR1c0NoYW5nZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgb3B0aW9ucy5ub3RpZnlPbk5ldHdvcmtTdGF0dXNDaGFuZ2UgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcXVlcnlJbmZvID0gbmV3IFF1ZXJ5SW5mbyh0aGlzKTtcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZVF1ZXJ5KHtcbiAgICAgICAgICAgIHF1ZXJ5TWFuYWdlcjogdGhpcyxcbiAgICAgICAgICAgIHF1ZXJ5SW5mbzogcXVlcnlJbmZvLFxuICAgICAgICAgICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICAgICAgfSk7XG4gICAgICAgIG9ic2VydmFibGVbXCJsYXN0UXVlcnlcIl0gPSBxdWVyeTtcbiAgICAgICAgdGhpcy5xdWVyaWVzLnNldChvYnNlcnZhYmxlLnF1ZXJ5SWQsIHF1ZXJ5SW5mbyk7XG4gICAgICAgIC8vIFdlIGdpdmUgcXVlcnlJbmZvIHRoZSB0cmFuc2Zvcm1lZCBxdWVyeSB0byBlbnN1cmUgdGhlIGZpcnN0IGNhY2hlIGRpZmZcbiAgICAgICAgLy8gdXNlcyB0aGUgdHJhbnNmb3JtZWQgcXVlcnkgaW5zdGVhZCBvZiB0aGUgcmF3IHF1ZXJ5XG4gICAgICAgIHF1ZXJ5SW5mby5pbml0KHtcbiAgICAgICAgICAgIGRvY3VtZW50OiBxdWVyeSxcbiAgICAgICAgICAgIG9ic2VydmFibGVRdWVyeTogb2JzZXJ2YWJsZSxcbiAgICAgICAgICAgIHZhcmlhYmxlczogb2JzZXJ2YWJsZS52YXJpYWJsZXMsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgICB9O1xuICAgIFF1ZXJ5TWFuYWdlci5wcm90b3R5cGUucXVlcnkgPSBmdW5jdGlvbiAob3B0aW9ucywgcXVlcnlJZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAocXVlcnlJZCA9PT0gdm9pZCAwKSB7IHF1ZXJ5SWQgPSB0aGlzLmdlbmVyYXRlUXVlcnlJZCgpOyB9XG4gICAgICAgIGludmFyaWFudChvcHRpb25zLnF1ZXJ5LCAyOCk7XG4gICAgICAgIGludmFyaWFudChvcHRpb25zLnF1ZXJ5LmtpbmQgPT09IFwiRG9jdW1lbnRcIiwgMjkpO1xuICAgICAgICBpbnZhcmlhbnQoIW9wdGlvbnMucmV0dXJuUGFydGlhbERhdGEsIDMwKTtcbiAgICAgICAgaW52YXJpYW50KCFvcHRpb25zLnBvbGxJbnRlcnZhbCwgMzEpO1xuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaFF1ZXJ5KHF1ZXJ5SWQsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBvcHRpb25zKSwgeyBxdWVyeTogdGhpcy50cmFuc2Zvcm0ob3B0aW9ucy5xdWVyeSkgfSkpLmZpbmFsbHkoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc3RvcFF1ZXJ5KHF1ZXJ5SWQpOyB9KTtcbiAgICB9O1xuICAgIFF1ZXJ5TWFuYWdlci5wcm90b3R5cGUuZ2VuZXJhdGVRdWVyeUlkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gU3RyaW5nKHRoaXMucXVlcnlJZENvdW50ZXIrKyk7XG4gICAgfTtcbiAgICBRdWVyeU1hbmFnZXIucHJvdG90eXBlLmdlbmVyYXRlUmVxdWVzdElkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0SWRDb3VudGVyKys7XG4gICAgfTtcbiAgICBRdWVyeU1hbmFnZXIucHJvdG90eXBlLmdlbmVyYXRlTXV0YXRpb25JZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyh0aGlzLm11dGF0aW9uSWRDb3VudGVyKyspO1xuICAgIH07XG4gICAgUXVlcnlNYW5hZ2VyLnByb3RvdHlwZS5zdG9wUXVlcnlJblN0b3JlID0gZnVuY3Rpb24gKHF1ZXJ5SWQpIHtcbiAgICAgICAgdGhpcy5zdG9wUXVlcnlJblN0b3JlTm9Ccm9hZGNhc3QocXVlcnlJZCk7XG4gICAgICAgIHRoaXMuYnJvYWRjYXN0UXVlcmllcygpO1xuICAgIH07XG4gICAgUXVlcnlNYW5hZ2VyLnByb3RvdHlwZS5zdG9wUXVlcnlJblN0b3JlTm9Ccm9hZGNhc3QgPSBmdW5jdGlvbiAocXVlcnlJZCkge1xuICAgICAgICB2YXIgcXVlcnlJbmZvID0gdGhpcy5xdWVyaWVzLmdldChxdWVyeUlkKTtcbiAgICAgICAgaWYgKHF1ZXJ5SW5mbylcbiAgICAgICAgICAgIHF1ZXJ5SW5mby5zdG9wKCk7XG4gICAgfTtcbiAgICBRdWVyeU1hbmFnZXIucHJvdG90eXBlLmNsZWFyU3RvcmUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBkaXNjYXJkV2F0Y2hlczogdHJ1ZSxcbiAgICAgICAgfTsgfVxuICAgICAgICAvLyBCZWZvcmUgd2UgaGF2ZSBzZW50IHRoZSByZXNldCBhY3Rpb24gdG8gdGhlIHN0b3JlLCB3ZSBjYW4gbm8gbG9uZ2VyXG4gICAgICAgIC8vIHJlbHkgb24gdGhlIHJlc3VsdHMgcmV0dXJuZWQgYnkgaW4tZmxpZ2h0IHJlcXVlc3RzIHNpbmNlIHRoZXNlIG1heVxuICAgICAgICAvLyBkZXBlbmQgb24gdmFsdWVzIHRoYXQgcHJldmlvdXNseSBleGlzdGVkIGluIHRoZSBkYXRhIHBvcnRpb24gb2YgdGhlXG4gICAgICAgIC8vIHN0b3JlLiBTbywgd2UgY2FuY2VsIHRoZSBwcm9taXNlcyBhbmQgb2JzZXJ2ZXJzIHRoYXQgd2UgaGF2ZSBpc3N1ZWRcbiAgICAgICAgLy8gc28gZmFyIGFuZCBub3QgeWV0IHJlc29sdmVkIChpbiB0aGUgY2FzZSBvZiBxdWVyaWVzKS5cbiAgICAgICAgdGhpcy5jYW5jZWxQZW5kaW5nRmV0Y2hlcyhuZXdJbnZhcmlhbnRFcnJvcigzMikpO1xuICAgICAgICB0aGlzLnF1ZXJpZXMuZm9yRWFjaChmdW5jdGlvbiAocXVlcnlJbmZvKSB7XG4gICAgICAgICAgICBpZiAocXVlcnlJbmZvLm9ic2VydmFibGVRdWVyeSkge1xuICAgICAgICAgICAgICAgIC8vIFNldCBsb2FkaW5nIHRvIHRydWUgc28gbGlzdGVuZXJzIGRvbid0IHRyaWdnZXIgdW5sZXNzIHRoZXkgd2FudFxuICAgICAgICAgICAgICAgIC8vIHJlc3VsdHMgd2l0aCBwYXJ0aWFsIGRhdGEuXG4gICAgICAgICAgICAgICAgcXVlcnlJbmZvLm5ldHdvcmtTdGF0dXMgPSBOZXR3b3JrU3RhdHVzLmxvYWRpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBxdWVyeUluZm8uc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRoaXMubXV0YXRpb25TdG9yZSkge1xuICAgICAgICAgICAgdGhpcy5tdXRhdGlvblN0b3JlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBiZWdpbiByZW1vdmluZyBkYXRhIGZyb20gdGhlIHN0b3JlXG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlLnJlc2V0KG9wdGlvbnMpO1xuICAgIH07XG4gICAgUXVlcnlNYW5hZ2VyLnByb3RvdHlwZS5nZXRPYnNlcnZhYmxlUXVlcmllcyA9IGZ1bmN0aW9uIChpbmNsdWRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChpbmNsdWRlID09PSB2b2lkIDApIHsgaW5jbHVkZSA9IFwiYWN0aXZlXCI7IH1cbiAgICAgICAgdmFyIHF1ZXJpZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHZhciBxdWVyeU5hbWVzQW5kRG9jcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdmFyIGxlZ2FjeVF1ZXJ5T3B0aW9ucyA9IG5ldyBTZXQoKTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaW5jbHVkZSkpIHtcbiAgICAgICAgICAgIGluY2x1ZGUuZm9yRWFjaChmdW5jdGlvbiAoZGVzYykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZGVzYyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICBxdWVyeU5hbWVzQW5kRG9jcy5zZXQoZGVzYywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc0RvY3VtZW50Tm9kZShkZXNjKSkge1xuICAgICAgICAgICAgICAgICAgICBxdWVyeU5hbWVzQW5kRG9jcy5zZXQoX3RoaXMudHJhbnNmb3JtKGRlc2MpLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzTm9uTnVsbE9iamVjdChkZXNjKSAmJiBkZXNjLnF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIGxlZ2FjeVF1ZXJ5T3B0aW9ucy5hZGQoZGVzYyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5xdWVyaWVzLmZvckVhY2goZnVuY3Rpb24gKF9hLCBxdWVyeUlkKSB7XG4gICAgICAgICAgICB2YXIgb3EgPSBfYS5vYnNlcnZhYmxlUXVlcnksIGRvY3VtZW50ID0gX2EuZG9jdW1lbnQ7XG4gICAgICAgICAgICBpZiAob3EpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5jbHVkZSA9PT0gXCJhbGxcIikge1xuICAgICAgICAgICAgICAgICAgICBxdWVyaWVzLnNldChxdWVyeUlkLCBvcSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHF1ZXJ5TmFtZSA9IG9xLnF1ZXJ5TmFtZSwgZmV0Y2hQb2xpY3kgPSBvcS5vcHRpb25zLmZldGNoUG9saWN5O1xuICAgICAgICAgICAgICAgIGlmIChmZXRjaFBvbGljeSA9PT0gXCJzdGFuZGJ5XCIgfHxcbiAgICAgICAgICAgICAgICAgICAgKGluY2x1ZGUgPT09IFwiYWN0aXZlXCIgJiYgIW9xLmhhc09ic2VydmVycygpKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpbmNsdWRlID09PSBcImFjdGl2ZVwiIHx8XG4gICAgICAgICAgICAgICAgICAgIChxdWVyeU5hbWUgJiYgcXVlcnlOYW1lc0FuZERvY3MuaGFzKHF1ZXJ5TmFtZSkpIHx8XG4gICAgICAgICAgICAgICAgICAgIChkb2N1bWVudCAmJiBxdWVyeU5hbWVzQW5kRG9jcy5oYXMoZG9jdW1lbnQpKSkge1xuICAgICAgICAgICAgICAgICAgICBxdWVyaWVzLnNldChxdWVyeUlkLCBvcSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChxdWVyeU5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeU5hbWVzQW5kRG9jcy5zZXQocXVlcnlOYW1lLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlOYW1lc0FuZERvY3Muc2V0KGRvY3VtZW50LCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobGVnYWN5UXVlcnlPcHRpb25zLnNpemUpIHtcbiAgICAgICAgICAgIGxlZ2FjeVF1ZXJ5T3B0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgLy8gV2Ugd2lsbCBiZSBpc3N1aW5nIGEgZnJlc2ggbmV0d29yayByZXF1ZXN0IGZvciB0aGlzIHF1ZXJ5LCBzbyB3ZVxuICAgICAgICAgICAgICAgIC8vIHByZS1hbGxvY2F0ZSBhIG5ldyBxdWVyeSBJRCBoZXJlLCB1c2luZyBhIHNwZWNpYWwgcHJlZml4IHRvIGVuYWJsZVxuICAgICAgICAgICAgICAgIC8vIGNsZWFuaW5nIHVwIHRoZXNlIHRlbXBvcmFyeSBxdWVyaWVzIGxhdGVyLCBhZnRlciBmZXRjaGluZy5cbiAgICAgICAgICAgICAgICB2YXIgcXVlcnlJZCA9IG1ha2VVbmlxdWVJZChcImxlZ2FjeU9uZVRpbWVRdWVyeVwiKTtcbiAgICAgICAgICAgICAgICB2YXIgcXVlcnlJbmZvID0gX3RoaXMuZ2V0UXVlcnkocXVlcnlJZCkuaW5pdCh7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50OiBvcHRpb25zLnF1ZXJ5LFxuICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IG9wdGlvbnMudmFyaWFibGVzLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHZhciBvcSA9IG5ldyBPYnNlcnZhYmxlUXVlcnkoe1xuICAgICAgICAgICAgICAgICAgICBxdWVyeU1hbmFnZXI6IF90aGlzLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeUluZm86IHF1ZXJ5SW5mbyxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogX19hc3NpZ24oX19hc3NpZ24oe30sIG9wdGlvbnMpLCB7IGZldGNoUG9saWN5OiBcIm5ldHdvcmstb25seVwiIH0pLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGludmFyaWFudChvcS5xdWVyeUlkID09PSBxdWVyeUlkKTtcbiAgICAgICAgICAgICAgICBxdWVyeUluZm8uc2V0T2JzZXJ2YWJsZVF1ZXJ5KG9xKTtcbiAgICAgICAgICAgICAgICBxdWVyaWVzLnNldChxdWVyeUlkLCBvcSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSAmJiBxdWVyeU5hbWVzQW5kRG9jcy5zaXplKSB7XG4gICAgICAgICAgICBxdWVyeU5hbWVzQW5kRG9jcy5mb3JFYWNoKGZ1bmN0aW9uIChpbmNsdWRlZCwgbmFtZU9yRG9jKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpbmNsdWRlZCkge1xuICAgICAgICAgICAgICAgICAgICBnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlICYmIGludmFyaWFudC53YXJuKHR5cGVvZiBuYW1lT3JEb2MgPT09IFwic3RyaW5nXCIgPyAzMyA6IDM0LCBuYW1lT3JEb2MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBxdWVyaWVzO1xuICAgIH07XG4gICAgUXVlcnlNYW5hZ2VyLnByb3RvdHlwZS5yZUZldGNoT2JzZXJ2YWJsZVF1ZXJpZXMgPSBmdW5jdGlvbiAoaW5jbHVkZVN0YW5kYnkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKGluY2x1ZGVTdGFuZGJ5ID09PSB2b2lkIDApIHsgaW5jbHVkZVN0YW5kYnkgPSBmYWxzZTsgfVxuICAgICAgICB2YXIgb2JzZXJ2YWJsZVF1ZXJ5UHJvbWlzZXMgPSBbXTtcbiAgICAgICAgdGhpcy5nZXRPYnNlcnZhYmxlUXVlcmllcyhpbmNsdWRlU3RhbmRieSA/IFwiYWxsXCIgOiBcImFjdGl2ZVwiKS5mb3JFYWNoKGZ1bmN0aW9uIChvYnNlcnZhYmxlUXVlcnksIHF1ZXJ5SWQpIHtcbiAgICAgICAgICAgIHZhciBmZXRjaFBvbGljeSA9IG9ic2VydmFibGVRdWVyeS5vcHRpb25zLmZldGNoUG9saWN5O1xuICAgICAgICAgICAgb2JzZXJ2YWJsZVF1ZXJ5LnJlc2V0TGFzdFJlc3VsdHMoKTtcbiAgICAgICAgICAgIGlmIChpbmNsdWRlU3RhbmRieSB8fFxuICAgICAgICAgICAgICAgIChmZXRjaFBvbGljeSAhPT0gXCJzdGFuZGJ5XCIgJiYgZmV0Y2hQb2xpY3kgIT09IFwiY2FjaGUtb25seVwiKSkge1xuICAgICAgICAgICAgICAgIG9ic2VydmFibGVRdWVyeVByb21pc2VzLnB1c2gob2JzZXJ2YWJsZVF1ZXJ5LnJlZmV0Y2goKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5nZXRRdWVyeShxdWVyeUlkKS5zZXREaWZmKG51bGwpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5icm9hZGNhc3RRdWVyaWVzKCk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChvYnNlcnZhYmxlUXVlcnlQcm9taXNlcyk7XG4gICAgfTtcbiAgICBRdWVyeU1hbmFnZXIucHJvdG90eXBlLnNldE9ic2VydmFibGVRdWVyeSA9IGZ1bmN0aW9uIChvYnNlcnZhYmxlUXVlcnkpIHtcbiAgICAgICAgdGhpcy5nZXRRdWVyeShvYnNlcnZhYmxlUXVlcnkucXVlcnlJZCkuc2V0T2JzZXJ2YWJsZVF1ZXJ5KG9ic2VydmFibGVRdWVyeSk7XG4gICAgfTtcbiAgICBRdWVyeU1hbmFnZXIucHJvdG90eXBlLnN0YXJ0R3JhcGhRTFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcXVlcnkgPSBfYS5xdWVyeSwgZmV0Y2hQb2xpY3kgPSBfYS5mZXRjaFBvbGljeSwgX2IgPSBfYS5lcnJvclBvbGljeSwgZXJyb3JQb2xpY3kgPSBfYiA9PT0gdm9pZCAwID8gXCJub25lXCIgOiBfYiwgdmFyaWFibGVzID0gX2EudmFyaWFibGVzLCBfYyA9IF9hLmNvbnRleHQsIGNvbnRleHQgPSBfYyA9PT0gdm9pZCAwID8ge30gOiBfYztcbiAgICAgICAgcXVlcnkgPSB0aGlzLnRyYW5zZm9ybShxdWVyeSk7XG4gICAgICAgIHZhcmlhYmxlcyA9IHRoaXMuZ2V0VmFyaWFibGVzKHF1ZXJ5LCB2YXJpYWJsZXMpO1xuICAgICAgICB2YXIgbWFrZU9ic2VydmFibGUgPSBmdW5jdGlvbiAodmFyaWFibGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuZ2V0T2JzZXJ2YWJsZUZyb21MaW5rKHF1ZXJ5LCBjb250ZXh0LCB2YXJpYWJsZXMpLm1hcChmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGZldGNoUG9saWN5ICE9PSBcIm5vLWNhY2hlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHN1YnNjcmlwdGlvbiBpbnRlcmZhY2Ugc2hvdWxkIGhhbmRsZSBub3Qgc2VuZGluZyB1cyByZXN1bHRzIHdlIG5vIGxvbmdlciBzdWJzY3JpYmUgdG8uXG4gICAgICAgICAgICAgICAgICAgIC8vIFhYWCBJIGRvbid0IHRoaW5rIHdlIGV2ZXIgc2VuZCBpbiBhbiBvYmplY3Qgd2l0aCBlcnJvcnMsIGJ1dCB3ZSBtaWdodCBpbiB0aGUgZnV0dXJlLi4uXG4gICAgICAgICAgICAgICAgICAgIGlmIChzaG91bGRXcml0ZVJlc3VsdChyZXN1bHQsIGVycm9yUG9saWN5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY2FjaGUud3JpdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IHJlc3VsdC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFJZDogXCJST09UX1NVQlNDUklQVElPTlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuYnJvYWRjYXN0UXVlcmllcygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgaGFzRXJyb3JzID0gZ3JhcGhRTFJlc3VsdEhhc0Vycm9yKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgdmFyIGhhc1Byb3RvY29sRXJyb3JzID0gZ3JhcGhRTFJlc3VsdEhhc1Byb3RvY29sRXJyb3JzKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgaWYgKGhhc0Vycm9ycyB8fCBoYXNQcm90b2NvbEVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3JzID0ge307XG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNFcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5ncmFwaFFMRXJyb3JzID0gcmVzdWx0LmVycm9ycztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzUHJvdG9jb2xFcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5wcm90b2NvbEVycm9ycyA9IHJlc3VsdC5leHRlbnNpb25zW1BST1RPQ09MX0VSUk9SU19TWU1CT0xdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGBlcnJvclBvbGljeWAgaXMgYSBtZWNoYW5pc20gZm9yIGhhbmRsaW5nIEdyYXBoUUwgZXJyb3JzLCBhY2NvcmRpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gb3VyIGRvY3VtZW50YXRpb24sIHNvIHdlIHRocm93IHByb3RvY29sIGVycm9ycyByZWdhcmRsZXNzIG9mIHRoZVxuICAgICAgICAgICAgICAgICAgICAvLyBzZXQgZXJyb3IgcG9saWN5LlxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3JQb2xpY3kgPT09IFwibm9uZVwiIHx8IGhhc1Byb3RvY29sRXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXBvbGxvRXJyb3IoZXJyb3JzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZXJyb3JQb2xpY3kgPT09IFwiaWdub3JlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJlc3VsdC5lcnJvcnM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMuZ2V0RG9jdW1lbnRJbmZvKHF1ZXJ5KS5oYXNDbGllbnRFeHBvcnRzKSB7XG4gICAgICAgICAgICB2YXIgb2JzZXJ2YWJsZVByb21pc2VfMSA9IHRoaXMubG9jYWxTdGF0ZVxuICAgICAgICAgICAgICAgIC5hZGRFeHBvcnRlZFZhcmlhYmxlcyhxdWVyeSwgdmFyaWFibGVzLCBjb250ZXh0KVxuICAgICAgICAgICAgICAgIC50aGVuKG1ha2VPYnNlcnZhYmxlKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3ViID0gbnVsbDtcbiAgICAgICAgICAgICAgICBvYnNlcnZhYmxlUHJvbWlzZV8xLnRoZW4oZnVuY3Rpb24gKG9ic2VydmFibGUpIHsgcmV0dXJuIChzdWIgPSBvYnNlcnZhYmxlLnN1YnNjcmliZShvYnNlcnZlcikpOyB9LCBvYnNlcnZlci5lcnJvcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YiAmJiBzdWIudW5zdWJzY3JpYmUoKTsgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYWtlT2JzZXJ2YWJsZSh2YXJpYWJsZXMpO1xuICAgIH07XG4gICAgUXVlcnlNYW5hZ2VyLnByb3RvdHlwZS5zdG9wUXVlcnkgPSBmdW5jdGlvbiAocXVlcnlJZCkge1xuICAgICAgICB0aGlzLnN0b3BRdWVyeU5vQnJvYWRjYXN0KHF1ZXJ5SWQpO1xuICAgICAgICB0aGlzLmJyb2FkY2FzdFF1ZXJpZXMoKTtcbiAgICB9O1xuICAgIFF1ZXJ5TWFuYWdlci5wcm90b3R5cGUuc3RvcFF1ZXJ5Tm9Ccm9hZGNhc3QgPSBmdW5jdGlvbiAocXVlcnlJZCkge1xuICAgICAgICB0aGlzLnN0b3BRdWVyeUluU3RvcmVOb0Jyb2FkY2FzdChxdWVyeUlkKTtcbiAgICAgICAgdGhpcy5yZW1vdmVRdWVyeShxdWVyeUlkKTtcbiAgICB9O1xuICAgIFF1ZXJ5TWFuYWdlci5wcm90b3R5cGUucmVtb3ZlUXVlcnkgPSBmdW5jdGlvbiAocXVlcnlJZCkge1xuICAgICAgICAvLyB0ZWFyZG93biBhbGwgbGlua3NcbiAgICAgICAgLy8gQm90aCBgUXVlcnlNYW5hZ2VyLmZldGNoUmVxdWVzdGAgYW5kIGBRdWVyeU1hbmFnZXIucXVlcnlgIGNyZWF0ZSBzZXBhcmF0ZSBwcm9taXNlc1xuICAgICAgICAvLyB0aGF0IGVhY2ggYWRkIHRoZWlyIHJlamVjdCBmdW5jdGlvbnMgdG8gZmV0Y2hDYW5jZWxGbnMuXG4gICAgICAgIC8vIEEgcXVlcnkgY3JlYXRlZCB3aXRoIGBRdWVyeU1hbmFnZXIucXVlcnkoKWAgY291bGQgdHJpZ2dlciBhIGBRdWVyeU1hbmFnZXIuZmV0Y2hSZXF1ZXN0YC5cbiAgICAgICAgLy8gVGhlIHNhbWUgcXVlcnlJZCBjb3VsZCBoYXZlIHR3byByZWplY3Rpb24gZm5zIGZvciB0d28gcHJvbWlzZXNcbiAgICAgICAgdGhpcy5mZXRjaENhbmNlbEZucy5kZWxldGUocXVlcnlJZCk7XG4gICAgICAgIGlmICh0aGlzLnF1ZXJpZXMuaGFzKHF1ZXJ5SWQpKSB7XG4gICAgICAgICAgICB0aGlzLmdldFF1ZXJ5KHF1ZXJ5SWQpLnN0b3AoKTtcbiAgICAgICAgICAgIHRoaXMucXVlcmllcy5kZWxldGUocXVlcnlJZCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFF1ZXJ5TWFuYWdlci5wcm90b3R5cGUuYnJvYWRjYXN0UXVlcmllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMub25Ccm9hZGNhc3QpXG4gICAgICAgICAgICB0aGlzLm9uQnJvYWRjYXN0KCk7XG4gICAgICAgIHRoaXMucXVlcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChpbmZvKSB7IHJldHVybiBpbmZvLm5vdGlmeSgpOyB9KTtcbiAgICB9O1xuICAgIFF1ZXJ5TWFuYWdlci5wcm90b3R5cGUuZ2V0TG9jYWxTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxTdGF0ZTtcbiAgICB9O1xuICAgIFF1ZXJ5TWFuYWdlci5wcm90b3R5cGUuZ2V0T2JzZXJ2YWJsZUZyb21MaW5rID0gZnVuY3Rpb24gKHF1ZXJ5LCBjb250ZXh0LCB2YXJpYWJsZXMsIFxuICAgIC8vIFByZWZlciBjb250ZXh0LnF1ZXJ5RGVkdXBsaWNhdGlvbiBpZiBzcGVjaWZpZWQuXG4gICAgZGVkdXBsaWNhdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmIChkZWR1cGxpY2F0aW9uID09PSB2b2lkIDApIHsgZGVkdXBsaWNhdGlvbiA9IChfYSA9IGNvbnRleHQgPT09IG51bGwgfHwgY29udGV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29udGV4dC5xdWVyeURlZHVwbGljYXRpb24pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoaXMucXVlcnlEZWR1cGxpY2F0aW9uOyB9XG4gICAgICAgIHZhciBvYnNlcnZhYmxlO1xuICAgICAgICB2YXIgX2IgPSB0aGlzLmdldERvY3VtZW50SW5mbyhxdWVyeSksIHNlcnZlclF1ZXJ5ID0gX2Iuc2VydmVyUXVlcnksIGNsaWVudFF1ZXJ5ID0gX2IuY2xpZW50UXVlcnk7XG4gICAgICAgIGlmIChzZXJ2ZXJRdWVyeSkge1xuICAgICAgICAgICAgdmFyIF9jID0gdGhpcywgaW5GbGlnaHRMaW5rT2JzZXJ2YWJsZXNfMSA9IF9jLmluRmxpZ2h0TGlua09ic2VydmFibGVzLCBsaW5rID0gX2MubGluaztcbiAgICAgICAgICAgIHZhciBvcGVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgcXVlcnk6IHNlcnZlclF1ZXJ5LFxuICAgICAgICAgICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgICAgICAgICAgICAgIG9wZXJhdGlvbk5hbWU6IGdldE9wZXJhdGlvbk5hbWUoc2VydmVyUXVlcnkpIHx8IHZvaWQgMCxcbiAgICAgICAgICAgICAgICBjb250ZXh0OiB0aGlzLnByZXBhcmVDb250ZXh0KF9fYXNzaWduKF9fYXNzaWduKHt9LCBjb250ZXh0KSwgeyBmb3JjZUZldGNoOiAhZGVkdXBsaWNhdGlvbiB9KSksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29udGV4dCA9IG9wZXJhdGlvbi5jb250ZXh0O1xuICAgICAgICAgICAgaWYgKGRlZHVwbGljYXRpb24pIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJpbnRlZFNlcnZlclF1ZXJ5XzEgPSBwcmludChzZXJ2ZXJRdWVyeSk7XG4gICAgICAgICAgICAgICAgdmFyIHZhckpzb25fMSA9IGNhbm9uaWNhbFN0cmluZ2lmeSh2YXJpYWJsZXMpO1xuICAgICAgICAgICAgICAgIHZhciBlbnRyeSA9IGluRmxpZ2h0TGlua09ic2VydmFibGVzXzEubG9va3VwKHByaW50ZWRTZXJ2ZXJRdWVyeV8xLCB2YXJKc29uXzEpO1xuICAgICAgICAgICAgICAgIG9ic2VydmFibGUgPSBlbnRyeS5vYnNlcnZhYmxlO1xuICAgICAgICAgICAgICAgIGlmICghb2JzZXJ2YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29uY2FzdCA9IG5ldyBDb25jYXN0KFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWN1dGUobGluaywgb3BlcmF0aW9uKSxcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGUgPSBlbnRyeS5vYnNlcnZhYmxlID0gY29uY2FzdDtcbiAgICAgICAgICAgICAgICAgICAgY29uY2FzdC5iZWZvcmVOZXh0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluRmxpZ2h0TGlua09ic2VydmFibGVzXzEucmVtb3ZlKHByaW50ZWRTZXJ2ZXJRdWVyeV8xLCB2YXJKc29uXzEpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvYnNlcnZhYmxlID0gbmV3IENvbmNhc3QoW1xuICAgICAgICAgICAgICAgICAgICBleGVjdXRlKGxpbmssIG9wZXJhdGlvbiksXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYnNlcnZhYmxlID0gbmV3IENvbmNhc3QoW09ic2VydmFibGUub2YoeyBkYXRhOiB7fSB9KV0pO1xuICAgICAgICAgICAgY29udGV4dCA9IHRoaXMucHJlcGFyZUNvbnRleHQoY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNsaWVudFF1ZXJ5KSB7XG4gICAgICAgICAgICBvYnNlcnZhYmxlID0gYXN5bmNNYXAob2JzZXJ2YWJsZSwgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5sb2NhbFN0YXRlLnJ1blJlc29sdmVycyh7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50OiBjbGllbnRRdWVyeSxcbiAgICAgICAgICAgICAgICAgICAgcmVtb3RlUmVzdWx0OiByZXN1bHQsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgfTtcbiAgICBRdWVyeU1hbmFnZXIucHJvdG90eXBlLmdldFJlc3VsdHNGcm9tTGluayA9IGZ1bmN0aW9uIChxdWVyeUluZm8sIGNhY2hlV3JpdGVCZWhhdmlvciwgb3B0aW9ucykge1xuICAgICAgICB2YXIgcmVxdWVzdElkID0gKHF1ZXJ5SW5mby5sYXN0UmVxdWVzdElkID0gdGhpcy5nZW5lcmF0ZVJlcXVlc3RJZCgpKTtcbiAgICAgICAgLy8gUGVyZm9ybWluZyB0cmFuc2Zvcm1Gb3JMaW5rIGhlcmUgZ2l2ZXMgdGhpcy5jYWNoZSBhIGNoYW5jZSB0byBmaWxsIGluXG4gICAgICAgIC8vIG1pc3NpbmcgZnJhZ21lbnQgZGVmaW5pdGlvbnMgKGZvciBleGFtcGxlKSBiZWZvcmUgc2VuZGluZyB0aGlzIGRvY3VtZW50XG4gICAgICAgIC8vIHRocm91Z2ggdGhlIGxpbmsgY2hhaW4uXG4gICAgICAgIHZhciBsaW5rRG9jdW1lbnQgPSB0aGlzLmNhY2hlLnRyYW5zZm9ybUZvckxpbmsob3B0aW9ucy5xdWVyeSk7XG4gICAgICAgIHJldHVybiBhc3luY01hcCh0aGlzLmdldE9ic2VydmFibGVGcm9tTGluayhsaW5rRG9jdW1lbnQsIG9wdGlvbnMuY29udGV4dCwgb3B0aW9ucy52YXJpYWJsZXMpLCBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICB2YXIgZ3JhcGhRTEVycm9ycyA9IGdldEdyYXBoUUxFcnJvcnNGcm9tUmVzdWx0KHJlc3VsdCk7XG4gICAgICAgICAgICB2YXIgaGFzRXJyb3JzID0gZ3JhcGhRTEVycm9ycy5sZW5ndGggPiAwO1xuICAgICAgICAgICAgLy8gSWYgd2UgaW50ZXJydXB0ZWQgdGhpcyByZXF1ZXN0IGJ5IGNhbGxpbmcgZ2V0UmVzdWx0c0Zyb21MaW5rIGFnYWluXG4gICAgICAgICAgICAvLyB3aXRoIHRoZSBzYW1lIFF1ZXJ5SW5mbyBvYmplY3QsIHdlIGlnbm9yZSB0aGUgb2xkIHJlc3VsdHMuXG4gICAgICAgICAgICBpZiAocmVxdWVzdElkID49IHF1ZXJ5SW5mby5sYXN0UmVxdWVzdElkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc0Vycm9ycyAmJiBvcHRpb25zLmVycm9yUG9saWN5ID09PSBcIm5vbmVcIikge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaHJvd2luZyBoZXJlIGVmZmVjdGl2ZWx5IGNhbGxzIG9ic2VydmVyLmVycm9yLlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBxdWVyeUluZm8ubWFya0Vycm9yKG5ldyBBcG9sbG9FcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBncmFwaFFMRXJyb3JzOiBncmFwaFFMRXJyb3JzLFxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFVzZSBsaW5rRG9jdW1lbnQgcmF0aGVyIHRoYW4gcXVlcnlJbmZvLmRvY3VtZW50IHNvIHRoZVxuICAgICAgICAgICAgICAgIC8vIG9wZXJhdGlvbi9mcmFnbWVudHMgdXNlZCB0byB3cml0ZSB0aGUgcmVzdWx0IGFyZSB0aGUgc2FtZSBhcyB0aGVcbiAgICAgICAgICAgICAgICAvLyBvbmVzIHVzZWQgdG8gb2J0YWluIGl0IGZyb20gdGhlIGxpbmsuXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcXVlcnlJbmZvLm1hcmtSZXN1bHQocmVzdWx0LCBsaW5rRG9jdW1lbnQsIG9wdGlvbnMsIGNhY2hlV3JpdGVCZWhhdmlvcik7XG4gICAgICAgICAgICAgICAgcXVlcnlJbmZvLm1hcmtSZWFkeSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGFxciA9IHtcbiAgICAgICAgICAgICAgICBkYXRhOiByZXN1bHQuZGF0YSxcbiAgICAgICAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBuZXR3b3JrU3RhdHVzOiBOZXR3b3JrU3RhdHVzLnJlYWR5LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChoYXNFcnJvcnMgJiYgb3B0aW9ucy5lcnJvclBvbGljeSAhPT0gXCJpZ25vcmVcIikge1xuICAgICAgICAgICAgICAgIGFxci5lcnJvcnMgPSBncmFwaFFMRXJyb3JzO1xuICAgICAgICAgICAgICAgIGFxci5uZXR3b3JrU3RhdHVzID0gTmV0d29ya1N0YXR1cy5lcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhcXI7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChuZXR3b3JrRXJyb3IpIHtcbiAgICAgICAgICAgIHZhciBlcnJvciA9IGlzQXBvbGxvRXJyb3IobmV0d29ya0Vycm9yKSA/IG5ldHdvcmtFcnJvciA6IChuZXcgQXBvbGxvRXJyb3IoeyBuZXR3b3JrRXJyb3I6IG5ldHdvcmtFcnJvciB9KSk7XG4gICAgICAgICAgICAvLyBBdm9pZCBzdG9yaW5nIGVycm9ycyBmcm9tIG9sZGVyIGludGVycnVwdGVkIHF1ZXJpZXMuXG4gICAgICAgICAgICBpZiAocmVxdWVzdElkID49IHF1ZXJ5SW5mby5sYXN0UmVxdWVzdElkKSB7XG4gICAgICAgICAgICAgICAgcXVlcnlJbmZvLm1hcmtFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBRdWVyeU1hbmFnZXIucHJvdG90eXBlLmZldGNoQ29uY2FzdFdpdGhJbmZvID0gZnVuY3Rpb24gKHF1ZXJ5SWQsIG9wdGlvbnMsIFxuICAgIC8vIFRoZSBpbml0aWFsIG5ldHdvcmtTdGF0dXMgZm9yIHRoaXMgZmV0Y2gsIG1vc3Qgb2Z0ZW5cbiAgICAvLyBOZXR3b3JrU3RhdHVzLmxvYWRpbmcsIGJ1dCBhbHNvIHBvc3NpYmx5IGZldGNoTW9yZSwgcG9sbCwgcmVmZXRjaCxcbiAgICAvLyBvciBzZXRWYXJpYWJsZXMuXG4gICAgbmV0d29ya1N0YXR1cywgcXVlcnkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKG5ldHdvcmtTdGF0dXMgPT09IHZvaWQgMCkgeyBuZXR3b3JrU3RhdHVzID0gTmV0d29ya1N0YXR1cy5sb2FkaW5nOyB9XG4gICAgICAgIGlmIChxdWVyeSA9PT0gdm9pZCAwKSB7IHF1ZXJ5ID0gb3B0aW9ucy5xdWVyeTsgfVxuICAgICAgICB2YXIgdmFyaWFibGVzID0gdGhpcy5nZXRWYXJpYWJsZXMocXVlcnksIG9wdGlvbnMudmFyaWFibGVzKTtcbiAgICAgICAgdmFyIHF1ZXJ5SW5mbyA9IHRoaXMuZ2V0UXVlcnkocXVlcnlJZCk7XG4gICAgICAgIHZhciBkZWZhdWx0cyA9IHRoaXMuZGVmYXVsdE9wdGlvbnMud2F0Y2hRdWVyeTtcbiAgICAgICAgdmFyIF9hID0gb3B0aW9ucy5mZXRjaFBvbGljeSwgZmV0Y2hQb2xpY3kgPSBfYSA9PT0gdm9pZCAwID8gKGRlZmF1bHRzICYmIGRlZmF1bHRzLmZldGNoUG9saWN5KSB8fCBcImNhY2hlLWZpcnN0XCIgOiBfYSwgX2IgPSBvcHRpb25zLmVycm9yUG9saWN5LCBlcnJvclBvbGljeSA9IF9iID09PSB2b2lkIDAgPyAoZGVmYXVsdHMgJiYgZGVmYXVsdHMuZXJyb3JQb2xpY3kpIHx8IFwibm9uZVwiIDogX2IsIF9jID0gb3B0aW9ucy5yZXR1cm5QYXJ0aWFsRGF0YSwgcmV0dXJuUGFydGlhbERhdGEgPSBfYyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYywgX2QgPSBvcHRpb25zLm5vdGlmeU9uTmV0d29ya1N0YXR1c0NoYW5nZSwgbm90aWZ5T25OZXR3b3JrU3RhdHVzQ2hhbmdlID0gX2QgPT09IHZvaWQgMCA/IGZhbHNlIDogX2QsIF9lID0gb3B0aW9ucy5jb250ZXh0LCBjb250ZXh0ID0gX2UgPT09IHZvaWQgMCA/IHt9IDogX2U7XG4gICAgICAgIHZhciBub3JtYWxpemVkID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywge1xuICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5LFxuICAgICAgICAgICAgdmFyaWFibGVzOiB2YXJpYWJsZXMsXG4gICAgICAgICAgICBmZXRjaFBvbGljeTogZmV0Y2hQb2xpY3ksXG4gICAgICAgICAgICBlcnJvclBvbGljeTogZXJyb3JQb2xpY3ksXG4gICAgICAgICAgICByZXR1cm5QYXJ0aWFsRGF0YTogcmV0dXJuUGFydGlhbERhdGEsXG4gICAgICAgICAgICBub3RpZnlPbk5ldHdvcmtTdGF0dXNDaGFuZ2U6IG5vdGlmeU9uTmV0d29ya1N0YXR1c0NoYW5nZSxcbiAgICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgZnJvbVZhcmlhYmxlcyA9IGZ1bmN0aW9uICh2YXJpYWJsZXMpIHtcbiAgICAgICAgICAgIC8vIFNpbmNlIG5vcm1hbGl6ZWQgaXMgYWx3YXlzIGEgZnJlc2ggY29weSBvZiBvcHRpb25zLCBpdCdzIHNhZmUgdG9cbiAgICAgICAgICAgIC8vIG1vZGlmeSBpdHMgcHJvcGVydGllcyBoZXJlLCByYXRoZXIgdGhhbiBjcmVhdGluZyB5ZXQgYW5vdGhlciBuZXdcbiAgICAgICAgICAgIC8vIFdhdGNoUXVlcnlPcHRpb25zIG9iamVjdC5cbiAgICAgICAgICAgIG5vcm1hbGl6ZWQudmFyaWFibGVzID0gdmFyaWFibGVzO1xuICAgICAgICAgICAgdmFyIHNvdXJjZXNXaXRoSW5mbyA9IF90aGlzLmZldGNoUXVlcnlCeVBvbGljeShxdWVyeUluZm8sIG5vcm1hbGl6ZWQsIG5ldHdvcmtTdGF0dXMpO1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgLy8gSWYgd2UncmUgaW4gc3RhbmRieSwgcG9zdHBvbmUgYWR2YW5jaW5nIG9wdGlvbnMuZmV0Y2hQb2xpY3kgdXNpbmdcbiAgICAgICAgICAgIC8vIGFwcGx5TmV4dEZldGNoUG9saWN5LlxuICAgICAgICAgICAgbm9ybWFsaXplZC5mZXRjaFBvbGljeSAhPT0gXCJzdGFuZGJ5XCIgJiZcbiAgICAgICAgICAgICAgICAvLyBUaGUgXCJzdGFuZGJ5XCIgcG9saWN5IGN1cnJlbnRseSByZXR1cm5zIFtdIGZyb20gZmV0Y2hRdWVyeUJ5UG9saWN5LCBzb1xuICAgICAgICAgICAgICAgIC8vIHRoaXMgaXMgYW5vdGhlciB3YXkgdG8gZGV0ZWN0IHdoZW4gbm90aGluZyB3YXMgZG9uZS9mZXRjaGVkLlxuICAgICAgICAgICAgICAgIHNvdXJjZXNXaXRoSW5mby5zb3VyY2VzLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgICAgICBxdWVyeUluZm8ub2JzZXJ2YWJsZVF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgcXVlcnlJbmZvLm9ic2VydmFibGVRdWVyeVtcImFwcGx5TmV4dEZldGNoUG9saWN5XCJdKFwiYWZ0ZXItZmV0Y2hcIiwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc291cmNlc1dpdGhJbmZvO1xuICAgICAgICB9O1xuICAgICAgICAvLyBUaGlzIGNhbmNlbCBmdW5jdGlvbiBuZWVkcyB0byBiZSBzZXQgYmVmb3JlIHRoZSBjb25jYXN0IGlzIGNyZWF0ZWQsXG4gICAgICAgIC8vIGluIGNhc2UgY29uY2FzdCBjcmVhdGlvbiBzeW5jaHJvbm91c2x5IGNhbmNlbHMgdGhlIHJlcXVlc3QuXG4gICAgICAgIHZhciBjbGVhbnVwQ2FuY2VsRm4gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5mZXRjaENhbmNlbEZucy5kZWxldGUocXVlcnlJZCk7IH07XG4gICAgICAgIHRoaXMuZmV0Y2hDYW5jZWxGbnMuc2V0KHF1ZXJ5SWQsIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgIGNsZWFudXBDYW5jZWxGbigpO1xuICAgICAgICAgICAgLy8gVGhpcyBkZWxheSBlbnN1cmVzIHRoZSBjb25jYXN0IHZhcmlhYmxlIGhhcyBiZWVuIGluaXRpYWxpemVkLlxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBjb25jYXN0LmNhbmNlbChyZWFzb24pOyB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBjb25jYXN0LCBjb250YWluc0RhdGFGcm9tTGluaztcbiAgICAgICAgLy8gSWYgdGhlIHF1ZXJ5IGhhcyBAZXhwb3J0KGFzOiAuLi4pIGRpcmVjdGl2ZXMsIHRoZW4gd2UgbmVlZCB0b1xuICAgICAgICAvLyBwcm9jZXNzIHRob3NlIGRpcmVjdGl2ZXMgYXN5bmNocm9ub3VzbHkuIFdoZW4gdGhlcmUgYXJlIG5vXG4gICAgICAgIC8vIEBleHBvcnQgZGlyZWN0aXZlcyAodGhlIGNvbW1vbiBjYXNlKSwgd2UgZGVsaWJlcmF0ZWx5IGF2b2lkXG4gICAgICAgIC8vIHdyYXBwaW5nIHRoZSByZXN1bHQgb2YgdGhpcy5mZXRjaFF1ZXJ5QnlQb2xpY3kgaW4gYSBQcm9taXNlLFxuICAgICAgICAvLyBzaW5jZSB0aGUgdGltaW5nIG9mIHJlc3VsdCBkZWxpdmVyeSBpcyAodW5mb3J0dW5hdGVseSkgaW1wb3J0YW50XG4gICAgICAgIC8vIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4gVE9ETyBUaGlzIGNvZGUgY291bGQgYmUgc2ltcGxlciBpZlxuICAgICAgICAvLyB3ZSBkZXByZWNhdGVkIGFuZCByZW1vdmVkIExvY2FsU3RhdGUuXG4gICAgICAgIGlmICh0aGlzLmdldERvY3VtZW50SW5mbyhub3JtYWxpemVkLnF1ZXJ5KS5oYXNDbGllbnRFeHBvcnRzKSB7XG4gICAgICAgICAgICBjb25jYXN0ID0gbmV3IENvbmNhc3QodGhpcy5sb2NhbFN0YXRlXG4gICAgICAgICAgICAgICAgLmFkZEV4cG9ydGVkVmFyaWFibGVzKG5vcm1hbGl6ZWQucXVlcnksIG5vcm1hbGl6ZWQudmFyaWFibGVzLCBub3JtYWxpemVkLmNvbnRleHQpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnJvbVZhcmlhYmxlcylcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoc291cmNlc1dpdGhJbmZvKSB7IHJldHVybiBzb3VyY2VzV2l0aEluZm8uc291cmNlczsgfSkpO1xuICAgICAgICAgICAgLy8gdGhlcmUgaXMganVzdCBubyB3YXkgd2UgY2FuIHN5bmNocm9ub3VzbHkgZ2V0IHRoZSAqcmlnaHQqIHZhbHVlIGhlcmUsXG4gICAgICAgICAgICAvLyBzbyB3ZSB3aWxsIGFzc3VtZSBgdHJ1ZWAsIHdoaWNoIGlzIHRoZSBiZWhhdmlvdXIgYmVmb3JlIHRoZSBidWcgZml4IGluXG4gICAgICAgICAgICAvLyAjMTA1OTcuIFRoaXMgbWVhbnMgdGhhdCBidWcgaXMgbm90IGZpeGVkIGluIHRoYXQgY2FzZSwgYW5kIGlzIHByb2JhYmx5XG4gICAgICAgICAgICAvLyB1bi1maXhhYmxlIHdpdGggcmVhc29uYWJsZSBlZmZvcnQgZm9yIHRoZSBlZGdlIGNhc2Ugb2YgQGV4cG9ydCBhc1xuICAgICAgICAgICAgLy8gZGlyZWN0aXZlcy5cbiAgICAgICAgICAgIGNvbnRhaW5zRGF0YUZyb21MaW5rID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2VzV2l0aEluZm8gPSBmcm9tVmFyaWFibGVzKG5vcm1hbGl6ZWQudmFyaWFibGVzKTtcbiAgICAgICAgICAgIGNvbnRhaW5zRGF0YUZyb21MaW5rID0gc291cmNlc1dpdGhJbmZvLmZyb21MaW5rO1xuICAgICAgICAgICAgY29uY2FzdCA9IG5ldyBDb25jYXN0KHNvdXJjZXNXaXRoSW5mby5zb3VyY2VzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25jYXN0LnByb21pc2UudGhlbihjbGVhbnVwQ2FuY2VsRm4sIGNsZWFudXBDYW5jZWxGbik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb25jYXN0OiBjb25jYXN0LFxuICAgICAgICAgICAgZnJvbUxpbms6IGNvbnRhaW5zRGF0YUZyb21MaW5rLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgUXVlcnlNYW5hZ2VyLnByb3RvdHlwZS5yZWZldGNoUXVlcmllcyA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgdXBkYXRlQ2FjaGUgPSBfYS51cGRhdGVDYWNoZSwgaW5jbHVkZSA9IF9hLmluY2x1ZGUsIF9iID0gX2Eub3B0aW1pc3RpYywgb3B0aW1pc3RpYyA9IF9iID09PSB2b2lkIDAgPyBmYWxzZSA6IF9iLCBfYyA9IF9hLnJlbW92ZU9wdGltaXN0aWMsIHJlbW92ZU9wdGltaXN0aWMgPSBfYyA9PT0gdm9pZCAwID8gb3B0aW1pc3RpYyA/IG1ha2VVbmlxdWVJZChcInJlZmV0Y2hRdWVyaWVzXCIpIDogdm9pZCAwIDogX2MsIG9uUXVlcnlVcGRhdGVkID0gX2Eub25RdWVyeVVwZGF0ZWQ7XG4gICAgICAgIHZhciBpbmNsdWRlZFF1ZXJpZXNCeUlkID0gbmV3IE1hcCgpO1xuICAgICAgICBpZiAoaW5jbHVkZSkge1xuICAgICAgICAgICAgdGhpcy5nZXRPYnNlcnZhYmxlUXVlcmllcyhpbmNsdWRlKS5mb3JFYWNoKGZ1bmN0aW9uIChvcSwgcXVlcnlJZCkge1xuICAgICAgICAgICAgICAgIGluY2x1ZGVkUXVlcmllc0J5SWQuc2V0KHF1ZXJ5SWQsIHtcbiAgICAgICAgICAgICAgICAgICAgb3E6IG9xLFxuICAgICAgICAgICAgICAgICAgICBsYXN0RGlmZjogX3RoaXMuZ2V0UXVlcnkocXVlcnlJZCkuZ2V0RGlmZigpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdHMgPSBuZXcgTWFwKCk7XG4gICAgICAgIGlmICh1cGRhdGVDYWNoZSkge1xuICAgICAgICAgICAgdGhpcy5jYWNoZS5iYXRjaCh7XG4gICAgICAgICAgICAgICAgdXBkYXRlOiB1cGRhdGVDYWNoZSxcbiAgICAgICAgICAgICAgICAvLyBTaW5jZSB5b3UgY2FuIHBlcmZvcm0gYW55IGNvbWJpbmF0aW9uIG9mIGNhY2hlIHJlYWRzIGFuZC9vciB3cml0ZXMgaW5cbiAgICAgICAgICAgICAgICAvLyB0aGUgY2FjaGUuYmF0Y2ggdXBkYXRlIGZ1bmN0aW9uLCBpdHMgb3B0aW1pc3RpYyBvcHRpb24gY2FuIGJlIGVpdGhlclxuICAgICAgICAgICAgICAgIC8vIGEgYm9vbGVhbiBvciBhIHN0cmluZywgcmVwcmVzZW50aW5nIHRocmVlIGRpc3RpbmN0IG1vZGVzIG9mXG4gICAgICAgICAgICAgICAgLy8gb3BlcmF0aW9uOlxuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gKiBmYWxzZTogcmVhZC93cml0ZSBvbmx5IHRoZSByb290IGxheWVyXG4gICAgICAgICAgICAgICAgLy8gKiB0cnVlOiByZWFkL3dyaXRlIHRoZSB0b3Btb3N0IGxheWVyXG4gICAgICAgICAgICAgICAgLy8gKiBzdHJpbmc6IHJlYWQvd3JpdGUgYSBmcmVzaCBvcHRpbWlzdGljIGxheWVyIHdpdGggdGhhdCBJRCBzdHJpbmdcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vIFdoZW4gdHlwZW9mIG9wdGltaXN0aWMgPT09IFwic3RyaW5nXCIsIGEgbmV3IG9wdGltaXN0aWMgbGF5ZXIgd2lsbCBiZVxuICAgICAgICAgICAgICAgIC8vIHRlbXBvcmFyaWx5IGNyZWF0ZWQgd2l0aGluIGNhY2hlLmJhdGNoIHdpdGggdGhhdCBzdHJpbmcgYXMgaXRzIElELiBJZlxuICAgICAgICAgICAgICAgIC8vIHdlIHRoZW4gcGFzcyB0aGF0IHNhbWUgc3RyaW5nIGFzIHRoZSByZW1vdmVPcHRpbWlzdGljIG9wdGlvbiwgd2UgY2FuXG4gICAgICAgICAgICAgICAgLy8gbWFrZSBjYWNoZS5iYXRjaCBpbW1lZGlhdGVseSByZW1vdmUgdGhlIG9wdGltaXN0aWMgbGF5ZXIgYWZ0ZXJcbiAgICAgICAgICAgICAgICAvLyBydW5uaW5nIHRoZSB1cGRhdGVDYWNoZSBmdW5jdGlvbiwgdHJpZ2dlcmluZyBvbmx5IG9uZSBicm9hZGNhc3QuXG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyBIb3dldmVyLCB0aGUgcmVmZXRjaFF1ZXJpZXMgbWV0aG9kIGFjY2VwdHMgb25seSB0cnVlIG9yIGZhbHNlIGZvciBpdHNcbiAgICAgICAgICAgICAgICAvLyBvcHRpbWlzdGljIG9wdGlvbiAobm90IHN0cmluZykuIFdlIGludGVycHJldCB0cnVlIHRvIG1lYW4gYSB0ZW1wb3JhcnlcbiAgICAgICAgICAgICAgICAvLyBvcHRpbWlzdGljIGxheWVyIHNob3VsZCBiZSBjcmVhdGVkLCB0byBhbGxvdyBlZmZpY2llbnRseSByb2xsaW5nIGJhY2tcbiAgICAgICAgICAgICAgICAvLyB0aGUgZWZmZWN0IG9mIHRoZSB1cGRhdGVDYWNoZSBmdW5jdGlvbiwgd2hpY2ggaW52b2x2ZXMgcGFzc2luZyBhXG4gICAgICAgICAgICAgICAgLy8gc3RyaW5nIGluc3RlYWQgb2YgdHJ1ZSBhcyB0aGUgb3B0aW1pc3RpYyBvcHRpb24gdG8gY2FjaGUuYmF0Y2gsIHdoZW5cbiAgICAgICAgICAgICAgICAvLyByZWZldGNoUXVlcmllcyByZWNlaXZlcyBvcHRpbWlzdGljOiB0cnVlLlxuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gSW4gb3RoZXIgd29yZHMsIHdlIGFyZSBkZWxpYmVyYXRlbHkgbm90IHN1cHBvcnRpbmcgdGhlIHVzZSBjYXNlIG9mXG4gICAgICAgICAgICAgICAgLy8gd3JpdGluZyB0byBhbiAqZXhpc3RpbmcqIG9wdGltaXN0aWMgbGF5ZXIgKHVzaW5nIHRoZSByZWZldGNoUXVlcmllc1xuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZUNhY2hlIGZ1bmN0aW9uKSwgc2luY2UgdGhhdCB3b3VsZCBwb3RlbnRpYWxseSBpbnRlcmZlcmUgd2l0aFxuICAgICAgICAgICAgICAgIC8vIG90aGVyIG9wdGltaXN0aWMgdXBkYXRlcyBpbiBwcm9ncmVzcy4gSW5zdGVhZCwgeW91IGNhbiByZWFkL3dyaXRlXG4gICAgICAgICAgICAgICAgLy8gb25seSB0aGUgcm9vdCBsYXllciBieSBwYXNzaW5nIG9wdGltaXN0aWM6IGZhbHNlIHRvIHJlZmV0Y2hRdWVyaWVzLFxuICAgICAgICAgICAgICAgIC8vIG9yIHlvdSBjYW4gcmVhZC93cml0ZSBhIGJyYW5kIG5ldyBvcHRpbWlzdGljIGxheWVyIHRoYXQgd2lsbCBiZVxuICAgICAgICAgICAgICAgIC8vIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZCBieSBwYXNzaW5nIG9wdGltaXN0aWM6IHRydWUuXG4gICAgICAgICAgICAgICAgb3B0aW1pc3RpYzogKG9wdGltaXN0aWMgJiYgcmVtb3ZlT3B0aW1pc3RpYykgfHwgZmFsc2UsXG4gICAgICAgICAgICAgICAgLy8gVGhlIHJlbW92ZU9wdGltaXN0aWMgb3B0aW9uIGNhbiBhbHNvIGJlIHByb3ZpZGVkIGJ5IGl0c2VsZiwgZXZlbiBpZlxuICAgICAgICAgICAgICAgIC8vIG9wdGltaXN0aWMgPT09IGZhbHNlLCB0byByZW1vdmUgc29tZSBwcmV2aW91c2x5LWFkZGVkIG9wdGltaXN0aWNcbiAgICAgICAgICAgICAgICAvLyBsYXllciBzYWZlbHkgYW5kIGVmZmljaWVudGx5LCBsaWtlIHdlIGRvIGluIG1hcmtNdXRhdGlvblJlc3VsdC5cbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vIElmIGFuIGV4cGxpY2l0IHJlbW92ZU9wdGltaXN0aWMgc3RyaW5nIGlzIHByb3ZpZGVkIHdpdGggb3B0aW1pc3RpYzpcbiAgICAgICAgICAgICAgICAvLyB0cnVlLCB0aGUgcmVtb3ZlT3B0aW1pc3RpYyBzdHJpbmcgd2lsbCBkZXRlcm1pbmUgdGhlIElEIG9mIHRoZVxuICAgICAgICAgICAgICAgIC8vIHRlbXBvcmFyeSBvcHRpbWlzdGljIGxheWVyLCBpbiBjYXNlIHRoYXQgZXZlciBtYXR0ZXJzLlxuICAgICAgICAgICAgICAgIHJlbW92ZU9wdGltaXN0aWM6IHJlbW92ZU9wdGltaXN0aWMsXG4gICAgICAgICAgICAgICAgb25XYXRjaFVwZGF0ZWQ6IGZ1bmN0aW9uICh3YXRjaCwgZGlmZiwgbGFzdERpZmYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9xID0gd2F0Y2gud2F0Y2hlciBpbnN0YW5jZW9mIFF1ZXJ5SW5mbyAmJiB3YXRjaC53YXRjaGVyLm9ic2VydmFibGVRdWVyeTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob25RdWVyeVVwZGF0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaW5jZSB3ZSdyZSBhYm91dCB0byBoYW5kbGUgdGhpcyBxdWVyeSBub3csIHJlbW92ZSBpdCBmcm9tXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5jbHVkZWRRdWVyaWVzQnlJZCwgaW4gY2FzZSBpdCB3YXMgYWRkZWQgZWFybGllciBiZWNhdXNlIG9mXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3B0aW9ucy5pbmNsdWRlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1ZGVkUXVlcmllc0J5SWQuZGVsZXRlKG9xLnF1ZXJ5SWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBvblF1ZXJ5VXBkYXRlZChvcSwgZGlmZiwgbGFzdERpZmYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIG9uUXVlcnlVcGRhdGVkIGZ1bmN0aW9uIHJlcXVlc3RlZCB0aGUgZGVmYXVsdCByZWZldGNoaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJlaGF2aW9yIGJ5IHJldHVybmluZyB0cnVlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBvcS5yZWZldGNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlY29yZCB0aGUgcmVzdWx0IGluIHRoZSByZXN1bHRzIE1hcCwgYXMgbG9uZyBhcyBvblF1ZXJ5VXBkYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRpZCBub3QgcmV0dXJuIGZhbHNlIHRvIHNraXAvaWdub3JlIHRoaXMgcmVzdWx0LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMuc2V0KG9xLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBbGxvdyB0aGUgZGVmYXVsdCBjYWNoZSBicm9hZGNhc3QgdG8gaGFwcGVuLCBleGNlcHQgd2hlblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9uUXVlcnlVcGRhdGVkIHJldHVybnMgZmFsc2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvblF1ZXJ5VXBkYXRlZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYW4gb25RdWVyeVVwZGF0ZWQgZnVuY3Rpb24sIGFuZCBvblF1ZXJ5VXBkYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdhcyBub3QgZGlzYWJsZWQgYnkgcGFzc2luZyBudWxsLCBtYWtlIHN1cmUgdGhpcyBxdWVyeSBpc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFwiaW5jbHVkZWRcIiBsaWtlIGFueSBvdGhlciBvcHRpb25zLmluY2x1ZGUtc3BlY2lmaWVkIHF1ZXJ5LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1ZGVkUXVlcmllc0J5SWQuc2V0KG9xLnF1ZXJ5SWQsIHsgb3E6IG9xLCBsYXN0RGlmZjogbGFzdERpZmYsIGRpZmY6IGRpZmYgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluY2x1ZGVkUXVlcmllc0J5SWQuc2l6ZSkge1xuICAgICAgICAgICAgaW5jbHVkZWRRdWVyaWVzQnlJZC5mb3JFYWNoKGZ1bmN0aW9uIChfYSwgcXVlcnlJZCkge1xuICAgICAgICAgICAgICAgIHZhciBvcSA9IF9hLm9xLCBsYXN0RGlmZiA9IF9hLmxhc3REaWZmLCBkaWZmID0gX2EuZGlmZjtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICAgICAgICAgIC8vIElmIG9uUXVlcnlVcGRhdGVkIGlzIHByb3ZpZGVkLCB3ZSB3YW50IHRvIHVzZSBpdCBmb3IgYWxsIGluY2x1ZGVkXG4gICAgICAgICAgICAgICAgLy8gcXVlcmllcywgZXZlbiB0aGUgUXVlcnlPcHRpb25zIG9uZXMuXG4gICAgICAgICAgICAgICAgaWYgKG9uUXVlcnlVcGRhdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZGlmZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZm8gPSBvcVtcInF1ZXJ5SW5mb1wiXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZm8ucmVzZXQoKTsgLy8gRm9yY2UgaW5mby5nZXREaWZmKCkgdG8gcmVhZCBmcm9tIGNhY2hlLlxuICAgICAgICAgICAgICAgICAgICAgICAgZGlmZiA9IGluZm8uZ2V0RGlmZigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IG9uUXVlcnlVcGRhdGVkKG9xLCBkaWZmLCBsYXN0RGlmZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgd2UgZmFsbCBiYWNrIHRvIHJlZmV0Y2hpbmcuXG4gICAgICAgICAgICAgICAgaWYgKCFvblF1ZXJ5VXBkYXRlZCB8fCByZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gb3EucmVmZXRjaCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnNldChvcSwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHF1ZXJ5SWQuaW5kZXhPZihcImxlZ2FjeU9uZVRpbWVRdWVyeVwiKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnN0b3BRdWVyeU5vQnJvYWRjYXN0KHF1ZXJ5SWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZW1vdmVPcHRpbWlzdGljKSB7XG4gICAgICAgICAgICAvLyBJbiBjYXNlIG5vIHVwZGF0ZUNhY2hlIGNhbGxiYWNrIHdhcyBwcm92aWRlZCAoc28gY2FjaGUuYmF0Y2ggd2FzIG5vdFxuICAgICAgICAgICAgLy8gY2FsbGVkIGFib3ZlLCBhbmQgdGh1cyBkaWQgbm90IGFscmVhZHkgcmVtb3ZlIHRoZSBvcHRpbWlzdGljIGxheWVyKSxcbiAgICAgICAgICAgIC8vIHJlbW92ZSBpdCBoZXJlLiBTaW5jZSB0aGlzIGlzIGEgbm8tb3Agd2hlbiB0aGUgbGF5ZXIgaGFzIGFscmVhZHkgYmVlblxuICAgICAgICAgICAgLy8gcmVtb3ZlZCwgd2UgZG8gaXQgZXZlbiBpZiB3ZSBjYWxsZWQgY2FjaGUuYmF0Y2ggYWJvdmUsIHNpbmNlIGl0J3NcbiAgICAgICAgICAgIC8vIHBvc3NpYmxlIHRoaXMuY2FjaGUgaXMgYW4gaW5zdGFuY2Ugb2Ygc29tZSBBcG9sbG9DYWNoZSBzdWJjbGFzcyBvdGhlclxuICAgICAgICAgICAgLy8gdGhhbiBJbk1lbW9yeUNhY2hlLCBhbmQgZG9lcyBub3QgZnVsbHkgc3VwcG9ydCB0aGUgcmVtb3ZlT3B0aW1pc3RpY1xuICAgICAgICAgICAgLy8gb3B0aW9uIGZvciBjYWNoZS5iYXRjaC5cbiAgICAgICAgICAgIHRoaXMuY2FjaGUucmVtb3ZlT3B0aW1pc3RpYyhyZW1vdmVPcHRpbWlzdGljKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9O1xuICAgIFF1ZXJ5TWFuYWdlci5wcm90b3R5cGUuZmV0Y2hRdWVyeUJ5UG9saWN5ID0gZnVuY3Rpb24gKHF1ZXJ5SW5mbywgX2EsIFxuICAgIC8vIFRoZSBpbml0aWFsIG5ldHdvcmtTdGF0dXMgZm9yIHRoaXMgZmV0Y2gsIG1vc3Qgb2Z0ZW5cbiAgICAvLyBOZXR3b3JrU3RhdHVzLmxvYWRpbmcsIGJ1dCBhbHNvIHBvc3NpYmx5IGZldGNoTW9yZSwgcG9sbCwgcmVmZXRjaCxcbiAgICAvLyBvciBzZXRWYXJpYWJsZXMuXG4gICAgbmV0d29ya1N0YXR1cykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcXVlcnkgPSBfYS5xdWVyeSwgdmFyaWFibGVzID0gX2EudmFyaWFibGVzLCBmZXRjaFBvbGljeSA9IF9hLmZldGNoUG9saWN5LCByZWZldGNoV3JpdGVQb2xpY3kgPSBfYS5yZWZldGNoV3JpdGVQb2xpY3ksIGVycm9yUG9saWN5ID0gX2EuZXJyb3JQb2xpY3ksIHJldHVyblBhcnRpYWxEYXRhID0gX2EucmV0dXJuUGFydGlhbERhdGEsIGNvbnRleHQgPSBfYS5jb250ZXh0LCBub3RpZnlPbk5ldHdvcmtTdGF0dXNDaGFuZ2UgPSBfYS5ub3RpZnlPbk5ldHdvcmtTdGF0dXNDaGFuZ2U7XG4gICAgICAgIHZhciBvbGROZXR3b3JrU3RhdHVzID0gcXVlcnlJbmZvLm5ldHdvcmtTdGF0dXM7XG4gICAgICAgIHF1ZXJ5SW5mby5pbml0KHtcbiAgICAgICAgICAgIGRvY3VtZW50OiBxdWVyeSxcbiAgICAgICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgICAgICAgICAgbmV0d29ya1N0YXR1czogbmV0d29ya1N0YXR1cyxcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciByZWFkQ2FjaGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBxdWVyeUluZm8uZ2V0RGlmZigpOyB9O1xuICAgICAgICB2YXIgcmVzdWx0c0Zyb21DYWNoZSA9IGZ1bmN0aW9uIChkaWZmLCBuZXR3b3JrU3RhdHVzKSB7XG4gICAgICAgICAgICBpZiAobmV0d29ya1N0YXR1cyA9PT0gdm9pZCAwKSB7IG5ldHdvcmtTdGF0dXMgPSBxdWVyeUluZm8ubmV0d29ya1N0YXR1cyB8fCBOZXR3b3JrU3RhdHVzLmxvYWRpbmc7IH1cbiAgICAgICAgICAgIHZhciBkYXRhID0gZGlmZi5yZXN1bHQ7XG4gICAgICAgICAgICBpZiAoZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSAmJiAhcmV0dXJuUGFydGlhbERhdGEgJiYgIWVxdWFsKGRhdGEsIHt9KSkge1xuICAgICAgICAgICAgICAgIGxvZ01pc3NpbmdGaWVsZEVycm9ycyhkaWZmLm1pc3NpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGZyb21EYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5vZihfX2Fzc2lnbih7IGRhdGE6IGRhdGEsIGxvYWRpbmc6IGlzTmV0d29ya1JlcXVlc3RJbkZsaWdodChuZXR3b3JrU3RhdHVzKSwgbmV0d29ya1N0YXR1czogbmV0d29ya1N0YXR1cyB9LCAoZGlmZi5jb21wbGV0ZSA/IG51bGwgOiB7IHBhcnRpYWw6IHRydWUgfSkpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoZGF0YSAmJiBfdGhpcy5nZXREb2N1bWVudEluZm8ocXVlcnkpLmhhc0ZvcmNlZFJlc29sdmVycykge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5sb2NhbFN0YXRlXG4gICAgICAgICAgICAgICAgICAgIC5ydW5SZXNvbHZlcnMoe1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudDogcXVlcnksXG4gICAgICAgICAgICAgICAgICAgIHJlbW90ZVJlc3VsdDogeyBkYXRhOiBkYXRhIH0sXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgICAgICAgICAgICAgICAgICBvbmx5UnVuRm9yY2VkUmVzb2x2ZXJzOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNvbHZlZCkgeyByZXR1cm4gZnJvbURhdGEocmVzb2x2ZWQuZGF0YSB8fCB2b2lkIDApOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFJlc29sdmVzIGh0dHBzOi8vZ2l0aHViLmNvbS9hcG9sbG9ncmFwaHFsL2Fwb2xsby1jbGllbnQvaXNzdWVzLzEwMzE3LlxuICAgICAgICAgICAgLy8gSWYgZXJyb3JQb2xpY3kgaXMgJ25vbmUnIGFuZCBub3RpZnlPbk5ldHdvcmtTdGF0dXNDaGFuZ2UgaXMgdHJ1ZSxcbiAgICAgICAgICAgIC8vIGRhdGEgd2FzIGluY29ycmVjdGx5IHJldHVybmVkIGZyb20gdGhlIGNhY2hlIG9uIHJlZmV0Y2g6XG4gICAgICAgICAgICAvLyBpZiBkaWZmLm1pc3NpbmcgZXhpc3RzLCB3ZSBzaG91bGQgbm90IHJldHVybiBjYWNoZSBkYXRhLlxuICAgICAgICAgICAgaWYgKGVycm9yUG9saWN5ID09PSBcIm5vbmVcIiAmJlxuICAgICAgICAgICAgICAgIG5ldHdvcmtTdGF0dXMgPT09IE5ldHdvcmtTdGF0dXMucmVmZXRjaCAmJlxuICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoZGlmZi5taXNzaW5nKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmcm9tRGF0YSh2b2lkIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZyb21EYXRhKGRhdGEpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgY2FjaGVXcml0ZUJlaGF2aW9yID0gZmV0Y2hQb2xpY3kgPT09IFwibm8tY2FjaGVcIiA/IDAgLyogQ2FjaGVXcml0ZUJlaGF2aW9yLkZPUkJJRCAqL1xuICAgICAgICAgICAgLy8gV2F0Y2hlZCBxdWVyaWVzIG11c3Qgb3B0IGludG8gb3ZlcndyaXRpbmcgZXhpc3RpbmcgZGF0YSBvbiByZWZldGNoLFxuICAgICAgICAgICAgLy8gYnkgcGFzc2luZyByZWZldGNoV3JpdGVQb2xpY3k6IFwib3ZlcndyaXRlXCIgaW4gdGhlaXIgV2F0Y2hRdWVyeU9wdGlvbnMuXG4gICAgICAgICAgICA6IChuZXR3b3JrU3RhdHVzID09PSBOZXR3b3JrU3RhdHVzLnJlZmV0Y2ggJiZcbiAgICAgICAgICAgICAgICByZWZldGNoV3JpdGVQb2xpY3kgIT09IFwibWVyZ2VcIikgP1xuICAgICAgICAgICAgICAgIDEgLyogQ2FjaGVXcml0ZUJlaGF2aW9yLk9WRVJXUklURSAqL1xuICAgICAgICAgICAgICAgIDogMiAvKiBDYWNoZVdyaXRlQmVoYXZpb3IuTUVSR0UgKi87XG4gICAgICAgIHZhciByZXN1bHRzRnJvbUxpbmsgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuZ2V0UmVzdWx0c0Zyb21MaW5rKHF1ZXJ5SW5mbywgY2FjaGVXcml0ZUJlaGF2aW9yLCB7XG4gICAgICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5LFxuICAgICAgICAgICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgICAgICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgICAgICAgICAgZmV0Y2hQb2xpY3k6IGZldGNoUG9saWN5LFxuICAgICAgICAgICAgICAgIGVycm9yUG9saWN5OiBlcnJvclBvbGljeSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgc2hvdWxkTm90aWZ5ID0gbm90aWZ5T25OZXR3b3JrU3RhdHVzQ2hhbmdlICYmXG4gICAgICAgICAgICB0eXBlb2Ygb2xkTmV0d29ya1N0YXR1cyA9PT0gXCJudW1iZXJcIiAmJlxuICAgICAgICAgICAgb2xkTmV0d29ya1N0YXR1cyAhPT0gbmV0d29ya1N0YXR1cyAmJlxuICAgICAgICAgICAgaXNOZXR3b3JrUmVxdWVzdEluRmxpZ2h0KG5ldHdvcmtTdGF0dXMpO1xuICAgICAgICBzd2l0Y2ggKGZldGNoUG9saWN5KSB7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FzZSBcImNhY2hlLWZpcnN0XCI6IHtcbiAgICAgICAgICAgICAgICB2YXIgZGlmZiA9IHJlYWRDYWNoZSgpO1xuICAgICAgICAgICAgICAgIGlmIChkaWZmLmNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tTGluazogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzOiBbcmVzdWx0c0Zyb21DYWNoZShkaWZmLCBxdWVyeUluZm8ubWFya1JlYWR5KCkpXSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJldHVyblBhcnRpYWxEYXRhIHx8IHNob3VsZE5vdGlmeSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbUxpbms6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzOiBbcmVzdWx0c0Zyb21DYWNoZShkaWZmKSwgcmVzdWx0c0Zyb21MaW5rKCldLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4geyBmcm9tTGluazogdHJ1ZSwgc291cmNlczogW3Jlc3VsdHNGcm9tTGluaygpXSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcImNhY2hlLWFuZC1uZXR3b3JrXCI6IHtcbiAgICAgICAgICAgICAgICB2YXIgZGlmZiA9IHJlYWRDYWNoZSgpO1xuICAgICAgICAgICAgICAgIGlmIChkaWZmLmNvbXBsZXRlIHx8IHJldHVyblBhcnRpYWxEYXRhIHx8IHNob3VsZE5vdGlmeSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbUxpbms6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzOiBbcmVzdWx0c0Zyb21DYWNoZShkaWZmKSwgcmVzdWx0c0Zyb21MaW5rKCldLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4geyBmcm9tTGluazogdHJ1ZSwgc291cmNlczogW3Jlc3VsdHNGcm9tTGluaygpXSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcImNhY2hlLW9ubHlcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBmcm9tTGluazogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZXM6IFtyZXN1bHRzRnJvbUNhY2hlKHJlYWRDYWNoZSgpLCBxdWVyeUluZm8ubWFya1JlYWR5KCkpXSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSBcIm5ldHdvcmstb25seVwiOlxuICAgICAgICAgICAgICAgIGlmIChzaG91bGROb3RpZnkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb21MaW5rOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlczogW3Jlc3VsdHNGcm9tQ2FjaGUocmVhZENhY2hlKCkpLCByZXN1bHRzRnJvbUxpbmsoKV0sXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB7IGZyb21MaW5rOiB0cnVlLCBzb3VyY2VzOiBbcmVzdWx0c0Zyb21MaW5rKCldIH07XG4gICAgICAgICAgICBjYXNlIFwibm8tY2FjaGVcIjpcbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkTm90aWZ5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tTGluazogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdGUgdGhhdCBxdWVyeUluZm8uZ2V0RGlmZigpIGZvciBuby1jYWNoZSBxdWVyaWVzIGRvZXMgbm90IGNhbGxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhY2hlLmRpZmYsIGJ1dCBpbnN0ZWFkIHJldHVybnMgYSB7IGNvbXBsZXRlOiBmYWxzZSB9IHN0dWIgcmVzdWx0XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIHRoZXJlIGlzIG5vIHF1ZXJ5SW5mby5kaWZmIGFscmVhZHkgZGVmaW5lZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXM6IFtyZXN1bHRzRnJvbUNhY2hlKHF1ZXJ5SW5mby5nZXREaWZmKCkpLCByZXN1bHRzRnJvbUxpbmsoKV0sXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB7IGZyb21MaW5rOiB0cnVlLCBzb3VyY2VzOiBbcmVzdWx0c0Zyb21MaW5rKCldIH07XG4gICAgICAgICAgICBjYXNlIFwic3RhbmRieVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB7IGZyb21MaW5rOiBmYWxzZSwgc291cmNlczogW10gfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUXVlcnlNYW5hZ2VyLnByb3RvdHlwZS5nZXRRdWVyeSA9IGZ1bmN0aW9uIChxdWVyeUlkKSB7XG4gICAgICAgIGlmIChxdWVyeUlkICYmICF0aGlzLnF1ZXJpZXMuaGFzKHF1ZXJ5SWQpKSB7XG4gICAgICAgICAgICB0aGlzLnF1ZXJpZXMuc2V0KHF1ZXJ5SWQsIG5ldyBRdWVyeUluZm8odGhpcywgcXVlcnlJZCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnF1ZXJpZXMuZ2V0KHF1ZXJ5SWQpO1xuICAgIH07XG4gICAgUXVlcnlNYW5hZ2VyLnByb3RvdHlwZS5wcmVwYXJlQ29udGV4dCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHsgY29udGV4dCA9IHt9OyB9XG4gICAgICAgIHZhciBuZXdDb250ZXh0ID0gdGhpcy5sb2NhbFN0YXRlLnByZXBhcmVDb250ZXh0KGNvbnRleHQpO1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuZGVmYXVsdENvbnRleHQpLCBuZXdDb250ZXh0KSwgeyBjbGllbnRBd2FyZW5lc3M6IHRoaXMuY2xpZW50QXdhcmVuZXNzIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFF1ZXJ5TWFuYWdlcjtcbn0oKSk7XG5leHBvcnQgeyBRdWVyeU1hbmFnZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVF1ZXJ5TWFuYWdlci5qcy5tYXAiXSwibmFtZXMiOlsiX19hc3NpZ24iLCJfX2F3YWl0ZXIiLCJfX2dlbmVyYXRvciIsImludmFyaWFudCIsIm5ld0ludmFyaWFudEVycm9yIiwiZXF1YWwiLCJleGVjdXRlIiwiaGFzRGlyZWN0aXZlcyIsImlzRXhlY3V0aW9uUGF0Y2hJbmNyZW1lbnRhbFJlc3VsdCIsImlzRXhlY3V0aW9uUGF0Y2hSZXN1bHQiLCJyZW1vdmVEaXJlY3RpdmVzRnJvbURvY3VtZW50IiwiY2Fub25pY2FsU3RyaW5naWZ5IiwiZ2V0RGVmYXVsdFZhbHVlcyIsImdldE9wZXJhdGlvbkRlZmluaXRpb24iLCJnZXRPcGVyYXRpb25OYW1lIiwiaGFzQ2xpZW50RXhwb3J0cyIsImdyYXBoUUxSZXN1bHRIYXNFcnJvciIsImdldEdyYXBoUUxFcnJvcnNGcm9tUmVzdWx0IiwiT2JzZXJ2YWJsZSIsImFzeW5jTWFwIiwiaXNOb25FbXB0eUFycmF5IiwiQ29uY2FzdCIsIm1ha2VVbmlxdWVJZCIsImlzRG9jdW1lbnROb2RlIiwiaXNOb25OdWxsT2JqZWN0IiwiRG9jdW1lbnRUcmFuc2Zvcm0iLCJtZXJnZUluY3JlbWVudGFsRGF0YSIsIkFwb2xsb0Vycm9yIiwiaXNBcG9sbG9FcnJvciIsImdyYXBoUUxSZXN1bHRIYXNQcm90b2NvbEVycm9ycyIsIk9ic2VydmFibGVRdWVyeSIsImxvZ01pc3NpbmdGaWVsZEVycm9ycyIsIk5ldHdvcmtTdGF0dXMiLCJpc05ldHdvcmtSZXF1ZXN0SW5GbGlnaHQiLCJMb2NhbFN0YXRlIiwiUXVlcnlJbmZvIiwic2hvdWxkV3JpdGVSZXN1bHQiLCJQUk9UT0NPTF9FUlJPUlNfU1lNQk9MIiwicHJpbnQiLCJoYXNPd25Qcm9wZXJ0eSIsIk9iamVjdCIsInByb3RvdHlwZSIsIklHTk9SRSIsImNyZWF0ZSIsIlRyaWUiLCJBdXRvQ2xlYW5lZFdlYWtDYWNoZSIsImNhY2hlU2l6ZXMiLCJRdWVyeU1hbmFnZXIiLCJfYSIsImNhY2hlIiwibGluayIsImRlZmF1bHRPcHRpb25zIiwiZG9jdW1lbnRUcmFuc2Zvcm0iLCJfYiIsInF1ZXJ5RGVkdXBsaWNhdGlvbiIsIm9uQnJvYWRjYXN0IiwiX2MiLCJzc3JNb2RlIiwiX2QiLCJjbGllbnRBd2FyZW5lc3MiLCJsb2NhbFN0YXRlIiwiX2UiLCJhc3N1bWVJbW11dGFibGVSZXN1bHRzIiwiZGVmYXVsdENvbnRleHQiLCJfdGhpcyIsInF1ZXJpZXMiLCJNYXAiLCJmZXRjaENhbmNlbEZucyIsInRyYW5zZm9ybUNhY2hlIiwicXVlcnlJZENvdW50ZXIiLCJyZXF1ZXN0SWRDb3VudGVyIiwibXV0YXRpb25JZENvdW50ZXIiLCJpbkZsaWdodExpbmtPYnNlcnZhYmxlcyIsImRlZmF1bHREb2N1bWVudFRyYW5zZm9ybSIsImRvY3VtZW50IiwidHJhbnNmb3JtRG9jdW1lbnQiLCJjb25jYXQiLCJtdXRhdGlvblN0b3JlIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIkVycm9yIiwic3RvcCIsImZvckVhY2giLCJfaW5mbyIsInF1ZXJ5SWQiLCJzdG9wUXVlcnlOb0Jyb2FkY2FzdCIsImNhbmNlbFBlbmRpbmdGZXRjaGVzIiwiZXJyb3IiLCJjYW5jZWwiLCJjbGVhciIsIm11dGF0ZSIsIm11dGF0aW9uIiwidmFyaWFibGVzIiwib3B0aW1pc3RpY1Jlc3BvbnNlIiwidXBkYXRlUXVlcmllcyIsInJlZmV0Y2hRdWVyaWVzIiwiYXdhaXRSZWZldGNoUXVlcmllcyIsInVwZGF0ZVdpdGhQcm94eUZuIiwidXBkYXRlIiwib25RdWVyeVVwZGF0ZWQiLCJfZiIsImZldGNoUG9saWN5IiwiX2ciLCJlcnJvclBvbGljeSIsImtlZXBSb290RmllbGRzIiwiY29udGV4dCIsIm11dGF0aW9uSWQiLCJtdXRhdGlvblN0b3JlVmFsdWUiLCJpc09wdGltaXN0aWMiLCJzZWxmIiwiX2giLCJsYWJlbCIsImdlbmVyYXRlTXV0YXRpb25JZCIsInRyYW5zZm9ybUZvckxpbmsiLCJ0cmFuc2Zvcm0iLCJnZXREb2N1bWVudEluZm8iLCJnZXRWYXJpYWJsZXMiLCJhZGRFeHBvcnRlZFZhcmlhYmxlcyIsInNlbnQiLCJsb2FkaW5nIiwibWFya011dGF0aW9uT3B0aW1pc3RpYyIsImJyb2FkY2FzdFF1ZXJpZXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImdldE9ic2VydmFibGVGcm9tTGluayIsInJlc3VsdCIsImdyYXBoUUxFcnJvcnMiLCJzdG9yZVJlc3VsdCIsImVycm9ycyIsIm1hcmtNdXRhdGlvblJlc3VsdCIsInJlbW92ZU9wdGltaXN0aWMiLCJzdWJzY3JpYmUiLCJuZXh0IiwiaGFzTmV4dCIsImVyciIsIm5ldHdvcmtFcnJvciIsImNhY2hlV3JpdGVzIiwic2tpcENhY2hlIiwicHVzaCIsImRhdGEiLCJkYXRhSWQiLCJxdWVyeSIsImluY3JlbWVudGFsIiwiZGlmZiIsImlkIiwiYXNRdWVyeSIsIm9wdGltaXN0aWMiLCJyZXR1cm5QYXJ0aWFsRGF0YSIsIm1lcmdlZERhdGEiLCJ1cGRhdGVRdWVyaWVzXzEiLCJvYnNlcnZhYmxlUXVlcnkiLCJxdWVyeU5hbWUiLCJjYWxsIiwidXBkYXRlciIsImdldCIsImN1cnJlbnRRdWVyeVJlc3VsdCIsImNvbXBsZXRlIiwibmV4dFF1ZXJ5UmVzdWx0IiwibXV0YXRpb25SZXN1bHQiLCJxdWVyeVZhcmlhYmxlcyIsImxlbmd0aCIsInJlc3VsdHNfMSIsInVwZGF0ZUNhY2hlIiwid3JpdGUiLCJpc0ZpbmFsUmVzdWx0IiwibW9kaWZ5IiwiZmllbGRzIiwiZmllbGROYW1lIiwiREVMRVRFIiwiaW5jbHVkZSIsImFsbCIsInRoZW4iLCJyZWNvcmRPcHRpbWlzdGljVHJhbnNhY3Rpb24iLCJnbG9iYWxUaGlzIiwiX19ERVZfXyIsImZldGNoUXVlcnkiLCJvcHRpb25zIiwibmV0d29ya1N0YXR1cyIsImZldGNoQ29uY2FzdFdpdGhJbmZvIiwiY29uY2FzdCIsInByb21pc2UiLCJnZXRRdWVyeVN0b3JlIiwic3RvcmUiLCJpbmZvIiwicmVzZXRFcnJvcnMiLCJxdWVyeUluZm8iLCJ1bmRlZmluZWQiLCJoYXMiLCJjYWNoZUVudHJ5IiwiaGFzRm9yY2VkUmVzb2x2ZXJzIiwic2hvdWxkRm9yY2VSZXNvbHZlcnMiLCJoYXNOb25yZWFjdGl2ZURpcmVjdGl2ZSIsImNsaWVudFF1ZXJ5Iiwic2VydmVyUXVlcnkiLCJuYW1lIiwicmVtb3ZlIiwiZGVmYXVsdFZhcnMiLCJkZWZpbml0aW9ucyIsIm1hcCIsImRlZiIsImtpbmQiLCJvcGVyYXRpb24iLCJzZXQiLCJ3YXRjaFF1ZXJ5Iiwibm90aWZ5T25OZXR3b3JrU3RhdHVzQ2hhbmdlIiwib2JzZXJ2YWJsZSIsInF1ZXJ5TWFuYWdlciIsImluaXQiLCJnZW5lcmF0ZVF1ZXJ5SWQiLCJwb2xsSW50ZXJ2YWwiLCJmaW5hbGx5Iiwic3RvcFF1ZXJ5IiwiU3RyaW5nIiwiZ2VuZXJhdGVSZXF1ZXN0SWQiLCJzdG9wUXVlcnlJblN0b3JlIiwic3RvcFF1ZXJ5SW5TdG9yZU5vQnJvYWRjYXN0IiwiY2xlYXJTdG9yZSIsImRpc2NhcmRXYXRjaGVzIiwicmVzZXQiLCJnZXRPYnNlcnZhYmxlUXVlcmllcyIsInF1ZXJ5TmFtZXNBbmREb2NzIiwibGVnYWN5UXVlcnlPcHRpb25zIiwiU2V0IiwiQXJyYXkiLCJpc0FycmF5IiwiZGVzYyIsImFkZCIsIm9xIiwiaGFzT2JzZXJ2ZXJzIiwic2l6ZSIsImdldFF1ZXJ5Iiwic2V0T2JzZXJ2YWJsZVF1ZXJ5IiwiaW5jbHVkZWQiLCJuYW1lT3JEb2MiLCJ3YXJuIiwicmVGZXRjaE9ic2VydmFibGVRdWVyaWVzIiwiaW5jbHVkZVN0YW5kYnkiLCJvYnNlcnZhYmxlUXVlcnlQcm9taXNlcyIsInJlc2V0TGFzdFJlc3VsdHMiLCJyZWZldGNoIiwic2V0RGlmZiIsInN0YXJ0R3JhcGhRTFN1YnNjcmlwdGlvbiIsIm1ha2VPYnNlcnZhYmxlIiwiaGFzRXJyb3JzIiwiaGFzUHJvdG9jb2xFcnJvcnMiLCJwcm90b2NvbEVycm9ycyIsImV4dGVuc2lvbnMiLCJvYnNlcnZhYmxlUHJvbWlzZV8xIiwib2JzZXJ2ZXIiLCJzdWIiLCJ1bnN1YnNjcmliZSIsInJlbW92ZVF1ZXJ5IiwiZGVsZXRlIiwibm90aWZ5IiwiZ2V0TG9jYWxTdGF0ZSIsImRlZHVwbGljYXRpb24iLCJpbkZsaWdodExpbmtPYnNlcnZhYmxlc18xIiwib3BlcmF0aW9uTmFtZSIsInByZXBhcmVDb250ZXh0IiwiZm9yY2VGZXRjaCIsInByaW50ZWRTZXJ2ZXJRdWVyeV8xIiwidmFySnNvbl8xIiwiZW50cnkiLCJsb29rdXAiLCJiZWZvcmVOZXh0Iiwib2YiLCJydW5SZXNvbHZlcnMiLCJyZW1vdGVSZXN1bHQiLCJnZXRSZXN1bHRzRnJvbUxpbmsiLCJjYWNoZVdyaXRlQmVoYXZpb3IiLCJyZXF1ZXN0SWQiLCJsYXN0UmVxdWVzdElkIiwibGlua0RvY3VtZW50IiwibWFya0Vycm9yIiwibWFya1Jlc3VsdCIsIm1hcmtSZWFkeSIsImFxciIsInJlYWR5IiwiZGVmYXVsdHMiLCJub3JtYWxpemVkIiwiYXNzaWduIiwiZnJvbVZhcmlhYmxlcyIsInNvdXJjZXNXaXRoSW5mbyIsImZldGNoUXVlcnlCeVBvbGljeSIsInNvdXJjZXMiLCJjbGVhbnVwQ2FuY2VsRm4iLCJyZWFzb24iLCJzZXRUaW1lb3V0IiwiY29udGFpbnNEYXRhRnJvbUxpbmsiLCJmcm9tTGluayIsImluY2x1ZGVkUXVlcmllc0J5SWQiLCJsYXN0RGlmZiIsImdldERpZmYiLCJyZXN1bHRzIiwiYmF0Y2giLCJvbldhdGNoVXBkYXRlZCIsIndhdGNoIiwid2F0Y2hlciIsImluZGV4T2YiLCJyZWZldGNoV3JpdGVQb2xpY3kiLCJvbGROZXR3b3JrU3RhdHVzIiwicmVhZENhY2hlIiwicmVzdWx0c0Zyb21DYWNoZSIsIm1pc3NpbmciLCJmcm9tRGF0YSIsInBhcnRpYWwiLCJvbmx5UnVuRm9yY2VkUmVzb2x2ZXJzIiwicmVzb2x2ZWQiLCJyZXN1bHRzRnJvbUxpbmsiLCJzaG91bGROb3RpZnkiLCJuZXdDb250ZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/core/QueryManager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/core/equalByQuery.js":
/*!**********************************************************!*\
  !*** ./node_modules/@apollo/client/core/equalByQuery.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   equalByQuery: () => (/* binding */ equalByQuery)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _wry_equality__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/equality */ \"(rsc)/./node_modules/@wry/equality/lib/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n\n\n\n// Returns true if aResult and bResult are deeply equal according to the fields\n// selected by the given query, ignoring any fields marked as @nonreactive.\nfunction equalByQuery(query, _a, _b, variables) {\n    var aData = _a.data, aRest = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__rest)(_a, [\n        \"data\"\n    ]);\n    var bData = _b.data, bRest = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__rest)(_b, [\n        \"data\"\n    ]);\n    return (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(aRest, bRest) && equalBySelectionSet((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.getMainDefinition)(query).selectionSet, aData, bData, {\n        fragmentMap: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.createFragmentMap)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.getFragmentDefinitions)(query)),\n        variables: variables\n    });\n}\nfunction equalBySelectionSet(selectionSet, aResult, bResult, context) {\n    if (aResult === bResult) {\n        return true;\n    }\n    var seenSelections = new Set();\n    // Returning true from this Array.prototype.every callback function skips the\n    // current field/subtree. Returning false aborts the entire traversal\n    // immediately, causing equalBySelectionSet to return false.\n    return selectionSet.selections.every(function(selection) {\n        // Avoid re-processing the same selection at the same level of recursion, in\n        // case the same field gets included via multiple indirect fragment spreads.\n        if (seenSelections.has(selection)) return true;\n        seenSelections.add(selection);\n        // Ignore @skip(if: true) and @include(if: false) fields.\n        if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.shouldInclude)(selection, context.variables)) return true;\n        // If the field or (named) fragment spread has a @nonreactive directive on\n        // it, we don't care if it's different, so we pretend it's the same.\n        if (selectionHasNonreactiveDirective(selection)) return true;\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isField)(selection)) {\n            var resultKey = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.resultKeyNameFromField)(selection);\n            var aResultChild = aResult && aResult[resultKey];\n            var bResultChild = bResult && bResult[resultKey];\n            var childSelectionSet = selection.selectionSet;\n            if (!childSelectionSet) {\n                // These are scalar values, so we can compare them with deep equal\n                // without redoing the main recursive work.\n                return (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(aResultChild, bResultChild);\n            }\n            var aChildIsArray = Array.isArray(aResultChild);\n            var bChildIsArray = Array.isArray(bResultChild);\n            if (aChildIsArray !== bChildIsArray) return false;\n            if (aChildIsArray && bChildIsArray) {\n                var length_1 = aResultChild.length;\n                if (bResultChild.length !== length_1) {\n                    return false;\n                }\n                for(var i = 0; i < length_1; ++i){\n                    if (!equalBySelectionSet(childSelectionSet, aResultChild[i], bResultChild[i], context)) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return equalBySelectionSet(childSelectionSet, aResultChild, bResultChild, context);\n        } else {\n            var fragment = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.getFragmentFromSelection)(selection, context.fragmentMap);\n            if (fragment) {\n                // The fragment might === selection if it's an inline fragment, but\n                // could be !== if it's a named fragment ...spread.\n                if (selectionHasNonreactiveDirective(fragment)) return true;\n                return equalBySelectionSet(fragment.selectionSet, // Notice that we reuse the same aResult and bResult values here,\n                // since the fragment ...spread does not specify a field name, but\n                // consists of multiple fields (within the fragment's selection set)\n                // that should be applied to the current result value(s).\n                aResult, bResult, context);\n            }\n        }\n    });\n}\nfunction selectionHasNonreactiveDirective(selection) {\n    return !!selection.directives && selection.directives.some(directiveIsNonreactive);\n}\nfunction directiveIsNonreactive(dir) {\n    return dir.name.value === \"nonreactive\";\n} //# sourceMappingURL=equalByQuery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/core/equalByQuery.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/core/networkStatus.js":
/*!***********************************************************!*\
  !*** ./node_modules/@apollo/client/core/networkStatus.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NetworkStatus: () => (/* binding */ NetworkStatus),\n/* harmony export */   isNetworkRequestInFlight: () => (/* binding */ isNetworkRequestInFlight),\n/* harmony export */   isNetworkRequestSettled: () => (/* binding */ isNetworkRequestSettled)\n/* harmony export */ });\n/**\n * The current status of a query’s execution in our system.\n */ var NetworkStatus;\n(function(NetworkStatus) {\n    /**\n     * The query has never been run before and the query is now currently running. A query will still\n     * have this network status even if a partial data result was returned from the cache, but a\n     * query was dispatched anyway.\n     */ NetworkStatus[NetworkStatus[\"loading\"] = 1] = \"loading\";\n    /**\n     * If `setVariables` was called and a query was fired because of that then the network status\n     * will be `setVariables` until the result of that query comes back.\n     */ NetworkStatus[NetworkStatus[\"setVariables\"] = 2] = \"setVariables\";\n    /**\n     * Indicates that `fetchMore` was called on this query and that the query created is currently in\n     * flight.\n     */ NetworkStatus[NetworkStatus[\"fetchMore\"] = 3] = \"fetchMore\";\n    /**\n     * Similar to the `setVariables` network status. It means that `refetch` was called on a query\n     * and the refetch request is currently in flight.\n     */ NetworkStatus[NetworkStatus[\"refetch\"] = 4] = \"refetch\";\n    /**\n     * Indicates that a polling query is currently in flight. So for example if you are polling a\n     * query every 10 seconds then the network status will switch to `poll` every 10 seconds whenever\n     * a poll request has been sent but not resolved.\n     */ NetworkStatus[NetworkStatus[\"poll\"] = 6] = \"poll\";\n    /**\n     * No request is in flight for this query, and no errors happened. Everything is OK.\n     */ NetworkStatus[NetworkStatus[\"ready\"] = 7] = \"ready\";\n    /**\n     * No request is in flight for this query, but one or more errors were detected.\n     */ NetworkStatus[NetworkStatus[\"error\"] = 8] = \"error\";\n})(NetworkStatus || (NetworkStatus = {}));\n/**\n * Returns true if there is currently a network request in flight according to a given network\n * status.\n */ function isNetworkRequestInFlight(networkStatus) {\n    return networkStatus ? networkStatus < 7 : false;\n}\n/**\n * Returns true if the network request is in ready or error state according to a given network\n * status.\n */ function isNetworkRequestSettled(networkStatus) {\n    return networkStatus === 7 || networkStatus === 8;\n} //# sourceMappingURL=networkStatus.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvY29yZS9uZXR3b3JrU3RhdHVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztDQUVDLEdBQ00sSUFBSUEsY0FBYztBQUN4QixVQUFVQSxhQUFhO0lBQ3BCOzs7O0tBSUMsR0FDREEsYUFBYSxDQUFDQSxhQUFhLENBQUMsVUFBVSxHQUFHLEVBQUUsR0FBRztJQUM5Qzs7O0tBR0MsR0FDREEsYUFBYSxDQUFDQSxhQUFhLENBQUMsZUFBZSxHQUFHLEVBQUUsR0FBRztJQUNuRDs7O0tBR0MsR0FDREEsYUFBYSxDQUFDQSxhQUFhLENBQUMsWUFBWSxHQUFHLEVBQUUsR0FBRztJQUNoRDs7O0tBR0MsR0FDREEsYUFBYSxDQUFDQSxhQUFhLENBQUMsVUFBVSxHQUFHLEVBQUUsR0FBRztJQUM5Qzs7OztLQUlDLEdBQ0RBLGFBQWEsQ0FBQ0EsYUFBYSxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUc7SUFDM0M7O0tBRUMsR0FDREEsYUFBYSxDQUFDQSxhQUFhLENBQUMsUUFBUSxHQUFHLEVBQUUsR0FBRztJQUM1Qzs7S0FFQyxHQUNEQSxhQUFhLENBQUNBLGFBQWEsQ0FBQyxRQUFRLEdBQUcsRUFBRSxHQUFHO0FBQ2hELEdBQUdBLGlCQUFrQkEsQ0FBQUEsZ0JBQWdCLENBQUM7QUFDdEM7OztDQUdDLEdBQ00sU0FBU0MseUJBQXlCQyxhQUFhO0lBQ2xELE9BQU9BLGdCQUFnQkEsZ0JBQWdCLElBQUk7QUFDL0M7QUFDQTs7O0NBR0MsR0FDTSxTQUFTQyx3QkFBd0JELGFBQWE7SUFDakQsT0FBT0Esa0JBQWtCLEtBQUtBLGtCQUFrQjtBQUNwRCxFQUNBLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9jb3JlL25ldHdvcmtTdGF0dXMuanM/MDJkMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBjdXJyZW50IHN0YXR1cyBvZiBhIHF1ZXJ54oCZcyBleGVjdXRpb24gaW4gb3VyIHN5c3RlbS5cbiAqL1xuZXhwb3J0IHZhciBOZXR3b3JrU3RhdHVzO1xuKGZ1bmN0aW9uIChOZXR3b3JrU3RhdHVzKSB7XG4gICAgLyoqXG4gICAgICogVGhlIHF1ZXJ5IGhhcyBuZXZlciBiZWVuIHJ1biBiZWZvcmUgYW5kIHRoZSBxdWVyeSBpcyBub3cgY3VycmVudGx5IHJ1bm5pbmcuIEEgcXVlcnkgd2lsbCBzdGlsbFxuICAgICAqIGhhdmUgdGhpcyBuZXR3b3JrIHN0YXR1cyBldmVuIGlmIGEgcGFydGlhbCBkYXRhIHJlc3VsdCB3YXMgcmV0dXJuZWQgZnJvbSB0aGUgY2FjaGUsIGJ1dCBhXG4gICAgICogcXVlcnkgd2FzIGRpc3BhdGNoZWQgYW55d2F5LlxuICAgICAqL1xuICAgIE5ldHdvcmtTdGF0dXNbTmV0d29ya1N0YXR1c1tcImxvYWRpbmdcIl0gPSAxXSA9IFwibG9hZGluZ1wiO1xuICAgIC8qKlxuICAgICAqIElmIGBzZXRWYXJpYWJsZXNgIHdhcyBjYWxsZWQgYW5kIGEgcXVlcnkgd2FzIGZpcmVkIGJlY2F1c2Ugb2YgdGhhdCB0aGVuIHRoZSBuZXR3b3JrIHN0YXR1c1xuICAgICAqIHdpbGwgYmUgYHNldFZhcmlhYmxlc2AgdW50aWwgdGhlIHJlc3VsdCBvZiB0aGF0IHF1ZXJ5IGNvbWVzIGJhY2suXG4gICAgICovXG4gICAgTmV0d29ya1N0YXR1c1tOZXR3b3JrU3RhdHVzW1wic2V0VmFyaWFibGVzXCJdID0gMl0gPSBcInNldFZhcmlhYmxlc1wiO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGF0IGBmZXRjaE1vcmVgIHdhcyBjYWxsZWQgb24gdGhpcyBxdWVyeSBhbmQgdGhhdCB0aGUgcXVlcnkgY3JlYXRlZCBpcyBjdXJyZW50bHkgaW5cbiAgICAgKiBmbGlnaHQuXG4gICAgICovXG4gICAgTmV0d29ya1N0YXR1c1tOZXR3b3JrU3RhdHVzW1wiZmV0Y2hNb3JlXCJdID0gM10gPSBcImZldGNoTW9yZVwiO1xuICAgIC8qKlxuICAgICAqIFNpbWlsYXIgdG8gdGhlIGBzZXRWYXJpYWJsZXNgIG5ldHdvcmsgc3RhdHVzLiBJdCBtZWFucyB0aGF0IGByZWZldGNoYCB3YXMgY2FsbGVkIG9uIGEgcXVlcnlcbiAgICAgKiBhbmQgdGhlIHJlZmV0Y2ggcmVxdWVzdCBpcyBjdXJyZW50bHkgaW4gZmxpZ2h0LlxuICAgICAqL1xuICAgIE5ldHdvcmtTdGF0dXNbTmV0d29ya1N0YXR1c1tcInJlZmV0Y2hcIl0gPSA0XSA9IFwicmVmZXRjaFwiO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGF0IGEgcG9sbGluZyBxdWVyeSBpcyBjdXJyZW50bHkgaW4gZmxpZ2h0LiBTbyBmb3IgZXhhbXBsZSBpZiB5b3UgYXJlIHBvbGxpbmcgYVxuICAgICAqIHF1ZXJ5IGV2ZXJ5IDEwIHNlY29uZHMgdGhlbiB0aGUgbmV0d29yayBzdGF0dXMgd2lsbCBzd2l0Y2ggdG8gYHBvbGxgIGV2ZXJ5IDEwIHNlY29uZHMgd2hlbmV2ZXJcbiAgICAgKiBhIHBvbGwgcmVxdWVzdCBoYXMgYmVlbiBzZW50IGJ1dCBub3QgcmVzb2x2ZWQuXG4gICAgICovXG4gICAgTmV0d29ya1N0YXR1c1tOZXR3b3JrU3RhdHVzW1wicG9sbFwiXSA9IDZdID0gXCJwb2xsXCI7XG4gICAgLyoqXG4gICAgICogTm8gcmVxdWVzdCBpcyBpbiBmbGlnaHQgZm9yIHRoaXMgcXVlcnksIGFuZCBubyBlcnJvcnMgaGFwcGVuZWQuIEV2ZXJ5dGhpbmcgaXMgT0suXG4gICAgICovXG4gICAgTmV0d29ya1N0YXR1c1tOZXR3b3JrU3RhdHVzW1wicmVhZHlcIl0gPSA3XSA9IFwicmVhZHlcIjtcbiAgICAvKipcbiAgICAgKiBObyByZXF1ZXN0IGlzIGluIGZsaWdodCBmb3IgdGhpcyBxdWVyeSwgYnV0IG9uZSBvciBtb3JlIGVycm9ycyB3ZXJlIGRldGVjdGVkLlxuICAgICAqL1xuICAgIE5ldHdvcmtTdGF0dXNbTmV0d29ya1N0YXR1c1tcImVycm9yXCJdID0gOF0gPSBcImVycm9yXCI7XG59KShOZXR3b3JrU3RhdHVzIHx8IChOZXR3b3JrU3RhdHVzID0ge30pKTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZXJlIGlzIGN1cnJlbnRseSBhIG5ldHdvcmsgcmVxdWVzdCBpbiBmbGlnaHQgYWNjb3JkaW5nIHRvIGEgZ2l2ZW4gbmV0d29ya1xuICogc3RhdHVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNOZXR3b3JrUmVxdWVzdEluRmxpZ2h0KG5ldHdvcmtTdGF0dXMpIHtcbiAgICByZXR1cm4gbmV0d29ya1N0YXR1cyA/IG5ldHdvcmtTdGF0dXMgPCA3IDogZmFsc2U7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgbmV0d29yayByZXF1ZXN0IGlzIGluIHJlYWR5IG9yIGVycm9yIHN0YXRlIGFjY29yZGluZyB0byBhIGdpdmVuIG5ldHdvcmtcbiAqIHN0YXR1cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTmV0d29ya1JlcXVlc3RTZXR0bGVkKG5ldHdvcmtTdGF0dXMpIHtcbiAgICByZXR1cm4gbmV0d29ya1N0YXR1cyA9PT0gNyB8fCBuZXR3b3JrU3RhdHVzID09PSA4O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmV0d29ya1N0YXR1cy5qcy5tYXAiXSwibmFtZXMiOlsiTmV0d29ya1N0YXR1cyIsImlzTmV0d29ya1JlcXVlc3RJbkZsaWdodCIsIm5ldHdvcmtTdGF0dXMiLCJpc05ldHdvcmtSZXF1ZXN0U2V0dGxlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/core/networkStatus.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/errors/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@apollo/client/errors/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloError: () => (/* binding */ ApolloError),\n/* harmony export */   PROTOCOL_ERRORS_SYMBOL: () => (/* binding */ PROTOCOL_ERRORS_SYMBOL),\n/* harmony export */   graphQLResultHasProtocolErrors: () => (/* binding */ graphQLResultHasProtocolErrors),\n/* harmony export */   isApolloError: () => (/* binding */ isApolloError)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/globals/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/objects.js\");\n\n\n\n// This Symbol allows us to pass transport-specific errors from the link chain\n// into QueryManager/client internals without risking a naming collision within\n// extensions (which implementers can use as they see fit).\nvar PROTOCOL_ERRORS_SYMBOL = Symbol();\nfunction graphQLResultHasProtocolErrors(result) {\n    if (result.extensions) {\n        return Array.isArray(result.extensions[PROTOCOL_ERRORS_SYMBOL]);\n    }\n    return false;\n}\nfunction isApolloError(err) {\n    return err.hasOwnProperty(\"graphQLErrors\");\n}\n// Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\nvar generateErrorMessage = function(err) {\n    var errors = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], err.graphQLErrors, true), err.clientErrors, true), err.protocolErrors, true);\n    if (err.networkError) errors.push(err.networkError);\n    return errors// The rest of the code sometimes unsafely types non-Error objects as GraphQLErrors\n    .map(function(err) {\n        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isNonNullObject)(err) && err.message || \"Error message not found.\";\n    }).join(\"\\n\");\n};\nvar ApolloError = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__extends)(ApolloError, _super);\n    // Constructs an instance of ApolloError given a GraphQLError\n    // or a network error. Note that one of these has to be a valid\n    // value or the constructed error will be meaningless.\n    function ApolloError(_a) {\n        var graphQLErrors = _a.graphQLErrors, protocolErrors = _a.protocolErrors, clientErrors = _a.clientErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;\n        var _this = _super.call(this, errorMessage) || this;\n        _this.name = \"ApolloError\";\n        _this.graphQLErrors = graphQLErrors || [];\n        _this.protocolErrors = protocolErrors || [];\n        _this.clientErrors = clientErrors || [];\n        _this.networkError = networkError || null;\n        _this.message = errorMessage || generateErrorMessage(_this);\n        _this.extraInfo = extraInfo;\n        // We're not using `Object.setPrototypeOf` here as it isn't fully\n        // supported on Android (see issue #3236).\n        _this.__proto__ = ApolloError.prototype;\n        return _this;\n    }\n    return ApolloError;\n}(Error);\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvZXJyb3JzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBaUQ7QUFDVjtBQUNpQjtBQUN4RCw4RUFBOEU7QUFDOUUsK0VBQStFO0FBQy9FLDJEQUEyRDtBQUNwRCxJQUFJRyx5QkFBeUJDLFNBQVM7QUFDdEMsU0FBU0MsK0JBQStCQyxNQUFNO0lBQ2pELElBQUlBLE9BQU9DLFVBQVUsRUFBRTtRQUNuQixPQUFPQyxNQUFNQyxPQUFPLENBQUNILE9BQU9DLFVBQVUsQ0FBQ0osdUJBQXVCO0lBQ2xFO0lBQ0EsT0FBTztBQUNYO0FBQ08sU0FBU08sY0FBY0MsR0FBRztJQUM3QixPQUFPQSxJQUFJQyxjQUFjLENBQUM7QUFDOUI7QUFDQSx3REFBd0Q7QUFDeEQsbURBQW1EO0FBQ25ELHdEQUF3RDtBQUN4RCxvREFBb0Q7QUFDcEQsSUFBSUMsdUJBQXVCLFNBQVVGLEdBQUc7SUFDcEMsSUFBSUcsU0FBU2Isb0RBQWFBLENBQUNBLG9EQUFhQSxDQUFDQSxvREFBYUEsQ0FBQyxFQUFFLEVBQUVVLElBQUlJLGFBQWEsRUFBRSxPQUFPSixJQUFJSyxZQUFZLEVBQUUsT0FBT0wsSUFBSU0sY0FBYyxFQUFFO0lBQ2xJLElBQUlOLElBQUlPLFlBQVksRUFDaEJKLE9BQU9LLElBQUksQ0FBQ1IsSUFBSU8sWUFBWTtJQUNoQyxPQUFRSixNQUNKLG1GQUFtRjtLQUNsRk0sR0FBRyxDQUFDLFNBQVVULEdBQUc7UUFDbEIsT0FBTyxxRUFBaUJBLFFBQVFBLElBQUlVLE9BQU8sSUFBSztJQUNwRCxHQUNLQyxJQUFJLENBQUM7QUFDZDtBQUNBLElBQUlDLGNBQWMsV0FBVyxHQUFJLFNBQVVDLE1BQU07SUFDN0N4QixnREFBU0EsQ0FBQ3VCLGFBQWFDO0lBQ3ZCLDZEQUE2RDtJQUM3RCwrREFBK0Q7SUFDL0Qsc0RBQXNEO0lBQ3RELFNBQVNELFlBQVlFLEVBQUU7UUFDbkIsSUFBSVYsZ0JBQWdCVSxHQUFHVixhQUFhLEVBQUVFLGlCQUFpQlEsR0FBR1IsY0FBYyxFQUFFRCxlQUFlUyxHQUFHVCxZQUFZLEVBQUVFLGVBQWVPLEdBQUdQLFlBQVksRUFBRVEsZUFBZUQsR0FBR0MsWUFBWSxFQUFFQyxZQUFZRixHQUFHRSxTQUFTO1FBQ2xNLElBQUlDLFFBQVFKLE9BQU9LLElBQUksQ0FBQyxJQUFJLEVBQUVILGlCQUFpQixJQUFJO1FBQ25ERSxNQUFNRSxJQUFJLEdBQUc7UUFDYkYsTUFBTWIsYUFBYSxHQUFHQSxpQkFBaUIsRUFBRTtRQUN6Q2EsTUFBTVgsY0FBYyxHQUFHQSxrQkFBa0IsRUFBRTtRQUMzQ1csTUFBTVosWUFBWSxHQUFHQSxnQkFBZ0IsRUFBRTtRQUN2Q1ksTUFBTVYsWUFBWSxHQUFHQSxnQkFBZ0I7UUFDckNVLE1BQU1QLE9BQU8sR0FBR0ssZ0JBQWdCYixxQkFBcUJlO1FBQ3JEQSxNQUFNRCxTQUFTLEdBQUdBO1FBQ2xCLGlFQUFpRTtRQUNqRSwwQ0FBMEM7UUFDMUNDLE1BQU1HLFNBQVMsR0FBR1IsWUFBWVMsU0FBUztRQUN2QyxPQUFPSjtJQUNYO0lBQ0EsT0FBT0w7QUFDWCxFQUFFVTtBQUNxQixDQUN2QixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvZXJyb3JzL2luZGV4LmpzPzI5NTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19leHRlbmRzLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgXCIuLi91dGlsaXRpZXMvZ2xvYmFscy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgaXNOb25OdWxsT2JqZWN0IH0gZnJvbSBcIi4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xuLy8gVGhpcyBTeW1ib2wgYWxsb3dzIHVzIHRvIHBhc3MgdHJhbnNwb3J0LXNwZWNpZmljIGVycm9ycyBmcm9tIHRoZSBsaW5rIGNoYWluXG4vLyBpbnRvIFF1ZXJ5TWFuYWdlci9jbGllbnQgaW50ZXJuYWxzIHdpdGhvdXQgcmlza2luZyBhIG5hbWluZyBjb2xsaXNpb24gd2l0aGluXG4vLyBleHRlbnNpb25zICh3aGljaCBpbXBsZW1lbnRlcnMgY2FuIHVzZSBhcyB0aGV5IHNlZSBmaXQpLlxuZXhwb3J0IHZhciBQUk9UT0NPTF9FUlJPUlNfU1lNQk9MID0gU3ltYm9sKCk7XG5leHBvcnQgZnVuY3Rpb24gZ3JhcGhRTFJlc3VsdEhhc1Byb3RvY29sRXJyb3JzKHJlc3VsdCkge1xuICAgIGlmIChyZXN1bHQuZXh0ZW5zaW9ucykge1xuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShyZXN1bHQuZXh0ZW5zaW9uc1tQUk9UT0NPTF9FUlJPUlNfU1lNQk9MXSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0Fwb2xsb0Vycm9yKGVycikge1xuICAgIHJldHVybiBlcnIuaGFzT3duUHJvcGVydHkoXCJncmFwaFFMRXJyb3JzXCIpO1xufVxuLy8gU2V0cyB0aGUgZXJyb3IgbWVzc2FnZSBvbiB0aGlzIGVycm9yIGFjY29yZGluZyB0byB0aGVcbi8vIHRoZSBHcmFwaFFMIGFuZCBuZXR3b3JrIGVycm9ycyB0aGF0IGFyZSBwcmVzZW50LlxuLy8gSWYgdGhlIGVycm9yIG1lc3NhZ2UgaGFzIGFscmVhZHkgYmVlbiBzZXQgdGhyb3VnaCB0aGVcbi8vIGNvbnN0cnVjdG9yIG9yIG90aGVyd2lzZSwgdGhpcyBmdW5jdGlvbiBpcyBhIG5vcC5cbnZhciBnZW5lcmF0ZUVycm9yTWVzc2FnZSA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICB2YXIgZXJyb3JzID0gX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoW10sIGVyci5ncmFwaFFMRXJyb3JzLCB0cnVlKSwgZXJyLmNsaWVudEVycm9ycywgdHJ1ZSksIGVyci5wcm90b2NvbEVycm9ycywgdHJ1ZSk7XG4gICAgaWYgKGVyci5uZXR3b3JrRXJyb3IpXG4gICAgICAgIGVycm9ycy5wdXNoKGVyci5uZXR3b3JrRXJyb3IpO1xuICAgIHJldHVybiAoZXJyb3JzXG4gICAgICAgIC8vIFRoZSByZXN0IG9mIHRoZSBjb2RlIHNvbWV0aW1lcyB1bnNhZmVseSB0eXBlcyBub24tRXJyb3Igb2JqZWN0cyBhcyBHcmFwaFFMRXJyb3JzXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGVycikge1xuICAgICAgICByZXR1cm4gKGlzTm9uTnVsbE9iamVjdChlcnIpICYmIGVyci5tZXNzYWdlKSB8fCBcIkVycm9yIG1lc3NhZ2Ugbm90IGZvdW5kLlwiO1xuICAgIH0pXG4gICAgICAgIC5qb2luKFwiXFxuXCIpKTtcbn07XG52YXIgQXBvbGxvRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFwb2xsb0Vycm9yLCBfc3VwZXIpO1xuICAgIC8vIENvbnN0cnVjdHMgYW4gaW5zdGFuY2Ugb2YgQXBvbGxvRXJyb3IgZ2l2ZW4gYSBHcmFwaFFMRXJyb3JcbiAgICAvLyBvciBhIG5ldHdvcmsgZXJyb3IuIE5vdGUgdGhhdCBvbmUgb2YgdGhlc2UgaGFzIHRvIGJlIGEgdmFsaWRcbiAgICAvLyB2YWx1ZSBvciB0aGUgY29uc3RydWN0ZWQgZXJyb3Igd2lsbCBiZSBtZWFuaW5nbGVzcy5cbiAgICBmdW5jdGlvbiBBcG9sbG9FcnJvcihfYSkge1xuICAgICAgICB2YXIgZ3JhcGhRTEVycm9ycyA9IF9hLmdyYXBoUUxFcnJvcnMsIHByb3RvY29sRXJyb3JzID0gX2EucHJvdG9jb2xFcnJvcnMsIGNsaWVudEVycm9ycyA9IF9hLmNsaWVudEVycm9ycywgbmV0d29ya0Vycm9yID0gX2EubmV0d29ya0Vycm9yLCBlcnJvck1lc3NhZ2UgPSBfYS5lcnJvck1lc3NhZ2UsIGV4dHJhSW5mbyA9IF9hLmV4dHJhSW5mbztcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZXJyb3JNZXNzYWdlKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5uYW1lID0gXCJBcG9sbG9FcnJvclwiO1xuICAgICAgICBfdGhpcy5ncmFwaFFMRXJyb3JzID0gZ3JhcGhRTEVycm9ycyB8fCBbXTtcbiAgICAgICAgX3RoaXMucHJvdG9jb2xFcnJvcnMgPSBwcm90b2NvbEVycm9ycyB8fCBbXTtcbiAgICAgICAgX3RoaXMuY2xpZW50RXJyb3JzID0gY2xpZW50RXJyb3JzIHx8IFtdO1xuICAgICAgICBfdGhpcy5uZXR3b3JrRXJyb3IgPSBuZXR3b3JrRXJyb3IgfHwgbnVsbDtcbiAgICAgICAgX3RoaXMubWVzc2FnZSA9IGVycm9yTWVzc2FnZSB8fCBnZW5lcmF0ZUVycm9yTWVzc2FnZShfdGhpcyk7XG4gICAgICAgIF90aGlzLmV4dHJhSW5mbyA9IGV4dHJhSW5mbztcbiAgICAgICAgLy8gV2UncmUgbm90IHVzaW5nIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIGhlcmUgYXMgaXQgaXNuJ3QgZnVsbHlcbiAgICAgICAgLy8gc3VwcG9ydGVkIG9uIEFuZHJvaWQgKHNlZSBpc3N1ZSAjMzIzNikuXG4gICAgICAgIF90aGlzLl9fcHJvdG9fXyA9IEFwb2xsb0Vycm9yLnByb3RvdHlwZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gQXBvbGxvRXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnQgeyBBcG9sbG9FcnJvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIl9fZXh0ZW5kcyIsIl9fc3ByZWFkQXJyYXkiLCJpc05vbk51bGxPYmplY3QiLCJQUk9UT0NPTF9FUlJPUlNfU1lNQk9MIiwiU3ltYm9sIiwiZ3JhcGhRTFJlc3VsdEhhc1Byb3RvY29sRXJyb3JzIiwicmVzdWx0IiwiZXh0ZW5zaW9ucyIsIkFycmF5IiwiaXNBcnJheSIsImlzQXBvbGxvRXJyb3IiLCJlcnIiLCJoYXNPd25Qcm9wZXJ0eSIsImdlbmVyYXRlRXJyb3JNZXNzYWdlIiwiZXJyb3JzIiwiZ3JhcGhRTEVycm9ycyIsImNsaWVudEVycm9ycyIsInByb3RvY29sRXJyb3JzIiwibmV0d29ya0Vycm9yIiwicHVzaCIsIm1hcCIsIm1lc3NhZ2UiLCJqb2luIiwiQXBvbGxvRXJyb3IiLCJfc3VwZXIiLCJfYSIsImVycm9yTWVzc2FnZSIsImV4dHJhSW5mbyIsIl90aGlzIiwiY2FsbCIsIm5hbWUiLCJfX3Byb3RvX18iLCJwcm90b3R5cGUiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/errors/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/link/core/ApolloLink.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/client/link/core/ApolloLink.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloLink: () => (/* binding */ ApolloLink)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/@apollo/client/link/utils/createOperation.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/@apollo/client/link/utils/transformOperation.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/@apollo/client/link/utils/validateOperation.js\");\n\n\n\nfunction passthrough(op, forward) {\n    return forward ? forward(op) : _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n}\nfunction toLink(handler) {\n    return typeof handler === \"function\" ? new ApolloLink(handler) : handler;\n}\nfunction isTerminating(link) {\n    return link.request.length <= 1;\n}\nvar ApolloLink = /** @class */ function() {\n    function ApolloLink(request) {\n        if (request) this.request = request;\n    }\n    ApolloLink.empty = function() {\n        return new ApolloLink(function() {\n            return _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n        });\n    };\n    ApolloLink.from = function(links) {\n        if (links.length === 0) return ApolloLink.empty();\n        return links.map(toLink).reduce(function(x, y) {\n            return x.concat(y);\n        });\n    };\n    ApolloLink.split = function(test, left, right) {\n        var leftLink = toLink(left);\n        var rightLink = toLink(right || new ApolloLink(passthrough));\n        var ret;\n        if (isTerminating(leftLink) && isTerminating(rightLink)) {\n            ret = new ApolloLink(function(operation) {\n                return test(operation) ? leftLink.request(operation) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of() : rightLink.request(operation) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n            });\n        } else {\n            ret = new ApolloLink(function(operation, forward) {\n                return test(operation) ? leftLink.request(operation, forward) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of() : rightLink.request(operation, forward) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n            });\n        }\n        return Object.assign(ret, {\n            left: leftLink,\n            right: rightLink\n        });\n    };\n    ApolloLink.execute = function(link, operation) {\n        return link.request((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.createOperation)(operation.context, (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.transformOperation)((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.validateOperation)(operation)))) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n    };\n    ApolloLink.concat = function(first, second) {\n        var firstLink = toLink(first);\n        if (isTerminating(firstLink)) {\n            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(35, firstLink);\n            return firstLink;\n        }\n        var nextLink = toLink(second);\n        var ret;\n        if (isTerminating(nextLink)) {\n            ret = new ApolloLink(function(operation) {\n                return firstLink.request(operation, function(op) {\n                    return nextLink.request(op) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n                }) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n            });\n        } else {\n            ret = new ApolloLink(function(operation, forward) {\n                return firstLink.request(operation, function(op) {\n                    return nextLink.request(op, forward) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n                }) || _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.Observable.of();\n            });\n        }\n        return Object.assign(ret, {\n            left: firstLink,\n            right: nextLink\n        });\n    };\n    ApolloLink.prototype.split = function(test, left, right) {\n        return this.concat(ApolloLink.split(test, left, right || new ApolloLink(passthrough)));\n    };\n    ApolloLink.prototype.concat = function(next) {\n        return ApolloLink.concat(this, next);\n    };\n    ApolloLink.prototype.request = function(operation, forward) {\n        throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(36);\n    };\n    ApolloLink.prototype.onError = function(error, observer) {\n        if (observer && observer.error) {\n            observer.error(error);\n            // Returning false indicates that observer.error does not need to be\n            // called again, since it was already called (on the previous line).\n            // Calling observer.error again would not cause any real problems,\n            // since only the first call matters, but custom onError functions\n            // might have other reasons for wanting to prevent the default\n            // behavior by returning false.\n            return false;\n        }\n        // Throw errors will be passed to observer.error.\n        throw error;\n    };\n    ApolloLink.prototype.setOnError = function(fn) {\n        this.onError = fn;\n        return this;\n    };\n    return ApolloLink;\n}();\n //# sourceMappingURL=ApolloLink.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/link/core/ApolloLink.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/link/core/execute.js":
/*!**********************************************************!*\
  !*** ./node_modules/@apollo/client/link/core/execute.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   execute: () => (/* binding */ execute)\n/* harmony export */ });\n/* harmony import */ var _ApolloLink_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ApolloLink.js */ \"(rsc)/./node_modules/@apollo/client/link/core/ApolloLink.js\");\n\nvar execute = _ApolloLink_js__WEBPACK_IMPORTED_MODULE_0__.ApolloLink.execute; //# sourceMappingURL=execute.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9jb3JlL2V4ZWN1dGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNkM7QUFDdEMsSUFBSUMsVUFBVUQsc0RBQVVBLENBQUNDLE9BQU8sQ0FBQyxDQUN4QyxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9jb3JlL2V4ZWN1dGUuanM/MjM1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcG9sbG9MaW5rIH0gZnJvbSBcIi4vQXBvbGxvTGluay5qc1wiO1xuZXhwb3J0IHZhciBleGVjdXRlID0gQXBvbGxvTGluay5leGVjdXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhlY3V0ZS5qcy5tYXAiXSwibmFtZXMiOlsiQXBvbGxvTGluayIsImV4ZWN1dGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/link/core/execute.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/link/http/HttpLink.js":
/*!***********************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/HttpLink.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpLink: () => (/* binding */ HttpLink)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/index.js */ \"(rsc)/./node_modules/@apollo/client/link/core/ApolloLink.js\");\n/* harmony import */ var _createHttpLink_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./createHttpLink.js */ \"(rsc)/./node_modules/@apollo/client/link/http/createHttpLink.js\");\n\n\n\nvar HttpLink = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(HttpLink, _super);\n    function HttpLink(options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var _this = _super.call(this, (0,_createHttpLink_js__WEBPACK_IMPORTED_MODULE_1__.createHttpLink)(options).request) || this;\n        _this.options = options;\n        return _this;\n    }\n    return HttpLink;\n}(_core_index_js__WEBPACK_IMPORTED_MODULE_2__.ApolloLink);\n //# sourceMappingURL=HttpLink.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL0h0dHBMaW5rLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBa0M7QUFDWTtBQUNPO0FBQ3JELElBQUlHLFdBQVcsV0FBVyxHQUFJLFNBQVVDLE1BQU07SUFDMUNKLGdEQUFTQSxDQUFDRyxVQUFVQztJQUNwQixTQUFTRCxTQUFTRSxPQUFPO1FBQ3JCLElBQUlBLFlBQVksS0FBSyxHQUFHO1lBQUVBLFVBQVUsQ0FBQztRQUFHO1FBQ3hDLElBQUlDLFFBQVFGLE9BQU9HLElBQUksQ0FBQyxJQUFJLEVBQUVMLGtFQUFjQSxDQUFDRyxTQUFTRyxPQUFPLEtBQUssSUFBSTtRQUN0RUYsTUFBTUQsT0FBTyxHQUFHQTtRQUNoQixPQUFPQztJQUNYO0lBQ0EsT0FBT0g7QUFDWCxFQUFFRixzREFBVUE7QUFDUSxDQUNwQixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL0h0dHBMaW5rLmpzP2VjNDciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBBcG9sbG9MaW5rIH0gZnJvbSBcIi4uL2NvcmUvaW5kZXguanNcIjtcbmltcG9ydCB7IGNyZWF0ZUh0dHBMaW5rIH0gZnJvbSBcIi4vY3JlYXRlSHR0cExpbmsuanNcIjtcbnZhciBIdHRwTGluayA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSHR0cExpbmssIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSHR0cExpbmsob3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBjcmVhdGVIdHRwTGluayhvcHRpb25zKS5yZXF1ZXN0KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gSHR0cExpbms7XG59KEFwb2xsb0xpbmspKTtcbmV4cG9ydCB7IEh0dHBMaW5rIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1IdHRwTGluay5qcy5tYXAiXSwibmFtZXMiOlsiX19leHRlbmRzIiwiQXBvbGxvTGluayIsImNyZWF0ZUh0dHBMaW5rIiwiSHR0cExpbmsiLCJfc3VwZXIiLCJvcHRpb25zIiwiX3RoaXMiLCJjYWxsIiwicmVxdWVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/link/http/HttpLink.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/link/http/checkFetcher.js":
/*!***************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/checkFetcher.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkFetcher: () => (/* binding */ checkFetcher)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\nvar checkFetcher = function(fetcher) {\n    if (!fetcher && typeof fetch === \"undefined\") {\n        throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(37);\n    }\n}; //# sourceMappingURL=checkFetcher.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2NoZWNrRmV0Y2hlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxRTtBQUM5RCxJQUFJQyxlQUFlLFNBQVVDLE9BQU87SUFDdkMsSUFBSSxDQUFDQSxXQUFXLE9BQU9DLFVBQVUsYUFBYTtRQUMxQyxNQUFNSCw4RUFBaUJBLENBQUM7SUFDNUI7QUFDSixFQUFFLENBQ0Ysd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktZG9jcy1mcm9uLWVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2xpbmsvaHR0cC9jaGVja0ZldGNoZXIuanM/NDBjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuZXdJbnZhcmlhbnRFcnJvciB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvZ2xvYmFscy9pbmRleC5qc1wiO1xuZXhwb3J0IHZhciBjaGVja0ZldGNoZXIgPSBmdW5jdGlvbiAoZmV0Y2hlcikge1xuICAgIGlmICghZmV0Y2hlciAmJiB0eXBlb2YgZmV0Y2ggPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3SW52YXJpYW50RXJyb3IoMzcpO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGVja0ZldGNoZXIuanMubWFwIl0sIm5hbWVzIjpbIm5ld0ludmFyaWFudEVycm9yIiwiY2hlY2tGZXRjaGVyIiwiZmV0Y2hlciIsImZldGNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/link/http/checkFetcher.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/link/http/createHttpLink.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/createHttpLink.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHttpLink: () => (/* binding */ createHttpLink)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/index.js */ \"(rsc)/./node_modules/@apollo/client/link/core/ApolloLink.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/directives.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./serializeFetchParameter.js */ \"(rsc)/./node_modules/@apollo/client/link/http/serializeFetchParameter.js\");\n/* harmony import */ var _selectURI_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./selectURI.js */ \"(rsc)/./node_modules/@apollo/client/link/http/selectURI.js\");\n/* harmony import */ var _parseAndCheckHttpResponse_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./parseAndCheckHttpResponse.js */ \"(rsc)/./node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js\");\n/* harmony import */ var _checkFetcher_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./checkFetcher.js */ \"(rsc)/./node_modules/@apollo/client/link/http/checkFetcher.js\");\n/* harmony import */ var _selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selectHttpOptionsAndBody.js */ \"(rsc)/./node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js\");\n/* harmony import */ var _rewriteURIForGET_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./rewriteURIForGET.js */ \"(rsc)/./node_modules/@apollo/client/link/http/rewriteURIForGET.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/@apollo/client/link/utils/fromError.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/@apollo/client/link/utils/filterOperationVariables.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/transform.js\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nvar backupFetch = (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return fetch;\n});\nvar createHttpLink = function(linkOptions) {\n    if (linkOptions === void 0) {\n        linkOptions = {};\n    }\n    var _a = linkOptions.uri, uri = _a === void 0 ? \"/graphql\" : _a, // use default global fetch if nothing passed in\n    preferredFetch = linkOptions.fetch, _b = linkOptions.print, print = _b === void 0 ? _selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_1__.defaultPrinter : _b, includeExtensions = linkOptions.includeExtensions, preserveHeaderCase = linkOptions.preserveHeaderCase, useGETForQueries = linkOptions.useGETForQueries, _c = linkOptions.includeUnusedVariables, includeUnusedVariables = _c === void 0 ? false : _c, requestOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__rest)(linkOptions, [\n        \"uri\",\n        \"fetch\",\n        \"print\",\n        \"includeExtensions\",\n        \"preserveHeaderCase\",\n        \"useGETForQueries\",\n        \"includeUnusedVariables\"\n    ]);\n    if (globalThis.__DEV__ !== false) {\n        // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n        // defined, so requests won't fail at runtime.\n        (0,_checkFetcher_js__WEBPACK_IMPORTED_MODULE_3__.checkFetcher)(preferredFetch || backupFetch);\n    }\n    var linkConfig = {\n        http: {\n            includeExtensions: includeExtensions,\n            preserveHeaderCase: preserveHeaderCase\n        },\n        options: requestOptions.fetchOptions,\n        credentials: requestOptions.credentials,\n        headers: requestOptions.headers\n    };\n    return new _core_index_js__WEBPACK_IMPORTED_MODULE_4__.ApolloLink(function(operation) {\n        var chosenURI = (0,_selectURI_js__WEBPACK_IMPORTED_MODULE_5__.selectURI)(operation, uri);\n        var context = operation.getContext();\n        // `apollographql-client-*` headers are automatically set if a\n        // `clientAwareness` object is found in the context. These headers are\n        // set first, followed by the rest of the headers pulled from\n        // `context.headers`. If desired, `apollographql-client-*` headers set by\n        // the `clientAwareness` object can be overridden by\n        // `apollographql-client-*` headers set in `context.headers`.\n        var clientAwarenessHeaders = {};\n        if (context.clientAwareness) {\n            var _a = context.clientAwareness, name_1 = _a.name, version = _a.version;\n            if (name_1) {\n                clientAwarenessHeaders[\"apollographql-client-name\"] = name_1;\n            }\n            if (version) {\n                clientAwarenessHeaders[\"apollographql-client-version\"] = version;\n            }\n        }\n        var contextHeaders = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, clientAwarenessHeaders), context.headers);\n        var contextConfig = {\n            http: context.http,\n            options: context.fetchOptions,\n            credentials: context.credentials,\n            headers: contextHeaders\n        };\n        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.hasDirectives)([\n            \"client\"\n        ], operation.query)) {\n            var transformedQuery = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.removeClientSetsFromDocument)(operation.query);\n            if (!transformedQuery) {\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.fromError)(new Error(\"HttpLink: Trying to send a client-only query to the server. To send to the server, ensure a non-client field is added to the query or set the `transformOptions.removeClientFields` option to `true`.\"));\n            }\n            operation.query = transformedQuery;\n        }\n        //uses fallback, link, and then context to build options\n        var _b = (0,_selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_1__.selectHttpOptionsAndBodyInternal)(operation, print, _selectHttpOptionsAndBody_js__WEBPACK_IMPORTED_MODULE_1__.fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;\n        if (body.variables && !includeUnusedVariables) {\n            body.variables = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_9__.filterOperationVariables)(body.variables, operation.query);\n        }\n        var controller;\n        if (!options.signal && typeof AbortController !== \"undefined\") {\n            controller = new AbortController();\n            options.signal = controller.signal;\n        }\n        // If requested, set method to GET if there are no mutations.\n        var definitionIsMutation = function(d) {\n            return d.kind === \"OperationDefinition\" && d.operation === \"mutation\";\n        };\n        var definitionIsSubscription = function(d) {\n            return d.kind === \"OperationDefinition\" && d.operation === \"subscription\";\n        };\n        var isSubscription = definitionIsSubscription((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.getMainDefinition)(operation.query));\n        // does not match custom directives beginning with @defer\n        var hasDefer = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.hasDirectives)([\n            \"defer\"\n        ], operation.query);\n        if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {\n            options.method = \"GET\";\n        }\n        if (hasDefer || isSubscription) {\n            options.headers = options.headers || {};\n            var acceptHeader = \"multipart/mixed;\";\n            // Omit defer-specific headers if the user attempts to defer a selection\n            // set on a subscription and log a warning.\n            if (isSubscription && hasDefer) {\n                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(38);\n            }\n            if (isSubscription) {\n                acceptHeader += \"boundary=graphql;subscriptionSpec=1.0,application/json\";\n            } else if (hasDefer) {\n                acceptHeader += \"deferSpec=20220824,application/json\";\n            }\n            options.headers.accept = acceptHeader;\n        }\n        if (options.method === \"GET\") {\n            var _c = (0,_rewriteURIForGET_js__WEBPACK_IMPORTED_MODULE_11__.rewriteURIForGET)(chosenURI, body), newURI = _c.newURI, parseError = _c.parseError;\n            if (parseError) {\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.fromError)(parseError);\n            }\n            chosenURI = newURI;\n        } else {\n            try {\n                options.body = (0,_serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_12__.serializeFetchParameter)(body, \"Payload\");\n            } catch (parseError) {\n                return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.fromError)(parseError);\n            }\n        }\n        return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.Observable(function(observer) {\n            // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n            // fall back to the *current* global window.fetch function (see issue\n            // #7832), or (if all else fails) the backupFetch function we saved when\n            // this module was first evaluated. This last option protects against the\n            // removal of window.fetch, which is unlikely but not impossible.\n            var currentFetch = preferredFetch || (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n                return fetch;\n            }) || backupFetch;\n            var observerNext = observer.next.bind(observer);\n            currentFetch(chosenURI, options).then(function(response) {\n                var _a;\n                operation.setContext({\n                    response: response\n                });\n                var ctype = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get(\"content-type\");\n                if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n                    return (0,_parseAndCheckHttpResponse_js__WEBPACK_IMPORTED_MODULE_14__.readMultipartBody)(response, observerNext);\n                } else {\n                    return (0,_parseAndCheckHttpResponse_js__WEBPACK_IMPORTED_MODULE_14__.parseAndCheckHttpResponse)(operation)(response).then(observerNext);\n                }\n            }).then(function() {\n                controller = undefined;\n                observer.complete();\n            }).catch(function(err) {\n                controller = undefined;\n                (0,_parseAndCheckHttpResponse_js__WEBPACK_IMPORTED_MODULE_14__.handleError)(err, observer);\n            });\n            return function() {\n                // XXX support canceling this request\n                // https://developers.google.com/web/updates/2017/09/abortable-fetch\n                if (controller) controller.abort();\n            };\n        });\n    });\n}; //# sourceMappingURL=createHttpLink.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/link/http/createHttpLink.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/link/http/iterators/async.js":
/*!******************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/iterators/async.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ asyncIterator)\n/* harmony export */ });\n/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/async.ts\n */ function asyncIterator(source) {\n    var _a;\n    var iterator = source[Symbol.asyncIterator]();\n    return _a = {\n        next: function() {\n            return iterator.next();\n        }\n    }, _a[Symbol.asyncIterator] = function() {\n        return this;\n    }, _a;\n} //# sourceMappingURL=async.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9hc3luYy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7OztDQUdDLEdBQ2MsU0FBU0EsY0FBY0MsTUFBTTtJQUN4QyxJQUFJQztJQUNKLElBQUlDLFdBQVdGLE1BQU0sQ0FBQ0csT0FBT0osYUFBYSxDQUFDO0lBQzNDLE9BQU9FLEtBQUs7UUFDSkcsTUFBTTtZQUNGLE9BQU9GLFNBQVNFLElBQUk7UUFDeEI7SUFDSixHQUNBSCxFQUFFLENBQUNFLE9BQU9KLGFBQWEsQ0FBQyxHQUFHO1FBQ3ZCLE9BQU8sSUFBSTtJQUNmLEdBQ0FFO0FBQ1IsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9hc3luYy5qcz84MzZjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogT3JpZ2luYWwgc291cmNlOlxuICogaHR0cHM6Ly9naXRodWIuY29tL2ttYWxha29mZi9yZXNwb25zZS1pdGVyYXRvci9ibG9iL21hc3Rlci9zcmMvaXRlcmF0b3JzL2FzeW5jLnRzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFzeW5jSXRlcmF0b3Ioc291cmNlKSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciBpdGVyYXRvciA9IHNvdXJjZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICByZXR1cm4gX2EgPSB7XG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX2FbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIF9hO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXN5bmMuanMubWFwIl0sIm5hbWVzIjpbImFzeW5jSXRlcmF0b3IiLCJzb3VyY2UiLCJfYSIsIml0ZXJhdG9yIiwiU3ltYm9sIiwibmV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/link/http/iterators/async.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/link/http/iterators/nodeStream.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/iterators/nodeStream.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ nodeStreamIterator)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/nodeStream.ts\n */ \nfunction nodeStreamIterator(stream) {\n    var cleanup = null;\n    var error = null;\n    var done = false;\n    var data = [];\n    var waiting = [];\n    function onData(chunk) {\n        if (error) return;\n        if (waiting.length) {\n            var shiftedArr = waiting.shift();\n            if (Array.isArray(shiftedArr) && shiftedArr[0]) {\n                return shiftedArr[0]({\n                    value: chunk,\n                    done: false\n                });\n            }\n        }\n        data.push(chunk);\n    }\n    function onError(err) {\n        error = err;\n        var all = waiting.slice();\n        all.forEach(function(pair) {\n            pair[1](err);\n        });\n        !cleanup || cleanup();\n    }\n    function onEnd() {\n        done = true;\n        var all = waiting.slice();\n        all.forEach(function(pair) {\n            pair[0]({\n                value: undefined,\n                done: true\n            });\n        });\n        !cleanup || cleanup();\n    }\n    cleanup = function() {\n        cleanup = null;\n        stream.removeListener(\"data\", onData);\n        stream.removeListener(\"error\", onError);\n        stream.removeListener(\"end\", onEnd);\n        stream.removeListener(\"finish\", onEnd);\n        stream.removeListener(\"close\", onEnd);\n    };\n    stream.on(\"data\", onData);\n    stream.on(\"error\", onError);\n    stream.on(\"end\", onEnd);\n    stream.on(\"finish\", onEnd);\n    stream.on(\"close\", onEnd);\n    function getNext() {\n        return new Promise(function(resolve, reject) {\n            if (error) return reject(error);\n            if (data.length) return resolve({\n                value: data.shift(),\n                done: false\n            });\n            if (done) return resolve({\n                value: undefined,\n                done: true\n            });\n            waiting.push([\n                resolve,\n                reject\n            ]);\n        });\n    }\n    var iterator = {\n        next: function() {\n            return getNext();\n        }\n    };\n    if (_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function() {\n            return this;\n        };\n    }\n    return iterator;\n} //# sourceMappingURL=nodeStream.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9ub2RlU3RyZWFtLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7OztDQUdDLEdBQ3VFO0FBQ3pELFNBQVNDLG1CQUFtQkMsTUFBTTtJQUM3QyxJQUFJQyxVQUFVO0lBQ2QsSUFBSUMsUUFBUTtJQUNaLElBQUlDLE9BQU87SUFDWCxJQUFJQyxPQUFPLEVBQUU7SUFDYixJQUFJQyxVQUFVLEVBQUU7SUFDaEIsU0FBU0MsT0FBT0MsS0FBSztRQUNqQixJQUFJTCxPQUNBO1FBQ0osSUFBSUcsUUFBUUcsTUFBTSxFQUFFO1lBQ2hCLElBQUlDLGFBQWFKLFFBQVFLLEtBQUs7WUFDOUIsSUFBSUMsTUFBTUMsT0FBTyxDQUFDSCxlQUFlQSxVQUFVLENBQUMsRUFBRSxFQUFFO2dCQUM1QyxPQUFPQSxVQUFVLENBQUMsRUFBRSxDQUFDO29CQUFFSSxPQUFPTjtvQkFBT0osTUFBTTtnQkFBTTtZQUNyRDtRQUNKO1FBQ0FDLEtBQUtVLElBQUksQ0FBQ1A7SUFDZDtJQUNBLFNBQVNRLFFBQVFDLEdBQUc7UUFDaEJkLFFBQVFjO1FBQ1IsSUFBSUMsTUFBTVosUUFBUWEsS0FBSztRQUN2QkQsSUFBSUUsT0FBTyxDQUFDLFNBQVVDLElBQUk7WUFDdEJBLElBQUksQ0FBQyxFQUFFLENBQUNKO1FBQ1o7UUFDQSxDQUFDZixXQUFXQTtJQUNoQjtJQUNBLFNBQVNvQjtRQUNMbEIsT0FBTztRQUNQLElBQUljLE1BQU1aLFFBQVFhLEtBQUs7UUFDdkJELElBQUlFLE9BQU8sQ0FBQyxTQUFVQyxJQUFJO1lBQ3RCQSxJQUFJLENBQUMsRUFBRSxDQUFDO2dCQUFFUCxPQUFPUztnQkFBV25CLE1BQU07WUFBSztRQUMzQztRQUNBLENBQUNGLFdBQVdBO0lBQ2hCO0lBQ0FBLFVBQVU7UUFDTkEsVUFBVTtRQUNWRCxPQUFPdUIsY0FBYyxDQUFDLFFBQVFqQjtRQUM5Qk4sT0FBT3VCLGNBQWMsQ0FBQyxTQUFTUjtRQUMvQmYsT0FBT3VCLGNBQWMsQ0FBQyxPQUFPRjtRQUM3QnJCLE9BQU91QixjQUFjLENBQUMsVUFBVUY7UUFDaENyQixPQUFPdUIsY0FBYyxDQUFDLFNBQVNGO0lBQ25DO0lBQ0FyQixPQUFPd0IsRUFBRSxDQUFDLFFBQVFsQjtJQUNsQk4sT0FBT3dCLEVBQUUsQ0FBQyxTQUFTVDtJQUNuQmYsT0FBT3dCLEVBQUUsQ0FBQyxPQUFPSDtJQUNqQnJCLE9BQU93QixFQUFFLENBQUMsVUFBVUg7SUFDcEJyQixPQUFPd0IsRUFBRSxDQUFDLFNBQVNIO0lBQ25CLFNBQVNJO1FBQ0wsT0FBTyxJQUFJQyxRQUFRLFNBQVVDLE9BQU8sRUFBRUMsTUFBTTtZQUN4QyxJQUFJMUIsT0FDQSxPQUFPMEIsT0FBTzFCO1lBQ2xCLElBQUlFLEtBQUtJLE1BQU0sRUFDWCxPQUFPbUIsUUFBUTtnQkFBRWQsT0FBT1QsS0FBS00sS0FBSztnQkFBSVAsTUFBTTtZQUFNO1lBQ3RELElBQUlBLE1BQ0EsT0FBT3dCLFFBQVE7Z0JBQUVkLE9BQU9TO2dCQUFXbkIsTUFBTTtZQUFLO1lBQ2xERSxRQUFRUyxJQUFJLENBQUM7Z0JBQUNhO2dCQUFTQzthQUFPO1FBQ2xDO0lBQ0o7SUFDQSxJQUFJQyxXQUFXO1FBQ1hDLE1BQU07WUFDRixPQUFPTDtRQUNYO0lBQ0o7SUFDQSxJQUFJM0IsMEVBQXlCQSxFQUFFO1FBQzNCK0IsUUFBUSxDQUFDRSxPQUFPQyxhQUFhLENBQUMsR0FBRztZQUM3QixPQUFPLElBQUk7UUFDZjtJQUNKO0lBQ0EsT0FBT0g7QUFDWCxFQUNBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL2h0dHAvaXRlcmF0b3JzL25vZGVTdHJlYW0uanM/MjcyNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE9yaWdpbmFsIHNvdXJjZTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9rbWFsYWtvZmYvcmVzcG9uc2UtaXRlcmF0b3IvYmxvYi9tYXN0ZXIvc3JjL2l0ZXJhdG9ycy9ub2RlU3RyZWFtLnRzXG4gKi9cbmltcG9ydCB7IGNhblVzZUFzeW5jSXRlcmF0b3JTeW1ib2wgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub2RlU3RyZWFtSXRlcmF0b3Ioc3RyZWFtKSB7XG4gICAgdmFyIGNsZWFudXAgPSBudWxsO1xuICAgIHZhciBlcnJvciA9IG51bGw7XG4gICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICB2YXIgZGF0YSA9IFtdO1xuICAgIHZhciB3YWl0aW5nID0gW107XG4gICAgZnVuY3Rpb24gb25EYXRhKGNodW5rKSB7XG4gICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHdhaXRpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgc2hpZnRlZEFyciA9IHdhaXRpbmcuc2hpZnQoKTtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNoaWZ0ZWRBcnIpICYmIHNoaWZ0ZWRBcnJbMF0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2hpZnRlZEFyclswXSh7IHZhbHVlOiBjaHVuaywgZG9uZTogZmFsc2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZGF0YS5wdXNoKGNodW5rKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25FcnJvcihlcnIpIHtcbiAgICAgICAgZXJyb3IgPSBlcnI7XG4gICAgICAgIHZhciBhbGwgPSB3YWl0aW5nLnNsaWNlKCk7XG4gICAgICAgIGFsbC5mb3JFYWNoKGZ1bmN0aW9uIChwYWlyKSB7XG4gICAgICAgICAgICBwYWlyWzFdKGVycik7XG4gICAgICAgIH0pO1xuICAgICAgICAhY2xlYW51cCB8fCBjbGVhbnVwKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uRW5kKCkge1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgdmFyIGFsbCA9IHdhaXRpbmcuc2xpY2UoKTtcbiAgICAgICAgYWxsLmZvckVhY2goZnVuY3Rpb24gKHBhaXIpIHtcbiAgICAgICAgICAgIHBhaXJbMF0oeyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgIWNsZWFudXAgfHwgY2xlYW51cCgpO1xuICAgIH1cbiAgICBjbGVhbnVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhbnVwID0gbnVsbDtcbiAgICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiZGF0YVwiLCBvbkRhdGEpO1xuICAgICAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLCBvbkVycm9yKTtcbiAgICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiZW5kXCIsIG9uRW5kKTtcbiAgICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiZmluaXNoXCIsIG9uRW5kKTtcbiAgICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIiwgb25FbmQpO1xuICAgIH07XG4gICAgc3RyZWFtLm9uKFwiZGF0YVwiLCBvbkRhdGEpO1xuICAgIHN0cmVhbS5vbihcImVycm9yXCIsIG9uRXJyb3IpO1xuICAgIHN0cmVhbS5vbihcImVuZFwiLCBvbkVuZCk7XG4gICAgc3RyZWFtLm9uKFwiZmluaXNoXCIsIG9uRW5kKTtcbiAgICBzdHJlYW0ub24oXCJjbG9zZVwiLCBvbkVuZCk7XG4gICAgZnVuY3Rpb24gZ2V0TmV4dCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIGlmIChkYXRhLmxlbmd0aClcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh7IHZhbHVlOiBkYXRhLnNoaWZ0KCksIGRvbmU6IGZhbHNlIH0pO1xuICAgICAgICAgICAgaWYgKGRvbmUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoeyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH0pO1xuICAgICAgICAgICAgd2FpdGluZy5wdXNoKFtyZXNvbHZlLCByZWplY3RdKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBpdGVyYXRvciA9IHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldE5leHQoKTtcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIGlmIChjYW5Vc2VBc3luY0l0ZXJhdG9yU3ltYm9sKSB7XG4gICAgICAgIGl0ZXJhdG9yW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gaXRlcmF0b3I7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlU3RyZWFtLmpzLm1hcCJdLCJuYW1lcyI6WyJjYW5Vc2VBc3luY0l0ZXJhdG9yU3ltYm9sIiwibm9kZVN0cmVhbUl0ZXJhdG9yIiwic3RyZWFtIiwiY2xlYW51cCIsImVycm9yIiwiZG9uZSIsImRhdGEiLCJ3YWl0aW5nIiwib25EYXRhIiwiY2h1bmsiLCJsZW5ndGgiLCJzaGlmdGVkQXJyIiwic2hpZnQiLCJBcnJheSIsImlzQXJyYXkiLCJ2YWx1ZSIsInB1c2giLCJvbkVycm9yIiwiZXJyIiwiYWxsIiwic2xpY2UiLCJmb3JFYWNoIiwicGFpciIsIm9uRW5kIiwidW5kZWZpbmVkIiwicmVtb3ZlTGlzdGVuZXIiLCJvbiIsImdldE5leHQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIml0ZXJhdG9yIiwibmV4dCIsIlN5bWJvbCIsImFzeW5jSXRlcmF0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/link/http/iterators/nodeStream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/link/http/iterators/promise.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/iterators/promise.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ promiseIterator)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/promise.ts\n */ \nfunction promiseIterator(promise) {\n    var resolved = false;\n    var iterator = {\n        next: function() {\n            if (resolved) return Promise.resolve({\n                value: undefined,\n                done: true\n            });\n            resolved = true;\n            return new Promise(function(resolve, reject) {\n                promise.then(function(value) {\n                    resolve({\n                        value: value,\n                        done: false\n                    });\n                }).catch(reject);\n            });\n        }\n    };\n    if (_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function() {\n            return this;\n        };\n    }\n    return iterator;\n} //# sourceMappingURL=promise.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9wcm9taXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7OztDQUdDLEdBQ3VFO0FBQ3pELFNBQVNDLGdCQUFnQkMsT0FBTztJQUMzQyxJQUFJQyxXQUFXO0lBQ2YsSUFBSUMsV0FBVztRQUNYQyxNQUFNO1lBQ0YsSUFBSUYsVUFDQSxPQUFPRyxRQUFRQyxPQUFPLENBQUM7Z0JBQ25CQyxPQUFPQztnQkFDUEMsTUFBTTtZQUNWO1lBQ0pQLFdBQVc7WUFDWCxPQUFPLElBQUlHLFFBQVEsU0FBVUMsT0FBTyxFQUFFSSxNQUFNO2dCQUN4Q1QsUUFDS1UsSUFBSSxDQUFDLFNBQVVKLEtBQUs7b0JBQ3JCRCxRQUFRO3dCQUFFQyxPQUFPQTt3QkFBT0UsTUFBTTtvQkFBTTtnQkFDeEMsR0FDS0csS0FBSyxDQUFDRjtZQUNmO1FBQ0o7SUFDSjtJQUNBLElBQUlYLDBFQUF5QkEsRUFBRTtRQUMzQkksUUFBUSxDQUFDVSxPQUFPQyxhQUFhLENBQUMsR0FBRztZQUM3QixPQUFPLElBQUk7UUFDZjtJQUNKO0lBQ0EsT0FBT1g7QUFDWCxFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL2h0dHAvaXRlcmF0b3JzL3Byb21pc2UuanM/MDk3OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE9yaWdpbmFsIHNvdXJjZTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9rbWFsYWtvZmYvcmVzcG9uc2UtaXRlcmF0b3IvYmxvYi9tYXN0ZXIvc3JjL2l0ZXJhdG9ycy9wcm9taXNlLnRzXG4gKi9cbmltcG9ydCB7IGNhblVzZUFzeW5jSXRlcmF0b3JTeW1ib2wgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcm9taXNlSXRlcmF0b3IocHJvbWlzZSkge1xuICAgIHZhciByZXNvbHZlZCA9IGZhbHNlO1xuICAgIHZhciBpdGVyYXRvciA9IHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHJlc29sdmVkKVxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBkb25lOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHsgdmFsdWU6IHZhbHVlLCBkb25lOiBmYWxzZSB9KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2gocmVqZWN0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgIH07XG4gICAgaWYgKGNhblVzZUFzeW5jSXRlcmF0b3JTeW1ib2wpIHtcbiAgICAgICAgaXRlcmF0b3JbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBpdGVyYXRvcjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb21pc2UuanMubWFwIl0sIm5hbWVzIjpbImNhblVzZUFzeW5jSXRlcmF0b3JTeW1ib2wiLCJwcm9taXNlSXRlcmF0b3IiLCJwcm9taXNlIiwicmVzb2x2ZWQiLCJpdGVyYXRvciIsIm5leHQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInZhbHVlIiwidW5kZWZpbmVkIiwiZG9uZSIsInJlamVjdCIsInRoZW4iLCJjYXRjaCIsIlN5bWJvbCIsImFzeW5jSXRlcmF0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/link/http/iterators/promise.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/link/http/iterators/reader.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/iterators/reader.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ readerIterator)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/reader.ts\n */ \nfunction readerIterator(reader) {\n    var iterator = {\n        next: function() {\n            return reader.read();\n        }\n    };\n    if (_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function() {\n            return this;\n        };\n    }\n    return iterator;\n} //# sourceMappingURL=reader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9yZWFkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7O0NBR0MsR0FDdUU7QUFDekQsU0FBU0MsZUFBZUMsTUFBTTtJQUN6QyxJQUFJQyxXQUFXO1FBQ1hDLE1BQU07WUFDRixPQUFPRixPQUFPRyxJQUFJO1FBQ3RCO0lBQ0o7SUFDQSxJQUFJTCwwRUFBeUJBLEVBQUU7UUFDM0JHLFFBQVEsQ0FBQ0csT0FBT0MsYUFBYSxDQUFDLEdBQUc7WUFDN0IsT0FBTyxJQUFJO1FBQ2Y7SUFDSjtJQUNBLE9BQU9KO0FBQ1gsRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL2l0ZXJhdG9ycy9yZWFkZXIuanM/OGUyNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE9yaWdpbmFsIHNvdXJjZTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9rbWFsYWtvZmYvcmVzcG9uc2UtaXRlcmF0b3IvYmxvYi9tYXN0ZXIvc3JjL2l0ZXJhdG9ycy9yZWFkZXIudHNcbiAqL1xuaW1wb3J0IHsgY2FuVXNlQXN5bmNJdGVyYXRvclN5bWJvbCB9IGZyb20gXCIuLi8uLi8uLi91dGlsaXRpZXMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlYWRlckl0ZXJhdG9yKHJlYWRlcikge1xuICAgIHZhciBpdGVyYXRvciA9IHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5yZWFkKCk7XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICBpZiAoY2FuVXNlQXN5bmNJdGVyYXRvclN5bWJvbCkge1xuICAgICAgICBpdGVyYXRvcltTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZXJhdG9yO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhZGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJjYW5Vc2VBc3luY0l0ZXJhdG9yU3ltYm9sIiwicmVhZGVySXRlcmF0b3IiLCJyZWFkZXIiLCJpdGVyYXRvciIsIm5leHQiLCJyZWFkIiwiU3ltYm9sIiwiYXN5bmNJdGVyYXRvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/link/http/iterators/reader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleError: () => (/* binding */ handleError),\n/* harmony export */   parseAndCheckHttpResponse: () => (/* binding */ parseAndCheckHttpResponse),\n/* harmony export */   parseHeaders: () => (/* binding */ parseHeaders),\n/* harmony export */   parseJsonBody: () => (/* binding */ parseJsonBody),\n/* harmony export */   readMultipartBody: () => (/* binding */ readMultipartBody)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _responseIterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./responseIterator.js */ \"(rsc)/./node_modules/@apollo/client/link/http/responseIterator.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/index.js */ \"(rsc)/./node_modules/@apollo/client/link/utils/throwServerError.js\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../errors/index.js */ \"(rsc)/./node_modules/@apollo/client/errors/index.js\");\n/* harmony import */ var _utilities_common_incrementalResult_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/common/incrementalResult.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/incrementalResult.js\");\n\n\n\n\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction readMultipartBody(response, nextValue) {\n    var _a;\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {\n        var decoder, contentType, delimiter, boundaryVal, boundary, buffer, iterator, running, _b, value, done, chunk, searchFrom, bi, message, i, headers, contentType_1, body, result, next;\n        var _c, _d;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_e) {\n            switch(_e.label){\n                case 0:\n                    if (TextDecoder === undefined) {\n                        throw new Error(\"TextDecoder must be defined in the environment: please import a polyfill.\");\n                    }\n                    decoder = new TextDecoder(\"utf-8\");\n                    contentType = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get(\"content-type\");\n                    delimiter = \"boundary=\";\n                    boundaryVal = (contentType === null || contentType === void 0 ? void 0 : contentType.includes(delimiter)) ? contentType === null || contentType === void 0 ? void 0 : contentType.substring((contentType === null || contentType === void 0 ? void 0 : contentType.indexOf(delimiter)) + delimiter.length).replace(/['\"]/g, \"\").replace(/\\;(.*)/gm, \"\").trim() : \"-\";\n                    boundary = \"\\r\\n--\".concat(boundaryVal);\n                    buffer = \"\";\n                    iterator = (0,_responseIterator_js__WEBPACK_IMPORTED_MODULE_1__.responseIterator)(response);\n                    running = true;\n                    _e.label = 1;\n                case 1:\n                    if (!running) return [\n                        3 /*break*/ ,\n                        3\n                    ];\n                    return [\n                        4 /*yield*/ ,\n                        iterator.next()\n                    ];\n                case 2:\n                    _b = _e.sent(), value = _b.value, done = _b.done;\n                    chunk = typeof value === \"string\" ? value : decoder.decode(value);\n                    searchFrom = buffer.length - boundary.length + 1;\n                    running = !done;\n                    buffer += chunk;\n                    bi = buffer.indexOf(boundary, searchFrom);\n                    while(bi > -1){\n                        message = void 0;\n                        _c = [\n                            buffer.slice(0, bi),\n                            buffer.slice(bi + boundary.length)\n                        ], message = _c[0], buffer = _c[1];\n                        i = message.indexOf(\"\\r\\n\\r\\n\");\n                        headers = parseHeaders(message.slice(0, i));\n                        contentType_1 = headers[\"content-type\"];\n                        if (contentType_1 && contentType_1.toLowerCase().indexOf(\"application/json\") === -1) {\n                            throw new Error(\"Unsupported patch content type: application/json is required.\");\n                        }\n                        body = message.slice(i);\n                        if (body) {\n                            result = parseJsonBody(response, body);\n                            if (Object.keys(result).length > 1 || \"data\" in result || \"incremental\" in result || \"errors\" in result || \"payload\" in result) {\n                                if ((0,_utilities_common_incrementalResult_js__WEBPACK_IMPORTED_MODULE_2__.isApolloPayloadResult)(result)) {\n                                    next = {};\n                                    if (\"payload\" in result) {\n                                        next = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, result.payload);\n                                    }\n                                    if (\"errors\" in result) {\n                                        next = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, next), {\n                                            extensions: (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, \"extensions\" in next ? next.extensions : null), (_d = {}, _d[_errors_index_js__WEBPACK_IMPORTED_MODULE_3__.PROTOCOL_ERRORS_SYMBOL] = result.errors, _d))\n                                        });\n                                    }\n                                    nextValue(next);\n                                } else {\n                                    // for the last chunk with only `hasNext: false`\n                                    // we don't need to call observer.next as there is no data/errors\n                                    nextValue(result);\n                                }\n                            } else if (// If the chunk contains only a \"hasNext: false\", we can call\n                            // observer.complete() immediately.\n                            Object.keys(result).length === 1 && \"hasNext\" in result && !result.hasNext) {\n                                return [\n                                    2 /*return*/ \n                                ];\n                            }\n                        }\n                        bi = buffer.indexOf(boundary);\n                    }\n                    return [\n                        3 /*break*/ ,\n                        1\n                    ];\n                case 3:\n                    return [\n                        2 /*return*/ \n                    ];\n            }\n        });\n    });\n}\nfunction parseHeaders(headerText) {\n    var headersInit = {};\n    headerText.split(\"\\n\").forEach(function(line) {\n        var i = line.indexOf(\":\");\n        if (i > -1) {\n            // normalize headers to lowercase\n            var name_1 = line.slice(0, i).trim().toLowerCase();\n            var value = line.slice(i + 1).trim();\n            headersInit[name_1] = value;\n        }\n    });\n    return headersInit;\n}\nfunction parseJsonBody(response, bodyText) {\n    if (response.status >= 300) {\n        // Network error\n        var getResult = function() {\n            try {\n                return JSON.parse(bodyText);\n            } catch (err) {\n                return bodyText;\n            }\n        };\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.throwServerError)(response, getResult(), \"Response not successful: Received status code \".concat(response.status));\n    }\n    try {\n        return JSON.parse(bodyText);\n    } catch (err) {\n        var parseError = err;\n        parseError.name = \"ServerParseError\";\n        parseError.response = response;\n        parseError.statusCode = response.status;\n        parseError.bodyText = bodyText;\n        throw parseError;\n    }\n}\nfunction handleError(err, observer) {\n    // if it is a network error, BUT there is graphql result info fire\n    // the next observer before calling error this gives apollo-client\n    // (and react-apollo) the `graphqlErrors` and `networkErrors` to\n    // pass to UI this should only happen if we *also* have data as\n    // part of the response key per the spec\n    if (err.result && err.result.errors && err.result.data) {\n        // if we don't call next, the UI can only show networkError\n        // because AC didn't get any graphqlErrors this is graphql\n        // execution result info (i.e errors and possibly data) this is\n        // because there is no formal spec how errors should translate to\n        // http status codes. So an auth error (401) could have both data\n        // from a public field, errors from a private field, and a status\n        // of 401\n        // {\n        //  user { // this will have errors\n        //    firstName\n        //  }\n        //  products { // this is public so will have data\n        //    cost\n        //  }\n        // }\n        //\n        // the result of above *could* look like this:\n        // {\n        //   data: { products: [{ cost: \"$10\" }] },\n        //   errors: [{\n        //      message: 'your session has timed out',\n        //      path: []\n        //   }]\n        // }\n        // status code of above would be a 401\n        // in the UI you want to show data where you can, errors as data where you can\n        // and use correct http status codes\n        observer.next(err.result);\n    }\n    observer.error(err);\n}\nfunction parseAndCheckHttpResponse(operations) {\n    return function(response) {\n        return response.text().then(function(bodyText) {\n            return parseJsonBody(response, bodyText);\n        }).then(function(result) {\n            if (!Array.isArray(result) && !hasOwnProperty.call(result, \"data\") && !hasOwnProperty.call(result, \"errors\")) {\n                // Data error\n                (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.throwServerError)(response, result, \"Server response was missing for query '\".concat(Array.isArray(operations) ? operations.map(function(op) {\n                    return op.operationName;\n                }) : operations.operationName, \"'.\"));\n            }\n            return result;\n        });\n    };\n} //# sourceMappingURL=parseAndCheckHttpResponse.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/link/http/responseIterator.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/responseIterator.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   responseIterator: () => (/* binding */ responseIterator)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _iterators_async_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iterators/async.js */ \"(rsc)/./node_modules/@apollo/client/link/http/iterators/async.js\");\n/* harmony import */ var _iterators_nodeStream_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./iterators/nodeStream.js */ \"(rsc)/./node_modules/@apollo/client/link/http/iterators/nodeStream.js\");\n/* harmony import */ var _iterators_promise_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./iterators/promise.js */ \"(rsc)/./node_modules/@apollo/client/link/http/iterators/promise.js\");\n/* harmony import */ var _iterators_reader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./iterators/reader.js */ \"(rsc)/./node_modules/@apollo/client/link/http/iterators/reader.js\");\n/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/index.ts\n */ \n\n\n\n\nfunction isNodeResponse(value) {\n    return !!value.body;\n}\nfunction isReadableStream(value) {\n    return !!value.getReader;\n}\nfunction isAsyncIterableIterator(value) {\n    return !!(_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.canUseAsyncIteratorSymbol && value[Symbol.asyncIterator]);\n}\nfunction isStreamableBlob(value) {\n    return !!value.stream;\n}\nfunction isBlob(value) {\n    return !!value.arrayBuffer;\n}\nfunction isNodeReadableStream(value) {\n    return !!value.pipe;\n}\nfunction responseIterator(response) {\n    var body = response;\n    if (isNodeResponse(response)) body = response.body;\n    if (isAsyncIterableIterator(body)) return (0,_iterators_async_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(body);\n    if (isReadableStream(body)) return (0,_iterators_reader_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(body.getReader());\n    // this errors without casting to ReadableStream<T>\n    // because Blob.stream() returns a NodeJS ReadableStream\n    if (isStreamableBlob(body)) {\n        return (0,_iterators_reader_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(body.stream().getReader());\n    }\n    if (isBlob(body)) return (0,_iterators_promise_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(body.arrayBuffer());\n    if (isNodeReadableStream(body)) return (0,_iterators_nodeStream_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(body);\n    throw new Error(\"Unknown body type for responseIterator. Please pass a streamable response.\");\n} //# sourceMappingURL=responseIterator.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3Jlc3BvbnNlSXRlcmF0b3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7OztDQUdDLEdBQ29FO0FBQ3BCO0FBQ1U7QUFDTjtBQUNGO0FBQ25ELFNBQVNLLGVBQWVDLEtBQUs7SUFDekIsT0FBTyxDQUFDLENBQUNBLE1BQU1DLElBQUk7QUFDdkI7QUFDQSxTQUFTQyxpQkFBaUJGLEtBQUs7SUFDM0IsT0FBTyxDQUFDLENBQUNBLE1BQU1HLFNBQVM7QUFDNUI7QUFDQSxTQUFTQyx3QkFBd0JKLEtBQUs7SUFDbEMsT0FBTyxDQUFDLENBQUVOLENBQUFBLDBFQUF5QkEsSUFDL0JNLEtBQUssQ0FBQ0ssT0FBT1YsYUFBYSxDQUFDO0FBQ25DO0FBQ0EsU0FBU1csaUJBQWlCTixLQUFLO0lBQzNCLE9BQU8sQ0FBQyxDQUFDQSxNQUFNTyxNQUFNO0FBQ3pCO0FBQ0EsU0FBU0MsT0FBT1IsS0FBSztJQUNqQixPQUFPLENBQUMsQ0FBQ0EsTUFBTVMsV0FBVztBQUM5QjtBQUNBLFNBQVNDLHFCQUFxQlYsS0FBSztJQUMvQixPQUFPLENBQUMsQ0FBQ0EsTUFBTVcsSUFBSTtBQUN2QjtBQUNPLFNBQVNDLGlCQUFpQkMsUUFBUTtJQUNyQyxJQUFJWixPQUFPWTtJQUNYLElBQUlkLGVBQWVjLFdBQ2ZaLE9BQU9ZLFNBQVNaLElBQUk7SUFDeEIsSUFBSUcsd0JBQXdCSCxPQUN4QixPQUFPTiwrREFBYUEsQ0FBQ007SUFDekIsSUFBSUMsaUJBQWlCRCxPQUNqQixPQUFPSCxnRUFBY0EsQ0FBQ0csS0FBS0UsU0FBUztJQUN4QyxtREFBbUQ7SUFDbkQsd0RBQXdEO0lBQ3hELElBQUlHLGlCQUFpQkwsT0FBTztRQUN4QixPQUFPSCxnRUFBY0EsQ0FBQ0csS0FBS00sTUFBTSxHQUFHSixTQUFTO0lBQ2pEO0lBQ0EsSUFBSUssT0FBT1AsT0FDUCxPQUFPSixpRUFBZUEsQ0FBQ0ksS0FBS1EsV0FBVztJQUMzQyxJQUFJQyxxQkFBcUJULE9BQ3JCLE9BQU9MLG9FQUFrQkEsQ0FBQ0s7SUFDOUIsTUFBTSxJQUFJYSxNQUFNO0FBQ3BCLEVBQ0EsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktZG9jcy1mcm9uLWVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L2xpbmsvaHR0cC9yZXNwb25zZUl0ZXJhdG9yLmpzPzdmMzQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBPcmlnaW5hbCBzb3VyY2U6XG4gKiBodHRwczovL2dpdGh1Yi5jb20va21hbGFrb2ZmL3Jlc3BvbnNlLWl0ZXJhdG9yL2Jsb2IvbWFzdGVyL3NyYy9pbmRleC50c1xuICovXG5pbXBvcnQgeyBjYW5Vc2VBc3luY0l0ZXJhdG9yU3ltYm9sIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xuaW1wb3J0IGFzeW5jSXRlcmF0b3IgZnJvbSBcIi4vaXRlcmF0b3JzL2FzeW5jLmpzXCI7XG5pbXBvcnQgbm9kZVN0cmVhbUl0ZXJhdG9yIGZyb20gXCIuL2l0ZXJhdG9ycy9ub2RlU3RyZWFtLmpzXCI7XG5pbXBvcnQgcHJvbWlzZUl0ZXJhdG9yIGZyb20gXCIuL2l0ZXJhdG9ycy9wcm9taXNlLmpzXCI7XG5pbXBvcnQgcmVhZGVySXRlcmF0b3IgZnJvbSBcIi4vaXRlcmF0b3JzL3JlYWRlci5qc1wiO1xuZnVuY3Rpb24gaXNOb2RlUmVzcG9uc2UodmFsdWUpIHtcbiAgICByZXR1cm4gISF2YWx1ZS5ib2R5O1xufVxuZnVuY3Rpb24gaXNSZWFkYWJsZVN0cmVhbSh2YWx1ZSkge1xuICAgIHJldHVybiAhIXZhbHVlLmdldFJlYWRlcjtcbn1cbmZ1bmN0aW9uIGlzQXN5bmNJdGVyYWJsZUl0ZXJhdG9yKHZhbHVlKSB7XG4gICAgcmV0dXJuICEhKGNhblVzZUFzeW5jSXRlcmF0b3JTeW1ib2wgJiZcbiAgICAgICAgdmFsdWVbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKTtcbn1cbmZ1bmN0aW9uIGlzU3RyZWFtYWJsZUJsb2IodmFsdWUpIHtcbiAgICByZXR1cm4gISF2YWx1ZS5zdHJlYW07XG59XG5mdW5jdGlvbiBpc0Jsb2IodmFsdWUpIHtcbiAgICByZXR1cm4gISF2YWx1ZS5hcnJheUJ1ZmZlcjtcbn1cbmZ1bmN0aW9uIGlzTm9kZVJlYWRhYmxlU3RyZWFtKHZhbHVlKSB7XG4gICAgcmV0dXJuICEhdmFsdWUucGlwZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZXNwb25zZUl0ZXJhdG9yKHJlc3BvbnNlKSB7XG4gICAgdmFyIGJvZHkgPSByZXNwb25zZTtcbiAgICBpZiAoaXNOb2RlUmVzcG9uc2UocmVzcG9uc2UpKVxuICAgICAgICBib2R5ID0gcmVzcG9uc2UuYm9keTtcbiAgICBpZiAoaXNBc3luY0l0ZXJhYmxlSXRlcmF0b3IoYm9keSkpXG4gICAgICAgIHJldHVybiBhc3luY0l0ZXJhdG9yKGJvZHkpO1xuICAgIGlmIChpc1JlYWRhYmxlU3RyZWFtKGJvZHkpKVxuICAgICAgICByZXR1cm4gcmVhZGVySXRlcmF0b3IoYm9keS5nZXRSZWFkZXIoKSk7XG4gICAgLy8gdGhpcyBlcnJvcnMgd2l0aG91dCBjYXN0aW5nIHRvIFJlYWRhYmxlU3RyZWFtPFQ+XG4gICAgLy8gYmVjYXVzZSBCbG9iLnN0cmVhbSgpIHJldHVybnMgYSBOb2RlSlMgUmVhZGFibGVTdHJlYW1cbiAgICBpZiAoaXNTdHJlYW1hYmxlQmxvYihib2R5KSkge1xuICAgICAgICByZXR1cm4gcmVhZGVySXRlcmF0b3IoYm9keS5zdHJlYW0oKS5nZXRSZWFkZXIoKSk7XG4gICAgfVxuICAgIGlmIChpc0Jsb2IoYm9keSkpXG4gICAgICAgIHJldHVybiBwcm9taXNlSXRlcmF0b3IoYm9keS5hcnJheUJ1ZmZlcigpKTtcbiAgICBpZiAoaXNOb2RlUmVhZGFibGVTdHJlYW0oYm9keSkpXG4gICAgICAgIHJldHVybiBub2RlU3RyZWFtSXRlcmF0b3IoYm9keSk7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBib2R5IHR5cGUgZm9yIHJlc3BvbnNlSXRlcmF0b3IuIFBsZWFzZSBwYXNzIGEgc3RyZWFtYWJsZSByZXNwb25zZS5cIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNwb25zZUl0ZXJhdG9yLmpzLm1hcCJdLCJuYW1lcyI6WyJjYW5Vc2VBc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsIm5vZGVTdHJlYW1JdGVyYXRvciIsInByb21pc2VJdGVyYXRvciIsInJlYWRlckl0ZXJhdG9yIiwiaXNOb2RlUmVzcG9uc2UiLCJ2YWx1ZSIsImJvZHkiLCJpc1JlYWRhYmxlU3RyZWFtIiwiZ2V0UmVhZGVyIiwiaXNBc3luY0l0ZXJhYmxlSXRlcmF0b3IiLCJTeW1ib2wiLCJpc1N0cmVhbWFibGVCbG9iIiwic3RyZWFtIiwiaXNCbG9iIiwiYXJyYXlCdWZmZXIiLCJpc05vZGVSZWFkYWJsZVN0cmVhbSIsInBpcGUiLCJyZXNwb25zZUl0ZXJhdG9yIiwicmVzcG9uc2UiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/link/http/responseIterator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/link/http/rewriteURIForGET.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/rewriteURIForGET.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rewriteURIForGET: () => (/* binding */ rewriteURIForGET)\n/* harmony export */ });\n/* harmony import */ var _serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./serializeFetchParameter.js */ \"(rsc)/./node_modules/@apollo/client/link/http/serializeFetchParameter.js\");\n\n// For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\nfunction rewriteURIForGET(chosenURI, body) {\n    // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n    // the extra level of JSON serialization!\n    var queryParams = [];\n    var addQueryParam = function(key, value) {\n        queryParams.push(\"\".concat(key, \"=\").concat(encodeURIComponent(value)));\n    };\n    if (\"query\" in body) {\n        addQueryParam(\"query\", body.query);\n    }\n    if (body.operationName) {\n        addQueryParam(\"operationName\", body.operationName);\n    }\n    if (body.variables) {\n        var serializedVariables = void 0;\n        try {\n            serializedVariables = (0,_serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_0__.serializeFetchParameter)(body.variables, \"Variables map\");\n        } catch (parseError) {\n            return {\n                parseError: parseError\n            };\n        }\n        addQueryParam(\"variables\", serializedVariables);\n    }\n    if (body.extensions) {\n        var serializedExtensions = void 0;\n        try {\n            serializedExtensions = (0,_serializeFetchParameter_js__WEBPACK_IMPORTED_MODULE_0__.serializeFetchParameter)(body.extensions, \"Extensions map\");\n        } catch (parseError) {\n            return {\n                parseError: parseError\n            };\n        }\n        addQueryParam(\"extensions\", serializedExtensions);\n    }\n    // Reconstruct the URI with added query params.\n    // XXX This assumes that the URI is well-formed and that it doesn't\n    //     already contain any of these query params. We could instead use the\n    //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n    //     don't support URLSearchParams. Note that some browsers (and\n    //     versions of whatwg-url) support URL but not URLSearchParams!\n    var fragment = \"\", preFragment = chosenURI;\n    var fragmentStart = chosenURI.indexOf(\"#\");\n    if (fragmentStart !== -1) {\n        fragment = chosenURI.substr(fragmentStart);\n        preFragment = chosenURI.substr(0, fragmentStart);\n    }\n    var queryParamsPrefix = preFragment.indexOf(\"?\") === -1 ? \"?\" : \"&\";\n    var newURI = preFragment + queryParamsPrefix + queryParams.join(\"&\") + fragment;\n    return {\n        newURI: newURI\n    };\n} //# sourceMappingURL=rewriteURIForGET.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3Jld3JpdGVVUklGb3JHRVQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBdUU7QUFDdkUsNEVBQTRFO0FBQzVFLGVBQWU7QUFDUixTQUFTQyxpQkFBaUJDLFNBQVMsRUFBRUMsSUFBSTtJQUM1Qyx5RUFBeUU7SUFDekUseUNBQXlDO0lBQ3pDLElBQUlDLGNBQWMsRUFBRTtJQUNwQixJQUFJQyxnQkFBZ0IsU0FBVUMsR0FBRyxFQUFFQyxLQUFLO1FBQ3BDSCxZQUFZSSxJQUFJLENBQUMsR0FBR0MsTUFBTSxDQUFDSCxLQUFLLEtBQUtHLE1BQU0sQ0FBQ0MsbUJBQW1CSDtJQUNuRTtJQUNBLElBQUksV0FBV0osTUFBTTtRQUNqQkUsY0FBYyxTQUFTRixLQUFLUSxLQUFLO0lBQ3JDO0lBQ0EsSUFBSVIsS0FBS1MsYUFBYSxFQUFFO1FBQ3BCUCxjQUFjLGlCQUFpQkYsS0FBS1MsYUFBYTtJQUNyRDtJQUNBLElBQUlULEtBQUtVLFNBQVMsRUFBRTtRQUNoQixJQUFJQyxzQkFBc0IsS0FBSztRQUMvQixJQUFJO1lBQ0FBLHNCQUFzQmQsb0ZBQXVCQSxDQUFDRyxLQUFLVSxTQUFTLEVBQUU7UUFDbEUsRUFDQSxPQUFPRSxZQUFZO1lBQ2YsT0FBTztnQkFBRUEsWUFBWUE7WUFBVztRQUNwQztRQUNBVixjQUFjLGFBQWFTO0lBQy9CO0lBQ0EsSUFBSVgsS0FBS2EsVUFBVSxFQUFFO1FBQ2pCLElBQUlDLHVCQUF1QixLQUFLO1FBQ2hDLElBQUk7WUFDQUEsdUJBQXVCakIsb0ZBQXVCQSxDQUFDRyxLQUFLYSxVQUFVLEVBQUU7UUFDcEUsRUFDQSxPQUFPRCxZQUFZO1lBQ2YsT0FBTztnQkFBRUEsWUFBWUE7WUFBVztRQUNwQztRQUNBVixjQUFjLGNBQWNZO0lBQ2hDO0lBQ0EsK0NBQStDO0lBQy9DLG1FQUFtRTtJQUNuRSwwRUFBMEU7SUFDMUUseUVBQXlFO0lBQ3pFLGtFQUFrRTtJQUNsRSxtRUFBbUU7SUFDbkUsSUFBSUMsV0FBVyxJQUFJQyxjQUFjakI7SUFDakMsSUFBSWtCLGdCQUFnQmxCLFVBQVVtQixPQUFPLENBQUM7SUFDdEMsSUFBSUQsa0JBQWtCLENBQUMsR0FBRztRQUN0QkYsV0FBV2hCLFVBQVVvQixNQUFNLENBQUNGO1FBQzVCRCxjQUFjakIsVUFBVW9CLE1BQU0sQ0FBQyxHQUFHRjtJQUN0QztJQUNBLElBQUlHLG9CQUFvQkosWUFBWUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLE1BQU07SUFDaEUsSUFBSUcsU0FBU0wsY0FBY0ksb0JBQW9CbkIsWUFBWXFCLElBQUksQ0FBQyxPQUFPUDtJQUN2RSxPQUFPO1FBQUVNLFFBQVFBO0lBQU87QUFDNUIsRUFDQSw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3Jld3JpdGVVUklGb3JHRVQuanM/NjU3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzZXJpYWxpemVGZXRjaFBhcmFtZXRlciB9IGZyb20gXCIuL3NlcmlhbGl6ZUZldGNoUGFyYW1ldGVyLmpzXCI7XG4vLyBGb3IgR0VUIG9wZXJhdGlvbnMsIHJldHVybnMgdGhlIGdpdmVuIFVSSSByZXdyaXR0ZW4gd2l0aCBwYXJhbWV0ZXJzLCBvciBhXG4vLyBwYXJzZSBlcnJvci5cbmV4cG9ydCBmdW5jdGlvbiByZXdyaXRlVVJJRm9yR0VUKGNob3NlblVSSSwgYm9keSkge1xuICAgIC8vIEltcGxlbWVudCB0aGUgc3RhbmRhcmQgSFRUUCBHRVQgc2VyaWFsaXphdGlvbiwgcGx1cyAnZXh0ZW5zaW9ucycuIE5vdGVcbiAgICAvLyB0aGUgZXh0cmEgbGV2ZWwgb2YgSlNPTiBzZXJpYWxpemF0aW9uIVxuICAgIHZhciBxdWVyeVBhcmFtcyA9IFtdO1xuICAgIHZhciBhZGRRdWVyeVBhcmFtID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgcXVlcnlQYXJhbXMucHVzaChcIlwiLmNvbmNhdChrZXksIFwiPVwiKS5jb25jYXQoZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSkpO1xuICAgIH07XG4gICAgaWYgKFwicXVlcnlcIiBpbiBib2R5KSB7XG4gICAgICAgIGFkZFF1ZXJ5UGFyYW0oXCJxdWVyeVwiLCBib2R5LnF1ZXJ5KTtcbiAgICB9XG4gICAgaWYgKGJvZHkub3BlcmF0aW9uTmFtZSkge1xuICAgICAgICBhZGRRdWVyeVBhcmFtKFwib3BlcmF0aW9uTmFtZVwiLCBib2R5Lm9wZXJhdGlvbk5hbWUpO1xuICAgIH1cbiAgICBpZiAoYm9keS52YXJpYWJsZXMpIHtcbiAgICAgICAgdmFyIHNlcmlhbGl6ZWRWYXJpYWJsZXMgPSB2b2lkIDA7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzZXJpYWxpemVkVmFyaWFibGVzID0gc2VyaWFsaXplRmV0Y2hQYXJhbWV0ZXIoYm9keS52YXJpYWJsZXMsIFwiVmFyaWFibGVzIG1hcFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAocGFyc2VFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHsgcGFyc2VFcnJvcjogcGFyc2VFcnJvciB9O1xuICAgICAgICB9XG4gICAgICAgIGFkZFF1ZXJ5UGFyYW0oXCJ2YXJpYWJsZXNcIiwgc2VyaWFsaXplZFZhcmlhYmxlcyk7XG4gICAgfVxuICAgIGlmIChib2R5LmV4dGVuc2lvbnMpIHtcbiAgICAgICAgdmFyIHNlcmlhbGl6ZWRFeHRlbnNpb25zID0gdm9pZCAwO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc2VyaWFsaXplZEV4dGVuc2lvbnMgPSBzZXJpYWxpemVGZXRjaFBhcmFtZXRlcihib2R5LmV4dGVuc2lvbnMsIFwiRXh0ZW5zaW9ucyBtYXBcIik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKHBhcnNlRXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHBhcnNlRXJyb3I6IHBhcnNlRXJyb3IgfTtcbiAgICAgICAgfVxuICAgICAgICBhZGRRdWVyeVBhcmFtKFwiZXh0ZW5zaW9uc1wiLCBzZXJpYWxpemVkRXh0ZW5zaW9ucyk7XG4gICAgfVxuICAgIC8vIFJlY29uc3RydWN0IHRoZSBVUkkgd2l0aCBhZGRlZCBxdWVyeSBwYXJhbXMuXG4gICAgLy8gWFhYIFRoaXMgYXNzdW1lcyB0aGF0IHRoZSBVUkkgaXMgd2VsbC1mb3JtZWQgYW5kIHRoYXQgaXQgZG9lc24ndFxuICAgIC8vICAgICBhbHJlYWR5IGNvbnRhaW4gYW55IG9mIHRoZXNlIHF1ZXJ5IHBhcmFtcy4gV2UgY291bGQgaW5zdGVhZCB1c2UgdGhlXG4gICAgLy8gICAgIFVSTCBBUEkgYW5kIHRha2UgYSBwb2x5ZmlsbCAod2hhdHdnLXVybEA2KSBmb3Igb2xkZXIgYnJvd3NlcnMgdGhhdFxuICAgIC8vICAgICBkb24ndCBzdXBwb3J0IFVSTFNlYXJjaFBhcmFtcy4gTm90ZSB0aGF0IHNvbWUgYnJvd3NlcnMgKGFuZFxuICAgIC8vICAgICB2ZXJzaW9ucyBvZiB3aGF0d2ctdXJsKSBzdXBwb3J0IFVSTCBidXQgbm90IFVSTFNlYXJjaFBhcmFtcyFcbiAgICB2YXIgZnJhZ21lbnQgPSBcIlwiLCBwcmVGcmFnbWVudCA9IGNob3NlblVSSTtcbiAgICB2YXIgZnJhZ21lbnRTdGFydCA9IGNob3NlblVSSS5pbmRleE9mKFwiI1wiKTtcbiAgICBpZiAoZnJhZ21lbnRTdGFydCAhPT0gLTEpIHtcbiAgICAgICAgZnJhZ21lbnQgPSBjaG9zZW5VUkkuc3Vic3RyKGZyYWdtZW50U3RhcnQpO1xuICAgICAgICBwcmVGcmFnbWVudCA9IGNob3NlblVSSS5zdWJzdHIoMCwgZnJhZ21lbnRTdGFydCk7XG4gICAgfVxuICAgIHZhciBxdWVyeVBhcmFtc1ByZWZpeCA9IHByZUZyYWdtZW50LmluZGV4T2YoXCI/XCIpID09PSAtMSA/IFwiP1wiIDogXCImXCI7XG4gICAgdmFyIG5ld1VSSSA9IHByZUZyYWdtZW50ICsgcXVlcnlQYXJhbXNQcmVmaXggKyBxdWVyeVBhcmFtcy5qb2luKFwiJlwiKSArIGZyYWdtZW50O1xuICAgIHJldHVybiB7IG5ld1VSSTogbmV3VVJJIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXdyaXRlVVJJRm9yR0VULmpzLm1hcCJdLCJuYW1lcyI6WyJzZXJpYWxpemVGZXRjaFBhcmFtZXRlciIsInJld3JpdGVVUklGb3JHRVQiLCJjaG9zZW5VUkkiLCJib2R5IiwicXVlcnlQYXJhbXMiLCJhZGRRdWVyeVBhcmFtIiwia2V5IiwidmFsdWUiLCJwdXNoIiwiY29uY2F0IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicXVlcnkiLCJvcGVyYXRpb25OYW1lIiwidmFyaWFibGVzIiwic2VyaWFsaXplZFZhcmlhYmxlcyIsInBhcnNlRXJyb3IiLCJleHRlbnNpb25zIiwic2VyaWFsaXplZEV4dGVuc2lvbnMiLCJmcmFnbWVudCIsInByZUZyYWdtZW50IiwiZnJhZ21lbnRTdGFydCIsImluZGV4T2YiLCJzdWJzdHIiLCJxdWVyeVBhcmFtc1ByZWZpeCIsIm5ld1VSSSIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/link/http/rewriteURIForGET.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultPrinter: () => (/* binding */ defaultPrinter),\n/* harmony export */   fallbackHttpConfig: () => (/* binding */ fallbackHttpConfig),\n/* harmony export */   selectHttpOptionsAndBody: () => (/* binding */ selectHttpOptionsAndBody),\n/* harmony export */   selectHttpOptionsAndBodyInternal: () => (/* binding */ selectHttpOptionsAndBodyInternal)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/print.js\");\n\n\nvar defaultHttpOptions = {\n    includeQuery: true,\n    includeExtensions: false,\n    preserveHeaderCase: false\n};\nvar defaultHeaders = {\n    // headers are case insensitive (https://stackoverflow.com/a/5259004)\n    accept: \"*/*\",\n    // The content-type header describes the type of the body of the request, and\n    // so it typically only is sent with requests that actually have bodies. One\n    // could imagine that Apollo Client would remove this header when constructing\n    // a GET request (which has no body), but we historically have not done that.\n    // This means that browsers will preflight all Apollo Client requests (even\n    // GET requests). Apollo Server's CSRF prevention feature (introduced in\n    // AS3.7) takes advantage of this fact and does not block requests with this\n    // header. If you want to drop this header from GET requests, then you should\n    // probably replace it with a `apollo-require-preflight` header, or servers\n    // with CSRF prevention enabled might block your GET request. See\n    // https://www.apollographql.com/docs/apollo-server/security/cors/#preventing-cross-site-request-forgery-csrf\n    // for more details.\n    \"content-type\": \"application/json\"\n};\nvar defaultOptions = {\n    method: \"POST\"\n};\nvar fallbackHttpConfig = {\n    http: defaultHttpOptions,\n    headers: defaultHeaders,\n    options: defaultOptions\n};\nvar defaultPrinter = function(ast, printer) {\n    return printer(ast);\n};\nfunction selectHttpOptionsAndBody(operation, fallbackConfig) {\n    var configs = [];\n    for(var _i = 2; _i < arguments.length; _i++){\n        configs[_i - 2] = arguments[_i];\n    }\n    configs.unshift(fallbackConfig);\n    return selectHttpOptionsAndBodyInternal.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([\n        operation,\n        defaultPrinter\n    ], configs, false));\n}\nfunction selectHttpOptionsAndBodyInternal(operation, printer) {\n    var configs = [];\n    for(var _i = 2; _i < arguments.length; _i++){\n        configs[_i - 2] = arguments[_i];\n    }\n    var options = {};\n    var http = {};\n    configs.forEach(function(config) {\n        options = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, options), config.options), {\n            headers: (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, options.headers), config.headers)\n        });\n        if (config.credentials) {\n            options.credentials = config.credentials;\n        }\n        http = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, http), config.http);\n    });\n    if (options.headers) {\n        options.headers = removeDuplicateHeaders(options.headers, http.preserveHeaderCase);\n    }\n    //The body depends on the http options\n    var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;\n    var body = {\n        operationName: operationName,\n        variables: variables\n    };\n    if (http.includeExtensions) body.extensions = extensions;\n    // not sending the query (i.e persisted queries)\n    if (http.includeQuery) body.query = printer(query, _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.print);\n    return {\n        options: options,\n        body: body\n    };\n}\n// Remove potential duplicate header names, preserving last (by insertion order).\n// This is done to prevent unintentionally duplicating a header instead of\n// overwriting it (See #8447 and #8449).\nfunction removeDuplicateHeaders(headers, preserveHeaderCase) {\n    // If we're not preserving the case, just remove duplicates w/ normalization.\n    if (!preserveHeaderCase) {\n        var normalizedHeaders_1 = Object.create(null);\n        Object.keys(Object(headers)).forEach(function(name) {\n            normalizedHeaders_1[name.toLowerCase()] = headers[name];\n        });\n        return normalizedHeaders_1;\n    }\n    // If we are preserving the case, remove duplicates w/ normalization,\n    // preserving the original name.\n    // This allows for non-http-spec-compliant servers that expect intentionally\n    // capitalized header names (See #6741).\n    var headerData = Object.create(null);\n    Object.keys(Object(headers)).forEach(function(name) {\n        headerData[name.toLowerCase()] = {\n            originalName: name,\n            value: headers[name]\n        };\n    });\n    var normalizedHeaders = Object.create(null);\n    Object.keys(headerData).forEach(function(name) {\n        normalizedHeaders[headerData[name].originalName] = headerData[name].value;\n    });\n    return normalizedHeaders;\n} //# sourceMappingURL=selectHttpOptionsAndBody.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/link/http/selectURI.js":
/*!************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/selectURI.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   selectURI: () => (/* binding */ selectURI)\n/* harmony export */ });\nvar selectURI = function(operation, fallbackURI) {\n    var context = operation.getContext();\n    var contextURI = context.uri;\n    if (contextURI) {\n        return contextURI;\n    } else if (typeof fallbackURI === \"function\") {\n        return fallbackURI(operation);\n    } else {\n        return fallbackURI || \"/graphql\";\n    }\n}; //# sourceMappingURL=selectURI.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3NlbGVjdFVSSS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sSUFBSUEsWUFBWSxTQUFVQyxTQUFTLEVBQUVDLFdBQVc7SUFDbkQsSUFBSUMsVUFBVUYsVUFBVUcsVUFBVTtJQUNsQyxJQUFJQyxhQUFhRixRQUFRRyxHQUFHO0lBQzVCLElBQUlELFlBQVk7UUFDWixPQUFPQTtJQUNYLE9BQ0ssSUFBSSxPQUFPSCxnQkFBZ0IsWUFBWTtRQUN4QyxPQUFPQSxZQUFZRDtJQUN2QixPQUNLO1FBQ0QsT0FBT0MsZUFBZTtJQUMxQjtBQUNKLEVBQUUsQ0FDRixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3NlbGVjdFVSSS5qcz9mMGZhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgc2VsZWN0VVJJID0gZnVuY3Rpb24gKG9wZXJhdGlvbiwgZmFsbGJhY2tVUkkpIHtcbiAgICB2YXIgY29udGV4dCA9IG9wZXJhdGlvbi5nZXRDb250ZXh0KCk7XG4gICAgdmFyIGNvbnRleHRVUkkgPSBjb250ZXh0LnVyaTtcbiAgICBpZiAoY29udGV4dFVSSSkge1xuICAgICAgICByZXR1cm4gY29udGV4dFVSSTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGZhbGxiYWNrVVJJID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrVVJJKG9wZXJhdGlvbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsbGJhY2tVUkkgfHwgXCIvZ3JhcGhxbFwiO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZWxlY3RVUkkuanMubWFwIl0sIm5hbWVzIjpbInNlbGVjdFVSSSIsIm9wZXJhdGlvbiIsImZhbGxiYWNrVVJJIiwiY29udGV4dCIsImdldENvbnRleHQiLCJjb250ZXh0VVJJIiwidXJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/link/http/selectURI.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/link/http/serializeFetchParameter.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@apollo/client/link/http/serializeFetchParameter.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   serializeFetchParameter: () => (/* binding */ serializeFetchParameter)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\nvar serializeFetchParameter = function(p, label) {\n    var serialized;\n    try {\n        serialized = JSON.stringify(p);\n    } catch (e) {\n        var parseError = (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(39, label, e.message);\n        parseError.parseError = e;\n        throw parseError;\n    }\n    return serialized;\n}; //# sourceMappingURL=serializeFetchParameter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay9odHRwL3NlcmlhbGl6ZUZldGNoUGFyYW1ldGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFFO0FBQzlELElBQUlDLDBCQUEwQixTQUFVQyxDQUFDLEVBQUVDLEtBQUs7SUFDbkQsSUFBSUM7SUFDSixJQUFJO1FBQ0FBLGFBQWFDLEtBQUtDLFNBQVMsQ0FBQ0o7SUFDaEMsRUFDQSxPQUFPSyxHQUFHO1FBQ04sSUFBSUMsYUFBYVIsOEVBQWlCQSxDQUFDLElBQUlHLE9BQU9JLEVBQUVFLE9BQU87UUFDdkRELFdBQVdBLFVBQVUsR0FBR0Q7UUFDeEIsTUFBTUM7SUFDVjtJQUNBLE9BQU9KO0FBQ1gsRUFBRSxDQUNGLG1EQUFtRCIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL2h0dHAvc2VyaWFsaXplRmV0Y2hQYXJhbWV0ZXIuanM/YmQ2NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuZXdJbnZhcmlhbnRFcnJvciB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvZ2xvYmFscy9pbmRleC5qc1wiO1xuZXhwb3J0IHZhciBzZXJpYWxpemVGZXRjaFBhcmFtZXRlciA9IGZ1bmN0aW9uIChwLCBsYWJlbCkge1xuICAgIHZhciBzZXJpYWxpemVkO1xuICAgIHRyeSB7XG4gICAgICAgIHNlcmlhbGl6ZWQgPSBKU09OLnN0cmluZ2lmeShwKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgdmFyIHBhcnNlRXJyb3IgPSBuZXdJbnZhcmlhbnRFcnJvcigzOSwgbGFiZWwsIGUubWVzc2FnZSk7XG4gICAgICAgIHBhcnNlRXJyb3IucGFyc2VFcnJvciA9IGU7XG4gICAgICAgIHRocm93IHBhcnNlRXJyb3I7XG4gICAgfVxuICAgIHJldHVybiBzZXJpYWxpemVkO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlcmlhbGl6ZUZldGNoUGFyYW1ldGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJuZXdJbnZhcmlhbnRFcnJvciIsInNlcmlhbGl6ZUZldGNoUGFyYW1ldGVyIiwicCIsImxhYmVsIiwic2VyaWFsaXplZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJlIiwicGFyc2VFcnJvciIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/link/http/serializeFetchParameter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/link/utils/createOperation.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/createOperation.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createOperation: () => (/* binding */ createOperation)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n\nfunction createOperation(starting, operation) {\n    var context = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, starting);\n    var setContext = function(next) {\n        if (typeof next === \"function\") {\n            context = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, context), next(context));\n        } else {\n            context = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, context), next);\n        }\n    };\n    var getContext = function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, context);\n    };\n    Object.defineProperty(operation, \"setContext\", {\n        enumerable: false,\n        value: setContext\n    });\n    Object.defineProperty(operation, \"getContext\", {\n        enumerable: false,\n        value: getContext\n    });\n    return operation;\n} //# sourceMappingURL=createOperation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy9jcmVhdGVPcGVyYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBaUM7QUFDMUIsU0FBU0MsZ0JBQWdCQyxRQUFRLEVBQUVDLFNBQVM7SUFDL0MsSUFBSUMsVUFBVUosK0NBQVFBLENBQUMsQ0FBQyxHQUFHRTtJQUMzQixJQUFJRyxhQUFhLFNBQVVDLElBQUk7UUFDM0IsSUFBSSxPQUFPQSxTQUFTLFlBQVk7WUFDNUJGLFVBQVVKLCtDQUFRQSxDQUFDQSwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUdJLFVBQVVFLEtBQUtGO1FBQ25ELE9BQ0s7WUFDREEsVUFBVUosK0NBQVFBLENBQUNBLCtDQUFRQSxDQUFDLENBQUMsR0FBR0ksVUFBVUU7UUFDOUM7SUFDSjtJQUNBLElBQUlDLGFBQWE7UUFBYyxPQUFRUCwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUdJO0lBQVc7SUFDL0RJLE9BQU9DLGNBQWMsQ0FBQ04sV0FBVyxjQUFjO1FBQzNDTyxZQUFZO1FBQ1pDLE9BQU9OO0lBQ1g7SUFDQUcsT0FBT0MsY0FBYyxDQUFDTixXQUFXLGNBQWM7UUFDM0NPLFlBQVk7UUFDWkMsT0FBT0o7SUFDWDtJQUNBLE9BQU9KO0FBQ1gsRUFDQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy9jcmVhdGVPcGVyYXRpb24uanM/NTMxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU9wZXJhdGlvbihzdGFydGluZywgb3BlcmF0aW9uKSB7XG4gICAgdmFyIGNvbnRleHQgPSBfX2Fzc2lnbih7fSwgc3RhcnRpbmcpO1xuICAgIHZhciBzZXRDb250ZXh0ID0gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBuZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnRleHQgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY29udGV4dCksIG5leHQoY29udGV4dCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29udGV4dCA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBjb250ZXh0KSwgbmV4dCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBnZXRDb250ZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKF9fYXNzaWduKHt9LCBjb250ZXh0KSk7IH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wZXJhdGlvbiwgXCJzZXRDb250ZXh0XCIsIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBzZXRDb250ZXh0LFxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcGVyYXRpb24sIFwiZ2V0Q29udGV4dFwiLCB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogZ2V0Q29udGV4dCxcbiAgICB9KTtcbiAgICByZXR1cm4gb3BlcmF0aW9uO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlT3BlcmF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsImNyZWF0ZU9wZXJhdGlvbiIsInN0YXJ0aW5nIiwib3BlcmF0aW9uIiwiY29udGV4dCIsInNldENvbnRleHQiLCJuZXh0IiwiZ2V0Q29udGV4dCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/link/utils/createOperation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/link/utils/filterOperationVariables.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/filterOperationVariables.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filterOperationVariables: () => (/* binding */ filterOperationVariables)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/visitor.mjs\");\n\n\nfunction filterOperationVariables(variables, query) {\n    var result = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, variables);\n    var unusedNames = new Set(Object.keys(variables));\n    (0,graphql__WEBPACK_IMPORTED_MODULE_1__.visit)(query, {\n        Variable: function(node, _key, parent) {\n            // A variable type definition at the top level of a query is not\n            // enough to silence server-side errors about the variable being\n            // unused, so variable definitions do not count as usage.\n            // https://spec.graphql.org/draft/#sec-All-Variables-Used\n            if (parent && parent.kind !== \"VariableDefinition\") {\n                unusedNames.delete(node.name.value);\n            }\n        }\n    });\n    unusedNames.forEach(function(name) {\n        delete result[name];\n    });\n    return result;\n} //# sourceMappingURL=filterOperationVariables.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy9maWx0ZXJPcGVyYXRpb25WYXJpYWJsZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ0Q7QUFDekIsU0FBU0UseUJBQXlCQyxTQUFTLEVBQUVDLEtBQUs7SUFDckQsSUFBSUMsU0FBU0wsK0NBQVFBLENBQUMsQ0FBQyxHQUFHRztJQUMxQixJQUFJRyxjQUFjLElBQUlDLElBQUlDLE9BQU9DLElBQUksQ0FBQ047SUFDdENGLDhDQUFLQSxDQUFDRyxPQUFPO1FBQ1RNLFVBQVUsU0FBVUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLE1BQU07WUFDbEMsZ0VBQWdFO1lBQ2hFLGdFQUFnRTtZQUNoRSx5REFBeUQ7WUFDekQseURBQXlEO1lBQ3pELElBQUlBLFVBQ0FBLE9BQU9DLElBQUksS0FBSyxzQkFBc0I7Z0JBQ3RDUixZQUFZUyxNQUFNLENBQUNKLEtBQUtLLElBQUksQ0FBQ0MsS0FBSztZQUN0QztRQUNKO0lBQ0o7SUFDQVgsWUFBWVksT0FBTyxDQUFDLFNBQVVGLElBQUk7UUFDOUIsT0FBT1gsTUFBTSxDQUFDVyxLQUFLO0lBQ3ZCO0lBQ0EsT0FBT1g7QUFDWCxFQUNBLG9EQUFvRCIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL3V0aWxzL2ZpbHRlck9wZXJhdGlvblZhcmlhYmxlcy5qcz84YWNlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyB2aXNpdCB9IGZyb20gXCJncmFwaHFsXCI7XG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyT3BlcmF0aW9uVmFyaWFibGVzKHZhcmlhYmxlcywgcXVlcnkpIHtcbiAgICB2YXIgcmVzdWx0ID0gX19hc3NpZ24oe30sIHZhcmlhYmxlcyk7XG4gICAgdmFyIHVudXNlZE5hbWVzID0gbmV3IFNldChPYmplY3Qua2V5cyh2YXJpYWJsZXMpKTtcbiAgICB2aXNpdChxdWVyeSwge1xuICAgICAgICBWYXJpYWJsZTogZnVuY3Rpb24gKG5vZGUsIF9rZXksIHBhcmVudCkge1xuICAgICAgICAgICAgLy8gQSB2YXJpYWJsZSB0eXBlIGRlZmluaXRpb24gYXQgdGhlIHRvcCBsZXZlbCBvZiBhIHF1ZXJ5IGlzIG5vdFxuICAgICAgICAgICAgLy8gZW5vdWdoIHRvIHNpbGVuY2Ugc2VydmVyLXNpZGUgZXJyb3JzIGFib3V0IHRoZSB2YXJpYWJsZSBiZWluZ1xuICAgICAgICAgICAgLy8gdW51c2VkLCBzbyB2YXJpYWJsZSBkZWZpbml0aW9ucyBkbyBub3QgY291bnQgYXMgdXNhZ2UuXG4gICAgICAgICAgICAvLyBodHRwczovL3NwZWMuZ3JhcGhxbC5vcmcvZHJhZnQvI3NlYy1BbGwtVmFyaWFibGVzLVVzZWRcbiAgICAgICAgICAgIGlmIChwYXJlbnQgJiZcbiAgICAgICAgICAgICAgICBwYXJlbnQua2luZCAhPT0gXCJWYXJpYWJsZURlZmluaXRpb25cIikge1xuICAgICAgICAgICAgICAgIHVudXNlZE5hbWVzLmRlbGV0ZShub2RlLm5hbWUudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIHVudXNlZE5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgZGVsZXRlIHJlc3VsdFtuYW1lXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsdGVyT3BlcmF0aW9uVmFyaWFibGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsInZpc2l0IiwiZmlsdGVyT3BlcmF0aW9uVmFyaWFibGVzIiwidmFyaWFibGVzIiwicXVlcnkiLCJyZXN1bHQiLCJ1bnVzZWROYW1lcyIsIlNldCIsIk9iamVjdCIsImtleXMiLCJWYXJpYWJsZSIsIm5vZGUiLCJfa2V5IiwicGFyZW50Iiwia2luZCIsImRlbGV0ZSIsIm5hbWUiLCJ2YWx1ZSIsImZvckVhY2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/link/utils/filterOperationVariables.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/link/utils/fromError.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/fromError.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromError: () => (/* binding */ fromError)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/zen-observable-ts/module.js\");\n\nfunction fromError(errorValue) {\n    return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.Observable(function(observer) {\n        observer.error(errorValue);\n    });\n} //# sourceMappingURL=fromError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy9mcm9tRXJyb3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBc0Q7QUFDL0MsU0FBU0MsVUFBVUMsVUFBVTtJQUNoQyxPQUFPLElBQUlGLDJEQUFVQSxDQUFDLFNBQVVHLFFBQVE7UUFDcENBLFNBQVNDLEtBQUssQ0FBQ0Y7SUFDbkI7QUFDSixFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL3V0aWxzL2Zyb21FcnJvci5qcz84ZTI3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL2luZGV4LmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gZnJvbUVycm9yKGVycm9yVmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIG9ic2VydmVyLmVycm9yKGVycm9yVmFsdWUpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbUVycm9yLmpzLm1hcCJdLCJuYW1lcyI6WyJPYnNlcnZhYmxlIiwiZnJvbUVycm9yIiwiZXJyb3JWYWx1ZSIsIm9ic2VydmVyIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/link/utils/fromError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/link/utils/throwServerError.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/throwServerError.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   throwServerError: () => (/* binding */ throwServerError)\n/* harmony export */ });\nvar throwServerError = function(response, result, message) {\n    var error = new Error(message);\n    error.name = \"ServerError\";\n    error.response = response;\n    error.statusCode = response.status;\n    error.result = result;\n    throw error;\n}; //# sourceMappingURL=throwServerError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy90aHJvd1NlcnZlckVycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxJQUFJQSxtQkFBbUIsU0FBVUMsUUFBUSxFQUFFQyxNQUFNLEVBQUVDLE9BQU87SUFDN0QsSUFBSUMsUUFBUSxJQUFJQyxNQUFNRjtJQUN0QkMsTUFBTUUsSUFBSSxHQUFHO0lBQ2JGLE1BQU1ILFFBQVEsR0FBR0E7SUFDakJHLE1BQU1HLFVBQVUsR0FBR04sU0FBU08sTUFBTTtJQUNsQ0osTUFBTUYsTUFBTSxHQUFHQTtJQUNmLE1BQU1FO0FBQ1YsRUFBRSxDQUNGLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC9saW5rL3V0aWxzL3Rocm93U2VydmVyRXJyb3IuanM/NDllZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIHRocm93U2VydmVyRXJyb3IgPSBmdW5jdGlvbiAocmVzcG9uc2UsIHJlc3VsdCwgbWVzc2FnZSkge1xuICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICBlcnJvci5uYW1lID0gXCJTZXJ2ZXJFcnJvclwiO1xuICAgIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgZXJyb3Iuc3RhdHVzQ29kZSA9IHJlc3BvbnNlLnN0YXR1cztcbiAgICBlcnJvci5yZXN1bHQgPSByZXN1bHQ7XG4gICAgdGhyb3cgZXJyb3I7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3dTZXJ2ZXJFcnJvci5qcy5tYXAiXSwibmFtZXMiOlsidGhyb3dTZXJ2ZXJFcnJvciIsInJlc3BvbnNlIiwicmVzdWx0IiwibWVzc2FnZSIsImVycm9yIiwiRXJyb3IiLCJuYW1lIiwic3RhdHVzQ29kZSIsInN0YXR1cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/link/utils/throwServerError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/link/utils/transformOperation.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/transformOperation.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   transformOperation: () => (/* binding */ transformOperation)\n/* harmony export */ });\n/* harmony import */ var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n\nfunction transformOperation(operation) {\n    var transformedOperation = {\n        variables: operation.variables || {},\n        extensions: operation.extensions || {},\n        operationName: operation.operationName,\n        query: operation.query\n    };\n    // Best guess at an operation name\n    if (!transformedOperation.operationName) {\n        transformedOperation.operationName = typeof transformedOperation.query !== \"string\" ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.getOperationName)(transformedOperation.query) || undefined : \"\";\n    }\n    return transformedOperation;\n} //# sourceMappingURL=transformOperation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy90cmFuc2Zvcm1PcGVyYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNEQ7QUFDckQsU0FBU0MsbUJBQW1CQyxTQUFTO0lBQ3hDLElBQUlDLHVCQUF1QjtRQUN2QkMsV0FBV0YsVUFBVUUsU0FBUyxJQUFJLENBQUM7UUFDbkNDLFlBQVlILFVBQVVHLFVBQVUsSUFBSSxDQUFDO1FBQ3JDQyxlQUFlSixVQUFVSSxhQUFhO1FBQ3RDQyxPQUFPTCxVQUFVSyxLQUFLO0lBQzFCO0lBQ0Esa0NBQWtDO0lBQ2xDLElBQUksQ0FBQ0oscUJBQXFCRyxhQUFhLEVBQUU7UUFDckNILHFCQUFxQkcsYUFBYSxHQUM5QixPQUFPSCxxQkFBcUJJLEtBQUssS0FBSyxXQUNsQ1AscUVBQWdCQSxDQUFDRyxxQkFBcUJJLEtBQUssS0FBS0MsWUFDOUM7SUFDZDtJQUNBLE9BQU9MO0FBQ1gsRUFDQSw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy90cmFuc2Zvcm1PcGVyYXRpb24uanM/ZWExMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRPcGVyYXRpb25OYW1lIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9pbmRleC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU9wZXJhdGlvbihvcGVyYXRpb24pIHtcbiAgICB2YXIgdHJhbnNmb3JtZWRPcGVyYXRpb24gPSB7XG4gICAgICAgIHZhcmlhYmxlczogb3BlcmF0aW9uLnZhcmlhYmxlcyB8fCB7fSxcbiAgICAgICAgZXh0ZW5zaW9uczogb3BlcmF0aW9uLmV4dGVuc2lvbnMgfHwge30sXG4gICAgICAgIG9wZXJhdGlvbk5hbWU6IG9wZXJhdGlvbi5vcGVyYXRpb25OYW1lLFxuICAgICAgICBxdWVyeTogb3BlcmF0aW9uLnF1ZXJ5LFxuICAgIH07XG4gICAgLy8gQmVzdCBndWVzcyBhdCBhbiBvcGVyYXRpb24gbmFtZVxuICAgIGlmICghdHJhbnNmb3JtZWRPcGVyYXRpb24ub3BlcmF0aW9uTmFtZSkge1xuICAgICAgICB0cmFuc2Zvcm1lZE9wZXJhdGlvbi5vcGVyYXRpb25OYW1lID1cbiAgICAgICAgICAgIHR5cGVvZiB0cmFuc2Zvcm1lZE9wZXJhdGlvbi5xdWVyeSAhPT0gXCJzdHJpbmdcIiA/XG4gICAgICAgICAgICAgICAgZ2V0T3BlcmF0aW9uTmFtZSh0cmFuc2Zvcm1lZE9wZXJhdGlvbi5xdWVyeSkgfHwgdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgOiBcIlwiO1xuICAgIH1cbiAgICByZXR1cm4gdHJhbnNmb3JtZWRPcGVyYXRpb247XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc2Zvcm1PcGVyYXRpb24uanMubWFwIl0sIm5hbWVzIjpbImdldE9wZXJhdGlvbk5hbWUiLCJ0cmFuc2Zvcm1PcGVyYXRpb24iLCJvcGVyYXRpb24iLCJ0cmFuc2Zvcm1lZE9wZXJhdGlvbiIsInZhcmlhYmxlcyIsImV4dGVuc2lvbnMiLCJvcGVyYXRpb25OYW1lIiwicXVlcnkiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/link/utils/transformOperation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/link/utils/validateOperation.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/link/utils/validateOperation.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateOperation: () => (/* binding */ validateOperation)\n/* harmony export */ });\n/* harmony import */ var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/globals/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\nfunction validateOperation(operation) {\n    var OPERATION_FIELDS = [\n        \"query\",\n        \"operationName\",\n        \"variables\",\n        \"extensions\",\n        \"context\"\n    ];\n    for(var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++){\n        var key = _a[_i];\n        if (OPERATION_FIELDS.indexOf(key) < 0) {\n            throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(43, key);\n        }\n    }\n    return operation;\n} //# sourceMappingURL=validateOperation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy92YWxpZGF0ZU9wZXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxRTtBQUM5RCxTQUFTQyxrQkFBa0JDLFNBQVM7SUFDdkMsSUFBSUMsbUJBQW1CO1FBQ25CO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDSDtJQUNELElBQUssSUFBSUMsS0FBSyxHQUFHQyxLQUFLQyxPQUFPQyxJQUFJLENBQUNMLFlBQVlFLEtBQUtDLEdBQUdHLE1BQU0sRUFBRUosS0FBTTtRQUNoRSxJQUFJSyxNQUFNSixFQUFFLENBQUNELEdBQUc7UUFDaEIsSUFBSUQsaUJBQWlCTyxPQUFPLENBQUNELE9BQU8sR0FBRztZQUNuQyxNQUFNVCw4RUFBaUJBLENBQUMsSUFBSVM7UUFDaEM7SUFDSjtJQUNBLE9BQU9QO0FBQ1gsRUFDQSw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvbGluay91dGlscy92YWxpZGF0ZU9wZXJhdGlvbi5qcz8wZjA4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG5ld0ludmFyaWFudEVycm9yIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9nbG9iYWxzL2luZGV4LmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVPcGVyYXRpb24ob3BlcmF0aW9uKSB7XG4gICAgdmFyIE9QRVJBVElPTl9GSUVMRFMgPSBbXG4gICAgICAgIFwicXVlcnlcIixcbiAgICAgICAgXCJvcGVyYXRpb25OYW1lXCIsXG4gICAgICAgIFwidmFyaWFibGVzXCIsXG4gICAgICAgIFwiZXh0ZW5zaW9uc1wiLFxuICAgICAgICBcImNvbnRleHRcIixcbiAgICBdO1xuICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3Qua2V5cyhvcGVyYXRpb24pOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIga2V5ID0gX2FbX2ldO1xuICAgICAgICBpZiAoT1BFUkFUSU9OX0ZJRUxEUy5pbmRleE9mKGtleSkgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXdJbnZhcmlhbnRFcnJvcig0Mywga2V5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3BlcmF0aW9uO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsaWRhdGVPcGVyYXRpb24uanMubWFwIl0sIm5hbWVzIjpbIm5ld0ludmFyaWFudEVycm9yIiwidmFsaWRhdGVPcGVyYXRpb24iLCJvcGVyYXRpb24iLCJPUEVSQVRJT05fRklFTERTIiwiX2kiLCJfYSIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJrZXkiLCJpbmRleE9mIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/link/utils/validateOperation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/caching/caches.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/caching/caches.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AutoCleanedStrongCache: () => (/* binding */ AutoCleanedStrongCache),\n/* harmony export */   AutoCleanedWeakCache: () => (/* binding */ AutoCleanedWeakCache)\n/* harmony export */ });\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/caches */ \"(rsc)/./node_modules/@wry/caches/lib/weak.js\");\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wry/caches */ \"(rsc)/./node_modules/@wry/caches/lib/strong.js\");\n\nvar scheduledCleanup = new WeakSet();\nfunction schedule(cache) {\n    if (!scheduledCleanup.has(cache)) {\n        scheduledCleanup.add(cache);\n        setTimeout(function() {\n            cache.clean();\n            scheduledCleanup.delete(cache);\n        }, 100);\n    }\n}\n/**\n * @internal\n * A version of WeakCache that will auto-schedule a cleanup of the cache when\n * a new item is added.\n * Throttled to once per 100ms.\n *\n * @privateRemarks\n * Should be used throughout the rest of the codebase instead of WeakCache,\n * with the notable exception of usage in `wrap` from `optimism` - that one\n * already handles cleanup and should remain a `WeakCache`.\n */ var AutoCleanedWeakCache = function(max, dispose) {\n    /*\n    Some builds of `WeakCache` are function prototypes, some are classes.\n    This library still builds with an ES5 target, so we can't extend the\n    real classes.\n    Instead, we have to use this workaround until we switch to a newer build\n    target.\n    */ var cache = new _wry_caches__WEBPACK_IMPORTED_MODULE_0__.WeakCache(max, dispose);\n    cache.set = function(key, value) {\n        schedule(this);\n        return _wry_caches__WEBPACK_IMPORTED_MODULE_0__.WeakCache.prototype.set.call(this, key, value);\n    };\n    return cache;\n};\n/**\n * @internal\n * A version of StrongCache that will auto-schedule a cleanup of the cache when\n * a new item is added.\n * Throttled to once per 100ms.\n *\n * @privateRemarks\n * Should be used throughout the rest of the codebase instead of StrongCache,\n * with the notable exception of usage in `wrap` from `optimism` - that one\n * already handles cleanup and should remain a `StrongCache`.\n */ var AutoCleanedStrongCache = function(max, dispose) {\n    /*\n    Some builds of `StrongCache` are function prototypes, some are classes.\n    This library still builds with an ES5 target, so we can't extend the\n    real classes.\n    Instead, we have to use this workaround until we switch to a newer build\n    target.\n    */ var cache = new _wry_caches__WEBPACK_IMPORTED_MODULE_1__.StrongCache(max, dispose);\n    cache.set = function(key, value) {\n        schedule(this);\n        return _wry_caches__WEBPACK_IMPORTED_MODULE_1__.StrongCache.prototype.set.call(this, key, value);\n    };\n    return cache;\n}; //# sourceMappingURL=caches.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NhY2hpbmcvY2FjaGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBcUQ7QUFDckQsSUFBSUUsbUJBQW1CLElBQUlDO0FBQzNCLFNBQVNDLFNBQVNDLEtBQUs7SUFDbkIsSUFBSSxDQUFDSCxpQkFBaUJJLEdBQUcsQ0FBQ0QsUUFBUTtRQUM5QkgsaUJBQWlCSyxHQUFHLENBQUNGO1FBQ3JCRyxXQUFXO1lBQ1BILE1BQU1JLEtBQUs7WUFDWFAsaUJBQWlCUSxNQUFNLENBQUNMO1FBQzVCLEdBQUc7SUFDUDtBQUNKO0FBQ0E7Ozs7Ozs7Ozs7Q0FVQyxHQUNNLElBQUlNLHVCQUF1QixTQUFVQyxHQUFHLEVBQUVDLE9BQU87SUFDcEQ7Ozs7OztJQU1BLEdBQ0EsSUFBSVIsUUFBUSxJQUFJTCxrREFBU0EsQ0FBQ1ksS0FBS0M7SUFDL0JSLE1BQU1TLEdBQUcsR0FBRyxTQUFVQyxHQUFHLEVBQUVDLEtBQUs7UUFDNUJaLFNBQVMsSUFBSTtRQUNiLE9BQU9KLGtEQUFTQSxDQUFDaUIsU0FBUyxDQUFDSCxHQUFHLENBQUNJLElBQUksQ0FBQyxJQUFJLEVBQUVILEtBQUtDO0lBQ25EO0lBQ0EsT0FBT1g7QUFDWCxFQUFFO0FBQ0Y7Ozs7Ozs7Ozs7Q0FVQyxHQUNNLElBQUljLHlCQUF5QixTQUFVUCxHQUFHLEVBQUVDLE9BQU87SUFDdEQ7Ozs7OztJQU1BLEdBQ0EsSUFBSVIsUUFBUSxJQUFJSixvREFBV0EsQ0FBQ1csS0FBS0M7SUFDakNSLE1BQU1TLEdBQUcsR0FBRyxTQUFVQyxHQUFHLEVBQUVDLEtBQUs7UUFDNUJaLFNBQVMsSUFBSTtRQUNiLE9BQU9ILG9EQUFXQSxDQUFDZ0IsU0FBUyxDQUFDSCxHQUFHLENBQUNJLElBQUksQ0FBQyxJQUFJLEVBQUVILEtBQUtDO0lBQ3JEO0lBQ0EsT0FBT1g7QUFDWCxFQUFFLENBQ0Ysa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktZG9jcy1mcm9uLWVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9jYWNoaW5nL2NhY2hlcy5qcz8yMTNiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFdlYWtDYWNoZSwgU3Ryb25nQ2FjaGUgfSBmcm9tIFwiQHdyeS9jYWNoZXNcIjtcbnZhciBzY2hlZHVsZWRDbGVhbnVwID0gbmV3IFdlYWtTZXQoKTtcbmZ1bmN0aW9uIHNjaGVkdWxlKGNhY2hlKSB7XG4gICAgaWYgKCFzY2hlZHVsZWRDbGVhbnVwLmhhcyhjYWNoZSkpIHtcbiAgICAgICAgc2NoZWR1bGVkQ2xlYW51cC5hZGQoY2FjaGUpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNhY2hlLmNsZWFuKCk7XG4gICAgICAgICAgICBzY2hlZHVsZWRDbGVhbnVwLmRlbGV0ZShjYWNoZSk7XG4gICAgICAgIH0sIDEwMCk7XG4gICAgfVxufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIEEgdmVyc2lvbiBvZiBXZWFrQ2FjaGUgdGhhdCB3aWxsIGF1dG8tc2NoZWR1bGUgYSBjbGVhbnVwIG9mIHRoZSBjYWNoZSB3aGVuXG4gKiBhIG5ldyBpdGVtIGlzIGFkZGVkLlxuICogVGhyb3R0bGVkIHRvIG9uY2UgcGVyIDEwMG1zLlxuICpcbiAqIEBwcml2YXRlUmVtYXJrc1xuICogU2hvdWxkIGJlIHVzZWQgdGhyb3VnaG91dCB0aGUgcmVzdCBvZiB0aGUgY29kZWJhc2UgaW5zdGVhZCBvZiBXZWFrQ2FjaGUsXG4gKiB3aXRoIHRoZSBub3RhYmxlIGV4Y2VwdGlvbiBvZiB1c2FnZSBpbiBgd3JhcGAgZnJvbSBgb3B0aW1pc21gIC0gdGhhdCBvbmVcbiAqIGFscmVhZHkgaGFuZGxlcyBjbGVhbnVwIGFuZCBzaG91bGQgcmVtYWluIGEgYFdlYWtDYWNoZWAuXG4gKi9cbmV4cG9ydCB2YXIgQXV0b0NsZWFuZWRXZWFrQ2FjaGUgPSBmdW5jdGlvbiAobWF4LCBkaXNwb3NlKSB7XG4gICAgLypcbiAgICBTb21lIGJ1aWxkcyBvZiBgV2Vha0NhY2hlYCBhcmUgZnVuY3Rpb24gcHJvdG90eXBlcywgc29tZSBhcmUgY2xhc3Nlcy5cbiAgICBUaGlzIGxpYnJhcnkgc3RpbGwgYnVpbGRzIHdpdGggYW4gRVM1IHRhcmdldCwgc28gd2UgY2FuJ3QgZXh0ZW5kIHRoZVxuICAgIHJlYWwgY2xhc3Nlcy5cbiAgICBJbnN0ZWFkLCB3ZSBoYXZlIHRvIHVzZSB0aGlzIHdvcmthcm91bmQgdW50aWwgd2Ugc3dpdGNoIHRvIGEgbmV3ZXIgYnVpbGRcbiAgICB0YXJnZXQuXG4gICAgKi9cbiAgICB2YXIgY2FjaGUgPSBuZXcgV2Vha0NhY2hlKG1heCwgZGlzcG9zZSk7XG4gICAgY2FjaGUuc2V0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgc2NoZWR1bGUodGhpcyk7XG4gICAgICAgIHJldHVybiBXZWFrQ2FjaGUucHJvdG90eXBlLnNldC5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgIH07XG4gICAgcmV0dXJuIGNhY2hlO1xufTtcbi8qKlxuICogQGludGVybmFsXG4gKiBBIHZlcnNpb24gb2YgU3Ryb25nQ2FjaGUgdGhhdCB3aWxsIGF1dG8tc2NoZWR1bGUgYSBjbGVhbnVwIG9mIHRoZSBjYWNoZSB3aGVuXG4gKiBhIG5ldyBpdGVtIGlzIGFkZGVkLlxuICogVGhyb3R0bGVkIHRvIG9uY2UgcGVyIDEwMG1zLlxuICpcbiAqIEBwcml2YXRlUmVtYXJrc1xuICogU2hvdWxkIGJlIHVzZWQgdGhyb3VnaG91dCB0aGUgcmVzdCBvZiB0aGUgY29kZWJhc2UgaW5zdGVhZCBvZiBTdHJvbmdDYWNoZSxcbiAqIHdpdGggdGhlIG5vdGFibGUgZXhjZXB0aW9uIG9mIHVzYWdlIGluIGB3cmFwYCBmcm9tIGBvcHRpbWlzbWAgLSB0aGF0IG9uZVxuICogYWxyZWFkeSBoYW5kbGVzIGNsZWFudXAgYW5kIHNob3VsZCByZW1haW4gYSBgU3Ryb25nQ2FjaGVgLlxuICovXG5leHBvcnQgdmFyIEF1dG9DbGVhbmVkU3Ryb25nQ2FjaGUgPSBmdW5jdGlvbiAobWF4LCBkaXNwb3NlKSB7XG4gICAgLypcbiAgICBTb21lIGJ1aWxkcyBvZiBgU3Ryb25nQ2FjaGVgIGFyZSBmdW5jdGlvbiBwcm90b3R5cGVzLCBzb21lIGFyZSBjbGFzc2VzLlxuICAgIFRoaXMgbGlicmFyeSBzdGlsbCBidWlsZHMgd2l0aCBhbiBFUzUgdGFyZ2V0LCBzbyB3ZSBjYW4ndCBleHRlbmQgdGhlXG4gICAgcmVhbCBjbGFzc2VzLlxuICAgIEluc3RlYWQsIHdlIGhhdmUgdG8gdXNlIHRoaXMgd29ya2Fyb3VuZCB1bnRpbCB3ZSBzd2l0Y2ggdG8gYSBuZXdlciBidWlsZFxuICAgIHRhcmdldC5cbiAgICAqL1xuICAgIHZhciBjYWNoZSA9IG5ldyBTdHJvbmdDYWNoZShtYXgsIGRpc3Bvc2UpO1xuICAgIGNhY2hlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHNjaGVkdWxlKHRoaXMpO1xuICAgICAgICByZXR1cm4gU3Ryb25nQ2FjaGUucHJvdG90eXBlLnNldC5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgIH07XG4gICAgcmV0dXJuIGNhY2hlO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhY2hlcy5qcy5tYXAiXSwibmFtZXMiOlsiV2Vha0NhY2hlIiwiU3Ryb25nQ2FjaGUiLCJzY2hlZHVsZWRDbGVhbnVwIiwiV2Vha1NldCIsInNjaGVkdWxlIiwiY2FjaGUiLCJoYXMiLCJhZGQiLCJzZXRUaW1lb3V0IiwiY2xlYW4iLCJkZWxldGUiLCJBdXRvQ2xlYW5lZFdlYWtDYWNoZSIsIm1heCIsImRpc3Bvc2UiLCJzZXQiLCJrZXkiLCJ2YWx1ZSIsInByb3RvdHlwZSIsImNhbGwiLCJBdXRvQ2xlYW5lZFN0cm9uZ0NhY2hlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/caching/caches.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getApolloCacheMemoryInternals: () => (/* binding */ getApolloCacheMemoryInternals),\n/* harmony export */   getApolloClientMemoryInternals: () => (/* binding */ getApolloClientMemoryInternals),\n/* harmony export */   getInMemoryCacheMemoryInternals: () => (/* binding */ getInMemoryCacheMemoryInternals),\n/* harmony export */   registerGlobalCache: () => (/* binding */ registerGlobalCache)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _sizes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sizes.js */ \"(rsc)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n\n\nvar globalCaches = {};\nfunction registerGlobalCache(name, getSize) {\n    globalCaches[name] = getSize;\n}\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */ var getApolloClientMemoryInternals = globalThis.__DEV__ !== false ? _getApolloClientMemoryInternals : undefined;\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */ var getInMemoryCacheMemoryInternals = globalThis.__DEV__ !== false ? _getInMemoryCacheMemoryInternals : undefined;\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */ var getApolloCacheMemoryInternals = globalThis.__DEV__ !== false ? _getApolloCacheMemoryInternals : undefined;\nfunction getCurrentCacheSizes() {\n    // `defaultCacheSizes` is a `const enum` that will be inlined during build, so we have to reconstruct it's shape here\n    var defaults = {\n        parser: 1000 /* defaultCacheSizes[\"parser\"] */ ,\n        canonicalStringify: 1000 /* defaultCacheSizes[\"canonicalStringify\"] */ ,\n        print: 2000 /* defaultCacheSizes[\"print\"] */ ,\n        \"documentTransform.cache\": 2000 /* defaultCacheSizes[\"documentTransform.cache\"] */ ,\n        \"queryManager.getDocumentInfo\": 2000 /* defaultCacheSizes[\"queryManager.getDocumentInfo\"] */ ,\n        \"PersistedQueryLink.persistedQueryHashes\": 2000 /* defaultCacheSizes[\"PersistedQueryLink.persistedQueryHashes\"] */ ,\n        \"fragmentRegistry.transform\": 2000 /* defaultCacheSizes[\"fragmentRegistry.transform\"] */ ,\n        \"fragmentRegistry.lookup\": 1000 /* defaultCacheSizes[\"fragmentRegistry.lookup\"] */ ,\n        \"fragmentRegistry.findFragmentSpreads\": 4000 /* defaultCacheSizes[\"fragmentRegistry.findFragmentSpreads\"] */ ,\n        \"cache.fragmentQueryDocuments\": 1000 /* defaultCacheSizes[\"cache.fragmentQueryDocuments\"] */ ,\n        \"removeTypenameFromVariables.getVariableDefinitions\": 2000 /* defaultCacheSizes[\"removeTypenameFromVariables.getVariableDefinitions\"] */ ,\n        \"inMemoryCache.maybeBroadcastWatch\": 5000 /* defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] */ ,\n        \"inMemoryCache.executeSelectionSet\": 50000 /* defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"] */ ,\n        \"inMemoryCache.executeSubSelectedArray\": 10000 /* defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"] */ \n    };\n    return Object.fromEntries(Object.entries(defaults).map(function(_a) {\n        var k = _a[0], v = _a[1];\n        return [\n            k,\n            _sizes_js__WEBPACK_IMPORTED_MODULE_0__.cacheSizes[k] || v\n        ];\n    }));\n}\nfunction _getApolloClientMemoryInternals() {\n    var _a, _b, _c, _d, _e;\n    if (!(globalThis.__DEV__ !== false)) throw new Error(\"only supported in development mode\");\n    return {\n        limits: getCurrentCacheSizes(),\n        sizes: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n            print: (_a = globalCaches.print) === null || _a === void 0 ? void 0 : _a.call(globalCaches),\n            parser: (_b = globalCaches.parser) === null || _b === void 0 ? void 0 : _b.call(globalCaches),\n            canonicalStringify: (_c = globalCaches.canonicalStringify) === null || _c === void 0 ? void 0 : _c.call(globalCaches),\n            links: linkInfo(this.link),\n            queryManager: {\n                getDocumentInfo: this[\"queryManager\"][\"transformCache\"].size,\n                documentTransforms: transformInfo(this[\"queryManager\"].documentTransform)\n            }\n        }, (_e = (_d = this.cache).getMemoryInternals) === null || _e === void 0 ? void 0 : _e.call(_d))\n    };\n}\nfunction _getApolloCacheMemoryInternals() {\n    return {\n        cache: {\n            fragmentQueryDocuments: getWrapperInformation(this[\"getFragmentDoc\"])\n        }\n    };\n}\nfunction _getInMemoryCacheMemoryInternals() {\n    var fragments = this.config.fragments;\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _getApolloCacheMemoryInternals.apply(this)), {\n        addTypenameDocumentTransform: transformInfo(this[\"addTypenameTransform\"]),\n        inMemoryCache: {\n            executeSelectionSet: getWrapperInformation(this[\"storeReader\"][\"executeSelectionSet\"]),\n            executeSubSelectedArray: getWrapperInformation(this[\"storeReader\"][\"executeSubSelectedArray\"]),\n            maybeBroadcastWatch: getWrapperInformation(this[\"maybeBroadcastWatch\"])\n        },\n        fragmentRegistry: {\n            findFragmentSpreads: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.findFragmentSpreads),\n            lookup: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.lookup),\n            transform: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.transform)\n        }\n    });\n}\nfunction isWrapper(f) {\n    return !!f && \"dirtyKey\" in f;\n}\nfunction getWrapperInformation(f) {\n    return isWrapper(f) ? f.size : undefined;\n}\nfunction isDefined(value) {\n    return value != null;\n}\nfunction transformInfo(transform) {\n    return recurseTransformInfo(transform).map(function(cache) {\n        return {\n            cache: cache\n        };\n    });\n}\nfunction recurseTransformInfo(transform) {\n    return transform ? (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([\n        getWrapperInformation(transform === null || transform === void 0 ? void 0 : transform[\"performWork\"])\n    ], recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform[\"left\"]), true), recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform[\"right\"]), true).filter(isDefined) : [];\n}\nfunction linkInfo(link) {\n    var _a;\n    return link ? (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([\n        (_a = link === null || link === void 0 ? void 0 : link.getMemoryInternals) === null || _a === void 0 ? void 0 : _a.call(link)\n    ], linkInfo(link === null || link === void 0 ? void 0 : link.left), true), linkInfo(link === null || link === void 0 ? void 0 : link.right), true).filter(isDefined) : [];\n} //# sourceMappingURL=getMemoryInternals.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NhY2hpbmcvZ2V0TWVtb3J5SW50ZXJuYWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFnRDtBQUNSO0FBQ3hDLElBQUlHLGVBQWUsQ0FBQztBQUNiLFNBQVNDLG9CQUFvQkMsSUFBSSxFQUFFQyxPQUFPO0lBQzdDSCxZQUFZLENBQUNFLEtBQUssR0FBR0M7QUFDekI7QUFDQTs7O0NBR0MsR0FDTSxJQUFJQyxpQ0FBaUNDLFdBQVdDLE9BQU8sS0FBSyxRQUMvREMsa0NBQ0VDLFVBQVU7QUFDaEI7OztDQUdDLEdBQ00sSUFBSUMsa0NBQWtDSixXQUFXQyxPQUFPLEtBQUssUUFDaEVJLG1DQUNFRixVQUFVO0FBQ2hCOzs7Q0FHQyxHQUNNLElBQUlHLGdDQUFnQ04sV0FBV0MsT0FBTyxLQUFLLFFBQzlETSxpQ0FDRUosVUFBVTtBQUNoQixTQUFTSztJQUNMLHFIQUFxSDtJQUNySCxJQUFJQyxXQUFXO1FBQ1hDLFFBQVEsS0FBSywrQkFBK0I7UUFDNUNDLG9CQUFvQixLQUFLLDJDQUEyQztRQUNwRUMsT0FBTyxLQUFLLDhCQUE4QjtRQUMxQywyQkFBMkIsS0FBSyxnREFBZ0Q7UUFDaEYsZ0NBQWdDLEtBQUsscURBQXFEO1FBQzFGLDJDQUEyQyxLQUFLLGdFQUFnRTtRQUNoSCw4QkFBOEIsS0FBSyxtREFBbUQ7UUFDdEYsMkJBQTJCLEtBQUssZ0RBQWdEO1FBQ2hGLHdDQUF3QyxLQUFLLDZEQUE2RDtRQUMxRyxnQ0FBZ0MsS0FBSyxxREFBcUQ7UUFDMUYsc0RBQXNELEtBQUssMkVBQTJFO1FBQ3RJLHFDQUFxQyxLQUFLLDBEQUEwRDtRQUNwRyxxQ0FBcUMsTUFBTSwwREFBMEQ7UUFDckcseUNBQXlDLE1BQU0sOERBQThEO0lBQ2pIO0lBQ0EsT0FBT0MsT0FBT0MsV0FBVyxDQUFDRCxPQUFPRSxPQUFPLENBQUNOLFVBQVVPLEdBQUcsQ0FBQyxTQUFVQyxFQUFFO1FBQy9ELElBQUlDLElBQUlELEVBQUUsQ0FBQyxFQUFFLEVBQUVFLElBQUlGLEVBQUUsQ0FBQyxFQUFFO1FBQ3hCLE9BQU87WUFDSEM7WUFDQXhCLGlEQUFVLENBQUN3QixFQUFFLElBQUlDO1NBQ3BCO0lBQ0w7QUFDSjtBQUNBLFNBQVNqQjtJQUNMLElBQUllLElBQUlHLElBQUlDLElBQUlDLElBQUlDO0lBQ3BCLElBQUksQ0FBRXZCLENBQUFBLFdBQVdDLE9BQU8sS0FBSyxLQUFJLEdBQzdCLE1BQU0sSUFBSXVCLE1BQU07SUFDcEIsT0FBTztRQUNIQyxRQUFRakI7UUFDUmtCLE9BQU9sQywrQ0FBUUEsQ0FBQztZQUFFb0IsT0FBTyxDQUFDSyxLQUFLdEIsYUFBYWlCLEtBQUssTUFBTSxRQUFRSyxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdVLElBQUksQ0FBQ2hDO1lBQWVlLFFBQVEsQ0FBQ1UsS0FBS3pCLGFBQWFlLE1BQU0sTUFBTSxRQUFRVSxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdPLElBQUksQ0FBQ2hDO1lBQWVnQixvQkFBb0IsQ0FBQ1UsS0FBSzFCLGFBQWFnQixrQkFBa0IsTUFBTSxRQUFRVSxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdNLElBQUksQ0FBQ2hDO1lBQWVpQyxPQUFPQyxTQUFTLElBQUksQ0FBQ0MsSUFBSTtZQUFHQyxjQUFjO2dCQUN2V0MsaUJBQWlCLElBQUksQ0FBQyxlQUFlLENBQUMsaUJBQWlCLENBQUNDLElBQUk7Z0JBQzVEQyxvQkFBb0JDLGNBQWMsSUFBSSxDQUFDLGVBQWUsQ0FBQ0MsaUJBQWlCO1lBQzVFO1FBQUUsR0FBRyxDQUFDYixLQUFLLENBQUNELEtBQUssSUFBSSxDQUFDZSxLQUFLLEVBQUVDLGtCQUFrQixNQUFNLFFBQVFmLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR0ksSUFBSSxDQUFDTDtJQUN0RztBQUNKO0FBQ0EsU0FBU2Y7SUFDTCxPQUFPO1FBQ0g4QixPQUFPO1lBQ0hFLHdCQUF3QkMsc0JBQXNCLElBQUksQ0FBQyxpQkFBaUI7UUFDeEU7SUFDSjtBQUNKO0FBQ0EsU0FBU25DO0lBQ0wsSUFBSW9DLFlBQVksSUFBSSxDQUFDQyxNQUFNLENBQUNELFNBQVM7SUFDckMsT0FBT2pELCtDQUFRQSxDQUFDQSwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUdlLCtCQUErQm9DLEtBQUssQ0FBQyxJQUFJLElBQUk7UUFBRUMsOEJBQThCVCxjQUFjLElBQUksQ0FBQyx1QkFBdUI7UUFBR1UsZUFBZTtZQUM5SkMscUJBQXFCTixzQkFBc0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQkFBc0I7WUFDckZPLHlCQUF5QlAsc0JBQXNCLElBQUksQ0FBQyxjQUFjLENBQUMsMEJBQTBCO1lBQzdGUSxxQkFBcUJSLHNCQUFzQixJQUFJLENBQUMsc0JBQXNCO1FBQzFFO1FBQUdTLGtCQUFrQjtZQUNqQkMscUJBQXFCVixzQkFBc0JDLGNBQWMsUUFBUUEsY0FBYyxLQUFLLElBQUksS0FBSyxJQUFJQSxVQUFVUyxtQkFBbUI7WUFDOUhDLFFBQVFYLHNCQUFzQkMsY0FBYyxRQUFRQSxjQUFjLEtBQUssSUFBSSxLQUFLLElBQUlBLFVBQVVVLE1BQU07WUFDcEdDLFdBQVdaLHNCQUFzQkMsY0FBYyxRQUFRQSxjQUFjLEtBQUssSUFBSSxLQUFLLElBQUlBLFVBQVVXLFNBQVM7UUFDOUc7SUFBRTtBQUNWO0FBQ0EsU0FBU0MsVUFBVUMsQ0FBQztJQUNoQixPQUFPLENBQUMsQ0FBQ0EsS0FBSyxjQUFjQTtBQUNoQztBQUNBLFNBQVNkLHNCQUFzQmMsQ0FBQztJQUM1QixPQUFPRCxVQUFVQyxLQUFLQSxFQUFFckIsSUFBSSxHQUFHOUI7QUFDbkM7QUFDQSxTQUFTb0QsVUFBVUMsS0FBSztJQUNwQixPQUFPQSxTQUFTO0FBQ3BCO0FBQ0EsU0FBU3JCLGNBQWNpQixTQUFTO0lBQzVCLE9BQU9LLHFCQUFxQkwsV0FBV3BDLEdBQUcsQ0FBQyxTQUFVcUIsS0FBSztRQUFJLE9BQVE7WUFBRUEsT0FBT0E7UUFBTTtJQUFJO0FBQzdGO0FBQ0EsU0FBU29CLHFCQUFxQkwsU0FBUztJQUNuQyxPQUFPQSxZQUNIM0Qsb0RBQWFBLENBQUNBLG9EQUFhQSxDQUFDO1FBQ3hCK0Msc0JBQXNCWSxjQUFjLFFBQVFBLGNBQWMsS0FBSyxJQUFJLEtBQUssSUFBSUEsU0FBUyxDQUFDLGNBQWM7S0FDdkcsRUFBRUsscUJBQXFCTCxjQUFjLFFBQVFBLGNBQWMsS0FBSyxJQUFJLEtBQUssSUFBSUEsU0FBUyxDQUFDLE9BQU8sR0FBRyxPQUFPSyxxQkFBcUJMLGNBQWMsUUFBUUEsY0FBYyxLQUFLLElBQUksS0FBSyxJQUFJQSxTQUFTLENBQUMsUUFBUSxHQUFHLE1BQU1NLE1BQU0sQ0FBQ0gsYUFDcE4sRUFBRTtBQUNaO0FBQ0EsU0FBUzFCLFNBQVNDLElBQUk7SUFDbEIsSUFBSWI7SUFDSixPQUFPYSxPQUNIckMsb0RBQWFBLENBQUNBLG9EQUFhQSxDQUFDO1FBQ3ZCd0IsQ0FBQUEsS0FBS2EsU0FBUyxRQUFRQSxTQUFTLEtBQUssSUFBSSxLQUFLLElBQUlBLEtBQUtRLGtCQUFrQixNQUFNLFFBQVFyQixPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdVLElBQUksQ0FBQ0c7S0FDM0gsRUFBRUQsU0FBU0MsU0FBUyxRQUFRQSxTQUFTLEtBQUssSUFBSSxLQUFLLElBQUlBLEtBQUs2QixJQUFJLEdBQUcsT0FBTzlCLFNBQVNDLFNBQVMsUUFBUUEsU0FBUyxLQUFLLElBQUksS0FBSyxJQUFJQSxLQUFLOEIsS0FBSyxHQUFHLE1BQU1GLE1BQU0sQ0FBQ0gsYUFDeEosRUFBRTtBQUNaLEVBQ0EsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktZG9jcy1mcm9uLWVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9jYWNoaW5nL2dldE1lbW9yeUludGVybmFscy5qcz8zMDI1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXNzaWduLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBjYWNoZVNpemVzIH0gZnJvbSBcIi4vc2l6ZXMuanNcIjtcbnZhciBnbG9iYWxDYWNoZXMgPSB7fTtcbmV4cG9ydCBmdW5jdGlvbiByZWdpc3Rlckdsb2JhbENhY2hlKG5hbWUsIGdldFNpemUpIHtcbiAgICBnbG9iYWxDYWNoZXNbbmFtZV0gPSBnZXRTaXplO1xufVxuLyoqXG4gKiBGb3IgaW50ZXJuYWwgcHVycG9zZXMgb25seSAtIHBsZWFzZSBjYWxsIGBBcG9sbG9DbGllbnQuZ2V0TWVtb3J5SW50ZXJuYWxzYCBpbnN0ZWFkXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IHZhciBnZXRBcG9sbG9DbGllbnRNZW1vcnlJbnRlcm5hbHMgPSBnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlID9cbiAgICBfZ2V0QXBvbGxvQ2xpZW50TWVtb3J5SW50ZXJuYWxzXG4gICAgOiB1bmRlZmluZWQ7XG4vKipcbiAqIEZvciBpbnRlcm5hbCBwdXJwb3NlcyBvbmx5IC0gcGxlYXNlIGNhbGwgYEFwb2xsb0NsaWVudC5nZXRNZW1vcnlJbnRlcm5hbHNgIGluc3RlYWRcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgdmFyIGdldEluTWVtb3J5Q2FjaGVNZW1vcnlJbnRlcm5hbHMgPSBnbG9iYWxUaGlzLl9fREVWX18gIT09IGZhbHNlID9cbiAgICBfZ2V0SW5NZW1vcnlDYWNoZU1lbW9yeUludGVybmFsc1xuICAgIDogdW5kZWZpbmVkO1xuLyoqXG4gKiBGb3IgaW50ZXJuYWwgcHVycG9zZXMgb25seSAtIHBsZWFzZSBjYWxsIGBBcG9sbG9DbGllbnQuZ2V0TWVtb3J5SW50ZXJuYWxzYCBpbnN0ZWFkXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IHZhciBnZXRBcG9sbG9DYWNoZU1lbW9yeUludGVybmFscyA9IGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UgP1xuICAgIF9nZXRBcG9sbG9DYWNoZU1lbW9yeUludGVybmFsc1xuICAgIDogdW5kZWZpbmVkO1xuZnVuY3Rpb24gZ2V0Q3VycmVudENhY2hlU2l6ZXMoKSB7XG4gICAgLy8gYGRlZmF1bHRDYWNoZVNpemVzYCBpcyBhIGBjb25zdCBlbnVtYCB0aGF0IHdpbGwgYmUgaW5saW5lZCBkdXJpbmcgYnVpbGQsIHNvIHdlIGhhdmUgdG8gcmVjb25zdHJ1Y3QgaXQncyBzaGFwZSBoZXJlXG4gICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgICBwYXJzZXI6IDEwMDAgLyogZGVmYXVsdENhY2hlU2l6ZXNbXCJwYXJzZXJcIl0gKi8sXG4gICAgICAgIGNhbm9uaWNhbFN0cmluZ2lmeTogMTAwMCAvKiBkZWZhdWx0Q2FjaGVTaXplc1tcImNhbm9uaWNhbFN0cmluZ2lmeVwiXSAqLyxcbiAgICAgICAgcHJpbnQ6IDIwMDAgLyogZGVmYXVsdENhY2hlU2l6ZXNbXCJwcmludFwiXSAqLyxcbiAgICAgICAgXCJkb2N1bWVudFRyYW5zZm9ybS5jYWNoZVwiOiAyMDAwIC8qIGRlZmF1bHRDYWNoZVNpemVzW1wiZG9jdW1lbnRUcmFuc2Zvcm0uY2FjaGVcIl0gKi8sXG4gICAgICAgIFwicXVlcnlNYW5hZ2VyLmdldERvY3VtZW50SW5mb1wiOiAyMDAwIC8qIGRlZmF1bHRDYWNoZVNpemVzW1wicXVlcnlNYW5hZ2VyLmdldERvY3VtZW50SW5mb1wiXSAqLyxcbiAgICAgICAgXCJQZXJzaXN0ZWRRdWVyeUxpbmsucGVyc2lzdGVkUXVlcnlIYXNoZXNcIjogMjAwMCAvKiBkZWZhdWx0Q2FjaGVTaXplc1tcIlBlcnNpc3RlZFF1ZXJ5TGluay5wZXJzaXN0ZWRRdWVyeUhhc2hlc1wiXSAqLyxcbiAgICAgICAgXCJmcmFnbWVudFJlZ2lzdHJ5LnRyYW5zZm9ybVwiOiAyMDAwIC8qIGRlZmF1bHRDYWNoZVNpemVzW1wiZnJhZ21lbnRSZWdpc3RyeS50cmFuc2Zvcm1cIl0gKi8sXG4gICAgICAgIFwiZnJhZ21lbnRSZWdpc3RyeS5sb29rdXBcIjogMTAwMCAvKiBkZWZhdWx0Q2FjaGVTaXplc1tcImZyYWdtZW50UmVnaXN0cnkubG9va3VwXCJdICovLFxuICAgICAgICBcImZyYWdtZW50UmVnaXN0cnkuZmluZEZyYWdtZW50U3ByZWFkc1wiOiA0MDAwIC8qIGRlZmF1bHRDYWNoZVNpemVzW1wiZnJhZ21lbnRSZWdpc3RyeS5maW5kRnJhZ21lbnRTcHJlYWRzXCJdICovLFxuICAgICAgICBcImNhY2hlLmZyYWdtZW50UXVlcnlEb2N1bWVudHNcIjogMTAwMCAvKiBkZWZhdWx0Q2FjaGVTaXplc1tcImNhY2hlLmZyYWdtZW50UXVlcnlEb2N1bWVudHNcIl0gKi8sXG4gICAgICAgIFwicmVtb3ZlVHlwZW5hbWVGcm9tVmFyaWFibGVzLmdldFZhcmlhYmxlRGVmaW5pdGlvbnNcIjogMjAwMCAvKiBkZWZhdWx0Q2FjaGVTaXplc1tcInJlbW92ZVR5cGVuYW1lRnJvbVZhcmlhYmxlcy5nZXRWYXJpYWJsZURlZmluaXRpb25zXCJdICovLFxuICAgICAgICBcImluTWVtb3J5Q2FjaGUubWF5YmVCcm9hZGNhc3RXYXRjaFwiOiA1MDAwIC8qIGRlZmF1bHRDYWNoZVNpemVzW1wiaW5NZW1vcnlDYWNoZS5tYXliZUJyb2FkY2FzdFdhdGNoXCJdICovLFxuICAgICAgICBcImluTWVtb3J5Q2FjaGUuZXhlY3V0ZVNlbGVjdGlvblNldFwiOiA1MDAwMCAvKiBkZWZhdWx0Q2FjaGVTaXplc1tcImluTWVtb3J5Q2FjaGUuZXhlY3V0ZVNlbGVjdGlvblNldFwiXSAqLyxcbiAgICAgICAgXCJpbk1lbW9yeUNhY2hlLmV4ZWN1dGVTdWJTZWxlY3RlZEFycmF5XCI6IDEwMDAwIC8qIGRlZmF1bHRDYWNoZVNpemVzW1wiaW5NZW1vcnlDYWNoZS5leGVjdXRlU3ViU2VsZWN0ZWRBcnJheVwiXSAqLyxcbiAgICB9O1xuICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoZGVmYXVsdHMpLm1hcChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIGsgPSBfYVswXSwgdiA9IF9hWzFdO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgayxcbiAgICAgICAgICAgIGNhY2hlU2l6ZXNba10gfHwgdixcbiAgICAgICAgXTtcbiAgICB9KSk7XG59XG5mdW5jdGlvbiBfZ2V0QXBvbGxvQ2xpZW50TWVtb3J5SW50ZXJuYWxzKCkge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2U7XG4gICAgaWYgKCEoZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIm9ubHkgc3VwcG9ydGVkIGluIGRldmVsb3BtZW50IG1vZGVcIik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbGltaXRzOiBnZXRDdXJyZW50Q2FjaGVTaXplcygpLFxuICAgICAgICBzaXplczogX19hc3NpZ24oeyBwcmludDogKF9hID0gZ2xvYmFsQ2FjaGVzLnByaW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChnbG9iYWxDYWNoZXMpLCBwYXJzZXI6IChfYiA9IGdsb2JhbENhY2hlcy5wYXJzZXIpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKGdsb2JhbENhY2hlcyksIGNhbm9uaWNhbFN0cmluZ2lmeTogKF9jID0gZ2xvYmFsQ2FjaGVzLmNhbm9uaWNhbFN0cmluZ2lmeSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmNhbGwoZ2xvYmFsQ2FjaGVzKSwgbGlua3M6IGxpbmtJbmZvKHRoaXMubGluayksIHF1ZXJ5TWFuYWdlcjoge1xuICAgICAgICAgICAgICAgIGdldERvY3VtZW50SW5mbzogdGhpc1tcInF1ZXJ5TWFuYWdlclwiXVtcInRyYW5zZm9ybUNhY2hlXCJdLnNpemUsXG4gICAgICAgICAgICAgICAgZG9jdW1lbnRUcmFuc2Zvcm1zOiB0cmFuc2Zvcm1JbmZvKHRoaXNbXCJxdWVyeU1hbmFnZXJcIl0uZG9jdW1lbnRUcmFuc2Zvcm0pLFxuICAgICAgICAgICAgfSB9LCAoX2UgPSAoX2QgPSB0aGlzLmNhY2hlKS5nZXRNZW1vcnlJbnRlcm5hbHMpID09PSBudWxsIHx8IF9lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZS5jYWxsKF9kKSksXG4gICAgfTtcbn1cbmZ1bmN0aW9uIF9nZXRBcG9sbG9DYWNoZU1lbW9yeUludGVybmFscygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBjYWNoZToge1xuICAgICAgICAgICAgZnJhZ21lbnRRdWVyeURvY3VtZW50czogZ2V0V3JhcHBlckluZm9ybWF0aW9uKHRoaXNbXCJnZXRGcmFnbWVudERvY1wiXSksXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmZ1bmN0aW9uIF9nZXRJbk1lbW9yeUNhY2hlTWVtb3J5SW50ZXJuYWxzKCkge1xuICAgIHZhciBmcmFnbWVudHMgPSB0aGlzLmNvbmZpZy5mcmFnbWVudHM7XG4gICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBfZ2V0QXBvbGxvQ2FjaGVNZW1vcnlJbnRlcm5hbHMuYXBwbHkodGhpcykpLCB7IGFkZFR5cGVuYW1lRG9jdW1lbnRUcmFuc2Zvcm06IHRyYW5zZm9ybUluZm8odGhpc1tcImFkZFR5cGVuYW1lVHJhbnNmb3JtXCJdKSwgaW5NZW1vcnlDYWNoZToge1xuICAgICAgICAgICAgZXhlY3V0ZVNlbGVjdGlvblNldDogZ2V0V3JhcHBlckluZm9ybWF0aW9uKHRoaXNbXCJzdG9yZVJlYWRlclwiXVtcImV4ZWN1dGVTZWxlY3Rpb25TZXRcIl0pLFxuICAgICAgICAgICAgZXhlY3V0ZVN1YlNlbGVjdGVkQXJyYXk6IGdldFdyYXBwZXJJbmZvcm1hdGlvbih0aGlzW1wic3RvcmVSZWFkZXJcIl1bXCJleGVjdXRlU3ViU2VsZWN0ZWRBcnJheVwiXSksXG4gICAgICAgICAgICBtYXliZUJyb2FkY2FzdFdhdGNoOiBnZXRXcmFwcGVySW5mb3JtYXRpb24odGhpc1tcIm1heWJlQnJvYWRjYXN0V2F0Y2hcIl0pLFxuICAgICAgICB9LCBmcmFnbWVudFJlZ2lzdHJ5OiB7XG4gICAgICAgICAgICBmaW5kRnJhZ21lbnRTcHJlYWRzOiBnZXRXcmFwcGVySW5mb3JtYXRpb24oZnJhZ21lbnRzID09PSBudWxsIHx8IGZyYWdtZW50cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZnJhZ21lbnRzLmZpbmRGcmFnbWVudFNwcmVhZHMpLFxuICAgICAgICAgICAgbG9va3VwOiBnZXRXcmFwcGVySW5mb3JtYXRpb24oZnJhZ21lbnRzID09PSBudWxsIHx8IGZyYWdtZW50cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZnJhZ21lbnRzLmxvb2t1cCksXG4gICAgICAgICAgICB0cmFuc2Zvcm06IGdldFdyYXBwZXJJbmZvcm1hdGlvbihmcmFnbWVudHMgPT09IG51bGwgfHwgZnJhZ21lbnRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmcmFnbWVudHMudHJhbnNmb3JtKSxcbiAgICAgICAgfSB9KTtcbn1cbmZ1bmN0aW9uIGlzV3JhcHBlcihmKSB7XG4gICAgcmV0dXJuICEhZiAmJiBcImRpcnR5S2V5XCIgaW4gZjtcbn1cbmZ1bmN0aW9uIGdldFdyYXBwZXJJbmZvcm1hdGlvbihmKSB7XG4gICAgcmV0dXJuIGlzV3JhcHBlcihmKSA/IGYuc2l6ZSA6IHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGlzRGVmaW5lZCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPSBudWxsO1xufVxuZnVuY3Rpb24gdHJhbnNmb3JtSW5mbyh0cmFuc2Zvcm0pIHtcbiAgICByZXR1cm4gcmVjdXJzZVRyYW5zZm9ybUluZm8odHJhbnNmb3JtKS5tYXAoZnVuY3Rpb24gKGNhY2hlKSB7IHJldHVybiAoeyBjYWNoZTogY2FjaGUgfSk7IH0pO1xufVxuZnVuY3Rpb24gcmVjdXJzZVRyYW5zZm9ybUluZm8odHJhbnNmb3JtKSB7XG4gICAgcmV0dXJuIHRyYW5zZm9ybSA/XG4gICAgICAgIF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShbXG4gICAgICAgICAgICBnZXRXcmFwcGVySW5mb3JtYXRpb24odHJhbnNmb3JtID09PSBudWxsIHx8IHRyYW5zZm9ybSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdHJhbnNmb3JtW1wicGVyZm9ybVdvcmtcIl0pXG4gICAgICAgIF0sIHJlY3Vyc2VUcmFuc2Zvcm1JbmZvKHRyYW5zZm9ybSA9PT0gbnVsbCB8fCB0cmFuc2Zvcm0gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRyYW5zZm9ybVtcImxlZnRcIl0pLCB0cnVlKSwgcmVjdXJzZVRyYW5zZm9ybUluZm8odHJhbnNmb3JtID09PSBudWxsIHx8IHRyYW5zZm9ybSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdHJhbnNmb3JtW1wicmlnaHRcIl0pLCB0cnVlKS5maWx0ZXIoaXNEZWZpbmVkKVxuICAgICAgICA6IFtdO1xufVxuZnVuY3Rpb24gbGlua0luZm8obGluaykge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gbGluayA/XG4gICAgICAgIF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShbXG4gICAgICAgICAgICAoX2EgPSBsaW5rID09PSBudWxsIHx8IGxpbmsgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxpbmsuZ2V0TWVtb3J5SW50ZXJuYWxzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChsaW5rKVxuICAgICAgICBdLCBsaW5rSW5mbyhsaW5rID09PSBudWxsIHx8IGxpbmsgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxpbmsubGVmdCksIHRydWUpLCBsaW5rSW5mbyhsaW5rID09PSBudWxsIHx8IGxpbmsgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxpbmsucmlnaHQpLCB0cnVlKS5maWx0ZXIoaXNEZWZpbmVkKVxuICAgICAgICA6IFtdO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0TWVtb3J5SW50ZXJuYWxzLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsIl9fc3ByZWFkQXJyYXkiLCJjYWNoZVNpemVzIiwiZ2xvYmFsQ2FjaGVzIiwicmVnaXN0ZXJHbG9iYWxDYWNoZSIsIm5hbWUiLCJnZXRTaXplIiwiZ2V0QXBvbGxvQ2xpZW50TWVtb3J5SW50ZXJuYWxzIiwiZ2xvYmFsVGhpcyIsIl9fREVWX18iLCJfZ2V0QXBvbGxvQ2xpZW50TWVtb3J5SW50ZXJuYWxzIiwidW5kZWZpbmVkIiwiZ2V0SW5NZW1vcnlDYWNoZU1lbW9yeUludGVybmFscyIsIl9nZXRJbk1lbW9yeUNhY2hlTWVtb3J5SW50ZXJuYWxzIiwiZ2V0QXBvbGxvQ2FjaGVNZW1vcnlJbnRlcm5hbHMiLCJfZ2V0QXBvbGxvQ2FjaGVNZW1vcnlJbnRlcm5hbHMiLCJnZXRDdXJyZW50Q2FjaGVTaXplcyIsImRlZmF1bHRzIiwicGFyc2VyIiwiY2Fub25pY2FsU3RyaW5naWZ5IiwicHJpbnQiLCJPYmplY3QiLCJmcm9tRW50cmllcyIsImVudHJpZXMiLCJtYXAiLCJfYSIsImsiLCJ2IiwiX2IiLCJfYyIsIl9kIiwiX2UiLCJFcnJvciIsImxpbWl0cyIsInNpemVzIiwiY2FsbCIsImxpbmtzIiwibGlua0luZm8iLCJsaW5rIiwicXVlcnlNYW5hZ2VyIiwiZ2V0RG9jdW1lbnRJbmZvIiwic2l6ZSIsImRvY3VtZW50VHJhbnNmb3JtcyIsInRyYW5zZm9ybUluZm8iLCJkb2N1bWVudFRyYW5zZm9ybSIsImNhY2hlIiwiZ2V0TWVtb3J5SW50ZXJuYWxzIiwiZnJhZ21lbnRRdWVyeURvY3VtZW50cyIsImdldFdyYXBwZXJJbmZvcm1hdGlvbiIsImZyYWdtZW50cyIsImNvbmZpZyIsImFwcGx5IiwiYWRkVHlwZW5hbWVEb2N1bWVudFRyYW5zZm9ybSIsImluTWVtb3J5Q2FjaGUiLCJleGVjdXRlU2VsZWN0aW9uU2V0IiwiZXhlY3V0ZVN1YlNlbGVjdGVkQXJyYXkiLCJtYXliZUJyb2FkY2FzdFdhdGNoIiwiZnJhZ21lbnRSZWdpc3RyeSIsImZpbmRGcmFnbWVudFNwcmVhZHMiLCJsb29rdXAiLCJ0cmFuc2Zvcm0iLCJpc1dyYXBwZXIiLCJmIiwiaXNEZWZpbmVkIiwidmFsdWUiLCJyZWN1cnNlVHJhbnNmb3JtSW5mbyIsImZpbHRlciIsImxlZnQiLCJyaWdodCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/caching/sizes.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/caching/sizes.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cacheSizes: () => (/* binding */ cacheSizes)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\n\nvar cacheSizeSymbol = Symbol.for(\"apollo.cacheSize\");\n/**\n *\n * The global cache size configuration for Apollo Client.\n *\n * @remarks\n *\n * You can directly modify this object, but any modification will\n * only have an effect on caches that are created after the modification.\n *\n * So for global caches, such as `parser`, `canonicalStringify` and `print`,\n * you might need to call `.reset` on them, which will essentially re-create them.\n *\n * Alternatively, you can set `globalThis[Symbol.for(\"apollo.cacheSize\")]` before\n * you load the Apollo Client package:\n *\n * @example\n * ```ts\n * globalThis[Symbol.for(\"apollo.cacheSize\")] = {\n *   parser: 100\n * } satisfies Partial<CacheSizes> // the `satisfies` is optional if using TypeScript\n * ```\n */ var cacheSizes = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.global[cacheSizeSymbol]); //# sourceMappingURL=sizes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NhY2hpbmcvc2l6ZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ1k7QUFDN0MsSUFBSUUsa0JBQWtCQyxPQUFPQyxHQUFHLENBQUM7QUFDakM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXFCQyxHQUNNLElBQUlDLGFBQWFMLCtDQUFRQSxDQUFDLENBQUMsR0FBR0MscURBQU0sQ0FBQ0MsZ0JBQWdCLEVBQUUsQ0FDOUQsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktZG9jcy1mcm9uLWVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9jYWNoaW5nL3NpemVzLmpzPzMzNWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGdsb2JhbCB9IGZyb20gXCIuLi9nbG9iYWxzL2luZGV4LmpzXCI7XG52YXIgY2FjaGVTaXplU3ltYm9sID0gU3ltYm9sLmZvcihcImFwb2xsby5jYWNoZVNpemVcIik7XG4vKipcbiAqXG4gKiBUaGUgZ2xvYmFsIGNhY2hlIHNpemUgY29uZmlndXJhdGlvbiBmb3IgQXBvbGxvIENsaWVudC5cbiAqXG4gKiBAcmVtYXJrc1xuICpcbiAqIFlvdSBjYW4gZGlyZWN0bHkgbW9kaWZ5IHRoaXMgb2JqZWN0LCBidXQgYW55IG1vZGlmaWNhdGlvbiB3aWxsXG4gKiBvbmx5IGhhdmUgYW4gZWZmZWN0IG9uIGNhY2hlcyB0aGF0IGFyZSBjcmVhdGVkIGFmdGVyIHRoZSBtb2RpZmljYXRpb24uXG4gKlxuICogU28gZm9yIGdsb2JhbCBjYWNoZXMsIHN1Y2ggYXMgYHBhcnNlcmAsIGBjYW5vbmljYWxTdHJpbmdpZnlgIGFuZCBgcHJpbnRgLFxuICogeW91IG1pZ2h0IG5lZWQgdG8gY2FsbCBgLnJlc2V0YCBvbiB0aGVtLCB3aGljaCB3aWxsIGVzc2VudGlhbGx5IHJlLWNyZWF0ZSB0aGVtLlxuICpcbiAqIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gc2V0IGBnbG9iYWxUaGlzW1N5bWJvbC5mb3IoXCJhcG9sbG8uY2FjaGVTaXplXCIpXWAgYmVmb3JlXG4gKiB5b3UgbG9hZCB0aGUgQXBvbGxvIENsaWVudCBwYWNrYWdlOlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogZ2xvYmFsVGhpc1tTeW1ib2wuZm9yKFwiYXBvbGxvLmNhY2hlU2l6ZVwiKV0gPSB7XG4gKiAgIHBhcnNlcjogMTAwXG4gKiB9IHNhdGlzZmllcyBQYXJ0aWFsPENhY2hlU2l6ZXM+IC8vIHRoZSBgc2F0aXNmaWVzYCBpcyBvcHRpb25hbCBpZiB1c2luZyBUeXBlU2NyaXB0XG4gKiBgYGBcbiAqL1xuZXhwb3J0IHZhciBjYWNoZVNpemVzID0gX19hc3NpZ24oe30sIGdsb2JhbFtjYWNoZVNpemVTeW1ib2xdKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpemVzLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsImdsb2JhbCIsImNhY2hlU2l6ZVN5bWJvbCIsIlN5bWJvbCIsImZvciIsImNhY2hlU2l6ZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/caching/sizes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/common/arrays.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/arrays.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isNonEmptyArray: () => (/* binding */ isNonEmptyArray)\n/* harmony export */ });\n// A version of Array.isArray that works better with readonly arrays.\nvar isArray = Array.isArray;\nfunction isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n} //# sourceMappingURL=arrays.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9hcnJheXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxxRUFBcUU7QUFDOUQsSUFBSUEsVUFBVUMsTUFBTUQsT0FBTyxDQUFDO0FBQzVCLFNBQVNFLGdCQUFnQkMsS0FBSztJQUNqQyxPQUFPRixNQUFNRCxPQUFPLENBQUNHLFVBQVVBLE1BQU1DLE1BQU0sR0FBRztBQUNsRCxFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL2FycmF5cy5qcz80ZGZkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEEgdmVyc2lvbiBvZiBBcnJheS5pc0FycmF5IHRoYXQgd29ya3MgYmV0dGVyIHdpdGggcmVhZG9ubHkgYXJyYXlzLlxuZXhwb3J0IHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmV4cG9ydCBmdW5jdGlvbiBpc05vbkVtcHR5QXJyYXkodmFsdWUpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID4gMDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFycmF5cy5qcy5tYXAiXSwibmFtZXMiOlsiaXNBcnJheSIsIkFycmF5IiwiaXNOb25FbXB0eUFycmF5IiwidmFsdWUiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/common/arrays.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/common/canUse.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/canUse.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   canUseAsyncIteratorSymbol: () => (/* binding */ canUseAsyncIteratorSymbol),\n/* harmony export */   canUseDOM: () => (/* binding */ canUseDOM),\n/* harmony export */   canUseLayoutEffect: () => (/* binding */ canUseLayoutEffect),\n/* harmony export */   canUseSymbol: () => (/* binding */ canUseSymbol),\n/* harmony export */   canUseWeakMap: () => (/* binding */ canUseWeakMap),\n/* harmony export */   canUseWeakSet: () => (/* binding */ canUseWeakSet)\n/* harmony export */ });\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\nvar canUseWeakMap = typeof WeakMap === \"function\" && !(0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return navigator.product == \"ReactNative\" && !global.HermesInternal;\n});\nvar canUseWeakSet = typeof WeakSet === \"function\";\nvar canUseSymbol = typeof Symbol === \"function\" && typeof Symbol.for === \"function\";\nvar canUseAsyncIteratorSymbol = canUseSymbol && Symbol.asyncIterator;\nvar canUseDOM = typeof (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return window.document.createElement;\n}) === \"function\";\nvar usingJSDOM = // Following advice found in this comment from @domenic (maintainer of jsdom):\n// https://github.com/jsdom/jsdom/issues/1537#issuecomment-229405327\n//\n// Since we control the version of Jest and jsdom used when running Apollo\n// Client tests, and that version is recent enought to include \" jsdom/x.y.z\"\n// at the end of the user agent string, I believe this case is all we need to\n// check. Testing for \"Node.js\" was recommended for backwards compatibility\n// with older version of jsdom, but we don't have that problem.\n(0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return navigator.userAgent.indexOf(\"jsdom\") >= 0;\n}) || false;\n// Our tests should all continue to pass if we remove this !usingJSDOM\n// condition, thereby allowing useLayoutEffect when using jsdom. Unfortunately,\n// if we allow useLayoutEffect, then useSyncExternalStore generates many\n// warnings about useLayoutEffect doing nothing on the server. While these\n// warnings are harmless, this !usingJSDOM condition seems to be the best way to\n// prevent them (i.e. skipping useLayoutEffect when using jsdom).\nvar canUseLayoutEffect = canUseDOM && !usingJSDOM; //# sourceMappingURL=canUse.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9jYW5Vc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUE0QztBQUNyQyxJQUFJQyxnQkFBZ0IsT0FBT0MsWUFBWSxjQUMxQyxDQUFDRix3REFBS0EsQ0FBQztJQUFjLE9BQU9HLFVBQVVDLE9BQU8sSUFBSSxpQkFBaUIsQ0FBQ0MsT0FBT0MsY0FBYztBQUFFLEdBQUc7QUFDMUYsSUFBSUMsZ0JBQWdCLE9BQU9DLFlBQVksV0FBVztBQUNsRCxJQUFJQyxlQUFlLE9BQU9DLFdBQVcsY0FBYyxPQUFPQSxPQUFPQyxHQUFHLEtBQUssV0FBVztBQUNwRixJQUFJQyw0QkFBNEJILGdCQUFnQkMsT0FBT0csYUFBYSxDQUFDO0FBQ3JFLElBQUlDLFlBQVksT0FBT2Qsd0RBQUtBLENBQUM7SUFBYyxPQUFPZSxPQUFPQyxRQUFRLENBQUNDLGFBQWE7QUFBRSxPQUFPLFdBQVc7QUFDMUcsSUFBSUMsYUFDSiw4RUFBOEU7QUFDOUUsb0VBQW9FO0FBQ3BFLEVBQUU7QUFDRiwwRUFBMEU7QUFDMUUsNkVBQTZFO0FBQzdFLDZFQUE2RTtBQUM3RSwyRUFBMkU7QUFDM0UsK0RBQStEO0FBQy9EbEIsd0RBQUtBLENBQUM7SUFBYyxPQUFPRyxVQUFVZ0IsU0FBUyxDQUFDQyxPQUFPLENBQUMsWUFBWTtBQUFHLE1BQU07QUFDNUUsc0VBQXNFO0FBQ3RFLCtFQUErRTtBQUMvRSx3RUFBd0U7QUFDeEUsMEVBQTBFO0FBQzFFLGdGQUFnRjtBQUNoRixpRUFBaUU7QUFDMUQsSUFBSUMscUJBQXFCUCxhQUFhLENBQUNJLFdBQVcsQ0FDekQsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktZG9jcy1mcm9uLWVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9jb21tb24vY2FuVXNlLmpzPzBmNWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWF5YmUgfSBmcm9tIFwiLi4vZ2xvYmFscy9pbmRleC5qc1wiO1xuZXhwb3J0IHZhciBjYW5Vc2VXZWFrTWFwID0gdHlwZW9mIFdlYWtNYXAgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICFtYXliZShmdW5jdGlvbiAoKSB7IHJldHVybiBuYXZpZ2F0b3IucHJvZHVjdCA9PSBcIlJlYWN0TmF0aXZlXCIgJiYgIWdsb2JhbC5IZXJtZXNJbnRlcm5hbDsgfSk7XG5leHBvcnQgdmFyIGNhblVzZVdlYWtTZXQgPSB0eXBlb2YgV2Vha1NldCA9PT0gXCJmdW5jdGlvblwiO1xuZXhwb3J0IHZhciBjYW5Vc2VTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5mb3IgPT09IFwiZnVuY3Rpb25cIjtcbmV4cG9ydCB2YXIgY2FuVXNlQXN5bmNJdGVyYXRvclN5bWJvbCA9IGNhblVzZVN5bWJvbCAmJiBTeW1ib2wuYXN5bmNJdGVyYXRvcjtcbmV4cG9ydCB2YXIgY2FuVXNlRE9NID0gdHlwZW9mIG1heWJlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50OyB9KSA9PT0gXCJmdW5jdGlvblwiO1xudmFyIHVzaW5nSlNET00gPSBcbi8vIEZvbGxvd2luZyBhZHZpY2UgZm91bmQgaW4gdGhpcyBjb21tZW50IGZyb20gQGRvbWVuaWMgKG1haW50YWluZXIgb2YganNkb20pOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pzZG9tL2pzZG9tL2lzc3Vlcy8xNTM3I2lzc3VlY29tbWVudC0yMjk0MDUzMjdcbi8vXG4vLyBTaW5jZSB3ZSBjb250cm9sIHRoZSB2ZXJzaW9uIG9mIEplc3QgYW5kIGpzZG9tIHVzZWQgd2hlbiBydW5uaW5nIEFwb2xsb1xuLy8gQ2xpZW50IHRlc3RzLCBhbmQgdGhhdCB2ZXJzaW9uIGlzIHJlY2VudCBlbm91Z2h0IHRvIGluY2x1ZGUgXCIganNkb20veC55LnpcIlxuLy8gYXQgdGhlIGVuZCBvZiB0aGUgdXNlciBhZ2VudCBzdHJpbmcsIEkgYmVsaWV2ZSB0aGlzIGNhc2UgaXMgYWxsIHdlIG5lZWQgdG9cbi8vIGNoZWNrLiBUZXN0aW5nIGZvciBcIk5vZGUuanNcIiB3YXMgcmVjb21tZW5kZWQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4vLyB3aXRoIG9sZGVyIHZlcnNpb24gb2YganNkb20sIGJ1dCB3ZSBkb24ndCBoYXZlIHRoYXQgcHJvYmxlbS5cbm1heWJlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcImpzZG9tXCIpID49IDA7IH0pIHx8IGZhbHNlO1xuLy8gT3VyIHRlc3RzIHNob3VsZCBhbGwgY29udGludWUgdG8gcGFzcyBpZiB3ZSByZW1vdmUgdGhpcyAhdXNpbmdKU0RPTVxuLy8gY29uZGl0aW9uLCB0aGVyZWJ5IGFsbG93aW5nIHVzZUxheW91dEVmZmVjdCB3aGVuIHVzaW5nIGpzZG9tLiBVbmZvcnR1bmF0ZWx5LFxuLy8gaWYgd2UgYWxsb3cgdXNlTGF5b3V0RWZmZWN0LCB0aGVuIHVzZVN5bmNFeHRlcm5hbFN0b3JlIGdlbmVyYXRlcyBtYW55XG4vLyB3YXJuaW5ncyBhYm91dCB1c2VMYXlvdXRFZmZlY3QgZG9pbmcgbm90aGluZyBvbiB0aGUgc2VydmVyLiBXaGlsZSB0aGVzZVxuLy8gd2FybmluZ3MgYXJlIGhhcm1sZXNzLCB0aGlzICF1c2luZ0pTRE9NIGNvbmRpdGlvbiBzZWVtcyB0byBiZSB0aGUgYmVzdCB3YXkgdG9cbi8vIHByZXZlbnQgdGhlbSAoaS5lLiBza2lwcGluZyB1c2VMYXlvdXRFZmZlY3Qgd2hlbiB1c2luZyBqc2RvbSkuXG5leHBvcnQgdmFyIGNhblVzZUxheW91dEVmZmVjdCA9IGNhblVzZURPTSAmJiAhdXNpbmdKU0RPTTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhblVzZS5qcy5tYXAiXSwibmFtZXMiOlsibWF5YmUiLCJjYW5Vc2VXZWFrTWFwIiwiV2Vha01hcCIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJnbG9iYWwiLCJIZXJtZXNJbnRlcm5hbCIsImNhblVzZVdlYWtTZXQiLCJXZWFrU2V0IiwiY2FuVXNlU3ltYm9sIiwiU3ltYm9sIiwiZm9yIiwiY2FuVXNlQXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJjYW5Vc2VET00iLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ1c2luZ0pTRE9NIiwidXNlckFnZW50IiwiaW5kZXhPZiIsImNhblVzZUxheW91dEVmZmVjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/common/canUse.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/canonicalStringify.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   canonicalStringify: () => (/* binding */ canonicalStringify)\n/* harmony export */ });\n/* harmony import */ var _utilities_caching_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/caching/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/caching/caches.js\");\n/* harmony import */ var _utilities_caching_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/caching/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../caching/getMemoryInternals.js */ \"(rsc)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n\n\n/**\n * Like JSON.stringify, but with object keys always sorted in the same order.\n *\n * To achieve performant sorting, this function uses a Map from JSON-serialized\n * arrays of keys (in any order) to sorted arrays of the same keys, with a\n * single sorted array reference shared by all permutations of the keys.\n *\n * As a drawback, this function will add a little bit more memory for every\n * object encountered that has different (more, less, a different order of) keys\n * than in the past.\n *\n * In a typical application, this extra memory usage should not play a\n * significant role, as `canonicalStringify` will be called for only a limited\n * number of object shapes, and the cache will not grow beyond a certain point.\n * But in some edge cases, this could be a problem, so we provide\n * canonicalStringify.reset() as a way of clearing the cache.\n * */ var canonicalStringify = Object.assign(function canonicalStringify(value) {\n    return JSON.stringify(value, stableObjectReplacer);\n}, {\n    reset: function() {\n        // Clearing the sortingMap will reclaim all cached memory, without\n        // affecting the logical results of canonicalStringify, but potentially\n        // sacrificing performance until the cache is refilled.\n        sortingMap = new _utilities_caching_index_js__WEBPACK_IMPORTED_MODULE_0__.AutoCleanedStrongCache(_utilities_caching_index_js__WEBPACK_IMPORTED_MODULE_1__.cacheSizes.canonicalStringify || 1000 /* defaultCacheSizes.canonicalStringify */ );\n    }\n});\nif (globalThis.__DEV__ !== false) {\n    (0,_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_2__.registerGlobalCache)(\"canonicalStringify\", function() {\n        return sortingMap.size;\n    });\n}\n// Values are JSON-serialized arrays of object keys (in any order), and values\n// are sorted arrays of the same keys.\nvar sortingMap;\ncanonicalStringify.reset();\n// The JSON.stringify function takes an optional second argument called a\n// replacer function. This function is called for each key-value pair in the\n// object being stringified, and its return value is used instead of the\n// original value. If the replacer function returns a new value, that value is\n// stringified as JSON instead of the original value of the property.\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#the_replacer_parameter\nfunction stableObjectReplacer(key, value) {\n    if (value && typeof value === \"object\") {\n        var proto = Object.getPrototypeOf(value);\n        // We don't want to mess with objects that are not \"plain\" objects, which\n        // means their prototype is either Object.prototype or null. This check also\n        // prevents needlessly rearranging the indices of arrays.\n        if (proto === Object.prototype || proto === null) {\n            var keys = Object.keys(value);\n            // If keys is already sorted, let JSON.stringify serialize the original\n            // value instead of creating a new object with keys in the same order.\n            if (keys.every(everyKeyInOrder)) return value;\n            var unsortedKey = JSON.stringify(keys);\n            var sortedKeys = sortingMap.get(unsortedKey);\n            if (!sortedKeys) {\n                keys.sort();\n                var sortedKey = JSON.stringify(keys);\n                // Checking for sortedKey in the sortingMap allows us to share the same\n                // sorted array reference for all permutations of the same set of keys.\n                sortedKeys = sortingMap.get(sortedKey) || keys;\n                sortingMap.set(unsortedKey, sortedKeys);\n                sortingMap.set(sortedKey, sortedKeys);\n            }\n            var sortedObject_1 = Object.create(proto);\n            // Reassigning the keys in sorted order will cause JSON.stringify to\n            // serialize them in sorted order.\n            sortedKeys.forEach(function(key) {\n                sortedObject_1[key] = value[key];\n            });\n            return sortedObject_1;\n        }\n    }\n    return value;\n}\n// Since everything that happens in stableObjectReplacer benefits from being as\n// efficient as possible, we use a static function as the callback for\n// keys.every in order to test if the provided keys are already sorted without\n// allocating extra memory for a callback.\nfunction everyKeyInOrder(key, i, keys) {\n    return i === 0 || keys[i - 1] <= key;\n} //# sourceMappingURL=canonicalStringify.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/common/cloneDeep.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/cloneDeep.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cloneDeep: () => (/* binding */ cloneDeep)\n/* harmony export */ });\nvar toString = Object.prototype.toString;\n/**\n * Deeply clones a value to create a new instance.\n */ function cloneDeep(value) {\n    return cloneDeepHelper(value);\n}\nfunction cloneDeepHelper(val, seen) {\n    switch(toString.call(val)){\n        case \"[object Array]\":\n            {\n                seen = seen || new Map();\n                if (seen.has(val)) return seen.get(val);\n                var copy_1 = val.slice(0);\n                seen.set(val, copy_1);\n                copy_1.forEach(function(child, i) {\n                    copy_1[i] = cloneDeepHelper(child, seen);\n                });\n                return copy_1;\n            }\n        case \"[object Object]\":\n            {\n                seen = seen || new Map();\n                if (seen.has(val)) return seen.get(val);\n                // High fidelity polyfills of Object.create and Object.getPrototypeOf are\n                // possible in all JS environments, so we will assume they exist/work.\n                var copy_2 = Object.create(Object.getPrototypeOf(val));\n                seen.set(val, copy_2);\n                Object.keys(val).forEach(function(key) {\n                    copy_2[key] = cloneDeepHelper(val[key], seen);\n                });\n                return copy_2;\n            }\n        default:\n            return val;\n    }\n} //# sourceMappingURL=cloneDeep.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9jbG9uZURlZXAuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUlBLFdBQVdDLE9BQU9DLFNBQVMsQ0FBQ0YsUUFBUTtBQUN4Qzs7Q0FFQyxHQUNNLFNBQVNHLFVBQVVDLEtBQUs7SUFDM0IsT0FBT0MsZ0JBQWdCRDtBQUMzQjtBQUNBLFNBQVNDLGdCQUFnQkMsR0FBRyxFQUFFQyxJQUFJO0lBQzlCLE9BQVFQLFNBQVNRLElBQUksQ0FBQ0Y7UUFDbEIsS0FBSztZQUFrQjtnQkFDbkJDLE9BQU9BLFFBQVEsSUFBSUU7Z0JBQ25CLElBQUlGLEtBQUtHLEdBQUcsQ0FBQ0osTUFDVCxPQUFPQyxLQUFLSSxHQUFHLENBQUNMO2dCQUNwQixJQUFJTSxTQUFTTixJQUFJTyxLQUFLLENBQUM7Z0JBQ3ZCTixLQUFLTyxHQUFHLENBQUNSLEtBQUtNO2dCQUNkQSxPQUFPRyxPQUFPLENBQUMsU0FBVUMsS0FBSyxFQUFFQyxDQUFDO29CQUM3QkwsTUFBTSxDQUFDSyxFQUFFLEdBQUdaLGdCQUFnQlcsT0FBT1Q7Z0JBQ3ZDO2dCQUNBLE9BQU9LO1lBQ1g7UUFDQSxLQUFLO1lBQW1CO2dCQUNwQkwsT0FBT0EsUUFBUSxJQUFJRTtnQkFDbkIsSUFBSUYsS0FBS0csR0FBRyxDQUFDSixNQUNULE9BQU9DLEtBQUtJLEdBQUcsQ0FBQ0w7Z0JBQ3BCLHlFQUF5RTtnQkFDekUsc0VBQXNFO2dCQUN0RSxJQUFJWSxTQUFTakIsT0FBT2tCLE1BQU0sQ0FBQ2xCLE9BQU9tQixjQUFjLENBQUNkO2dCQUNqREMsS0FBS08sR0FBRyxDQUFDUixLQUFLWTtnQkFDZGpCLE9BQU9vQixJQUFJLENBQUNmLEtBQUtTLE9BQU8sQ0FBQyxTQUFVTyxHQUFHO29CQUNsQ0osTUFBTSxDQUFDSSxJQUFJLEdBQUdqQixnQkFBZ0JDLEdBQUcsQ0FBQ2dCLElBQUksRUFBRWY7Z0JBQzVDO2dCQUNBLE9BQU9XO1lBQ1g7UUFDQTtZQUNJLE9BQU9aO0lBQ2Y7QUFDSixFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL2Nsb25lRGVlcC5qcz84ODQwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG4vKipcbiAqIERlZXBseSBjbG9uZXMgYSB2YWx1ZSB0byBjcmVhdGUgYSBuZXcgaW5zdGFuY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZURlZXAodmFsdWUpIHtcbiAgICByZXR1cm4gY2xvbmVEZWVwSGVscGVyKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGNsb25lRGVlcEhlbHBlcih2YWwsIHNlZW4pIHtcbiAgICBzd2l0Y2ggKHRvU3RyaW5nLmNhbGwodmFsKSkge1xuICAgICAgICBjYXNlIFwiW29iamVjdCBBcnJheV1cIjoge1xuICAgICAgICAgICAgc2VlbiA9IHNlZW4gfHwgbmV3IE1hcCgpO1xuICAgICAgICAgICAgaWYgKHNlZW4uaGFzKHZhbCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlZW4uZ2V0KHZhbCk7XG4gICAgICAgICAgICB2YXIgY29weV8xID0gdmFsLnNsaWNlKDApO1xuICAgICAgICAgICAgc2Vlbi5zZXQodmFsLCBjb3B5XzEpO1xuICAgICAgICAgICAgY29weV8xLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkLCBpKSB7XG4gICAgICAgICAgICAgICAgY29weV8xW2ldID0gY2xvbmVEZWVwSGVscGVyKGNoaWxkLCBzZWVuKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGNvcHlfMTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiW29iamVjdCBPYmplY3RdXCI6IHtcbiAgICAgICAgICAgIHNlZW4gPSBzZWVuIHx8IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIGlmIChzZWVuLmhhcyh2YWwpKVxuICAgICAgICAgICAgICAgIHJldHVybiBzZWVuLmdldCh2YWwpO1xuICAgICAgICAgICAgLy8gSGlnaCBmaWRlbGl0eSBwb2x5ZmlsbHMgb2YgT2JqZWN0LmNyZWF0ZSBhbmQgT2JqZWN0LmdldFByb3RvdHlwZU9mIGFyZVxuICAgICAgICAgICAgLy8gcG9zc2libGUgaW4gYWxsIEpTIGVudmlyb25tZW50cywgc28gd2Ugd2lsbCBhc3N1bWUgdGhleSBleGlzdC93b3JrLlxuICAgICAgICAgICAgdmFyIGNvcHlfMiA9IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbCkpO1xuICAgICAgICAgICAgc2Vlbi5zZXQodmFsLCBjb3B5XzIpO1xuICAgICAgICAgICAgT2JqZWN0LmtleXModmFsKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICBjb3B5XzJba2V5XSA9IGNsb25lRGVlcEhlbHBlcih2YWxba2V5XSwgc2Vlbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBjb3B5XzI7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xvbmVEZWVwLmpzLm1hcCJdLCJuYW1lcyI6WyJ0b1N0cmluZyIsIk9iamVjdCIsInByb3RvdHlwZSIsImNsb25lRGVlcCIsInZhbHVlIiwiY2xvbmVEZWVwSGVscGVyIiwidmFsIiwic2VlbiIsImNhbGwiLCJNYXAiLCJoYXMiLCJnZXQiLCJjb3B5XzEiLCJzbGljZSIsInNldCIsImZvckVhY2giLCJjaGlsZCIsImkiLCJjb3B5XzIiLCJjcmVhdGUiLCJnZXRQcm90b3R5cGVPZiIsImtleXMiLCJrZXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/common/cloneDeep.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/common/compact.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/compact.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compact: () => (/* binding */ compact)\n/* harmony export */ });\n/**\n * Merges the provided objects shallowly and removes\n * all properties with an `undefined` value\n */ function compact() {\n    var objects = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        objects[_i] = arguments[_i];\n    }\n    var result = Object.create(null);\n    objects.forEach(function(obj) {\n        if (!obj) return;\n        Object.keys(obj).forEach(function(key) {\n            var value = obj[key];\n            if (value !== void 0) {\n                result[key] = value;\n            }\n        });\n    });\n    return result;\n} //# sourceMappingURL=compact.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9jb21wYWN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7O0NBR0MsR0FDTSxTQUFTQTtJQUNaLElBQUlDLFVBQVUsRUFBRTtJQUNoQixJQUFLLElBQUlDLEtBQUssR0FBR0EsS0FBS0MsVUFBVUMsTUFBTSxFQUFFRixLQUFNO1FBQzFDRCxPQUFPLENBQUNDLEdBQUcsR0FBR0MsU0FBUyxDQUFDRCxHQUFHO0lBQy9CO0lBQ0EsSUFBSUcsU0FBU0MsT0FBT0MsTUFBTSxDQUFDO0lBQzNCTixRQUFRTyxPQUFPLENBQUMsU0FBVUMsR0FBRztRQUN6QixJQUFJLENBQUNBLEtBQ0Q7UUFDSkgsT0FBT0ksSUFBSSxDQUFDRCxLQUFLRCxPQUFPLENBQUMsU0FBVUcsR0FBRztZQUNsQyxJQUFJQyxRQUFRSCxHQUFHLENBQUNFLElBQUk7WUFDcEIsSUFBSUMsVUFBVSxLQUFLLEdBQUc7Z0JBQ2xCUCxNQUFNLENBQUNNLElBQUksR0FBR0M7WUFDbEI7UUFDSjtJQUNKO0lBQ0EsT0FBT1A7QUFDWCxFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL2NvbXBhY3QuanM/NmU2NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1lcmdlcyB0aGUgcHJvdmlkZWQgb2JqZWN0cyBzaGFsbG93bHkgYW5kIHJlbW92ZXNcbiAqIGFsbCBwcm9wZXJ0aWVzIHdpdGggYW4gYHVuZGVmaW5lZGAgdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhY3QoKSB7XG4gICAgdmFyIG9iamVjdHMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvYmplY3RzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIG9iamVjdHMuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIGlmICghb2JqKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gb2JqW2tleV07XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wYWN0LmpzLm1hcCJdLCJuYW1lcyI6WyJjb21wYWN0Iiwib2JqZWN0cyIsIl9pIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwicmVzdWx0IiwiT2JqZWN0IiwiY3JlYXRlIiwiZm9yRWFjaCIsIm9iaiIsImtleXMiLCJrZXkiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/common/compact.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/common/errorHandling.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/errorHandling.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getGraphQLErrorsFromResult: () => (/* binding */ getGraphQLErrorsFromResult),\n/* harmony export */   graphQLResultHasError: () => (/* binding */ graphQLResultHasError)\n/* harmony export */ });\n/* harmony import */ var _arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrays.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _incrementalResult_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./incrementalResult.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/incrementalResult.js\");\n\n\nfunction graphQLResultHasError(result) {\n    var errors = getGraphQLErrorsFromResult(result);\n    return (0,_arrays_js__WEBPACK_IMPORTED_MODULE_0__.isNonEmptyArray)(errors);\n}\nfunction getGraphQLErrorsFromResult(result) {\n    var graphQLErrors = (0,_arrays_js__WEBPACK_IMPORTED_MODULE_0__.isNonEmptyArray)(result.errors) ? result.errors.slice(0) : [];\n    if ((0,_incrementalResult_js__WEBPACK_IMPORTED_MODULE_1__.isExecutionPatchIncrementalResult)(result) && (0,_arrays_js__WEBPACK_IMPORTED_MODULE_0__.isNonEmptyArray)(result.incremental)) {\n        result.incremental.forEach(function(incrementalResult) {\n            if (incrementalResult.errors) {\n                graphQLErrors.push.apply(graphQLErrors, incrementalResult.errors);\n            }\n        });\n    }\n    return graphQLErrors;\n} //# sourceMappingURL=errorHandling.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9lcnJvckhhbmRsaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBOEM7QUFDNkI7QUFDcEUsU0FBU0Usc0JBQXNCQyxNQUFNO0lBQ3hDLElBQUlDLFNBQVNDLDJCQUEyQkY7SUFDeEMsT0FBT0gsMkRBQWVBLENBQUNJO0FBQzNCO0FBQ08sU0FBU0MsMkJBQTJCRixNQUFNO0lBQzdDLElBQUlHLGdCQUFnQk4sMkRBQWVBLENBQUNHLE9BQU9DLE1BQU0sSUFBSUQsT0FBT0MsTUFBTSxDQUFDRyxLQUFLLENBQUMsS0FBSyxFQUFFO0lBQ2hGLElBQUlOLHdGQUFpQ0EsQ0FBQ0UsV0FDbENILDJEQUFlQSxDQUFDRyxPQUFPSyxXQUFXLEdBQUc7UUFDckNMLE9BQU9LLFdBQVcsQ0FBQ0MsT0FBTyxDQUFDLFNBQVVDLGlCQUFpQjtZQUNsRCxJQUFJQSxrQkFBa0JOLE1BQU0sRUFBRTtnQkFDMUJFLGNBQWNLLElBQUksQ0FBQ0MsS0FBSyxDQUFDTixlQUFlSSxrQkFBa0JOLE1BQU07WUFDcEU7UUFDSjtJQUNKO0lBQ0EsT0FBT0U7QUFDWCxFQUNBLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL2Vycm9ySGFuZGxpbmcuanM/N2VmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc05vbkVtcHR5QXJyYXkgfSBmcm9tIFwiLi9hcnJheXMuanNcIjtcbmltcG9ydCB7IGlzRXhlY3V0aW9uUGF0Y2hJbmNyZW1lbnRhbFJlc3VsdCB9IGZyb20gXCIuL2luY3JlbWVudGFsUmVzdWx0LmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gZ3JhcGhRTFJlc3VsdEhhc0Vycm9yKHJlc3VsdCkge1xuICAgIHZhciBlcnJvcnMgPSBnZXRHcmFwaFFMRXJyb3JzRnJvbVJlc3VsdChyZXN1bHQpO1xuICAgIHJldHVybiBpc05vbkVtcHR5QXJyYXkoZXJyb3JzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRHcmFwaFFMRXJyb3JzRnJvbVJlc3VsdChyZXN1bHQpIHtcbiAgICB2YXIgZ3JhcGhRTEVycm9ycyA9IGlzTm9uRW1wdHlBcnJheShyZXN1bHQuZXJyb3JzKSA/IHJlc3VsdC5lcnJvcnMuc2xpY2UoMCkgOiBbXTtcbiAgICBpZiAoaXNFeGVjdXRpb25QYXRjaEluY3JlbWVudGFsUmVzdWx0KHJlc3VsdCkgJiZcbiAgICAgICAgaXNOb25FbXB0eUFycmF5KHJlc3VsdC5pbmNyZW1lbnRhbCkpIHtcbiAgICAgICAgcmVzdWx0LmluY3JlbWVudGFsLmZvckVhY2goZnVuY3Rpb24gKGluY3JlbWVudGFsUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoaW5jcmVtZW50YWxSZXN1bHQuZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgZ3JhcGhRTEVycm9ycy5wdXNoLmFwcGx5KGdyYXBoUUxFcnJvcnMsIGluY3JlbWVudGFsUmVzdWx0LmVycm9ycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZ3JhcGhRTEVycm9ycztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ySGFuZGxpbmcuanMubWFwIl0sIm5hbWVzIjpbImlzTm9uRW1wdHlBcnJheSIsImlzRXhlY3V0aW9uUGF0Y2hJbmNyZW1lbnRhbFJlc3VsdCIsImdyYXBoUUxSZXN1bHRIYXNFcnJvciIsInJlc3VsdCIsImVycm9ycyIsImdldEdyYXBoUUxFcnJvcnNGcm9tUmVzdWx0IiwiZ3JhcGhRTEVycm9ycyIsInNsaWNlIiwiaW5jcmVtZW50YWwiLCJmb3JFYWNoIiwiaW5jcmVtZW50YWxSZXN1bHQiLCJwdXNoIiwiYXBwbHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/common/errorHandling.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/common/incrementalResult.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/incrementalResult.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isApolloPayloadResult: () => (/* binding */ isApolloPayloadResult),\n/* harmony export */   isExecutionPatchIncrementalResult: () => (/* binding */ isExecutionPatchIncrementalResult),\n/* harmony export */   isExecutionPatchInitialResult: () => (/* binding */ isExecutionPatchInitialResult),\n/* harmony export */   isExecutionPatchResult: () => (/* binding */ isExecutionPatchResult),\n/* harmony export */   mergeIncrementalData: () => (/* binding */ mergeIncrementalData)\n/* harmony export */ });\n/* harmony import */ var _objects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./objects.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _arrays_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./arrays.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n/* harmony import */ var _mergeDeep_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mergeDeep.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\");\n\n\n\nfunction isExecutionPatchIncrementalResult(value) {\n    return \"incremental\" in value;\n}\nfunction isExecutionPatchInitialResult(value) {\n    return \"hasNext\" in value && \"data\" in value;\n}\nfunction isExecutionPatchResult(value) {\n    return isExecutionPatchIncrementalResult(value) || isExecutionPatchInitialResult(value);\n}\n// This function detects an Apollo payload result before it is transformed\n// into a FetchResult via HttpLink; it cannot detect an ApolloPayloadResult\n// once it leaves the link chain.\nfunction isApolloPayloadResult(value) {\n    return (0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(value) && \"payload\" in value;\n}\nfunction mergeIncrementalData(prevResult, result) {\n    var mergedData = prevResult;\n    var merger = new _mergeDeep_js__WEBPACK_IMPORTED_MODULE_1__.DeepMerger();\n    if (isExecutionPatchIncrementalResult(result) && (0,_arrays_js__WEBPACK_IMPORTED_MODULE_2__.isNonEmptyArray)(result.incremental)) {\n        result.incremental.forEach(function(_a) {\n            var data = _a.data, path = _a.path;\n            for(var i = path.length - 1; i >= 0; --i){\n                var key = path[i];\n                var isNumericKey = !isNaN(+key);\n                var parent_1 = isNumericKey ? [] : {};\n                parent_1[key] = data;\n                data = parent_1;\n            }\n            mergedData = merger.merge(mergedData, data);\n        });\n    }\n    return mergedData;\n} //# sourceMappingURL=incrementalResult.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9pbmNyZW1lbnRhbFJlc3VsdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUErQztBQUNEO0FBQ0Y7QUFDckMsU0FBU0csa0NBQWtDQyxLQUFLO0lBQ25ELE9BQU8saUJBQWlCQTtBQUM1QjtBQUNPLFNBQVNDLDhCQUE4QkQsS0FBSztJQUMvQyxPQUFPLGFBQWFBLFNBQVMsVUFBVUE7QUFDM0M7QUFDTyxTQUFTRSx1QkFBdUJGLEtBQUs7SUFDeEMsT0FBUUQsa0NBQWtDQyxVQUN0Q0MsOEJBQThCRDtBQUN0QztBQUNBLDBFQUEwRTtBQUMxRSwyRUFBMkU7QUFDM0UsaUNBQWlDO0FBQzFCLFNBQVNHLHNCQUFzQkgsS0FBSztJQUN2QyxPQUFPSiw0REFBZUEsQ0FBQ0ksVUFBVSxhQUFhQTtBQUNsRDtBQUNPLFNBQVNJLHFCQUFxQkMsVUFBVSxFQUFFQyxNQUFNO0lBQ25ELElBQUlDLGFBQWFGO0lBQ2pCLElBQUlHLFNBQVMsSUFBSVYscURBQVVBO0lBQzNCLElBQUlDLGtDQUFrQ08sV0FDbENULDJEQUFlQSxDQUFDUyxPQUFPRyxXQUFXLEdBQUc7UUFDckNILE9BQU9HLFdBQVcsQ0FBQ0MsT0FBTyxDQUFDLFNBQVVDLEVBQUU7WUFDbkMsSUFBSUMsT0FBT0QsR0FBR0MsSUFBSSxFQUFFQyxPQUFPRixHQUFHRSxJQUFJO1lBQ2xDLElBQUssSUFBSUMsSUFBSUQsS0FBS0UsTUFBTSxHQUFHLEdBQUdELEtBQUssR0FBRyxFQUFFQSxFQUFHO2dCQUN2QyxJQUFJRSxNQUFNSCxJQUFJLENBQUNDLEVBQUU7Z0JBQ2pCLElBQUlHLGVBQWUsQ0FBQ0MsTUFBTSxDQUFDRjtnQkFDM0IsSUFBSUcsV0FBV0YsZUFBZSxFQUFFLEdBQUcsQ0FBQztnQkFDcENFLFFBQVEsQ0FBQ0gsSUFBSSxHQUFHSjtnQkFDaEJBLE9BQU9PO1lBQ1g7WUFDQVosYUFBYUMsT0FBT1ksS0FBSyxDQUFDYixZQUFZSztRQUMxQztJQUNKO0lBQ0EsT0FBT0w7QUFDWCxFQUNBLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL2luY3JlbWVudGFsUmVzdWx0LmpzPzJiODkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNOb25OdWxsT2JqZWN0IH0gZnJvbSBcIi4vb2JqZWN0cy5qc1wiO1xuaW1wb3J0IHsgaXNOb25FbXB0eUFycmF5IH0gZnJvbSBcIi4vYXJyYXlzLmpzXCI7XG5pbXBvcnQgeyBEZWVwTWVyZ2VyIH0gZnJvbSBcIi4vbWVyZ2VEZWVwLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNFeGVjdXRpb25QYXRjaEluY3JlbWVudGFsUmVzdWx0KHZhbHVlKSB7XG4gICAgcmV0dXJuIFwiaW5jcmVtZW50YWxcIiBpbiB2YWx1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0V4ZWN1dGlvblBhdGNoSW5pdGlhbFJlc3VsdCh2YWx1ZSkge1xuICAgIHJldHVybiBcImhhc05leHRcIiBpbiB2YWx1ZSAmJiBcImRhdGFcIiBpbiB2YWx1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0V4ZWN1dGlvblBhdGNoUmVzdWx0KHZhbHVlKSB7XG4gICAgcmV0dXJuIChpc0V4ZWN1dGlvblBhdGNoSW5jcmVtZW50YWxSZXN1bHQodmFsdWUpIHx8XG4gICAgICAgIGlzRXhlY3V0aW9uUGF0Y2hJbml0aWFsUmVzdWx0KHZhbHVlKSk7XG59XG4vLyBUaGlzIGZ1bmN0aW9uIGRldGVjdHMgYW4gQXBvbGxvIHBheWxvYWQgcmVzdWx0IGJlZm9yZSBpdCBpcyB0cmFuc2Zvcm1lZFxuLy8gaW50byBhIEZldGNoUmVzdWx0IHZpYSBIdHRwTGluazsgaXQgY2Fubm90IGRldGVjdCBhbiBBcG9sbG9QYXlsb2FkUmVzdWx0XG4vLyBvbmNlIGl0IGxlYXZlcyB0aGUgbGluayBjaGFpbi5cbmV4cG9ydCBmdW5jdGlvbiBpc0Fwb2xsb1BheWxvYWRSZXN1bHQodmFsdWUpIHtcbiAgICByZXR1cm4gaXNOb25OdWxsT2JqZWN0KHZhbHVlKSAmJiBcInBheWxvYWRcIiBpbiB2YWx1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUluY3JlbWVudGFsRGF0YShwcmV2UmVzdWx0LCByZXN1bHQpIHtcbiAgICB2YXIgbWVyZ2VkRGF0YSA9IHByZXZSZXN1bHQ7XG4gICAgdmFyIG1lcmdlciA9IG5ldyBEZWVwTWVyZ2VyKCk7XG4gICAgaWYgKGlzRXhlY3V0aW9uUGF0Y2hJbmNyZW1lbnRhbFJlc3VsdChyZXN1bHQpICYmXG4gICAgICAgIGlzTm9uRW1wdHlBcnJheShyZXN1bHQuaW5jcmVtZW50YWwpKSB7XG4gICAgICAgIHJlc3VsdC5pbmNyZW1lbnRhbC5mb3JFYWNoKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBfYS5kYXRhLCBwYXRoID0gX2EucGF0aDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IHBhdGhbaV07XG4gICAgICAgICAgICAgICAgdmFyIGlzTnVtZXJpY0tleSA9ICFpc05hTigra2V5KTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50XzEgPSBpc051bWVyaWNLZXkgPyBbXSA6IHt9O1xuICAgICAgICAgICAgICAgIHBhcmVudF8xW2tleV0gPSBkYXRhO1xuICAgICAgICAgICAgICAgIGRhdGEgPSBwYXJlbnRfMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1lcmdlZERhdGEgPSBtZXJnZXIubWVyZ2UobWVyZ2VkRGF0YSwgZGF0YSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VkRGF0YTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluY3JlbWVudGFsUmVzdWx0LmpzLm1hcCJdLCJuYW1lcyI6WyJpc05vbk51bGxPYmplY3QiLCJpc05vbkVtcHR5QXJyYXkiLCJEZWVwTWVyZ2VyIiwiaXNFeGVjdXRpb25QYXRjaEluY3JlbWVudGFsUmVzdWx0IiwidmFsdWUiLCJpc0V4ZWN1dGlvblBhdGNoSW5pdGlhbFJlc3VsdCIsImlzRXhlY3V0aW9uUGF0Y2hSZXN1bHQiLCJpc0Fwb2xsb1BheWxvYWRSZXN1bHQiLCJtZXJnZUluY3JlbWVudGFsRGF0YSIsInByZXZSZXN1bHQiLCJyZXN1bHQiLCJtZXJnZWREYXRhIiwibWVyZ2VyIiwiaW5jcmVtZW50YWwiLCJmb3JFYWNoIiwiX2EiLCJkYXRhIiwicGF0aCIsImkiLCJsZW5ndGgiLCJrZXkiLCJpc051bWVyaWNLZXkiLCJpc05hTiIsInBhcmVudF8xIiwibWVyZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/common/incrementalResult.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/common/makeUniqueId.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/makeUniqueId.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeUniqueId: () => (/* binding */ makeUniqueId)\n/* harmony export */ });\nvar prefixCounts = new Map();\n// These IDs won't be globally unique, but they will be unique within this\n// process, thanks to the counter, and unguessable thanks to the random suffix.\nfunction makeUniqueId(prefix) {\n    var count = prefixCounts.get(prefix) || 1;\n    prefixCounts.set(prefix, count + 1);\n    return \"\".concat(prefix, \":\").concat(count, \":\").concat(Math.random().toString(36).slice(2));\n} //# sourceMappingURL=makeUniqueId.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9tYWtlVW5pcXVlSWQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUlBLGVBQWUsSUFBSUM7QUFDdkIsMEVBQTBFO0FBQzFFLCtFQUErRTtBQUN4RSxTQUFTQyxhQUFhQyxNQUFNO0lBQy9CLElBQUlDLFFBQVFKLGFBQWFLLEdBQUcsQ0FBQ0YsV0FBVztJQUN4Q0gsYUFBYU0sR0FBRyxDQUFDSCxRQUFRQyxRQUFRO0lBQ2pDLE9BQU8sR0FBR0csTUFBTSxDQUFDSixRQUFRLEtBQUtJLE1BQU0sQ0FBQ0gsT0FBTyxLQUFLRyxNQUFNLENBQUNDLEtBQUtDLE1BQU0sR0FBR0MsUUFBUSxDQUFDLElBQUlDLEtBQUssQ0FBQztBQUM3RixFQUNBLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL21ha2VVbmlxdWVJZC5qcz8yOWFhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBwcmVmaXhDb3VudHMgPSBuZXcgTWFwKCk7XG4vLyBUaGVzZSBJRHMgd29uJ3QgYmUgZ2xvYmFsbHkgdW5pcXVlLCBidXQgdGhleSB3aWxsIGJlIHVuaXF1ZSB3aXRoaW4gdGhpc1xuLy8gcHJvY2VzcywgdGhhbmtzIHRvIHRoZSBjb3VudGVyLCBhbmQgdW5ndWVzc2FibGUgdGhhbmtzIHRvIHRoZSByYW5kb20gc3VmZml4LlxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VVbmlxdWVJZChwcmVmaXgpIHtcbiAgICB2YXIgY291bnQgPSBwcmVmaXhDb3VudHMuZ2V0KHByZWZpeCkgfHwgMTtcbiAgICBwcmVmaXhDb3VudHMuc2V0KHByZWZpeCwgY291bnQgKyAxKTtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQocHJlZml4LCBcIjpcIikuY29uY2F0KGNvdW50LCBcIjpcIikuY29uY2F0KE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1ha2VVbmlxdWVJZC5qcy5tYXAiXSwibmFtZXMiOlsicHJlZml4Q291bnRzIiwiTWFwIiwibWFrZVVuaXF1ZUlkIiwicHJlZml4IiwiY291bnQiLCJnZXQiLCJzZXQiLCJjb25jYXQiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJzbGljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/common/makeUniqueId.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maybeDeepFreeze: () => (/* binding */ maybeDeepFreeze)\n/* harmony export */ });\n/* harmony import */ var _objects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./objects.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/objects.js\");\n\nfunction deepFreeze(value) {\n    var workSet = new Set([\n        value\n    ]);\n    workSet.forEach(function(obj) {\n        if ((0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(obj) && shallowFreeze(obj) === obj) {\n            Object.getOwnPropertyNames(obj).forEach(function(name) {\n                if ((0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(obj[name])) workSet.add(obj[name]);\n            });\n        }\n    });\n    return value;\n}\nfunction shallowFreeze(obj) {\n    if (globalThis.__DEV__ !== false && !Object.isFrozen(obj)) {\n        try {\n            Object.freeze(obj);\n        } catch (e) {\n            // Some types like Uint8Array and Node.js's Buffer cannot be frozen, but\n            // they all throw a TypeError when you try, so we re-throw any exceptions\n            // that are not TypeErrors, since that would be unexpected.\n            if (e instanceof TypeError) return null;\n            throw e;\n        }\n    }\n    return obj;\n}\nfunction maybeDeepFreeze(obj) {\n    if (globalThis.__DEV__ !== false) {\n        deepFreeze(obj);\n    }\n    return obj;\n} //# sourceMappingURL=maybeDeepFreeze.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9tYXliZURlZXBGcmVlemUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0M7QUFDL0MsU0FBU0MsV0FBV0MsS0FBSztJQUNyQixJQUFJQyxVQUFVLElBQUlDLElBQUk7UUFBQ0Y7S0FBTTtJQUM3QkMsUUFBUUUsT0FBTyxDQUFDLFNBQVVDLEdBQUc7UUFDekIsSUFBSU4sNERBQWVBLENBQUNNLFFBQVFDLGNBQWNELFNBQVNBLEtBQUs7WUFDcERFLE9BQU9DLG1CQUFtQixDQUFDSCxLQUFLRCxPQUFPLENBQUMsU0FBVUssSUFBSTtnQkFDbEQsSUFBSVYsNERBQWVBLENBQUNNLEdBQUcsQ0FBQ0ksS0FBSyxHQUN6QlAsUUFBUVEsR0FBRyxDQUFDTCxHQUFHLENBQUNJLEtBQUs7WUFDN0I7UUFDSjtJQUNKO0lBQ0EsT0FBT1I7QUFDWDtBQUNBLFNBQVNLLGNBQWNELEdBQUc7SUFDdEIsSUFBSU0sV0FBV0MsT0FBTyxLQUFLLFNBQVMsQ0FBQ0wsT0FBT00sUUFBUSxDQUFDUixNQUFNO1FBQ3ZELElBQUk7WUFDQUUsT0FBT08sTUFBTSxDQUFDVDtRQUNsQixFQUNBLE9BQU9VLEdBQUc7WUFDTix3RUFBd0U7WUFDeEUseUVBQXlFO1lBQ3pFLDJEQUEyRDtZQUMzRCxJQUFJQSxhQUFhQyxXQUNiLE9BQU87WUFDWCxNQUFNRDtRQUNWO0lBQ0o7SUFDQSxPQUFPVjtBQUNYO0FBQ08sU0FBU1ksZ0JBQWdCWixHQUFHO0lBQy9CLElBQUlNLFdBQVdDLE9BQU8sS0FBSyxPQUFPO1FBQzlCWixXQUFXSztJQUNmO0lBQ0EsT0FBT0E7QUFDWCxFQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL21heWJlRGVlcEZyZWV6ZS5qcz80NWQ1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzTm9uTnVsbE9iamVjdCB9IGZyb20gXCIuL29iamVjdHMuanNcIjtcbmZ1bmN0aW9uIGRlZXBGcmVlemUodmFsdWUpIHtcbiAgICB2YXIgd29ya1NldCA9IG5ldyBTZXQoW3ZhbHVlXSk7XG4gICAgd29ya1NldC5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgaWYgKGlzTm9uTnVsbE9iamVjdChvYmopICYmIHNoYWxsb3dGcmVlemUob2JqKSA9PT0gb2JqKSB7XG4gICAgICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNOb25OdWxsT2JqZWN0KG9ialtuYW1lXSkpXG4gICAgICAgICAgICAgICAgICAgIHdvcmtTZXQuYWRkKG9ialtuYW1lXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHNoYWxsb3dGcmVlemUob2JqKSB7XG4gICAgaWYgKGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2UgJiYgIU9iamVjdC5pc0Zyb3plbihvYmopKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBPYmplY3QuZnJlZXplKG9iaik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIFNvbWUgdHlwZXMgbGlrZSBVaW50OEFycmF5IGFuZCBOb2RlLmpzJ3MgQnVmZmVyIGNhbm5vdCBiZSBmcm96ZW4sIGJ1dFxuICAgICAgICAgICAgLy8gdGhleSBhbGwgdGhyb3cgYSBUeXBlRXJyb3Igd2hlbiB5b3UgdHJ5LCBzbyB3ZSByZS10aHJvdyBhbnkgZXhjZXB0aW9uc1xuICAgICAgICAgICAgLy8gdGhhdCBhcmUgbm90IFR5cGVFcnJvcnMsIHNpbmNlIHRoYXQgd291bGQgYmUgdW5leHBlY3RlZC5cbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgVHlwZUVycm9yKVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1heWJlRGVlcEZyZWV6ZShvYmopIHtcbiAgICBpZiAoZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSkge1xuICAgICAgICBkZWVwRnJlZXplKG9iaik7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXliZURlZXBGcmVlemUuanMubWFwIl0sIm5hbWVzIjpbImlzTm9uTnVsbE9iamVjdCIsImRlZXBGcmVlemUiLCJ2YWx1ZSIsIndvcmtTZXQiLCJTZXQiLCJmb3JFYWNoIiwib2JqIiwic2hhbGxvd0ZyZWV6ZSIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJuYW1lIiwiYWRkIiwiZ2xvYmFsVGhpcyIsIl9fREVWX18iLCJpc0Zyb3plbiIsImZyZWV6ZSIsImUiLCJUeXBlRXJyb3IiLCJtYXliZURlZXBGcmVlemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/common/mergeDeep.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/mergeDeep.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeepMerger: () => (/* binding */ DeepMerger),\n/* harmony export */   mergeDeep: () => (/* binding */ mergeDeep),\n/* harmony export */   mergeDeepArray: () => (/* binding */ mergeDeepArray)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _objects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./objects.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/objects.js\");\n\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction mergeDeep() {\n    var sources = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        sources[_i] = arguments[_i];\n    }\n    return mergeDeepArray(sources);\n}\n// In almost any situation where you could succeed in getting the\n// TypeScript compiler to infer a tuple type for the sources array, you\n// could just use mergeDeep instead of mergeDeepArray, so instead of\n// trying to convert T[] to an intersection type we just infer the array\n// element type, which works perfectly when the sources array has a\n// consistent element type.\nfunction mergeDeepArray(sources) {\n    var target = sources[0] || {};\n    var count = sources.length;\n    if (count > 1) {\n        var merger = new DeepMerger();\n        for(var i = 1; i < count; ++i){\n            target = merger.merge(target, sources[i]);\n        }\n    }\n    return target;\n}\nvar defaultReconciler = function(target, source, property) {\n    return this.merge(target[property], source[property]);\n};\nvar DeepMerger = /** @class */ function() {\n    function DeepMerger(reconciler) {\n        if (reconciler === void 0) {\n            reconciler = defaultReconciler;\n        }\n        this.reconciler = reconciler;\n        this.isObject = _objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject;\n        this.pastCopies = new Set();\n    }\n    DeepMerger.prototype.merge = function(target, source) {\n        var _this = this;\n        var context = [];\n        for(var _i = 2; _i < arguments.length; _i++){\n            context[_i - 2] = arguments[_i];\n        }\n        if ((0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(source) && (0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(target)) {\n            Object.keys(source).forEach(function(sourceKey) {\n                if (hasOwnProperty.call(target, sourceKey)) {\n                    var targetValue = target[sourceKey];\n                    if (source[sourceKey] !== targetValue) {\n                        var result = _this.reconciler.apply(_this, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([\n                            target,\n                            source,\n                            sourceKey\n                        ], context, false));\n                        // A well-implemented reconciler may return targetValue to indicate\n                        // the merge changed nothing about the structure of the target.\n                        if (result !== targetValue) {\n                            target = _this.shallowCopyForMerge(target);\n                            target[sourceKey] = result;\n                        }\n                    }\n                } else {\n                    // If there is no collision, the target can safely share memory with\n                    // the source, and the recursion can terminate here.\n                    target = _this.shallowCopyForMerge(target);\n                    target[sourceKey] = source[sourceKey];\n                }\n            });\n            return target;\n        }\n        // If source (or target) is not an object, let source replace target.\n        return source;\n    };\n    DeepMerger.prototype.shallowCopyForMerge = function(value) {\n        if ((0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(value)) {\n            if (!this.pastCopies.has(value)) {\n                if (Array.isArray(value)) {\n                    value = value.slice(0);\n                } else {\n                    value = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n                        __proto__: Object.getPrototypeOf(value)\n                    }, value);\n                }\n                this.pastCopies.add(value);\n            }\n        }\n        return value;\n    };\n    return DeepMerger;\n}();\n //# sourceMappingURL=mergeDeep.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/common/mergeDeep.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/common/mergeOptions.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/mergeOptions.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeOptions: () => (/* binding */ mergeOptions)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _compact_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./compact.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/compact.js\");\n\n\nfunction mergeOptions(defaults, options) {\n    return (0,_compact_js__WEBPACK_IMPORTED_MODULE_0__.compact)(defaults, options, options.variables && {\n        variables: (0,_compact_js__WEBPACK_IMPORTED_MODULE_0__.compact)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, defaults && defaults.variables), options.variables))\n    });\n} //# sourceMappingURL=mergeOptions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9tZXJnZU9wdGlvbnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ007QUFDaEMsU0FBU0UsYUFBYUMsUUFBUSxFQUFFQyxPQUFPO0lBQzFDLE9BQU9ILG9EQUFPQSxDQUFDRSxVQUFVQyxTQUFTQSxRQUFRQyxTQUFTLElBQUk7UUFDbkRBLFdBQVdKLG9EQUFPQSxDQUFDRCwrQ0FBUUEsQ0FBQ0EsK0NBQVFBLENBQUMsQ0FBQyxHQUFJRyxZQUFZQSxTQUFTRSxTQUFTLEdBQUlELFFBQVFDLFNBQVM7SUFDakc7QUFDSixFQUNBLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvY29tbW9uL21lcmdlT3B0aW9ucy5qcz8wMmJkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBjb21wYWN0IH0gZnJvbSBcIi4vY29tcGFjdC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlT3B0aW9ucyhkZWZhdWx0cywgb3B0aW9ucykge1xuICAgIHJldHVybiBjb21wYWN0KGRlZmF1bHRzLCBvcHRpb25zLCBvcHRpb25zLnZhcmlhYmxlcyAmJiB7XG4gICAgICAgIHZhcmlhYmxlczogY29tcGFjdChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgKGRlZmF1bHRzICYmIGRlZmF1bHRzLnZhcmlhYmxlcykpLCBvcHRpb25zLnZhcmlhYmxlcykpLFxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VPcHRpb25zLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsImNvbXBhY3QiLCJtZXJnZU9wdGlvbnMiLCJkZWZhdWx0cyIsIm9wdGlvbnMiLCJ2YXJpYWJsZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/common/mergeOptions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/common/objects.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/objects.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNonNullObject: () => (/* binding */ isNonNullObject),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject)\n/* harmony export */ });\nfunction isNonNullObject(obj) {\n    return obj !== null && typeof obj === \"object\";\n}\nfunction isPlainObject(obj) {\n    return obj !== null && typeof obj === \"object\" && (Object.getPrototypeOf(obj) === Object.prototype || Object.getPrototypeOf(obj) === null);\n} //# sourceMappingURL=objects.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9vYmplY3RzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sU0FBU0EsZ0JBQWdCQyxHQUFHO0lBQy9CLE9BQU9BLFFBQVEsUUFBUSxPQUFPQSxRQUFRO0FBQzFDO0FBQ08sU0FBU0MsY0FBY0QsR0FBRztJQUM3QixPQUFRQSxRQUFRLFFBQ1osT0FBT0EsUUFBUSxZQUNkRSxDQUFBQSxPQUFPQyxjQUFjLENBQUNILFNBQVNFLE9BQU9FLFNBQVMsSUFDNUNGLE9BQU9DLGNBQWMsQ0FBQ0gsU0FBUyxJQUFHO0FBQzlDLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktZG9jcy1mcm9uLWVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9jb21tb24vb2JqZWN0cy5qcz8yMTU4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpc05vbk51bGxPYmplY3Qob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gICAgcmV0dXJuIChvYmogIT09IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAoT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IE9iamVjdC5wcm90b3R5cGUgfHxcbiAgICAgICAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBudWxsKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYmplY3RzLmpzLm1hcCJdLCJuYW1lcyI6WyJpc05vbk51bGxPYmplY3QiLCJvYmoiLCJpc1BsYWluT2JqZWN0IiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/common/objects.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stringifyForDisplay: () => (/* binding */ stringifyForDisplay)\n/* harmony export */ });\n/* harmony import */ var _makeUniqueId_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./makeUniqueId.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/makeUniqueId.js\");\n\nfunction stringifyForDisplay(value, space) {\n    if (space === void 0) {\n        space = 0;\n    }\n    var undefId = (0,_makeUniqueId_js__WEBPACK_IMPORTED_MODULE_0__.makeUniqueId)(\"stringifyForDisplay\");\n    return JSON.stringify(value, function(key, value) {\n        return value === void 0 ? undefId : value;\n    }, space).split(JSON.stringify(undefId)).join(\"<undefined>\");\n} //# sourceMappingURL=stringifyForDisplay.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2NvbW1vbi9zdHJpbmdpZnlGb3JEaXNwbGF5LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWlEO0FBQzFDLFNBQVNDLG9CQUFvQkMsS0FBSyxFQUFFQyxLQUFLO0lBQzVDLElBQUlBLFVBQVUsS0FBSyxHQUFHO1FBQUVBLFFBQVE7SUFBRztJQUNuQyxJQUFJQyxVQUFVSiw4REFBWUEsQ0FBQztJQUMzQixPQUFPSyxLQUFLQyxTQUFTLENBQUNKLE9BQU8sU0FBVUssR0FBRyxFQUFFTCxLQUFLO1FBQzdDLE9BQU9BLFVBQVUsS0FBSyxJQUFJRSxVQUFVRjtJQUN4QyxHQUFHQyxPQUNFSyxLQUFLLENBQUNILEtBQUtDLFNBQVMsQ0FBQ0YsVUFDckJLLElBQUksQ0FBQztBQUNkLEVBQ0EsK0NBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktZG9jcy1mcm9uLWVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9jb21tb24vc3RyaW5naWZ5Rm9yRGlzcGxheS5qcz8yMmM1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1ha2VVbmlxdWVJZCB9IGZyb20gXCIuL21ha2VVbmlxdWVJZC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeUZvckRpc3BsYXkodmFsdWUsIHNwYWNlKSB7XG4gICAgaWYgKHNwYWNlID09PSB2b2lkIDApIHsgc3BhY2UgPSAwOyB9XG4gICAgdmFyIHVuZGVmSWQgPSBtYWtlVW5pcXVlSWQoXCJzdHJpbmdpZnlGb3JEaXNwbGF5XCIpO1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB2b2lkIDAgPyB1bmRlZklkIDogdmFsdWU7XG4gICAgfSwgc3BhY2UpXG4gICAgICAgIC5zcGxpdChKU09OLnN0cmluZ2lmeSh1bmRlZklkKSlcbiAgICAgICAgLmpvaW4oXCI8dW5kZWZpbmVkPlwiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmluZ2lmeUZvckRpc3BsYXkuanMubWFwIl0sIm5hbWVzIjpbIm1ha2VVbmlxdWVJZCIsInN0cmluZ2lmeUZvckRpc3BsYXkiLCJ2YWx1ZSIsInNwYWNlIiwidW5kZWZJZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJrZXkiLCJzcGxpdCIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/globals/global.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/globals/global.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _maybe_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./maybe.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/maybe.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return globalThis;\n}) || (0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return window;\n}) || (0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return self;\n}) || (0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return global;\n}) || // We don't expect the Function constructor ever to be invoked at runtime, as\n// long as at least one of globalThis, window, self, or global is defined, so\n// we are under no obligation to make it easy for static analysis tools to\n// detect syntactic usage of the Function constructor. If you think you can\n// improve your static analysis to detect this obfuscation, think again. This\n// is an arms race you cannot win, at least not in JavaScript.\n(0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function() {\n    return _maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe.constructor(\"return this\")();\n})); //# sourceMappingURL=global.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvZ2xvYmFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW1DO0FBQ25DLGlFQUFnQkEsZ0RBQUtBLENBQUM7SUFBYyxPQUFPQztBQUFZLE1BQ25ERCxnREFBS0EsQ0FBQztJQUFjLE9BQU9FO0FBQVEsTUFDbkNGLGdEQUFLQSxDQUFDO0lBQWMsT0FBT0c7QUFBTSxNQUNqQ0gsZ0RBQUtBLENBQUM7SUFBYyxPQUFPSTtBQUFRLE1BQU0sNkVBQTZFO0FBQzFILDZFQUE2RTtBQUM3RSwwRUFBMEU7QUFDMUUsMkVBQTJFO0FBQzNFLDZFQUE2RTtBQUM3RSw4REFBOEQ7QUFDOURKLGdEQUFLQSxDQUFDO0lBQ0YsT0FBT0EsNENBQUtBLENBQUNLLFdBQVcsQ0FBQztBQUM3QixFQUFFLEVBQUUsQ0FDSixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvZ2xvYmFsLmpzPzg0ODgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWF5YmUgfSBmcm9tIFwiLi9tYXliZS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgKG1heWJlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdsb2JhbFRoaXM7IH0pIHx8XG4gICAgbWF5YmUoZnVuY3Rpb24gKCkgeyByZXR1cm4gd2luZG93OyB9KSB8fFxuICAgIG1heWJlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlbGY7IH0pIHx8XG4gICAgbWF5YmUoZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2xvYmFsOyB9KSB8fCAvLyBXZSBkb24ndCBleHBlY3QgdGhlIEZ1bmN0aW9uIGNvbnN0cnVjdG9yIGV2ZXIgdG8gYmUgaW52b2tlZCBhdCBydW50aW1lLCBhc1xuLy8gbG9uZyBhcyBhdCBsZWFzdCBvbmUgb2YgZ2xvYmFsVGhpcywgd2luZG93LCBzZWxmLCBvciBnbG9iYWwgaXMgZGVmaW5lZCwgc29cbi8vIHdlIGFyZSB1bmRlciBubyBvYmxpZ2F0aW9uIHRvIG1ha2UgaXQgZWFzeSBmb3Igc3RhdGljIGFuYWx5c2lzIHRvb2xzIHRvXG4vLyBkZXRlY3Qgc3ludGFjdGljIHVzYWdlIG9mIHRoZSBGdW5jdGlvbiBjb25zdHJ1Y3Rvci4gSWYgeW91IHRoaW5rIHlvdSBjYW5cbi8vIGltcHJvdmUgeW91ciBzdGF0aWMgYW5hbHlzaXMgdG8gZGV0ZWN0IHRoaXMgb2JmdXNjYXRpb24sIHRoaW5rIGFnYWluLiBUaGlzXG4vLyBpcyBhbiBhcm1zIHJhY2UgeW91IGNhbm5vdCB3aW4sIGF0IGxlYXN0IG5vdCBpbiBKYXZhU2NyaXB0LlxubWF5YmUoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBtYXliZS5jb25zdHJ1Y3RvcihcInJldHVybiB0aGlzXCIpKCk7XG59KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nbG9iYWwuanMubWFwIl0sIm5hbWVzIjpbIm1heWJlIiwiZ2xvYmFsVGhpcyIsIndpbmRvdyIsInNlbGYiLCJnbG9iYWwiLCJjb25zdHJ1Y3RvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/globals/global.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/globals/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/globals/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEV: () => (/* binding */ DEV),\n/* harmony export */   InvariantError: () => (/* reexport safe */ _invariantWrappers_js__WEBPACK_IMPORTED_MODULE_0__.InvariantError),\n/* harmony export */   __DEV__: () => (/* binding */ DEV),\n/* harmony export */   global: () => (/* reexport safe */ _global_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   invariant: () => (/* reexport safe */ _invariantWrappers_js__WEBPACK_IMPORTED_MODULE_0__.invariant),\n/* harmony export */   maybe: () => (/* reexport safe */ _maybe_js__WEBPACK_IMPORTED_MODULE_1__.maybe),\n/* harmony export */   newInvariantError: () => (/* reexport safe */ _invariantWrappers_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)\n/* harmony export */ });\n/* harmony import */ var _invariantWrappers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./invariantWrappers.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/invariantWrappers.js\");\n/* harmony import */ var _maybe_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./maybe.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/maybe.js\");\n/* harmony import */ var _global_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./global.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/global.js\");\n\n\n\n\n/**\n * @deprecated we do not use this internally anymore,\n * it is just exported for backwards compatibility\n */ // this file is extempt from automatic `__DEV__` replacement\n// so we have to write it out here\n// @ts-ignore\nvar DEV = globalThis.__DEV__ !== false;\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUF1RjtBQUNwRDtBQUNhO0FBQ1E7QUFDeEQ7OztDQUdDLEdBQ0QsNERBQTREO0FBQzVELGtDQUFrQztBQUNsQyxhQUFhO0FBQ04sSUFBSU0sTUFBTUMsV0FBV0MsT0FBTyxLQUFLLE1BQU07QUFDcEIsQ0FDMUIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktZG9jcy1mcm9uLWVuZC1uZXh0Ly4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vY2xpZW50L3V0aWxpdGllcy9nbG9iYWxzL2luZGV4LmpzP2QzODIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW52YXJpYW50LCBuZXdJbnZhcmlhbnRFcnJvciwgSW52YXJpYW50RXJyb3IsIH0gZnJvbSBcIi4vaW52YXJpYW50V3JhcHBlcnMuanNcIjtcbmV4cG9ydCB7IG1heWJlIH0gZnJvbSBcIi4vbWF5YmUuanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZ2xvYmFsIH0gZnJvbSBcIi4vZ2xvYmFsLmpzXCI7XG5leHBvcnQgeyBpbnZhcmlhbnQsIG5ld0ludmFyaWFudEVycm9yLCBJbnZhcmlhbnRFcnJvciB9O1xuLyoqXG4gKiBAZGVwcmVjYXRlZCB3ZSBkbyBub3QgdXNlIHRoaXMgaW50ZXJuYWxseSBhbnltb3JlLFxuICogaXQgaXMganVzdCBleHBvcnRlZCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAqL1xuLy8gdGhpcyBmaWxlIGlzIGV4dGVtcHQgZnJvbSBhdXRvbWF0aWMgYF9fREVWX19gIHJlcGxhY2VtZW50XG4vLyBzbyB3ZSBoYXZlIHRvIHdyaXRlIGl0IG91dCBoZXJlXG4vLyBAdHMtaWdub3JlXG5leHBvcnQgdmFyIERFViA9IGdsb2JhbFRoaXMuX19ERVZfXyAhPT0gZmFsc2U7XG5leHBvcnQgeyBERVYgYXMgX19ERVZfXyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbImludmFyaWFudCIsIm5ld0ludmFyaWFudEVycm9yIiwiSW52YXJpYW50RXJyb3IiLCJtYXliZSIsImRlZmF1bHQiLCJnbG9iYWwiLCJERVYiLCJnbG9iYWxUaGlzIiwiX19ERVZfXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/globals/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/globals/invariantWrappers.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/globals/invariantWrappers.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloErrorMessageHandler: () => (/* binding */ ApolloErrorMessageHandler),\n/* harmony export */   InvariantError: () => (/* reexport safe */ ts_invariant__WEBPACK_IMPORTED_MODULE_0__.InvariantError),\n/* harmony export */   invariant: () => (/* binding */ invariant),\n/* harmony export */   newInvariantError: () => (/* binding */ newInvariantError)\n/* harmony export */ });\n/* harmony import */ var ts_invariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ts-invariant */ \"(rsc)/./node_modules/ts-invariant/lib/invariant.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../version.js */ \"(rsc)/./node_modules/@apollo/client/version.js\");\n/* harmony import */ var _global_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./global.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/global.js\");\n/* harmony import */ var _common_stringifyForDisplay_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/stringifyForDisplay.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/stringifyForDisplay.js\");\n\n\n\n\nfunction wrap(fn) {\n    return function(message) {\n        var args = [];\n        for(var _i = 1; _i < arguments.length; _i++){\n            args[_i - 1] = arguments[_i];\n        }\n        if (typeof message === \"number\") {\n            var arg0 = message;\n            message = getHandledErrorMsg(arg0);\n            if (!message) {\n                message = getFallbackErrorMsg(arg0, args);\n                args = [];\n            }\n        }\n        fn.apply(void 0, [\n            message\n        ].concat(args));\n    };\n}\nvar invariant = Object.assign(function invariant(condition, message) {\n    var args = [];\n    for(var _i = 2; _i < arguments.length; _i++){\n        args[_i - 2] = arguments[_i];\n    }\n    if (!condition) {\n        (0,ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(condition, getHandledErrorMsg(message, args) || getFallbackErrorMsg(message, args));\n    }\n}, {\n    debug: wrap(ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant.debug),\n    log: wrap(ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant.log),\n    warn: wrap(ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant.warn),\n    error: wrap(ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant.error)\n});\n/**\n * Returns an InvariantError.\n *\n * `message` can only be a string, a concatenation of strings, or a ternary statement\n * that results in a string. This will be enforced on build, where the message will\n * be replaced with a message number.\n * String substitutions with %s are supported and will also return\n * pretty-stringified objects.\n * Excess `optionalParams` will be swallowed.\n */ function newInvariantError(message) {\n    var optionalParams = [];\n    for(var _i = 1; _i < arguments.length; _i++){\n        optionalParams[_i - 1] = arguments[_i];\n    }\n    return new ts_invariant__WEBPACK_IMPORTED_MODULE_0__.InvariantError(getHandledErrorMsg(message, optionalParams) || getFallbackErrorMsg(message, optionalParams));\n}\nvar ApolloErrorMessageHandler = Symbol.for(\"ApolloErrorMessageHandler_\" + _version_js__WEBPACK_IMPORTED_MODULE_2__.version);\nfunction stringify(arg) {\n    return typeof arg == \"string\" ? arg : (0,_common_stringifyForDisplay_js__WEBPACK_IMPORTED_MODULE_3__.stringifyForDisplay)(arg, 2).slice(0, 1000);\n}\nfunction getHandledErrorMsg(message, messageArgs) {\n    if (messageArgs === void 0) {\n        messageArgs = [];\n    }\n    if (!message) return;\n    return _global_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"][ApolloErrorMessageHandler] && _global_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"][ApolloErrorMessageHandler](message, messageArgs.map(stringify));\n}\nfunction getFallbackErrorMsg(message, messageArgs) {\n    if (messageArgs === void 0) {\n        messageArgs = [];\n    }\n    if (!message) return;\n    return \"An error occurred! For more details, see the full error text at https://go.apollo.dev/c/err#\".concat(encodeURIComponent(JSON.stringify({\n        version: _version_js__WEBPACK_IMPORTED_MODULE_2__.version,\n        message: message,\n        args: messageArgs.map(stringify)\n    })));\n}\n //# sourceMappingURL=invariantWrappers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvaW52YXJpYW50V3JhcHBlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBOEU7QUFDbkM7QUFDVjtBQUNzQztBQUN2RSxTQUFTTSxLQUFLQyxFQUFFO0lBQ1osT0FBTyxTQUFVQyxPQUFPO1FBQ3BCLElBQUlDLE9BQU8sRUFBRTtRQUNiLElBQUssSUFBSUMsS0FBSyxHQUFHQSxLQUFLQyxVQUFVQyxNQUFNLEVBQUVGLEtBQU07WUFDMUNELElBQUksQ0FBQ0MsS0FBSyxFQUFFLEdBQUdDLFNBQVMsQ0FBQ0QsR0FBRztRQUNoQztRQUNBLElBQUksT0FBT0YsWUFBWSxVQUFVO1lBQzdCLElBQUlLLE9BQU9MO1lBQ1hBLFVBQVVNLG1CQUFtQkQ7WUFDN0IsSUFBSSxDQUFDTCxTQUFTO2dCQUNWQSxVQUFVTyxvQkFBb0JGLE1BQU1KO2dCQUNwQ0EsT0FBTyxFQUFFO1lBQ2I7UUFDSjtRQUNBRixHQUFHUyxLQUFLLENBQUMsS0FBSyxHQUFHO1lBQUNSO1NBQVEsQ0FBQ1MsTUFBTSxDQUFDUjtJQUN0QztBQUNKO0FBQ0EsSUFBSVQsWUFBWWtCLE9BQU9DLE1BQU0sQ0FBQyxTQUFTbkIsVUFBVW9CLFNBQVMsRUFBRVosT0FBTztJQUMvRCxJQUFJQyxPQUFPLEVBQUU7SUFDYixJQUFLLElBQUlDLEtBQUssR0FBR0EsS0FBS0MsVUFBVUMsTUFBTSxFQUFFRixLQUFNO1FBQzFDRCxJQUFJLENBQUNDLEtBQUssRUFBRSxHQUFHQyxTQUFTLENBQUNELEdBQUc7SUFDaEM7SUFDQSxJQUFJLENBQUNVLFdBQVc7UUFDWm5CLHVEQUFpQkEsQ0FBQ21CLFdBQVdOLG1CQUFtQk4sU0FBU0MsU0FBU00sb0JBQW9CUCxTQUFTQztJQUNuRztBQUNKLEdBQUc7SUFDQ1ksT0FBT2YsS0FBS0wsbURBQWlCQSxDQUFDb0IsS0FBSztJQUNuQ0MsS0FBS2hCLEtBQUtMLG1EQUFpQkEsQ0FBQ3FCLEdBQUc7SUFDL0JDLE1BQU1qQixLQUFLTCxtREFBaUJBLENBQUNzQixJQUFJO0lBQ2pDQyxPQUFPbEIsS0FBS0wsbURBQWlCQSxDQUFDdUIsS0FBSztBQUN2QztBQUNBOzs7Ozs7Ozs7Q0FTQyxHQUNELFNBQVNDLGtCQUFrQmpCLE9BQU87SUFDOUIsSUFBSWtCLGlCQUFpQixFQUFFO0lBQ3ZCLElBQUssSUFBSWhCLEtBQUssR0FBR0EsS0FBS0MsVUFBVUMsTUFBTSxFQUFFRixLQUFNO1FBQzFDZ0IsY0FBYyxDQUFDaEIsS0FBSyxFQUFFLEdBQUdDLFNBQVMsQ0FBQ0QsR0FBRztJQUMxQztJQUNBLE9BQU8sSUFBSVIsd0RBQWNBLENBQUNZLG1CQUFtQk4sU0FBU2tCLG1CQUNsRFgsb0JBQW9CUCxTQUFTa0I7QUFDckM7QUFDQSxJQUFJQyw0QkFBNEJDLE9BQU9DLEdBQUcsQ0FBQywrQkFBK0IxQixnREFBT0E7QUFDakYsU0FBUzJCLFVBQVVDLEdBQUc7SUFDbEIsT0FBTyxPQUFPQSxPQUFPLFdBQVdBLE1BQU8xQixtRkFBbUJBLENBQUMwQixLQUFLLEdBQUdDLEtBQUssQ0FBQyxHQUFHO0FBQ2hGO0FBQ0EsU0FBU2xCLG1CQUFtQk4sT0FBTyxFQUFFeUIsV0FBVztJQUM1QyxJQUFJQSxnQkFBZ0IsS0FBSyxHQUFHO1FBQUVBLGNBQWMsRUFBRTtJQUFFO0lBQ2hELElBQUksQ0FBQ3pCLFNBQ0Q7SUFDSixPQUFRSixrREFBTSxDQUFDdUIsMEJBQTBCLElBQ3JDdkIsa0RBQU0sQ0FBQ3VCLDBCQUEwQixDQUFDbkIsU0FBU3lCLFlBQVlDLEdBQUcsQ0FBQ0o7QUFDbkU7QUFDQSxTQUFTZixvQkFBb0JQLE9BQU8sRUFBRXlCLFdBQVc7SUFDN0MsSUFBSUEsZ0JBQWdCLEtBQUssR0FBRztRQUFFQSxjQUFjLEVBQUU7SUFBRTtJQUNoRCxJQUFJLENBQUN6QixTQUNEO0lBQ0osT0FBTywrRkFBK0ZTLE1BQU0sQ0FBQ2tCLG1CQUFtQkMsS0FBS04sU0FBUyxDQUFDO1FBQzNJM0IsU0FBU0EsZ0RBQU9BO1FBQ2hCSyxTQUFTQTtRQUNUQyxNQUFNd0IsWUFBWUMsR0FBRyxDQUFDSjtJQUMxQjtBQUNKO0FBQ29GLENBQ3BGLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvZ2xvYmFscy9pbnZhcmlhbnRXcmFwcGVycy5qcz9jNzNlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGludmFyaWFudCBhcyBvcmlnaW5hbEludmFyaWFudCwgSW52YXJpYW50RXJyb3IgfSBmcm9tIFwidHMtaW52YXJpYW50XCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4uLy4uL3ZlcnNpb24uanNcIjtcbmltcG9ydCBnbG9iYWwgZnJvbSBcIi4vZ2xvYmFsLmpzXCI7XG5pbXBvcnQgeyBzdHJpbmdpZnlGb3JEaXNwbGF5IH0gZnJvbSBcIi4uL2NvbW1vbi9zdHJpbmdpZnlGb3JEaXNwbGF5LmpzXCI7XG5mdW5jdGlvbiB3cmFwKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdmFyIGFyZzAgPSBtZXNzYWdlO1xuICAgICAgICAgICAgbWVzc2FnZSA9IGdldEhhbmRsZWRFcnJvck1zZyhhcmcwKTtcbiAgICAgICAgICAgIGlmICghbWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBnZXRGYWxsYmFja0Vycm9yTXNnKGFyZzAsIGFyZ3MpO1xuICAgICAgICAgICAgICAgIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmbi5hcHBseSh2b2lkIDAsIFttZXNzYWdlXS5jb25jYXQoYXJncykpO1xuICAgIH07XG59XG52YXIgaW52YXJpYW50ID0gT2JqZWN0LmFzc2lnbihmdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgICBvcmlnaW5hbEludmFyaWFudChjb25kaXRpb24sIGdldEhhbmRsZWRFcnJvck1zZyhtZXNzYWdlLCBhcmdzKSB8fCBnZXRGYWxsYmFja0Vycm9yTXNnKG1lc3NhZ2UsIGFyZ3MpKTtcbiAgICB9XG59LCB7XG4gICAgZGVidWc6IHdyYXAob3JpZ2luYWxJbnZhcmlhbnQuZGVidWcpLFxuICAgIGxvZzogd3JhcChvcmlnaW5hbEludmFyaWFudC5sb2cpLFxuICAgIHdhcm46IHdyYXAob3JpZ2luYWxJbnZhcmlhbnQud2FybiksXG4gICAgZXJyb3I6IHdyYXAob3JpZ2luYWxJbnZhcmlhbnQuZXJyb3IpLFxufSk7XG4vKipcbiAqIFJldHVybnMgYW4gSW52YXJpYW50RXJyb3IuXG4gKlxuICogYG1lc3NhZ2VgIGNhbiBvbmx5IGJlIGEgc3RyaW5nLCBhIGNvbmNhdGVuYXRpb24gb2Ygc3RyaW5ncywgb3IgYSB0ZXJuYXJ5IHN0YXRlbWVudFxuICogdGhhdCByZXN1bHRzIGluIGEgc3RyaW5nLiBUaGlzIHdpbGwgYmUgZW5mb3JjZWQgb24gYnVpbGQsIHdoZXJlIHRoZSBtZXNzYWdlIHdpbGxcbiAqIGJlIHJlcGxhY2VkIHdpdGggYSBtZXNzYWdlIG51bWJlci5cbiAqIFN0cmluZyBzdWJzdGl0dXRpb25zIHdpdGggJXMgYXJlIHN1cHBvcnRlZCBhbmQgd2lsbCBhbHNvIHJldHVyblxuICogcHJldHR5LXN0cmluZ2lmaWVkIG9iamVjdHMuXG4gKiBFeGNlc3MgYG9wdGlvbmFsUGFyYW1zYCB3aWxsIGJlIHN3YWxsb3dlZC5cbiAqL1xuZnVuY3Rpb24gbmV3SW52YXJpYW50RXJyb3IobWVzc2FnZSkge1xuICAgIHZhciBvcHRpb25hbFBhcmFtcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG9wdGlvbmFsUGFyYW1zW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEludmFyaWFudEVycm9yKGdldEhhbmRsZWRFcnJvck1zZyhtZXNzYWdlLCBvcHRpb25hbFBhcmFtcykgfHxcbiAgICAgICAgZ2V0RmFsbGJhY2tFcnJvck1zZyhtZXNzYWdlLCBvcHRpb25hbFBhcmFtcykpO1xufVxudmFyIEFwb2xsb0Vycm9yTWVzc2FnZUhhbmRsZXIgPSBTeW1ib2wuZm9yKFwiQXBvbGxvRXJyb3JNZXNzYWdlSGFuZGxlcl9cIiArIHZlcnNpb24pO1xuZnVuY3Rpb24gc3RyaW5naWZ5KGFyZykge1xuICAgIHJldHVybiB0eXBlb2YgYXJnID09IFwic3RyaW5nXCIgPyBhcmcgOiAoc3RyaW5naWZ5Rm9yRGlzcGxheShhcmcsIDIpLnNsaWNlKDAsIDEwMDApKTtcbn1cbmZ1bmN0aW9uIGdldEhhbmRsZWRFcnJvck1zZyhtZXNzYWdlLCBtZXNzYWdlQXJncykge1xuICAgIGlmIChtZXNzYWdlQXJncyA9PT0gdm9pZCAwKSB7IG1lc3NhZ2VBcmdzID0gW107IH1cbiAgICBpZiAoIW1lc3NhZ2UpXG4gICAgICAgIHJldHVybjtcbiAgICByZXR1cm4gKGdsb2JhbFtBcG9sbG9FcnJvck1lc3NhZ2VIYW5kbGVyXSAmJlxuICAgICAgICBnbG9iYWxbQXBvbGxvRXJyb3JNZXNzYWdlSGFuZGxlcl0obWVzc2FnZSwgbWVzc2FnZUFyZ3MubWFwKHN0cmluZ2lmeSkpKTtcbn1cbmZ1bmN0aW9uIGdldEZhbGxiYWNrRXJyb3JNc2cobWVzc2FnZSwgbWVzc2FnZUFyZ3MpIHtcbiAgICBpZiAobWVzc2FnZUFyZ3MgPT09IHZvaWQgMCkgeyBtZXNzYWdlQXJncyA9IFtdOyB9XG4gICAgaWYgKCFtZXNzYWdlKVxuICAgICAgICByZXR1cm47XG4gICAgcmV0dXJuIFwiQW4gZXJyb3Igb2NjdXJyZWQhIEZvciBtb3JlIGRldGFpbHMsIHNlZSB0aGUgZnVsbCBlcnJvciB0ZXh0IGF0IGh0dHBzOi8vZ28uYXBvbGxvLmRldi9jL2VyciNcIi5jb25jYXQoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgdmVyc2lvbjogdmVyc2lvbixcbiAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgYXJnczogbWVzc2FnZUFyZ3MubWFwKHN0cmluZ2lmeSksXG4gICAgfSkpKTtcbn1cbmV4cG9ydCB7IGludmFyaWFudCwgSW52YXJpYW50RXJyb3IsIG5ld0ludmFyaWFudEVycm9yLCBBcG9sbG9FcnJvck1lc3NhZ2VIYW5kbGVyLCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW52YXJpYW50V3JhcHBlcnMuanMubWFwIl0sIm5hbWVzIjpbImludmFyaWFudCIsIm9yaWdpbmFsSW52YXJpYW50IiwiSW52YXJpYW50RXJyb3IiLCJ2ZXJzaW9uIiwiZ2xvYmFsIiwic3RyaW5naWZ5Rm9yRGlzcGxheSIsIndyYXAiLCJmbiIsIm1lc3NhZ2UiLCJhcmdzIiwiX2kiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcmcwIiwiZ2V0SGFuZGxlZEVycm9yTXNnIiwiZ2V0RmFsbGJhY2tFcnJvck1zZyIsImFwcGx5IiwiY29uY2F0IiwiT2JqZWN0IiwiYXNzaWduIiwiY29uZGl0aW9uIiwiZGVidWciLCJsb2ciLCJ3YXJuIiwiZXJyb3IiLCJuZXdJbnZhcmlhbnRFcnJvciIsIm9wdGlvbmFsUGFyYW1zIiwiQXBvbGxvRXJyb3JNZXNzYWdlSGFuZGxlciIsIlN5bWJvbCIsImZvciIsInN0cmluZ2lmeSIsImFyZyIsInNsaWNlIiwibWVzc2FnZUFyZ3MiLCJtYXAiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/globals/invariantWrappers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/globals/maybe.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/globals/maybe.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maybe: () => (/* binding */ maybe)\n/* harmony export */ });\nfunction maybe(thunk) {\n    try {\n        return thunk();\n    } catch (_a) {}\n} //# sourceMappingURL=maybe.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvbWF5YmUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLE1BQU1DLEtBQUs7SUFDdkIsSUFBSTtRQUNBLE9BQU9BO0lBQ1gsRUFDQSxPQUFPQyxJQUFJLENBQUU7QUFDakIsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dsb2JhbHMvbWF5YmUuanM/MTVhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gbWF5YmUodGh1bmspIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gdGh1bmsoKTtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7IH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1heWJlLmpzLm1hcCJdLCJuYW1lcyI6WyJtYXliZSIsInRodW5rIiwiX2EiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/globals/maybe.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/graphql/DocumentTransform.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/DocumentTransform.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DocumentTransform: () => (/* binding */ DocumentTransform)\n/* harmony export */ });\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/trie */ \"(rsc)/./node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var _common_canUse_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/canUse.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n/* harmony import */ var _getFromAST_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getFromAST.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../globals/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @wry/caches */ \"(rsc)/./node_modules/@wry/caches/lib/weak.js\");\n/* harmony import */ var optimism__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! optimism */ \"(rsc)/./node_modules/optimism/lib/index.js\");\n/* harmony import */ var _caching_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../caching/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n\n\n\n\n\n\n\nfunction identity(document) {\n    return document;\n}\nvar DocumentTransform = /** @class */ function() {\n    function DocumentTransform(transform, options) {\n        if (options === void 0) {\n            options = Object.create(null);\n        }\n        this.resultCache = _common_canUse_js__WEBPACK_IMPORTED_MODULE_3__.canUseWeakSet ? new WeakSet() : new Set();\n        this.transform = transform;\n        if (options.getCacheKey) {\n            // Override default `getCacheKey` function, which returns [document].\n            this.getCacheKey = options.getCacheKey;\n        }\n        this.cached = options.cache !== false;\n        this.resetCache();\n    }\n    // This default implementation of getCacheKey can be overridden by providing\n    // options.getCacheKey to the DocumentTransform constructor. In general, a\n    // getCacheKey function may either return an array of keys (often including\n    // the document) to be used as a cache key, or undefined to indicate the\n    // transform for this document should not be cached.\n    DocumentTransform.prototype.getCacheKey = function(document) {\n        return [\n            document\n        ];\n    };\n    DocumentTransform.identity = function() {\n        // No need to cache this transform since it just returns the document\n        // unchanged. This should save a bit of memory that would otherwise be\n        // needed to populate the `documentCache` of this transform.\n        return new DocumentTransform(identity, {\n            cache: false\n        });\n    };\n    DocumentTransform.split = function(predicate, left, right) {\n        if (right === void 0) {\n            right = DocumentTransform.identity();\n        }\n        return Object.assign(new DocumentTransform(function(document) {\n            var documentTransform = predicate(document) ? left : right;\n            return documentTransform.transformDocument(document);\n        }, // Reasonably assume both `left` and `right` transforms handle their own caching\n        {\n            cache: false\n        }), {\n            left: left,\n            right: right\n        });\n    };\n    /**\n     * Resets the internal cache of this transform, if it has one.\n     */ DocumentTransform.prototype.resetCache = function() {\n        var _this = this;\n        if (this.cached) {\n            var stableCacheKeys_1 = new _wry_trie__WEBPACK_IMPORTED_MODULE_0__.Trie(_common_canUse_js__WEBPACK_IMPORTED_MODULE_3__.canUseWeakMap);\n            this.performWork = (0,optimism__WEBPACK_IMPORTED_MODULE_2__.wrap)(DocumentTransform.prototype.performWork.bind(this), {\n                makeCacheKey: function(document) {\n                    var cacheKeys = _this.getCacheKey(document);\n                    if (cacheKeys) {\n                        (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_1__.invariant)(Array.isArray(cacheKeys), 66);\n                        return stableCacheKeys_1.lookupArray(cacheKeys);\n                    }\n                },\n                max: _caching_index_js__WEBPACK_IMPORTED_MODULE_4__.cacheSizes[\"documentTransform.cache\"],\n                cache: _wry_caches__WEBPACK_IMPORTED_MODULE_5__.WeakCache\n            });\n        }\n    };\n    DocumentTransform.prototype.performWork = function(document) {\n        (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_6__.checkDocument)(document);\n        return this.transform(document);\n    };\n    DocumentTransform.prototype.transformDocument = function(document) {\n        // If a user passes an already transformed result back to this function,\n        // immediately return it.\n        if (this.resultCache.has(document)) {\n            return document;\n        }\n        var transformedDocument = this.performWork(document);\n        this.resultCache.add(transformedDocument);\n        return transformedDocument;\n    };\n    DocumentTransform.prototype.concat = function(otherTransform) {\n        var _this = this;\n        return Object.assign(new DocumentTransform(function(document) {\n            return otherTransform.transformDocument(_this.transformDocument(document));\n        }, // Reasonably assume both transforms handle their own caching\n        {\n            cache: false\n        }), {\n            left: this,\n            right: otherTransform\n        });\n    };\n    return DocumentTransform;\n}();\n //# sourceMappingURL=DocumentTransform.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/graphql/DocumentTransform.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/graphql/directives.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/directives.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDirectiveNames: () => (/* binding */ getDirectiveNames),\n/* harmony export */   getInclusionDirectives: () => (/* binding */ getInclusionDirectives),\n/* harmony export */   hasAllDirectives: () => (/* binding */ hasAllDirectives),\n/* harmony export */   hasAnyDirectives: () => (/* binding */ hasAnyDirectives),\n/* harmony export */   hasClientExports: () => (/* binding */ hasClientExports),\n/* harmony export */   hasDirectives: () => (/* binding */ hasDirectives),\n/* harmony export */   shouldInclude: () => (/* binding */ shouldInclude)\n/* harmony export */ });\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/visitor.mjs\");\n\n\nfunction shouldInclude(_a, variables) {\n    var directives = _a.directives;\n    if (!directives || !directives.length) {\n        return true;\n    }\n    return getInclusionDirectives(directives).every(function(_a) {\n        var directive = _a.directive, ifArgument = _a.ifArgument;\n        var evaledValue = false;\n        if (ifArgument.value.kind === \"Variable\") {\n            evaledValue = variables && variables[ifArgument.value.name.value];\n            (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(evaledValue !== void 0, 67, directive.name.value);\n        } else {\n            evaledValue = ifArgument.value.value;\n        }\n        return directive.name.value === \"skip\" ? !evaledValue : evaledValue;\n    });\n}\nfunction getDirectiveNames(root) {\n    var names = [];\n    (0,graphql__WEBPACK_IMPORTED_MODULE_1__.visit)(root, {\n        Directive: function(node) {\n            names.push(node.name.value);\n        }\n    });\n    return names;\n}\nvar hasAnyDirectives = function(names, root) {\n    return hasDirectives(names, root, false);\n};\nvar hasAllDirectives = function(names, root) {\n    return hasDirectives(names, root, true);\n};\nfunction hasDirectives(names, root, all) {\n    var nameSet = new Set(names);\n    var uniqueCount = nameSet.size;\n    (0,graphql__WEBPACK_IMPORTED_MODULE_1__.visit)(root, {\n        Directive: function(node) {\n            if (nameSet.delete(node.name.value) && (!all || !nameSet.size)) {\n                return graphql__WEBPACK_IMPORTED_MODULE_1__.BREAK;\n            }\n        }\n    });\n    // If we found all the names, nameSet will be empty. If we only care about\n    // finding some of them, the < condition is sufficient.\n    return all ? !nameSet.size : nameSet.size < uniqueCount;\n}\nfunction hasClientExports(document) {\n    return document && hasDirectives([\n        \"client\",\n        \"export\"\n    ], document, true);\n}\nfunction isInclusionDirective(_a) {\n    var value = _a.name.value;\n    return value === \"skip\" || value === \"include\";\n}\nfunction getInclusionDirectives(directives) {\n    var result = [];\n    if (directives && directives.length) {\n        directives.forEach(function(directive) {\n            if (!isInclusionDirective(directive)) return;\n            var directiveArguments = directive.arguments;\n            var directiveName = directive.name.value;\n            (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(directiveArguments && directiveArguments.length === 1, 68, directiveName);\n            var ifArgument = directiveArguments[0];\n            (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(ifArgument.name && ifArgument.name.value === \"if\", 69, directiveName);\n            var ifValue = ifArgument.value;\n            // means it has to be a variable value if this is a valid @skip or @include directive\n            (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(ifValue && (ifValue.kind === \"Variable\" || ifValue.kind === \"BooleanValue\"), 70, directiveName);\n            result.push({\n                directive: directive,\n                ifArgument: ifArgument\n            });\n        });\n    }\n    return result;\n} //# sourceMappingURL=directives.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dyYXBocWwvZGlyZWN0aXZlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBZ0Q7QUFDVDtBQUNoQyxTQUFTRyxjQUFjQyxFQUFFLEVBQUVDLFNBQVM7SUFDdkMsSUFBSUMsYUFBYUYsR0FBR0UsVUFBVTtJQUM5QixJQUFJLENBQUNBLGNBQWMsQ0FBQ0EsV0FBV0MsTUFBTSxFQUFFO1FBQ25DLE9BQU87SUFDWDtJQUNBLE9BQU9DLHVCQUF1QkYsWUFBWUcsS0FBSyxDQUFDLFNBQVVMLEVBQUU7UUFDeEQsSUFBSU0sWUFBWU4sR0FBR00sU0FBUyxFQUFFQyxhQUFhUCxHQUFHTyxVQUFVO1FBQ3hELElBQUlDLGNBQWM7UUFDbEIsSUFBSUQsV0FBV0UsS0FBSyxDQUFDQyxJQUFJLEtBQUssWUFBWTtZQUN0Q0YsY0FDSVAsYUFBYUEsU0FBUyxDQUFDTSxXQUFXRSxLQUFLLENBQUNFLElBQUksQ0FBQ0YsS0FBSyxDQUFDO1lBQ3ZEYiw0REFBU0EsQ0FBQ1ksZ0JBQWdCLEtBQUssR0FBRyxJQUFJRixVQUFVSyxJQUFJLENBQUNGLEtBQUs7UUFDOUQsT0FDSztZQUNERCxjQUFjRCxXQUFXRSxLQUFLLENBQUNBLEtBQUs7UUFDeEM7UUFDQSxPQUFPSCxVQUFVSyxJQUFJLENBQUNGLEtBQUssS0FBSyxTQUFTLENBQUNELGNBQWNBO0lBQzVEO0FBQ0o7QUFDTyxTQUFTSSxrQkFBa0JDLElBQUk7SUFDbEMsSUFBSUMsUUFBUSxFQUFFO0lBQ2RqQiw4Q0FBS0EsQ0FBQ2dCLE1BQU07UUFDUkUsV0FBVyxTQUFVQyxJQUFJO1lBQ3JCRixNQUFNRyxJQUFJLENBQUNELEtBQUtMLElBQUksQ0FBQ0YsS0FBSztRQUM5QjtJQUNKO0lBQ0EsT0FBT0s7QUFDWDtBQUNPLElBQUlJLG1CQUFtQixTQUFVSixLQUFLLEVBQUVELElBQUk7SUFDL0MsT0FBT00sY0FBY0wsT0FBT0QsTUFBTTtBQUN0QyxFQUFFO0FBQ0ssSUFBSU8sbUJBQW1CLFNBQVVOLEtBQUssRUFBRUQsSUFBSTtJQUMvQyxPQUFPTSxjQUFjTCxPQUFPRCxNQUFNO0FBQ3RDLEVBQUU7QUFDSyxTQUFTTSxjQUFjTCxLQUFLLEVBQUVELElBQUksRUFBRVEsR0FBRztJQUMxQyxJQUFJQyxVQUFVLElBQUlDLElBQUlUO0lBQ3RCLElBQUlVLGNBQWNGLFFBQVFHLElBQUk7SUFDOUI1Qiw4Q0FBS0EsQ0FBQ2dCLE1BQU07UUFDUkUsV0FBVyxTQUFVQyxJQUFJO1lBQ3JCLElBQUlNLFFBQVFJLE1BQU0sQ0FBQ1YsS0FBS0wsSUFBSSxDQUFDRixLQUFLLEtBQU0sRUFBQ1ksT0FBTyxDQUFDQyxRQUFRRyxJQUFJLEdBQUc7Z0JBQzVELE9BQU8zQiwwQ0FBS0E7WUFDaEI7UUFDSjtJQUNKO0lBQ0EsMEVBQTBFO0lBQzFFLHVEQUF1RDtJQUN2RCxPQUFPdUIsTUFBTSxDQUFDQyxRQUFRRyxJQUFJLEdBQUdILFFBQVFHLElBQUksR0FBR0Q7QUFDaEQ7QUFDTyxTQUFTRyxpQkFBaUJDLFFBQVE7SUFDckMsT0FBT0EsWUFBWVQsY0FBYztRQUFDO1FBQVU7S0FBUyxFQUFFUyxVQUFVO0FBQ3JFO0FBQ0EsU0FBU0MscUJBQXFCN0IsRUFBRTtJQUM1QixJQUFJUyxRQUFRVCxHQUFHVyxJQUFJLENBQUNGLEtBQUs7SUFDekIsT0FBT0EsVUFBVSxVQUFVQSxVQUFVO0FBQ3pDO0FBQ08sU0FBU0wsdUJBQXVCRixVQUFVO0lBQzdDLElBQUk0QixTQUFTLEVBQUU7SUFDZixJQUFJNUIsY0FBY0EsV0FBV0MsTUFBTSxFQUFFO1FBQ2pDRCxXQUFXNkIsT0FBTyxDQUFDLFNBQVV6QixTQUFTO1lBQ2xDLElBQUksQ0FBQ3VCLHFCQUFxQnZCLFlBQ3RCO1lBQ0osSUFBSTBCLHFCQUFxQjFCLFVBQVUyQixTQUFTO1lBQzVDLElBQUlDLGdCQUFnQjVCLFVBQVVLLElBQUksQ0FBQ0YsS0FBSztZQUN4Q2IsNERBQVNBLENBQUNvQyxzQkFBc0JBLG1CQUFtQjdCLE1BQU0sS0FBSyxHQUFHLElBQUkrQjtZQUNyRSxJQUFJM0IsYUFBYXlCLGtCQUFrQixDQUFDLEVBQUU7WUFDdENwQyw0REFBU0EsQ0FBQ1csV0FBV0ksSUFBSSxJQUFJSixXQUFXSSxJQUFJLENBQUNGLEtBQUssS0FBSyxNQUFNLElBQUl5QjtZQUNqRSxJQUFJQyxVQUFVNUIsV0FBV0UsS0FBSztZQUM5QixxRkFBcUY7WUFDckZiLDREQUFTQSxDQUFDdUMsV0FDTEEsQ0FBQUEsUUFBUXpCLElBQUksS0FBSyxjQUFjeUIsUUFBUXpCLElBQUksS0FBSyxjQUFhLEdBQUksSUFBSXdCO1lBQzFFSixPQUFPYixJQUFJLENBQUM7Z0JBQUVYLFdBQVdBO2dCQUFXQyxZQUFZQTtZQUFXO1FBQy9EO0lBQ0o7SUFDQSxPQUFPdUI7QUFDWCxFQUNBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvZ3JhcGhxbC9kaXJlY3RpdmVzLmpzP2UwMDAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSBcIi4uL2dsb2JhbHMvaW5kZXguanNcIjtcbmltcG9ydCB7IHZpc2l0LCBCUkVBSyB9IGZyb20gXCJncmFwaHFsXCI7XG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkSW5jbHVkZShfYSwgdmFyaWFibGVzKSB7XG4gICAgdmFyIGRpcmVjdGl2ZXMgPSBfYS5kaXJlY3RpdmVzO1xuICAgIGlmICghZGlyZWN0aXZlcyB8fCAhZGlyZWN0aXZlcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBnZXRJbmNsdXNpb25EaXJlY3RpdmVzKGRpcmVjdGl2ZXMpLmV2ZXJ5KGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgZGlyZWN0aXZlID0gX2EuZGlyZWN0aXZlLCBpZkFyZ3VtZW50ID0gX2EuaWZBcmd1bWVudDtcbiAgICAgICAgdmFyIGV2YWxlZFZhbHVlID0gZmFsc2U7XG4gICAgICAgIGlmIChpZkFyZ3VtZW50LnZhbHVlLmtpbmQgPT09IFwiVmFyaWFibGVcIikge1xuICAgICAgICAgICAgZXZhbGVkVmFsdWUgPVxuICAgICAgICAgICAgICAgIHZhcmlhYmxlcyAmJiB2YXJpYWJsZXNbaWZBcmd1bWVudC52YWx1ZS5uYW1lLnZhbHVlXTtcbiAgICAgICAgICAgIGludmFyaWFudChldmFsZWRWYWx1ZSAhPT0gdm9pZCAwLCA2NywgZGlyZWN0aXZlLm5hbWUudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZXZhbGVkVmFsdWUgPSBpZkFyZ3VtZW50LnZhbHVlLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaXJlY3RpdmUubmFtZS52YWx1ZSA9PT0gXCJza2lwXCIgPyAhZXZhbGVkVmFsdWUgOiBldmFsZWRWYWx1ZTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXREaXJlY3RpdmVOYW1lcyhyb290KSB7XG4gICAgdmFyIG5hbWVzID0gW107XG4gICAgdmlzaXQocm9vdCwge1xuICAgICAgICBEaXJlY3RpdmU6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICBuYW1lcy5wdXNoKG5vZGUubmFtZS52YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIG5hbWVzO1xufVxuZXhwb3J0IHZhciBoYXNBbnlEaXJlY3RpdmVzID0gZnVuY3Rpb24gKG5hbWVzLCByb290KSB7XG4gICAgcmV0dXJuIGhhc0RpcmVjdGl2ZXMobmFtZXMsIHJvb3QsIGZhbHNlKTtcbn07XG5leHBvcnQgdmFyIGhhc0FsbERpcmVjdGl2ZXMgPSBmdW5jdGlvbiAobmFtZXMsIHJvb3QpIHtcbiAgICByZXR1cm4gaGFzRGlyZWN0aXZlcyhuYW1lcywgcm9vdCwgdHJ1ZSk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGhhc0RpcmVjdGl2ZXMobmFtZXMsIHJvb3QsIGFsbCkge1xuICAgIHZhciBuYW1lU2V0ID0gbmV3IFNldChuYW1lcyk7XG4gICAgdmFyIHVuaXF1ZUNvdW50ID0gbmFtZVNldC5zaXplO1xuICAgIHZpc2l0KHJvb3QsIHtcbiAgICAgICAgRGlyZWN0aXZlOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgaWYgKG5hbWVTZXQuZGVsZXRlKG5vZGUubmFtZS52YWx1ZSkgJiYgKCFhbGwgfHwgIW5hbWVTZXQuc2l6ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQlJFQUs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgLy8gSWYgd2UgZm91bmQgYWxsIHRoZSBuYW1lcywgbmFtZVNldCB3aWxsIGJlIGVtcHR5LiBJZiB3ZSBvbmx5IGNhcmUgYWJvdXRcbiAgICAvLyBmaW5kaW5nIHNvbWUgb2YgdGhlbSwgdGhlIDwgY29uZGl0aW9uIGlzIHN1ZmZpY2llbnQuXG4gICAgcmV0dXJuIGFsbCA/ICFuYW1lU2V0LnNpemUgOiBuYW1lU2V0LnNpemUgPCB1bmlxdWVDb3VudDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYXNDbGllbnRFeHBvcnRzKGRvY3VtZW50KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50ICYmIGhhc0RpcmVjdGl2ZXMoW1wiY2xpZW50XCIsIFwiZXhwb3J0XCJdLCBkb2N1bWVudCwgdHJ1ZSk7XG59XG5mdW5jdGlvbiBpc0luY2x1c2lvbkRpcmVjdGl2ZShfYSkge1xuICAgIHZhciB2YWx1ZSA9IF9hLm5hbWUudmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlID09PSBcInNraXBcIiB8fCB2YWx1ZSA9PT0gXCJpbmNsdWRlXCI7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5jbHVzaW9uRGlyZWN0aXZlcyhkaXJlY3RpdmVzKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGlmIChkaXJlY3RpdmVzICYmIGRpcmVjdGl2ZXMubGVuZ3RoKSB7XG4gICAgICAgIGRpcmVjdGl2ZXMuZm9yRWFjaChmdW5jdGlvbiAoZGlyZWN0aXZlKSB7XG4gICAgICAgICAgICBpZiAoIWlzSW5jbHVzaW9uRGlyZWN0aXZlKGRpcmVjdGl2ZSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIGRpcmVjdGl2ZUFyZ3VtZW50cyA9IGRpcmVjdGl2ZS5hcmd1bWVudHM7XG4gICAgICAgICAgICB2YXIgZGlyZWN0aXZlTmFtZSA9IGRpcmVjdGl2ZS5uYW1lLnZhbHVlO1xuICAgICAgICAgICAgaW52YXJpYW50KGRpcmVjdGl2ZUFyZ3VtZW50cyAmJiBkaXJlY3RpdmVBcmd1bWVudHMubGVuZ3RoID09PSAxLCA2OCwgZGlyZWN0aXZlTmFtZSk7XG4gICAgICAgICAgICB2YXIgaWZBcmd1bWVudCA9IGRpcmVjdGl2ZUFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgIGludmFyaWFudChpZkFyZ3VtZW50Lm5hbWUgJiYgaWZBcmd1bWVudC5uYW1lLnZhbHVlID09PSBcImlmXCIsIDY5LCBkaXJlY3RpdmVOYW1lKTtcbiAgICAgICAgICAgIHZhciBpZlZhbHVlID0gaWZBcmd1bWVudC52YWx1ZTtcbiAgICAgICAgICAgIC8vIG1lYW5zIGl0IGhhcyB0byBiZSBhIHZhcmlhYmxlIHZhbHVlIGlmIHRoaXMgaXMgYSB2YWxpZCBAc2tpcCBvciBAaW5jbHVkZSBkaXJlY3RpdmVcbiAgICAgICAgICAgIGludmFyaWFudChpZlZhbHVlICYmXG4gICAgICAgICAgICAgICAgKGlmVmFsdWUua2luZCA9PT0gXCJWYXJpYWJsZVwiIHx8IGlmVmFsdWUua2luZCA9PT0gXCJCb29sZWFuVmFsdWVcIiksIDcwLCBkaXJlY3RpdmVOYW1lKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHsgZGlyZWN0aXZlOiBkaXJlY3RpdmUsIGlmQXJndW1lbnQ6IGlmQXJndW1lbnQgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlyZWN0aXZlcy5qcy5tYXAiXSwibmFtZXMiOlsiaW52YXJpYW50IiwidmlzaXQiLCJCUkVBSyIsInNob3VsZEluY2x1ZGUiLCJfYSIsInZhcmlhYmxlcyIsImRpcmVjdGl2ZXMiLCJsZW5ndGgiLCJnZXRJbmNsdXNpb25EaXJlY3RpdmVzIiwiZXZlcnkiLCJkaXJlY3RpdmUiLCJpZkFyZ3VtZW50IiwiZXZhbGVkVmFsdWUiLCJ2YWx1ZSIsImtpbmQiLCJuYW1lIiwiZ2V0RGlyZWN0aXZlTmFtZXMiLCJyb290IiwibmFtZXMiLCJEaXJlY3RpdmUiLCJub2RlIiwicHVzaCIsImhhc0FueURpcmVjdGl2ZXMiLCJoYXNEaXJlY3RpdmVzIiwiaGFzQWxsRGlyZWN0aXZlcyIsImFsbCIsIm5hbWVTZXQiLCJTZXQiLCJ1bmlxdWVDb3VudCIsInNpemUiLCJkZWxldGUiLCJoYXNDbGllbnRFeHBvcnRzIiwiZG9jdW1lbnQiLCJpc0luY2x1c2lvbkRpcmVjdGl2ZSIsInJlc3VsdCIsImZvckVhY2giLCJkaXJlY3RpdmVBcmd1bWVudHMiLCJhcmd1bWVudHMiLCJkaXJlY3RpdmVOYW1lIiwiaWZWYWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/graphql/directives.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/graphql/fragments.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/fragments.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFragmentMap: () => (/* binding */ createFragmentMap),\n/* harmony export */   getFragmentFromSelection: () => (/* binding */ getFragmentFromSelection),\n/* harmony export */   getFragmentQueryDocument: () => (/* binding */ getFragmentQueryDocument)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/index.js\");\n\n\n/**\n * Returns a query document which adds a single query operation that only\n * spreads the target fragment inside of it.\n *\n * So for example a document of:\n *\n * ```graphql\n * fragment foo on Foo { a b c }\n * ```\n *\n * Turns into:\n *\n * ```graphql\n * { ...foo }\n *\n * fragment foo on Foo { a b c }\n * ```\n *\n * The target fragment will either be the only fragment in the document, or a\n * fragment specified by the provided `fragmentName`. If there is more than one\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\n */ function getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    // Build an array of all our fragment definitions that will be used for\n    // validations. We also do some validations on the other definitions in the\n    // document while building this list.\n    var fragments = [];\n    document.definitions.forEach(function(definition) {\n        // Throw an error if we encounter an operation definition because we will\n        // define our own operation definition later on.\n        if (definition.kind === \"OperationDefinition\") {\n            throw (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(71, definition.operation, definition.name ? \" named '\".concat(definition.name.value, \"'\") : \"\");\n        }\n        // Add our definition to the fragments array if it is a fragment\n        // definition.\n        if (definition.kind === \"FragmentDefinition\") {\n            fragments.push(definition);\n        }\n    });\n    // If the user did not give us a fragment name then let us try to get a\n    // name from a single fragment in the definition.\n    if (typeof actualFragmentName === \"undefined\") {\n        (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragments.length === 1, 72, fragments.length);\n        actualFragmentName = fragments[0].name.value;\n    }\n    // Generate a query document with an operation that simply spreads the\n    // fragment inside of it.\n    var query = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, document), {\n        definitions: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([\n            {\n                kind: \"OperationDefinition\",\n                // OperationTypeNode is an enum\n                operation: \"query\",\n                selectionSet: {\n                    kind: \"SelectionSet\",\n                    selections: [\n                        {\n                            kind: \"FragmentSpread\",\n                            name: {\n                                kind: \"Name\",\n                                value: actualFragmentName\n                            }\n                        }\n                    ]\n                }\n            }\n        ], document.definitions, true)\n    });\n    return query;\n}\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nfunction createFragmentMap(fragments) {\n    if (fragments === void 0) {\n        fragments = [];\n    }\n    var symTable = {};\n    fragments.forEach(function(fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nfunction getFragmentFromSelection(selection, fragmentMap) {\n    switch(selection.kind){\n        case \"InlineFragment\":\n            return selection;\n        case \"FragmentSpread\":\n            {\n                var fragmentName = selection.name.value;\n                if (typeof fragmentMap === \"function\") {\n                    return fragmentMap(fragmentName);\n                }\n                var fragment = fragmentMap && fragmentMap[fragmentName];\n                (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragment, 73, fragmentName);\n                return fragment || null;\n            }\n        default:\n            return null;\n    }\n} //# sourceMappingURL=fragments.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/graphql/fragments.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/getFromAST.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkDocument: () => (/* binding */ checkDocument),\n/* harmony export */   getDefaultValues: () => (/* binding */ getDefaultValues),\n/* harmony export */   getFragmentDefinition: () => (/* binding */ getFragmentDefinition),\n/* harmony export */   getFragmentDefinitions: () => (/* binding */ getFragmentDefinitions),\n/* harmony export */   getMainDefinition: () => (/* binding */ getMainDefinition),\n/* harmony export */   getOperationDefinition: () => (/* binding */ getOperationDefinition),\n/* harmony export */   getOperationName: () => (/* binding */ getOperationName),\n/* harmony export */   getQueryDefinition: () => (/* binding */ getQueryDefinition)\n/* harmony export */ });\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _storeUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./storeUtils.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n\n\n// Checks the document for errors and throws an exception if there is an error.\nfunction checkDocument(doc) {\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(doc && doc.kind === \"Document\", 74);\n    var operations = doc.definitions.filter(function(d) {\n        return d.kind !== \"FragmentDefinition\";\n    }).map(function(definition) {\n        if (definition.kind !== \"OperationDefinition\") {\n            throw (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(75, definition.kind);\n        }\n        return definition;\n    });\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(operations.length <= 1, 76, operations.length);\n    return doc;\n}\nfunction getOperationDefinition(doc) {\n    checkDocument(doc);\n    return doc.definitions.filter(function(definition) {\n        return definition.kind === \"OperationDefinition\";\n    })[0];\n}\nfunction getOperationName(doc) {\n    return doc.definitions.filter(function(definition) {\n        return definition.kind === \"OperationDefinition\" && !!definition.name;\n    }).map(function(x) {\n        return x.name.value;\n    })[0] || null;\n}\n// Returns the FragmentDefinitions from a particular document as an array\nfunction getFragmentDefinitions(doc) {\n    return doc.definitions.filter(function(definition) {\n        return definition.kind === \"FragmentDefinition\";\n    });\n}\nfunction getQueryDefinition(doc) {\n    var queryDef = getOperationDefinition(doc);\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(queryDef && queryDef.operation === \"query\", 77);\n    return queryDef;\n}\nfunction getFragmentDefinition(doc) {\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(doc.kind === \"Document\", 78);\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(doc.definitions.length <= 1, 79);\n    var fragmentDef = doc.definitions[0];\n    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragmentDef.kind === \"FragmentDefinition\", 80);\n    return fragmentDef;\n}\n/**\n * Returns the first operation definition found in this document.\n * If no operation definition is found, the first fragment definition will be returned.\n * If no definitions are found, an error will be thrown.\n */ function getMainDefinition(queryDoc) {\n    checkDocument(queryDoc);\n    var fragmentDefinition;\n    for(var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++){\n        var definition = _a[_i];\n        if (definition.kind === \"OperationDefinition\") {\n            var operation = definition.operation;\n            if (operation === \"query\" || operation === \"mutation\" || operation === \"subscription\") {\n                return definition;\n            }\n        }\n        if (definition.kind === \"FragmentDefinition\" && !fragmentDefinition) {\n            // we do this because we want to allow multiple fragment definitions\n            // to precede an operation definition.\n            fragmentDefinition = definition;\n        }\n    }\n    if (fragmentDefinition) {\n        return fragmentDefinition;\n    }\n    throw (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(81);\n}\nfunction getDefaultValues(definition) {\n    var defaultValues = Object.create(null);\n    var defs = definition && definition.variableDefinitions;\n    if (defs && defs.length) {\n        defs.forEach(function(def) {\n            if (def.defaultValue) {\n                (0,_storeUtils_js__WEBPACK_IMPORTED_MODULE_1__.valueToObjectRepresentation)(defaultValues, def.variable.name, def.defaultValue);\n            }\n        });\n    }\n    return defaultValues;\n} //# sourceMappingURL=getFromAST.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/graphql/print.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/print.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   print: () => (/* binding */ print)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/printer.mjs\");\n/* harmony import */ var _caching_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../caching/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/caching/caches.js\");\n/* harmony import */ var _caching_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../caching/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/caching/sizes.js\");\n/* harmony import */ var _caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../caching/getMemoryInternals.js */ \"(rsc)/./node_modules/@apollo/client/utilities/caching/getMemoryInternals.js\");\n\n\n\nvar printCache;\nvar print = Object.assign(function(ast) {\n    var result = printCache.get(ast);\n    if (!result) {\n        result = (0,graphql__WEBPACK_IMPORTED_MODULE_0__.print)(ast);\n        printCache.set(ast, result);\n    }\n    return result;\n}, {\n    reset: function() {\n        printCache = new _caching_index_js__WEBPACK_IMPORTED_MODULE_1__.AutoCleanedWeakCache(_caching_index_js__WEBPACK_IMPORTED_MODULE_2__.cacheSizes.print || 2000 /* defaultCacheSizes.print */ );\n    }\n});\nprint.reset();\nif (globalThis.__DEV__ !== false) {\n    (0,_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_3__.registerGlobalCache)(\"print\", function() {\n        return printCache ? printCache.size : 0;\n    });\n} //# sourceMappingURL=print.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dyYXBocWwvcHJpbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBNkM7QUFDMkI7QUFDRDtBQUN2RSxJQUFJSztBQUNHLElBQUlMLFFBQVFNLE9BQU9DLE1BQU0sQ0FBQyxTQUFVQyxHQUFHO0lBQzFDLElBQUlDLFNBQVNKLFdBQVdLLEdBQUcsQ0FBQ0Y7SUFDNUIsSUFBSSxDQUFDQyxRQUFRO1FBQ1RBLFNBQVNSLDhDQUFTQSxDQUFDTztRQUNuQkgsV0FBV00sR0FBRyxDQUFDSCxLQUFLQztJQUN4QjtJQUNBLE9BQU9BO0FBQ1gsR0FBRztJQUNDRyxPQUFPO1FBQ0hQLGFBQWEsSUFBSUgsbUVBQW9CQSxDQUFDQyx5REFBVUEsQ0FBQ0gsS0FBSyxJQUFJLEtBQUssMkJBQTJCO0lBQzlGO0FBQ0osR0FBRztBQUNIQSxNQUFNWSxLQUFLO0FBQ1gsSUFBSUMsV0FBV0MsT0FBTyxLQUFLLE9BQU87SUFDOUJWLG1GQUFtQkEsQ0FBQyxTQUFTO1FBQWMsT0FBUUMsYUFBYUEsV0FBV1UsSUFBSSxHQUFHO0lBQUk7QUFDMUYsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1kb2NzLWZyb24tZW5kLW5leHQvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL2dyYXBocWwvcHJpbnQuanM/ZTI4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwcmludCBhcyBvcmlnUHJpbnQgfSBmcm9tIFwiZ3JhcGhxbFwiO1xuaW1wb3J0IHsgQXV0b0NsZWFuZWRXZWFrQ2FjaGUsIGNhY2hlU2l6ZXMsIH0gZnJvbSBcIi4uL2NhY2hpbmcvaW5kZXguanNcIjtcbmltcG9ydCB7IHJlZ2lzdGVyR2xvYmFsQ2FjaGUgfSBmcm9tIFwiLi4vY2FjaGluZy9nZXRNZW1vcnlJbnRlcm5hbHMuanNcIjtcbnZhciBwcmludENhY2hlO1xuZXhwb3J0IHZhciBwcmludCA9IE9iamVjdC5hc3NpZ24oZnVuY3Rpb24gKGFzdCkge1xuICAgIHZhciByZXN1bHQgPSBwcmludENhY2hlLmdldChhc3QpO1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdCA9IG9yaWdQcmludChhc3QpO1xuICAgICAgICBwcmludENhY2hlLnNldChhc3QsIHJlc3VsdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59LCB7XG4gICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcHJpbnRDYWNoZSA9IG5ldyBBdXRvQ2xlYW5lZFdlYWtDYWNoZShjYWNoZVNpemVzLnByaW50IHx8IDIwMDAgLyogZGVmYXVsdENhY2hlU2l6ZXMucHJpbnQgKi8pO1xuICAgIH0sXG59KTtcbnByaW50LnJlc2V0KCk7XG5pZiAoZ2xvYmFsVGhpcy5fX0RFVl9fICE9PSBmYWxzZSkge1xuICAgIHJlZ2lzdGVyR2xvYmFsQ2FjaGUoXCJwcmludFwiLCBmdW5jdGlvbiAoKSB7IHJldHVybiAocHJpbnRDYWNoZSA/IHByaW50Q2FjaGUuc2l6ZSA6IDApOyB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByaW50LmpzLm1hcCJdLCJuYW1lcyI6WyJwcmludCIsIm9yaWdQcmludCIsIkF1dG9DbGVhbmVkV2Vha0NhY2hlIiwiY2FjaGVTaXplcyIsInJlZ2lzdGVyR2xvYmFsQ2FjaGUiLCJwcmludENhY2hlIiwiT2JqZWN0IiwiYXNzaWduIiwiYXN0IiwicmVzdWx0IiwiZ2V0Iiwic2V0IiwicmVzZXQiLCJnbG9iYWxUaGlzIiwiX19ERVZfXyIsInNpemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/graphql/print.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/storeUtils.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   argumentsObjectFromField: () => (/* binding */ argumentsObjectFromField),\n/* harmony export */   getStoreKeyName: () => (/* binding */ getStoreKeyName),\n/* harmony export */   getTypenameFromResult: () => (/* binding */ getTypenameFromResult),\n/* harmony export */   isDocumentNode: () => (/* binding */ isDocumentNode),\n/* harmony export */   isField: () => (/* binding */ isField),\n/* harmony export */   isInlineFragment: () => (/* binding */ isInlineFragment),\n/* harmony export */   isReference: () => (/* binding */ isReference),\n/* harmony export */   makeReference: () => (/* binding */ makeReference),\n/* harmony export */   resultKeyNameFromField: () => (/* binding */ resultKeyNameFromField),\n/* harmony export */   storeKeyNameFromField: () => (/* binding */ storeKeyNameFromField),\n/* harmony export */   valueToObjectRepresentation: () => (/* binding */ valueToObjectRepresentation)\n/* harmony export */ });\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var _common_objects_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/objects.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/objects.js\");\n/* harmony import */ var _fragments_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fragments.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _common_canonicalStringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/canonicalStringify.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/canonicalStringify.js\");\n\n\n\n\nfunction makeReference(id) {\n    return {\n        __ref: String(id)\n    };\n}\nfunction isReference(obj) {\n    return Boolean(obj && typeof obj === \"object\" && typeof obj.__ref === \"string\");\n}\nfunction isDocumentNode(value) {\n    return (0,_common_objects_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value) && value.kind === \"Document\" && Array.isArray(value.definitions);\n}\nfunction isStringValue(value) {\n    return value.kind === \"StringValue\";\n}\nfunction isBooleanValue(value) {\n    return value.kind === \"BooleanValue\";\n}\nfunction isIntValue(value) {\n    return value.kind === \"IntValue\";\n}\nfunction isFloatValue(value) {\n    return value.kind === \"FloatValue\";\n}\nfunction isVariable(value) {\n    return value.kind === \"Variable\";\n}\nfunction isObjectValue(value) {\n    return value.kind === \"ObjectValue\";\n}\nfunction isListValue(value) {\n    return value.kind === \"ListValue\";\n}\nfunction isEnumValue(value) {\n    return value.kind === \"EnumValue\";\n}\nfunction isNullValue(value) {\n    return value.kind === \"NullValue\";\n}\nfunction valueToObjectRepresentation(argObj, name, value, variables) {\n    if (isIntValue(value) || isFloatValue(value)) {\n        argObj[name.value] = Number(value.value);\n    } else if (isBooleanValue(value) || isStringValue(value)) {\n        argObj[name.value] = value.value;\n    } else if (isObjectValue(value)) {\n        var nestedArgObj_1 = {};\n        value.fields.map(function(obj) {\n            return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n        });\n        argObj[name.value] = nestedArgObj_1;\n    } else if (isVariable(value)) {\n        var variableValue = (variables || {})[value.name.value];\n        argObj[name.value] = variableValue;\n    } else if (isListValue(value)) {\n        argObj[name.value] = value.values.map(function(listValue) {\n            var nestedArgArrayObj = {};\n            valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n            return nestedArgArrayObj[name.value];\n        });\n    } else if (isEnumValue(value)) {\n        argObj[name.value] = value.value;\n    } else if (isNullValue(value)) {\n        argObj[name.value] = null;\n    } else {\n        throw (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(82, name.value, value.kind);\n    }\n}\nfunction storeKeyNameFromField(field, variables) {\n    var directivesObj = null;\n    if (field.directives) {\n        directivesObj = {};\n        field.directives.forEach(function(directive) {\n            directivesObj[directive.name.value] = {};\n            if (directive.arguments) {\n                directive.arguments.forEach(function(_a) {\n                    var name = _a.name, value = _a.value;\n                    return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n                });\n            }\n        });\n    }\n    var argObj = null;\n    if (field.arguments && field.arguments.length) {\n        argObj = {};\n        field.arguments.forEach(function(_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj, name, value, variables);\n        });\n    }\n    return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\nvar KNOWN_DIRECTIVES = [\n    \"connection\",\n    \"include\",\n    \"skip\",\n    \"client\",\n    \"rest\",\n    \"export\",\n    \"nonreactive\"\n];\n// Default stable JSON.stringify implementation used by getStoreKeyName. Can be\n// updated/replaced with something better by calling\n// getStoreKeyName.setStringify(newStringifyFunction).\nvar storeKeyNameStringify = _common_canonicalStringify_js__WEBPACK_IMPORTED_MODULE_2__.canonicalStringify;\nvar getStoreKeyName = Object.assign(function(fieldName, args, directives) {\n    if (args && directives && directives[\"connection\"] && directives[\"connection\"][\"key\"]) {\n        if (directives[\"connection\"][\"filter\"] && directives[\"connection\"][\"filter\"].length > 0) {\n            var filterKeys = directives[\"connection\"][\"filter\"] ? directives[\"connection\"][\"filter\"] : [];\n            filterKeys.sort();\n            var filteredArgs_1 = {};\n            filterKeys.forEach(function(key) {\n                filteredArgs_1[key] = args[key];\n            });\n            return \"\".concat(directives[\"connection\"][\"key\"], \"(\").concat(storeKeyNameStringify(filteredArgs_1), \")\");\n        } else {\n            return directives[\"connection\"][\"key\"];\n        }\n    }\n    var completeFieldName = fieldName;\n    if (args) {\n        // We can't use `JSON.stringify` here since it's non-deterministic,\n        // and can lead to different store key names being created even though\n        // the `args` object used during creation has the same properties/values.\n        var stringifiedArgs = storeKeyNameStringify(args);\n        completeFieldName += \"(\".concat(stringifiedArgs, \")\");\n    }\n    if (directives) {\n        Object.keys(directives).forEach(function(key) {\n            if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n            if (directives[key] && Object.keys(directives[key]).length) {\n                completeFieldName += \"@\".concat(key, \"(\").concat(storeKeyNameStringify(directives[key]), \")\");\n            } else {\n                completeFieldName += \"@\".concat(key);\n            }\n        });\n    }\n    return completeFieldName;\n}, {\n    setStringify: function(s) {\n        var previous = storeKeyNameStringify;\n        storeKeyNameStringify = s;\n        return previous;\n    }\n});\nfunction argumentsObjectFromField(field, variables) {\n    if (field.arguments && field.arguments.length) {\n        var argObj_1 = {};\n        field.arguments.forEach(function(_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj_1, name, value, variables);\n        });\n        return argObj_1;\n    }\n    return null;\n}\nfunction resultKeyNameFromField(field) {\n    return field.alias ? field.alias.value : field.name.value;\n}\nfunction getTypenameFromResult(result, selectionSet, fragmentMap) {\n    var fragments;\n    for(var _i = 0, _a = selectionSet.selections; _i < _a.length; _i++){\n        var selection = _a[_i];\n        if (isField(selection)) {\n            if (selection.name.value === \"__typename\") {\n                return result[resultKeyNameFromField(selection)];\n            }\n        } else if (fragments) {\n            fragments.push(selection);\n        } else {\n            fragments = [\n                selection\n            ];\n        }\n    }\n    if (typeof result.__typename === \"string\") {\n        return result.__typename;\n    }\n    if (fragments) {\n        for(var _b = 0, fragments_1 = fragments; _b < fragments_1.length; _b++){\n            var selection = fragments_1[_b];\n            var typename = getTypenameFromResult(result, (0,_fragments_js__WEBPACK_IMPORTED_MODULE_3__.getFragmentFromSelection)(selection, fragmentMap).selectionSet, fragmentMap);\n            if (typeof typename === \"string\") {\n                return typename;\n            }\n        }\n    }\n}\nfunction isField(selection) {\n    return selection.kind === \"Field\";\n}\nfunction isInlineFragment(selection) {\n    return selection.kind === \"InlineFragment\";\n} //# sourceMappingURL=storeUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/graphql/transform.js":
/*!********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/graphql/transform.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addTypenameToDocument: () => (/* binding */ addTypenameToDocument),\n/* harmony export */   buildQueryFromSelectionSet: () => (/* binding */ buildQueryFromSelectionSet),\n/* harmony export */   removeArgumentsFromDocument: () => (/* binding */ removeArgumentsFromDocument),\n/* harmony export */   removeClientSetsFromDocument: () => (/* binding */ removeClientSetsFromDocument),\n/* harmony export */   removeConnectionDirectiveFromDocument: () => (/* binding */ removeConnectionDirectiveFromDocument),\n/* harmony export */   removeDirectivesFromDocument: () => (/* binding */ removeDirectivesFromDocument),\n/* harmony export */   removeFragmentSpreadFromDocument: () => (/* binding */ removeFragmentSpreadFromDocument)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals/index.js */ \"(rsc)/./node_modules/@apollo/client/utilities/globals/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/visitor.mjs\");\n/* harmony import */ var _getFromAST_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getFromAST.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/getFromAST.js\");\n/* harmony import */ var _storeUtils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./storeUtils.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/storeUtils.js\");\n/* harmony import */ var _fragments_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fragments.js */ \"(rsc)/./node_modules/@apollo/client/utilities/graphql/fragments.js\");\n/* harmony import */ var _common_arrays_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/arrays.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/arrays.js\");\n\n\n\n\n\n\n\nvar TYPENAME_FIELD = {\n    kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FIELD,\n    name: {\n        kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.NAME,\n        value: \"__typename\"\n    }\n};\nfunction isEmpty(op, fragmentMap) {\n    return !op || op.selectionSet.selections.every(function(selection) {\n        return selection.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FRAGMENT_SPREAD && isEmpty(fragmentMap[selection.name.value], fragmentMap);\n    });\n}\nfunction nullIfDocIsEmpty(doc) {\n    return isEmpty((0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.getOperationDefinition)(doc) || (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.getFragmentDefinition)(doc), (0,_fragments_js__WEBPACK_IMPORTED_MODULE_3__.createFragmentMap)((0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.getFragmentDefinitions)(doc))) ? null : doc;\n}\nfunction getDirectiveMatcher(configs) {\n    var names = new Map();\n    var tests = new Map();\n    configs.forEach(function(directive) {\n        if (directive) {\n            if (directive.name) {\n                names.set(directive.name, directive);\n            } else if (directive.test) {\n                tests.set(directive.test, directive);\n            }\n        }\n    });\n    return function(directive) {\n        var config = names.get(directive.name.value);\n        if (!config && tests.size) {\n            tests.forEach(function(testConfig, test) {\n                if (test(directive)) {\n                    config = testConfig;\n                }\n            });\n        }\n        return config;\n    };\n}\nfunction makeInUseGetterFunction(defaultKey) {\n    var map = new Map();\n    return function inUseGetterFunction(key) {\n        if (key === void 0) {\n            key = defaultKey;\n        }\n        var inUse = map.get(key);\n        if (!inUse) {\n            map.set(key, inUse = {\n                // Variable and fragment spread names used directly within this\n                // operation or fragment definition, as identified by key. These sets\n                // will be populated during the first traversal of the document in\n                // removeDirectivesFromDocument below.\n                variables: new Set(),\n                fragmentSpreads: new Set()\n            });\n        }\n        return inUse;\n    };\n}\nfunction removeDirectivesFromDocument(directives, doc) {\n    (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.checkDocument)(doc);\n    // Passing empty strings to makeInUseGetterFunction means we handle anonymous\n    // operations as if their names were \"\". Anonymous fragment definitions are\n    // not supposed to be possible, but the same default naming strategy seems\n    // appropriate for that case as well.\n    var getInUseByOperationName = makeInUseGetterFunction(\"\");\n    var getInUseByFragmentName = makeInUseGetterFunction(\"\");\n    var getInUse = function(ancestors) {\n        for(var p = 0, ancestor = void 0; p < ancestors.length && (ancestor = ancestors[p]); ++p){\n            if ((0,_common_arrays_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(ancestor)) continue;\n            if (ancestor.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_DEFINITION) {\n                // If an operation is anonymous, we use the empty string as its key.\n                return getInUseByOperationName(ancestor.name && ancestor.name.value);\n            }\n            if (ancestor.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FRAGMENT_DEFINITION) {\n                return getInUseByFragmentName(ancestor.name.value);\n            }\n        }\n        globalThis.__DEV__ !== false && _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(83);\n        return null;\n    };\n    var operationCount = 0;\n    for(var i = doc.definitions.length - 1; i >= 0; --i){\n        if (doc.definitions[i].kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_DEFINITION) {\n            ++operationCount;\n        }\n    }\n    var directiveMatcher = getDirectiveMatcher(directives);\n    var shouldRemoveField = function(nodeDirectives) {\n        return (0,_common_arrays_js__WEBPACK_IMPORTED_MODULE_4__.isNonEmptyArray)(nodeDirectives) && nodeDirectives.map(directiveMatcher).some(function(config) {\n            return config && config.remove;\n        });\n    };\n    var originalFragmentDefsByPath = new Map();\n    // Any time the first traversal of the document below makes a change like\n    // removing a fragment (by returning null), this variable should be set to\n    // true. Once it becomes true, it should never be set to false again. If this\n    // variable remains false throughout the traversal, then we can return the\n    // original doc immediately without any modifications.\n    var firstVisitMadeChanges = false;\n    var fieldOrInlineFragmentVisitor = {\n        enter: function(node) {\n            if (shouldRemoveField(node.directives)) {\n                firstVisitMadeChanges = true;\n                return null;\n            }\n        }\n    };\n    var docWithoutDirectiveSubtrees = (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(doc, {\n        // These two AST node types share the same implementation, defined above.\n        Field: fieldOrInlineFragmentVisitor,\n        InlineFragment: fieldOrInlineFragmentVisitor,\n        VariableDefinition: {\n            enter: function() {\n                // VariableDefinition nodes do not count as variables in use, though\n                // they do contain Variable nodes that might be visited below. To avoid\n                // counting variable declarations as usages, we skip visiting the\n                // contents of this VariableDefinition node by returning false.\n                return false;\n            }\n        },\n        Variable: {\n            enter: function(node, _key, _parent, _path, ancestors) {\n                var inUse = getInUse(ancestors);\n                if (inUse) {\n                    inUse.variables.add(node.name.value);\n                }\n            }\n        },\n        FragmentSpread: {\n            enter: function(node, _key, _parent, _path, ancestors) {\n                if (shouldRemoveField(node.directives)) {\n                    firstVisitMadeChanges = true;\n                    return null;\n                }\n                var inUse = getInUse(ancestors);\n                if (inUse) {\n                    inUse.fragmentSpreads.add(node.name.value);\n                }\n            // We might like to remove this FragmentSpread by returning null here if\n            // the corresponding FragmentDefinition node is also going to be removed\n            // by the logic below, but we can't control the relative order of those\n            // events, so we have to postpone the removal of dangling FragmentSpread\n            // nodes until after the current visit of the document has finished.\n            }\n        },\n        FragmentDefinition: {\n            enter: function(node, _key, _parent, path) {\n                originalFragmentDefsByPath.set(JSON.stringify(path), node);\n            },\n            leave: function(node, _key, _parent, path) {\n                var originalNode = originalFragmentDefsByPath.get(JSON.stringify(path));\n                if (node === originalNode) {\n                    // If the FragmentNode received by this leave function is identical to\n                    // the one received by the corresponding enter function (above), then\n                    // the visitor must not have made any changes within this\n                    // FragmentDefinition node. This fragment definition may still be\n                    // removed if there are no ...spread references to it, but it won't be\n                    // removed just because it has only a __typename field.\n                    return node;\n                }\n                if (// This logic applies only if the document contains one or more\n                // operations, since removing all fragments from a document containing\n                // only fragments makes the document useless.\n                operationCount > 0 && node.selectionSet.selections.every(function(selection) {\n                    return selection.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FIELD && selection.name.value === \"__typename\";\n                })) {\n                    // This is a somewhat opinionated choice: if a FragmentDefinition ends\n                    // up having no fields other than __typename, we remove the whole\n                    // fragment definition, and later prune ...spread references to it.\n                    getInUseByFragmentName(node.name.value).removed = true;\n                    firstVisitMadeChanges = true;\n                    return null;\n                }\n            }\n        },\n        Directive: {\n            leave: function(node) {\n                // If a matching directive is found, remove the directive itself. Note\n                // that this does not remove the target (field, argument, etc) of the\n                // directive, but only the directive itself.\n                if (directiveMatcher(node)) {\n                    firstVisitMadeChanges = true;\n                    return null;\n                }\n            }\n        }\n    });\n    if (!firstVisitMadeChanges) {\n        // If our first pass did not change anything about the document, then there\n        // is no cleanup we need to do, and we can return the original doc.\n        return doc;\n    }\n    // Utility for making sure inUse.transitiveVars is recursively populated.\n    // Because this logic assumes inUse.fragmentSpreads has been completely\n    // populated and inUse.removed has been set if appropriate,\n    // populateTransitiveVars must be called after that information has been\n    // collected by the first traversal of the document.\n    var populateTransitiveVars = function(inUse) {\n        if (!inUse.transitiveVars) {\n            inUse.transitiveVars = new Set(inUse.variables);\n            if (!inUse.removed) {\n                inUse.fragmentSpreads.forEach(function(childFragmentName) {\n                    populateTransitiveVars(getInUseByFragmentName(childFragmentName)).transitiveVars.forEach(function(varName) {\n                        inUse.transitiveVars.add(varName);\n                    });\n                });\n            }\n        }\n        return inUse;\n    };\n    // Since we've been keeping track of fragment spreads used by particular\n    // operations and fragment definitions, we now need to compute the set of all\n    // spreads used (transitively) by any operations in the document.\n    var allFragmentNamesUsed = new Set();\n    docWithoutDirectiveSubtrees.definitions.forEach(function(def) {\n        if (def.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_DEFINITION) {\n            populateTransitiveVars(getInUseByOperationName(def.name && def.name.value)).fragmentSpreads.forEach(function(childFragmentName) {\n                allFragmentNamesUsed.add(childFragmentName);\n            });\n        } else if (def.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FRAGMENT_DEFINITION && // If there are no operations in the document, then all fragment\n        // definitions count as usages of their own fragment names. This heuristic\n        // prevents accidentally removing all fragment definitions from the\n        // document just because it contains no operations that use the fragments.\n        operationCount === 0 && !getInUseByFragmentName(def.name.value).removed) {\n            allFragmentNamesUsed.add(def.name.value);\n        }\n    });\n    // Now that we have added all fragment spreads used by operations to the\n    // allFragmentNamesUsed set, we can complete the set by transitively adding\n    // all fragment spreads used by those fragments, and so on.\n    allFragmentNamesUsed.forEach(function(fragmentName) {\n        // Once all the childFragmentName strings added here have been seen already,\n        // the top-level allFragmentNamesUsed.forEach loop will terminate.\n        populateTransitiveVars(getInUseByFragmentName(fragmentName)).fragmentSpreads.forEach(function(childFragmentName) {\n            allFragmentNamesUsed.add(childFragmentName);\n        });\n    });\n    var fragmentWillBeRemoved = function(fragmentName) {\n        return !!// A fragment definition will be removed if there are no spreads that refer\n        // to it, or the fragment was explicitly removed because it had no fields\n        // other than __typename.\n        (!allFragmentNamesUsed.has(fragmentName) || getInUseByFragmentName(fragmentName).removed);\n    };\n    var enterVisitor = {\n        enter: function(node) {\n            if (fragmentWillBeRemoved(node.name.value)) {\n                return null;\n            }\n        }\n    };\n    return nullIfDocIsEmpty((0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(docWithoutDirectiveSubtrees, {\n        // If the fragment is going to be removed, then leaving any dangling\n        // FragmentSpread nodes with the same name would be a mistake.\n        FragmentSpread: enterVisitor,\n        // This is where the fragment definition is actually removed.\n        FragmentDefinition: enterVisitor,\n        OperationDefinition: {\n            leave: function(node) {\n                // Upon leaving each operation in the depth-first AST traversal, prune\n                // any variables that are declared by the operation but unused within.\n                if (node.variableDefinitions) {\n                    var usedVariableNames_1 = populateTransitiveVars(// If an operation is anonymous, we use the empty string as its key.\n                    getInUseByOperationName(node.name && node.name.value)).transitiveVars;\n                    // According to the GraphQL spec, all variables declared by an\n                    // operation must either be used by that operation or used by some\n                    // fragment included transitively into that operation:\n                    // https://spec.graphql.org/draft/#sec-All-Variables-Used\n                    //\n                    // To stay on the right side of this validation rule, if/when we\n                    // remove the last $var references from an operation or its fragments,\n                    // we must also remove the corresponding $var declaration from the\n                    // enclosing operation. This pruning applies only to operations and\n                    // not fragment definitions, at the moment. Fragments may be able to\n                    // declare variables eventually, but today they can only consume them.\n                    if (usedVariableNames_1.size < node.variableDefinitions.length) {\n                        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, node), {\n                            variableDefinitions: node.variableDefinitions.filter(function(varDef) {\n                                return usedVariableNames_1.has(varDef.variable.name.value);\n                            })\n                        });\n                    }\n                }\n            }\n        }\n    }));\n}\nvar addTypenameToDocument = Object.assign(function(doc) {\n    return (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(doc, {\n        SelectionSet: {\n            enter: function(node, _key, parent) {\n                // Don't add __typename to OperationDefinitions.\n                if (parent && parent.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_DEFINITION) {\n                    return;\n                }\n                // No changes if no selections.\n                var selections = node.selections;\n                if (!selections) {\n                    return;\n                }\n                // If selections already have a __typename, or are part of an\n                // introspection query, do nothing.\n                var skip = selections.some(function(selection) {\n                    return (0,_storeUtils_js__WEBPACK_IMPORTED_MODULE_7__.isField)(selection) && (selection.name.value === \"__typename\" || selection.name.value.lastIndexOf(\"__\", 0) === 0);\n                });\n                if (skip) {\n                    return;\n                }\n                // If this SelectionSet is @export-ed as an input variable, it should\n                // not have a __typename field (see issue #4691).\n                var field = parent;\n                if ((0,_storeUtils_js__WEBPACK_IMPORTED_MODULE_7__.isField)(field) && field.directives && field.directives.some(function(d) {\n                    return d.name.value === \"export\";\n                })) {\n                    return;\n                }\n                // Create and return a new SelectionSet with a __typename Field.\n                return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, node), {\n                    selections: (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__spreadArray)([], selections, true), [\n                        TYPENAME_FIELD\n                    ], false)\n                });\n            }\n        }\n    });\n}, {\n    added: function(field) {\n        return field === TYPENAME_FIELD;\n    }\n});\nvar connectionRemoveConfig = {\n    test: function(directive) {\n        var willRemove = directive.name.value === \"connection\";\n        if (willRemove) {\n            if (!directive.arguments || !directive.arguments.some(function(arg) {\n                return arg.name.value === \"key\";\n            })) {\n                globalThis.__DEV__ !== false && _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(84);\n            }\n        }\n        return willRemove;\n    }\n};\nfunction removeConnectionDirectiveFromDocument(doc) {\n    return removeDirectivesFromDocument([\n        connectionRemoveConfig\n    ], (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.checkDocument)(doc));\n}\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n    if (nestedCheck === void 0) {\n        nestedCheck = true;\n    }\n    return !!selectionSet && selectionSet.selections && selectionSet.selections.some(function(selection) {\n        return hasDirectivesInSelection(directives, selection, nestedCheck);\n    });\n}\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n    if (nestedCheck === void 0) {\n        nestedCheck = true;\n    }\n    if (!(0,_storeUtils_js__WEBPACK_IMPORTED_MODULE_7__.isField)(selection)) {\n        return true;\n    }\n    if (!selection.directives) {\n        return false;\n    }\n    return selection.directives.some(getDirectiveMatcher(directives)) || nestedCheck && hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck);\n}\nfunction getArgumentMatcher(config) {\n    return function argumentMatcher(argument) {\n        return config.some(function(aConfig) {\n            return argument.value && argument.value.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.VARIABLE && argument.value.name && (aConfig.name === argument.value.name.value || aConfig.test && aConfig.test(argument));\n        });\n    };\n}\nfunction removeArgumentsFromDocument(config, doc) {\n    var argMatcher = getArgumentMatcher(config);\n    return nullIfDocIsEmpty((0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(doc, {\n        OperationDefinition: {\n            enter: function(node) {\n                return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, node), {\n                    // Remove matching top level variables definitions.\n                    variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(function(varDef) {\n                        return !config.some(function(arg) {\n                            return arg.name === varDef.variable.name.value;\n                        });\n                    }) : []\n                });\n            }\n        },\n        Field: {\n            enter: function(node) {\n                // If `remove` is set to true for an argument, and an argument match\n                // is found for a field, remove the field as well.\n                var shouldRemoveField = config.some(function(argConfig) {\n                    return argConfig.remove;\n                });\n                if (shouldRemoveField) {\n                    var argMatchCount_1 = 0;\n                    if (node.arguments) {\n                        node.arguments.forEach(function(arg) {\n                            if (argMatcher(arg)) {\n                                argMatchCount_1 += 1;\n                            }\n                        });\n                    }\n                    if (argMatchCount_1 === 1) {\n                        return null;\n                    }\n                }\n            }\n        },\n        Argument: {\n            enter: function(node) {\n                // Remove all matching arguments.\n                if (argMatcher(node)) {\n                    return null;\n                }\n            }\n        }\n    }));\n}\nfunction removeFragmentSpreadFromDocument(config, doc) {\n    function enter(node) {\n        if (config.some(function(def) {\n            return def.name === node.name.value;\n        })) {\n            return null;\n        }\n    }\n    return nullIfDocIsEmpty((0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(doc, {\n        FragmentSpread: {\n            enter: enter\n        },\n        FragmentDefinition: {\n            enter: enter\n        }\n    }));\n}\n// If the incoming document is a query, return it as is. Otherwise, build a\n// new document containing a query operation based on the selection set\n// of the previous main operation.\nfunction buildQueryFromSelectionSet(document) {\n    var definition = (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.getMainDefinition)(document);\n    var definitionOperation = definition.operation;\n    if (definitionOperation === \"query\") {\n        // Already a query, so return the existing document.\n        return document;\n    }\n    // Build a new query using the selection set of the main operation.\n    var modifiedDoc = (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(document, {\n        OperationDefinition: {\n            enter: function(node) {\n                return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, node), {\n                    operation: \"query\"\n                });\n            }\n        }\n    });\n    return modifiedDoc;\n}\n// Remove fields / selection sets that include an @client directive.\nfunction removeClientSetsFromDocument(document) {\n    (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.checkDocument)(document);\n    var modifiedDoc = removeDirectivesFromDocument([\n        {\n            test: function(directive) {\n                return directive.name.value === \"client\";\n            },\n            remove: true\n        }\n    ], document);\n    return modifiedDoc;\n} //# sourceMappingURL=transform.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/graphql/transform.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/observables/Concast.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/observables/Concast.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Concast: () => (/* binding */ Concast)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _Observable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Observable.js */ \"(rsc)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _iteration_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iteration.js */ \"(rsc)/./node_modules/@apollo/client/utilities/observables/iteration.js\");\n/* harmony import */ var _subclassing_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./subclassing.js */ \"(rsc)/./node_modules/@apollo/client/utilities/observables/subclassing.js\");\n\n\n\n\nfunction isPromiseLike(value) {\n    return value && typeof value.then === \"function\";\n}\n// A Concast<T> observable concatenates the given sources into a single\n// non-overlapping sequence of Ts, automatically unwrapping any promises,\n// and broadcasts the T elements of that sequence to any number of\n// subscribers, all without creating a bunch of intermediary Observable\n// wrapper objects.\n//\n// Even though any number of observers can subscribe to the Concast, each\n// source observable is guaranteed to receive at most one subscribe call,\n// and the results are multicast to all observers.\n//\n// In addition to broadcasting every next/error message to this.observers,\n// the Concast stores the most recent message using this.latest, so any\n// new observers can immediately receive the latest message, even if it\n// was originally delivered in the past. This behavior means we can assume\n// every active observer in this.observers has received the same most\n// recent message.\n//\n// With the exception of this.latest replay, a Concast is a \"hot\"\n// observable in the sense that it does not replay past results from the\n// beginning of time for each new observer.\n//\n// Could we have used some existing RxJS class instead? Concast<T> is\n// similar to a BehaviorSubject<T>, because it is multicast and redelivers\n// the latest next/error message to new subscribers. Unlike Subject<T>,\n// Concast<T> does not expose an Observer<T> interface (this.handlers is\n// intentionally private), since Concast<T> gets its inputs from the\n// concatenated sources. If we ever switch to RxJS, there may be some\n// value in reusing their code, but for now we use zen-observable, which\n// does not contain any Subject implementations.\nvar Concast = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Concast, _super);\n    // Not only can the individual elements of the iterable be promises, but\n    // also the iterable itself can be wrapped in a promise.\n    function Concast(sources) {\n        var _this = _super.call(this, function(observer) {\n            _this.addObserver(observer);\n            return function() {\n                return _this.removeObserver(observer);\n            };\n        }) || this;\n        // Active observers receiving broadcast messages. Thanks to this.latest,\n        // we can assume all observers in this Set have received the same most\n        // recent message, though possibly at different times in the past.\n        _this.observers = new Set();\n        _this.promise = new Promise(function(resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        });\n        // Bound handler functions that can be reused for every internal\n        // subscription.\n        _this.handlers = {\n            next: function(result) {\n                if (_this.sub !== null) {\n                    _this.latest = [\n                        \"next\",\n                        result\n                    ];\n                    _this.notify(\"next\", result);\n                    (0,_iteration_js__WEBPACK_IMPORTED_MODULE_1__.iterateObserversSafely)(_this.observers, \"next\", result);\n                }\n            },\n            error: function(error) {\n                var sub = _this.sub;\n                if (sub !== null) {\n                    // Delay unsubscribing from the underlying subscription slightly,\n                    // so that immediately subscribing another observer can keep the\n                    // subscription active.\n                    if (sub) setTimeout(function() {\n                        return sub.unsubscribe();\n                    });\n                    _this.sub = null;\n                    _this.latest = [\n                        \"error\",\n                        error\n                    ];\n                    _this.reject(error);\n                    _this.notify(\"error\", error);\n                    (0,_iteration_js__WEBPACK_IMPORTED_MODULE_1__.iterateObserversSafely)(_this.observers, \"error\", error);\n                }\n            },\n            complete: function() {\n                var _a = _this, sub = _a.sub, _b = _a.sources, sources = _b === void 0 ? [] : _b;\n                if (sub !== null) {\n                    // If complete is called before concast.start, this.sources may be\n                    // undefined, so we use a default value of [] for sources. That works\n                    // here because it falls into the if (!value) {...} block, which\n                    // appropriately terminates the Concast, even if this.sources might\n                    // eventually have been initialized to a non-empty array.\n                    var value = sources.shift();\n                    if (!value) {\n                        if (sub) setTimeout(function() {\n                            return sub.unsubscribe();\n                        });\n                        _this.sub = null;\n                        if (_this.latest && _this.latest[0] === \"next\") {\n                            _this.resolve(_this.latest[1]);\n                        } else {\n                            _this.resolve();\n                        }\n                        _this.notify(\"complete\");\n                        // We do not store this.latest = [\"complete\"], because doing so\n                        // discards useful information about the previous next (or\n                        // error) message. Instead, if new observers subscribe after\n                        // this Concast has completed, they will receive the final\n                        // 'next' message (unless there was an error) immediately\n                        // followed by a 'complete' message (see addObserver).\n                        (0,_iteration_js__WEBPACK_IMPORTED_MODULE_1__.iterateObserversSafely)(_this.observers, \"complete\");\n                    } else if (isPromiseLike(value)) {\n                        value.then(function(obs) {\n                            return _this.sub = obs.subscribe(_this.handlers);\n                        }, _this.handlers.error);\n                    } else {\n                        _this.sub = value.subscribe(_this.handlers);\n                    }\n                }\n            }\n        };\n        _this.nextResultListeners = new Set();\n        // A public way to abort observation and broadcast.\n        _this.cancel = function(reason) {\n            _this.reject(reason);\n            _this.sources = [];\n            _this.handlers.complete();\n        };\n        // Suppress rejection warnings for this.promise, since it's perfectly\n        // acceptable to pay no attention to this.promise if you're consuming\n        // the results through the normal observable API.\n        _this.promise.catch(function(_) {});\n        // If someone accidentally tries to create a Concast using a subscriber\n        // function, recover by creating an Observable from that subscriber and\n        // using it as the source.\n        if (typeof sources === \"function\") {\n            sources = [\n                new _Observable_js__WEBPACK_IMPORTED_MODULE_2__.Observable(sources)\n            ];\n        }\n        if (isPromiseLike(sources)) {\n            sources.then(function(iterable) {\n                return _this.start(iterable);\n            }, _this.handlers.error);\n        } else {\n            _this.start(sources);\n        }\n        return _this;\n    }\n    Concast.prototype.start = function(sources) {\n        if (this.sub !== void 0) return;\n        // In practice, sources is most often simply an Array of observables.\n        // TODO Consider using sources[Symbol.iterator]() to take advantage\n        // of the laziness of non-Array iterables.\n        this.sources = Array.from(sources);\n        // Calling this.handlers.complete() kicks off consumption of the first\n        // source observable. It's tempting to do this step lazily in\n        // addObserver, but this.promise can be accessed without calling\n        // addObserver, so consumption needs to begin eagerly.\n        this.handlers.complete();\n    };\n    Concast.prototype.deliverLastMessage = function(observer) {\n        if (this.latest) {\n            var nextOrError = this.latest[0];\n            var method = observer[nextOrError];\n            if (method) {\n                method.call(observer, this.latest[1]);\n            }\n            // If the subscription is already closed, and the last message was\n            // a 'next' message, simulate delivery of the final 'complete'\n            // message again.\n            if (this.sub === null && nextOrError === \"next\" && observer.complete) {\n                observer.complete();\n            }\n        }\n    };\n    Concast.prototype.addObserver = function(observer) {\n        if (!this.observers.has(observer)) {\n            // Immediately deliver the most recent message, so we can always\n            // be sure all observers have the latest information.\n            this.deliverLastMessage(observer);\n            this.observers.add(observer);\n        }\n    };\n    Concast.prototype.removeObserver = function(observer) {\n        if (this.observers.delete(observer) && this.observers.size < 1) {\n            // In case there are still any listeners in this.nextResultListeners, and\n            // no error or completion has been broadcast yet, make sure those\n            // observers have a chance to run and then remove themselves from\n            // this.observers.\n            this.handlers.complete();\n        }\n    };\n    Concast.prototype.notify = function(method, arg) {\n        var nextResultListeners = this.nextResultListeners;\n        if (nextResultListeners.size) {\n            // Replacing this.nextResultListeners first ensures it does not grow while\n            // we are iterating over it, potentially leading to infinite loops.\n            this.nextResultListeners = new Set();\n            nextResultListeners.forEach(function(listener) {\n                return listener(method, arg);\n            });\n        }\n    };\n    // We need a way to run callbacks just *before* the next result (or error or\n    // completion) is delivered by this Concast, so we can be sure any code that\n    // runs as a result of delivering that result/error observes the effects of\n    // running the callback(s). It was tempting to reuse the Observer type instead\n    // of introducing NextResultListener, but that messes with the sizing and\n    // maintenance of this.observers, and ends up being more code overall.\n    Concast.prototype.beforeNext = function(callback) {\n        var called = false;\n        this.nextResultListeners.add(function(method, arg) {\n            if (!called) {\n                called = true;\n                callback(method, arg);\n            }\n        });\n    };\n    return Concast;\n}(_Observable_js__WEBPACK_IMPORTED_MODULE_2__.Observable);\n\n// Necessary because the Concast constructor has a different signature\n// than the Observable constructor.\n(0,_subclassing_js__WEBPACK_IMPORTED_MODULE_3__.fixObservableSubclass)(Concast); //# sourceMappingURL=Concast.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/observables/Concast.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/observables/asyncMap.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/observables/asyncMap.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   asyncMap: () => (/* binding */ asyncMap)\n/* harmony export */ });\n/* harmony import */ var _Observable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Observable.js */ \"(rsc)/./node_modules/zen-observable-ts/module.js\");\n\n// Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\nfunction asyncMap(observable, mapFn, catchFn) {\n    return new _Observable_js__WEBPACK_IMPORTED_MODULE_0__.Observable(function(observer) {\n        var promiseQueue = {\n            // Normally we would initialize promiseQueue to Promise.resolve(), but\n            // in this case, for backwards compatibility, we need to be careful to\n            // invoke the first callback synchronously.\n            then: function(callback) {\n                return new Promise(function(resolve) {\n                    return resolve(callback());\n                });\n            }\n        };\n        function makeCallback(examiner, key) {\n            return function(arg) {\n                if (examiner) {\n                    var both = function() {\n                        // If the observer is closed, we don't want to continue calling the\n                        // mapping function - it's result will be swallowed anyways.\n                        return observer.closed ? /* will be swallowed */ 0 : examiner(arg);\n                    };\n                    promiseQueue = promiseQueue.then(both, both).then(function(result) {\n                        return observer.next(result);\n                    }, function(error) {\n                        return observer.error(error);\n                    });\n                } else {\n                    observer[key](arg);\n                }\n            };\n        }\n        var handler = {\n            next: makeCallback(mapFn, \"next\"),\n            error: makeCallback(catchFn, \"error\"),\n            complete: function() {\n                // no need to reassign `promiseQueue`, after `observer.complete`,\n                // the observer will be closed and short-circuit everything anyways\n                /*promiseQueue = */ promiseQueue.then(function() {\n                    return observer.complete();\n                });\n            }\n        };\n        var sub = observable.subscribe(handler);\n        return function() {\n            return sub.unsubscribe();\n        };\n    });\n} //# sourceMappingURL=asyncMap.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL29ic2VydmFibGVzL2FzeW5jTWFwLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTZDO0FBQzdDLHNFQUFzRTtBQUN0RSw2Q0FBNkM7QUFDdEMsU0FBU0MsU0FBU0MsVUFBVSxFQUFFQyxLQUFLLEVBQUVDLE9BQU87SUFDL0MsT0FBTyxJQUFJSixzREFBVUEsQ0FBQyxTQUFVSyxRQUFRO1FBQ3BDLElBQUlDLGVBQWU7WUFDZixzRUFBc0U7WUFDdEUsc0VBQXNFO1lBQ3RFLDJDQUEyQztZQUMzQ0MsTUFBTSxTQUFVQyxRQUFRO2dCQUNwQixPQUFPLElBQUlDLFFBQVEsU0FBVUMsT0FBTztvQkFBSSxPQUFPQSxRQUFRRjtnQkFBYTtZQUN4RTtRQUNKO1FBQ0EsU0FBU0csYUFBYUMsUUFBUSxFQUFFQyxHQUFHO1lBQy9CLE9BQU8sU0FBVUMsR0FBRztnQkFDaEIsSUFBSUYsVUFBVTtvQkFDVixJQUFJRyxPQUFPO3dCQUNQLG1FQUFtRTt3QkFDbkUsNERBQTREO3dCQUM1RCxPQUFPVixTQUFTVyxNQUFNLEdBQ2xCLHFCQUFxQixHQUFHLElBQ3RCSixTQUFTRTtvQkFDbkI7b0JBQ0FSLGVBQWVBLGFBQWFDLElBQUksQ0FBQ1EsTUFBTUEsTUFBTVIsSUFBSSxDQUFDLFNBQVVVLE1BQU07d0JBQUksT0FBT1osU0FBU2EsSUFBSSxDQUFDRDtvQkFBUyxHQUFHLFNBQVVFLEtBQUs7d0JBQUksT0FBT2QsU0FBU2MsS0FBSyxDQUFDQTtvQkFBUTtnQkFDNUosT0FDSztvQkFDRGQsUUFBUSxDQUFDUSxJQUFJLENBQUNDO2dCQUNsQjtZQUNKO1FBQ0o7UUFDQSxJQUFJTSxVQUFVO1lBQ1ZGLE1BQU1QLGFBQWFSLE9BQU87WUFDMUJnQixPQUFPUixhQUFhUCxTQUFTO1lBQzdCaUIsVUFBVTtnQkFDTixpRUFBaUU7Z0JBQ2pFLG1FQUFtRTtnQkFDbkUsaUJBQWlCLEdBQUdmLGFBQWFDLElBQUksQ0FBQztvQkFBYyxPQUFPRixTQUFTZ0IsUUFBUTtnQkFBSTtZQUNwRjtRQUNKO1FBQ0EsSUFBSUMsTUFBTXBCLFdBQVdxQixTQUFTLENBQUNIO1FBQy9CLE9BQU87WUFBYyxPQUFPRSxJQUFJRSxXQUFXO1FBQUk7SUFDbkQ7QUFDSixFQUNBLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvb2JzZXJ2YWJsZXMvYXN5bmNNYXAuanM/YWYyOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4vT2JzZXJ2YWJsZS5qc1wiO1xuLy8gTGlrZSBPYnNlcnZhYmxlLnByb3RvdHlwZS5tYXAsIGV4Y2VwdCB0aGF0IHRoZSBtYXBwaW5nIGZ1bmN0aW9uIGNhblxuLy8gb3B0aW9uYWxseSByZXR1cm4gYSBQcm9taXNlIChvciBiZSBhc3luYykuXG5leHBvcnQgZnVuY3Rpb24gYXN5bmNNYXAob2JzZXJ2YWJsZSwgbWFwRm4sIGNhdGNoRm4pIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHZhciBwcm9taXNlUXVldWUgPSB7XG4gICAgICAgICAgICAvLyBOb3JtYWxseSB3ZSB3b3VsZCBpbml0aWFsaXplIHByb21pc2VRdWV1ZSB0byBQcm9taXNlLnJlc29sdmUoKSwgYnV0XG4gICAgICAgICAgICAvLyBpbiB0aGlzIGNhc2UsIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgd2UgbmVlZCB0byBiZSBjYXJlZnVsIHRvXG4gICAgICAgICAgICAvLyBpbnZva2UgdGhlIGZpcnN0IGNhbGxiYWNrIHN5bmNocm9ub3VzbHkuXG4gICAgICAgICAgICB0aGVuOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmV0dXJuIHJlc29sdmUoY2FsbGJhY2soKSk7IH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgZnVuY3Rpb24gbWFrZUNhbGxiYWNrKGV4YW1pbmVyLCBrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV4YW1pbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBib3RoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIG9ic2VydmVyIGlzIGNsb3NlZCwgd2UgZG9uJ3Qgd2FudCB0byBjb250aW51ZSBjYWxsaW5nIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWFwcGluZyBmdW5jdGlvbiAtIGl0J3MgcmVzdWx0IHdpbGwgYmUgc3dhbGxvd2VkIGFueXdheXMuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JzZXJ2ZXIuY2xvc2VkID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiB3aWxsIGJlIHN3YWxsb3dlZCAqLyAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBleGFtaW5lcihhcmcpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBwcm9taXNlUXVldWUgPSBwcm9taXNlUXVldWUudGhlbihib3RoLCBib3RoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsgcmV0dXJuIG9ic2VydmVyLm5leHQocmVzdWx0KTsgfSwgZnVuY3Rpb24gKGVycm9yKSB7IHJldHVybiBvYnNlcnZlci5lcnJvcihlcnJvcik7IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXJba2V5XShhcmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhhbmRsZXIgPSB7XG4gICAgICAgICAgICBuZXh0OiBtYWtlQ2FsbGJhY2sobWFwRm4sIFwibmV4dFwiKSxcbiAgICAgICAgICAgIGVycm9yOiBtYWtlQ2FsbGJhY2soY2F0Y2hGbiwgXCJlcnJvclwiKSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gbm8gbmVlZCB0byByZWFzc2lnbiBgcHJvbWlzZVF1ZXVlYCwgYWZ0ZXIgYG9ic2VydmVyLmNvbXBsZXRlYCxcbiAgICAgICAgICAgICAgICAvLyB0aGUgb2JzZXJ2ZXIgd2lsbCBiZSBjbG9zZWQgYW5kIHNob3J0LWNpcmN1aXQgZXZlcnl0aGluZyBhbnl3YXlzXG4gICAgICAgICAgICAgICAgLypwcm9taXNlUXVldWUgPSAqLyBwcm9taXNlUXVldWUudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBvYnNlcnZlci5jb21wbGV0ZSgpOyB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIHZhciBzdWIgPSBvYnNlcnZhYmxlLnN1YnNjcmliZShoYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1Yi51bnN1YnNjcmliZSgpOyB9O1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXN5bmNNYXAuanMubWFwIl0sIm5hbWVzIjpbIk9ic2VydmFibGUiLCJhc3luY01hcCIsIm9ic2VydmFibGUiLCJtYXBGbiIsImNhdGNoRm4iLCJvYnNlcnZlciIsInByb21pc2VRdWV1ZSIsInRoZW4iLCJjYWxsYmFjayIsIlByb21pc2UiLCJyZXNvbHZlIiwibWFrZUNhbGxiYWNrIiwiZXhhbWluZXIiLCJrZXkiLCJhcmciLCJib3RoIiwiY2xvc2VkIiwicmVzdWx0IiwibmV4dCIsImVycm9yIiwiaGFuZGxlciIsImNvbXBsZXRlIiwic3ViIiwic3Vic2NyaWJlIiwidW5zdWJzY3JpYmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/observables/asyncMap.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/observables/iteration.js":
/*!************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/observables/iteration.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   iterateObserversSafely: () => (/* binding */ iterateObserversSafely)\n/* harmony export */ });\nfunction iterateObserversSafely(observers, method, argument) {\n    // In case observers is modified during iteration, we need to commit to the\n    // original elements, which also provides an opportunity to filter them down\n    // to just the observers with the given method.\n    var observersWithMethod = [];\n    observers.forEach(function(obs) {\n        return obs[method] && observersWithMethod.push(obs);\n    });\n    observersWithMethod.forEach(function(obs) {\n        return obs[method](argument);\n    });\n} //# sourceMappingURL=iteration.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL29ic2VydmFibGVzL2l0ZXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsdUJBQXVCQyxTQUFTLEVBQUVDLE1BQU0sRUFBRUMsUUFBUTtJQUM5RCwyRUFBMkU7SUFDM0UsNEVBQTRFO0lBQzVFLCtDQUErQztJQUMvQyxJQUFJQyxzQkFBc0IsRUFBRTtJQUM1QkgsVUFBVUksT0FBTyxDQUFDLFNBQVVDLEdBQUc7UUFBSSxPQUFPQSxHQUFHLENBQUNKLE9BQU8sSUFBSUUsb0JBQW9CRyxJQUFJLENBQUNEO0lBQU07SUFDeEZGLG9CQUFvQkMsT0FBTyxDQUFDLFNBQVVDLEdBQUc7UUFBSSxPQUFPQSxHQUFHLENBQUNKLE9BQU8sQ0FBQ0M7SUFBVztBQUMvRSxFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvb2JzZXJ2YWJsZXMvaXRlcmF0aW9uLmpzP2I0NzgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGl0ZXJhdGVPYnNlcnZlcnNTYWZlbHkob2JzZXJ2ZXJzLCBtZXRob2QsIGFyZ3VtZW50KSB7XG4gICAgLy8gSW4gY2FzZSBvYnNlcnZlcnMgaXMgbW9kaWZpZWQgZHVyaW5nIGl0ZXJhdGlvbiwgd2UgbmVlZCB0byBjb21taXQgdG8gdGhlXG4gICAgLy8gb3JpZ2luYWwgZWxlbWVudHMsIHdoaWNoIGFsc28gcHJvdmlkZXMgYW4gb3Bwb3J0dW5pdHkgdG8gZmlsdGVyIHRoZW0gZG93blxuICAgIC8vIHRvIGp1c3QgdGhlIG9ic2VydmVycyB3aXRoIHRoZSBnaXZlbiBtZXRob2QuXG4gICAgdmFyIG9ic2VydmVyc1dpdGhNZXRob2QgPSBbXTtcbiAgICBvYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JzKSB7IHJldHVybiBvYnNbbWV0aG9kXSAmJiBvYnNlcnZlcnNXaXRoTWV0aG9kLnB1c2gob2JzKTsgfSk7XG4gICAgb2JzZXJ2ZXJzV2l0aE1ldGhvZC5mb3JFYWNoKGZ1bmN0aW9uIChvYnMpIHsgcmV0dXJuIG9ic1ttZXRob2RdKGFyZ3VtZW50KTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVyYXRpb24uanMubWFwIl0sIm5hbWVzIjpbIml0ZXJhdGVPYnNlcnZlcnNTYWZlbHkiLCJvYnNlcnZlcnMiLCJtZXRob2QiLCJhcmd1bWVudCIsIm9ic2VydmVyc1dpdGhNZXRob2QiLCJmb3JFYWNoIiwib2JzIiwicHVzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/observables/iteration.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/utilities/observables/subclassing.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@apollo/client/utilities/observables/subclassing.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fixObservableSubclass: () => (/* binding */ fixObservableSubclass)\n/* harmony export */ });\n/* harmony import */ var _Observable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Observable.js */ \"(rsc)/./node_modules/zen-observable-ts/module.js\");\n/* harmony import */ var _common_canUse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/canUse.js */ \"(rsc)/./node_modules/@apollo/client/utilities/common/canUse.js\");\n\n\n// Generic implementations of Observable.prototype methods like map and\n// filter need to know how to create a new Observable from an Observable\n// subclass (like Concast or ObservableQuery). Those methods assume\n// (perhaps unwisely?) that they can call the subtype's constructor with a\n// Subscriber function, even though the subclass constructor might expect\n// different parameters. Defining this static Symbol.species property on\n// the subclass is a hint to generic Observable code to use the default\n// constructor instead of trying to do `new Subclass(observer => ...)`.\nfunction fixObservableSubclass(subclass) {\n    function set(key) {\n        // Object.defineProperty is necessary because the Symbol.species\n        // property is a getter by default in modern JS environments, so we\n        // can't assign to it with a normal assignment expression.\n        Object.defineProperty(subclass, key, {\n            value: _Observable_js__WEBPACK_IMPORTED_MODULE_0__.Observable\n        });\n    }\n    if (_common_canUse_js__WEBPACK_IMPORTED_MODULE_1__.canUseSymbol && Symbol.species) {\n        set(Symbol.species);\n    }\n    // The \"@@species\" string is used as a fake Symbol.species value in some\n    // polyfill systems (including the SymbolSpecies variable used by\n    // zen-observable), so we should set it as well, to be safe.\n    set(\"@@species\");\n    return subclass;\n} //# sourceMappingURL=subclassing.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdXRpbGl0aWVzL29ic2VydmFibGVzL3N1YmNsYXNzaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2QztBQUNNO0FBQ25ELHVFQUF1RTtBQUN2RSx3RUFBd0U7QUFDeEUsbUVBQW1FO0FBQ25FLDBFQUEwRTtBQUMxRSx5RUFBeUU7QUFDekUsd0VBQXdFO0FBQ3hFLHVFQUF1RTtBQUN2RSx1RUFBdUU7QUFDaEUsU0FBU0Usc0JBQXNCQyxRQUFRO0lBQzFDLFNBQVNDLElBQUlDLEdBQUc7UUFDWixnRUFBZ0U7UUFDaEUsbUVBQW1FO1FBQ25FLDBEQUEwRDtRQUMxREMsT0FBT0MsY0FBYyxDQUFDSixVQUFVRSxLQUFLO1lBQUVHLE9BQU9SLHNEQUFVQTtRQUFDO0lBQzdEO0lBQ0EsSUFBSUMsMkRBQVlBLElBQUlRLE9BQU9DLE9BQU8sRUFBRTtRQUNoQ04sSUFBSUssT0FBT0MsT0FBTztJQUN0QjtJQUNBLHdFQUF3RTtJQUN4RSxpRUFBaUU7SUFDakUsNERBQTREO0lBQzVETixJQUFJO0lBQ0osT0FBT0Q7QUFDWCxFQUNBLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC91dGlsaXRpZXMvb2JzZXJ2YWJsZXMvc3ViY2xhc3NpbmcuanM/YTFmMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4vT2JzZXJ2YWJsZS5qc1wiO1xuaW1wb3J0IHsgY2FuVXNlU3ltYm9sIH0gZnJvbSBcIi4uL2NvbW1vbi9jYW5Vc2UuanNcIjtcbi8vIEdlbmVyaWMgaW1wbGVtZW50YXRpb25zIG9mIE9ic2VydmFibGUucHJvdG90eXBlIG1ldGhvZHMgbGlrZSBtYXAgYW5kXG4vLyBmaWx0ZXIgbmVlZCB0byBrbm93IGhvdyB0byBjcmVhdGUgYSBuZXcgT2JzZXJ2YWJsZSBmcm9tIGFuIE9ic2VydmFibGVcbi8vIHN1YmNsYXNzIChsaWtlIENvbmNhc3Qgb3IgT2JzZXJ2YWJsZVF1ZXJ5KS4gVGhvc2UgbWV0aG9kcyBhc3N1bWVcbi8vIChwZXJoYXBzIHVud2lzZWx5PykgdGhhdCB0aGV5IGNhbiBjYWxsIHRoZSBzdWJ0eXBlJ3MgY29uc3RydWN0b3Igd2l0aCBhXG4vLyBTdWJzY3JpYmVyIGZ1bmN0aW9uLCBldmVuIHRob3VnaCB0aGUgc3ViY2xhc3MgY29uc3RydWN0b3IgbWlnaHQgZXhwZWN0XG4vLyBkaWZmZXJlbnQgcGFyYW1ldGVycy4gRGVmaW5pbmcgdGhpcyBzdGF0aWMgU3ltYm9sLnNwZWNpZXMgcHJvcGVydHkgb25cbi8vIHRoZSBzdWJjbGFzcyBpcyBhIGhpbnQgdG8gZ2VuZXJpYyBPYnNlcnZhYmxlIGNvZGUgdG8gdXNlIHRoZSBkZWZhdWx0XG4vLyBjb25zdHJ1Y3RvciBpbnN0ZWFkIG9mIHRyeWluZyB0byBkbyBgbmV3IFN1YmNsYXNzKG9ic2VydmVyID0+IC4uLilgLlxuZXhwb3J0IGZ1bmN0aW9uIGZpeE9ic2VydmFibGVTdWJjbGFzcyhzdWJjbGFzcykge1xuICAgIGZ1bmN0aW9uIHNldChrZXkpIHtcbiAgICAgICAgLy8gT2JqZWN0LmRlZmluZVByb3BlcnR5IGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHRoZSBTeW1ib2wuc3BlY2llc1xuICAgICAgICAvLyBwcm9wZXJ0eSBpcyBhIGdldHRlciBieSBkZWZhdWx0IGluIG1vZGVybiBKUyBlbnZpcm9ubWVudHMsIHNvIHdlXG4gICAgICAgIC8vIGNhbid0IGFzc2lnbiB0byBpdCB3aXRoIGEgbm9ybWFsIGFzc2lnbm1lbnQgZXhwcmVzc2lvbi5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN1YmNsYXNzLCBrZXksIHsgdmFsdWU6IE9ic2VydmFibGUgfSk7XG4gICAgfVxuICAgIGlmIChjYW5Vc2VTeW1ib2wgJiYgU3ltYm9sLnNwZWNpZXMpIHtcbiAgICAgICAgc2V0KFN5bWJvbC5zcGVjaWVzKTtcbiAgICB9XG4gICAgLy8gVGhlIFwiQEBzcGVjaWVzXCIgc3RyaW5nIGlzIHVzZWQgYXMgYSBmYWtlIFN5bWJvbC5zcGVjaWVzIHZhbHVlIGluIHNvbWVcbiAgICAvLyBwb2x5ZmlsbCBzeXN0ZW1zIChpbmNsdWRpbmcgdGhlIFN5bWJvbFNwZWNpZXMgdmFyaWFibGUgdXNlZCBieVxuICAgIC8vIHplbi1vYnNlcnZhYmxlKSwgc28gd2Ugc2hvdWxkIHNldCBpdCBhcyB3ZWxsLCB0byBiZSBzYWZlLlxuICAgIHNldChcIkBAc3BlY2llc1wiKTtcbiAgICByZXR1cm4gc3ViY2xhc3M7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJjbGFzc2luZy5qcy5tYXAiXSwibmFtZXMiOlsiT2JzZXJ2YWJsZSIsImNhblVzZVN5bWJvbCIsImZpeE9ic2VydmFibGVTdWJjbGFzcyIsInN1YmNsYXNzIiwic2V0Iiwia2V5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIlN5bWJvbCIsInNwZWNpZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/utilities/observables/subclassing.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/client/version.js":
/*!************************************************!*\
  !*** ./node_modules/@apollo/client/version.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\nvar version = \"3.9.0\"; //# sourceMappingURL=version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9jbGllbnQvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sSUFBSUEsVUFBVSxRQUFRLENBQzdCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWRvY3MtZnJvbi1lbmQtbmV4dC8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL2NsaWVudC92ZXJzaW9uLmpzPzZmZGIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciB2ZXJzaW9uID0gXCIzLjkuMFwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOlsidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/client/version.js\n");

/***/ })

};
;
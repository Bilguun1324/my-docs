"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["react-syntax-highlighter_languages_refractor_systemd"],{

/***/ "(app-pages-browser)/./node_modules/refractor/lang/systemd.js":
/*!************************************************!*\
  !*** ./node_modules/refractor/lang/systemd.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nmodule.exports = systemd;\nsystemd.displayName = \"systemd\";\nsystemd.aliases = [];\nfunction systemd(Prism) {\n    // https://www.freedesktop.org/software/systemd/man/systemd.syntax.html\n    ;\n    (function(Prism) {\n        var comment = {\n            pattern: /^[;#].*/m,\n            greedy: true\n        };\n        var quotesSource = /\"(?:[^\\r\\n\"\\\\]|\\\\(?:[^\\r]|\\r\\n?))*\"(?!\\S)/.source;\n        Prism.languages.systemd = {\n            comment: comment,\n            section: {\n                pattern: /^\\[[^\\n\\r\\[\\]]*\\](?=[ \\t]*$)/m,\n                greedy: true,\n                inside: {\n                    punctuation: /^\\[|\\]$/,\n                    \"section-name\": {\n                        pattern: /[\\s\\S]+/,\n                        alias: \"selector\"\n                    }\n                }\n            },\n            key: {\n                pattern: /^[^\\s=]+(?=[ \\t]*=)/m,\n                greedy: true,\n                alias: \"attr-name\"\n            },\n            value: {\n                // This pattern is quite complex because of two properties:\n                //  1) Quotes (strings) must be preceded by a space. Since we can't use lookbehinds, we have to \"resolve\"\n                //     the lookbehind. You will see this in the main loop where spaces are handled separately.\n                //  2) Line continuations.\n                //     After line continuations, empty lines and comments are ignored so we have to consume them.\n                pattern: RegExp(/(=[ \\t]*(?!\\s))/.source + // the value either starts with quotes or not\n                \"(?:\" + quotesSource + '|(?=[^\"\\r\\n]))' + // main loop\n                \"(?:\" + (/[^\\s\\\\]/.source + // handle spaces separately because of quotes\n                \"|\" + '[ \t]+(?:(?![ \t\"])|' + quotesSource + \")\" + // line continuation\n                \"|\" + /\\\\[\\r\\n]+(?:[#;].*[\\r\\n]+)*(?![#;])/.source) + \")*\"),\n                lookbehind: true,\n                greedy: true,\n                alias: \"attr-value\",\n                inside: {\n                    comment: comment,\n                    quoted: {\n                        pattern: RegExp(/(^|\\s)/.source + quotesSource),\n                        lookbehind: true,\n                        greedy: true\n                    },\n                    punctuation: /\\\\$/m,\n                    boolean: {\n                        pattern: /^(?:false|no|off|on|true|yes)$/,\n                        greedy: true\n                    }\n                }\n            },\n            punctuation: /=/\n        };\n    })(Prism);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWZyYWN0b3IvbGFuZy9zeXN0ZW1kLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBR0M7QUFDakJBLFFBQVFDLFdBQVcsR0FBRztBQUN0QkQsUUFBUUUsT0FBTyxHQUFHLEVBQUU7QUFDcEIsU0FBU0YsUUFBUUcsS0FBSztJQUNwQix1RUFBdUU7O0lBQ3JFLFVBQVVBLEtBQUs7UUFDZixJQUFJQyxVQUFVO1lBQ1pDLFNBQVM7WUFDVEMsUUFBUTtRQUNWO1FBQ0EsSUFBSUMsZUFBZSw0Q0FBNENDLE1BQU07UUFDckVMLE1BQU1NLFNBQVMsQ0FBQ1QsT0FBTyxHQUFHO1lBQ3hCSSxTQUFTQTtZQUNUTSxTQUFTO2dCQUNQTCxTQUFTO2dCQUNUQyxRQUFRO2dCQUNSSyxRQUFRO29CQUNOQyxhQUFhO29CQUNiLGdCQUFnQjt3QkFDZFAsU0FBUzt3QkFDVFEsT0FBTztvQkFDVDtnQkFDRjtZQUNGO1lBQ0FDLEtBQUs7Z0JBQ0hULFNBQVM7Z0JBQ1RDLFFBQVE7Z0JBQ1JPLE9BQU87WUFDVDtZQUNBRSxPQUFPO2dCQUNMLDJEQUEyRDtnQkFDM0QseUdBQXlHO2dCQUN6Ryw4RkFBOEY7Z0JBQzlGLDBCQUEwQjtnQkFDMUIsaUdBQWlHO2dCQUNqR1YsU0FBU1csT0FDUCxrQkFBa0JSLE1BQU0sR0FBRyw2Q0FBNkM7Z0JBQ3RFLFFBQ0FELGVBQ0EsbUJBQW1CLFlBQVk7Z0JBQy9CLFFBQ0MsV0FBVUMsTUFBTSxHQUFHLDZDQUE2QztnQkFDL0QsTUFDQSx1QkFDQUQsZUFDQSxNQUFNLG9CQUFvQjtnQkFDMUIsTUFDQSxzQ0FBc0NDLE1BQU0sSUFDOUM7Z0JBRUpTLFlBQVk7Z0JBQ1pYLFFBQVE7Z0JBQ1JPLE9BQU87Z0JBQ1BGLFFBQVE7b0JBQ05QLFNBQVNBO29CQUNUYyxRQUFRO3dCQUNOYixTQUFTVyxPQUFPLFNBQVNSLE1BQU0sR0FBR0Q7d0JBQ2xDVSxZQUFZO3dCQUNaWCxRQUFRO29CQUNWO29CQUNBTSxhQUFhO29CQUNiTyxTQUFTO3dCQUNQZCxTQUFTO3dCQUNUQyxRQUFRO29CQUNWO2dCQUNGO1lBQ0Y7WUFDQU0sYUFBYTtRQUNmO0lBQ0YsR0FBR1Q7QUFDTCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvc3lzdGVtZC5qcz80YjkzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN5c3RlbWRcbnN5c3RlbWQuZGlzcGxheU5hbWUgPSAnc3lzdGVtZCdcbnN5c3RlbWQuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBzeXN0ZW1kKFByaXNtKSB7XG4gIC8vIGh0dHBzOi8vd3d3LmZyZWVkZXNrdG9wLm9yZy9zb2Z0d2FyZS9zeXN0ZW1kL21hbi9zeXN0ZW1kLnN5bnRheC5odG1sXG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgdmFyIGNvbW1lbnQgPSB7XG4gICAgICBwYXR0ZXJuOiAvXls7I10uKi9tLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfVxuICAgIHZhciBxdW90ZXNTb3VyY2UgPSAvXCIoPzpbXlxcclxcblwiXFxcXF18XFxcXCg/OlteXFxyXXxcXHJcXG4/KSkqXCIoPyFcXFMpLy5zb3VyY2VcbiAgICBQcmlzbS5sYW5ndWFnZXMuc3lzdGVtZCA9IHtcbiAgICAgIGNvbW1lbnQ6IGNvbW1lbnQsXG4gICAgICBzZWN0aW9uOiB7XG4gICAgICAgIHBhdHRlcm46IC9eXFxbW15cXG5cXHJcXFtcXF1dKlxcXSg/PVsgXFx0XSokKS9tLFxuICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIHB1bmN0dWF0aW9uOiAvXlxcW3xcXF0kLyxcbiAgICAgICAgICAnc2VjdGlvbi1uYW1lJzoge1xuICAgICAgICAgICAgcGF0dGVybjogL1tcXHNcXFNdKy8sXG4gICAgICAgICAgICBhbGlhczogJ3NlbGVjdG9yJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGtleToge1xuICAgICAgICBwYXR0ZXJuOiAvXlteXFxzPV0rKD89WyBcXHRdKj0pL20sXG4gICAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgICAgYWxpYXM6ICdhdHRyLW5hbWUnXG4gICAgICB9LFxuICAgICAgdmFsdWU6IHtcbiAgICAgICAgLy8gVGhpcyBwYXR0ZXJuIGlzIHF1aXRlIGNvbXBsZXggYmVjYXVzZSBvZiB0d28gcHJvcGVydGllczpcbiAgICAgICAgLy8gIDEpIFF1b3RlcyAoc3RyaW5ncykgbXVzdCBiZSBwcmVjZWRlZCBieSBhIHNwYWNlLiBTaW5jZSB3ZSBjYW4ndCB1c2UgbG9va2JlaGluZHMsIHdlIGhhdmUgdG8gXCJyZXNvbHZlXCJcbiAgICAgICAgLy8gICAgIHRoZSBsb29rYmVoaW5kLiBZb3Ugd2lsbCBzZWUgdGhpcyBpbiB0aGUgbWFpbiBsb29wIHdoZXJlIHNwYWNlcyBhcmUgaGFuZGxlZCBzZXBhcmF0ZWx5LlxuICAgICAgICAvLyAgMikgTGluZSBjb250aW51YXRpb25zLlxuICAgICAgICAvLyAgICAgQWZ0ZXIgbGluZSBjb250aW51YXRpb25zLCBlbXB0eSBsaW5lcyBhbmQgY29tbWVudHMgYXJlIGlnbm9yZWQgc28gd2UgaGF2ZSB0byBjb25zdW1lIHRoZW0uXG4gICAgICAgIHBhdHRlcm46IFJlZ0V4cChcbiAgICAgICAgICAvKD1bIFxcdF0qKD8hXFxzKSkvLnNvdXJjZSArIC8vIHRoZSB2YWx1ZSBlaXRoZXIgc3RhcnRzIHdpdGggcXVvdGVzIG9yIG5vdFxuICAgICAgICAgICAgJyg/OicgK1xuICAgICAgICAgICAgcXVvdGVzU291cmNlICtcbiAgICAgICAgICAgICd8KD89W15cIlxcclxcbl0pKScgKyAvLyBtYWluIGxvb3BcbiAgICAgICAgICAgICcoPzonICtcbiAgICAgICAgICAgICgvW15cXHNcXFxcXS8uc291cmNlICsgLy8gaGFuZGxlIHNwYWNlcyBzZXBhcmF0ZWx5IGJlY2F1c2Ugb2YgcXVvdGVzXG4gICAgICAgICAgICAgICd8JyArXG4gICAgICAgICAgICAgICdbIFxcdF0rKD86KD8hWyBcXHRcIl0pfCcgK1xuICAgICAgICAgICAgICBxdW90ZXNTb3VyY2UgK1xuICAgICAgICAgICAgICAnKScgKyAvLyBsaW5lIGNvbnRpbnVhdGlvblxuICAgICAgICAgICAgICAnfCcgK1xuICAgICAgICAgICAgICAvXFxcXFtcXHJcXG5dKyg/OlsjO10uKltcXHJcXG5dKykqKD8hWyM7XSkvLnNvdXJjZSkgK1xuICAgICAgICAgICAgJykqJ1xuICAgICAgICApLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgIGFsaWFzOiAnYXR0ci12YWx1ZScsXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIGNvbW1lbnQ6IGNvbW1lbnQsXG4gICAgICAgICAgcXVvdGVkOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiBSZWdFeHAoLyhefFxccykvLnNvdXJjZSArIHF1b3Rlc1NvdXJjZSksXG4gICAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwdW5jdHVhdGlvbjogL1xcXFwkL20sXG4gICAgICAgICAgYm9vbGVhbjoge1xuICAgICAgICAgICAgcGF0dGVybjogL14oPzpmYWxzZXxub3xvZmZ8b258dHJ1ZXx5ZXMpJC8sXG4gICAgICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBwdW5jdHVhdGlvbjogLz0vXG4gICAgfVxuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic3lzdGVtZCIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwiY29tbWVudCIsInBhdHRlcm4iLCJncmVlZHkiLCJxdW90ZXNTb3VyY2UiLCJzb3VyY2UiLCJsYW5ndWFnZXMiLCJzZWN0aW9uIiwiaW5zaWRlIiwicHVuY3R1YXRpb24iLCJhbGlhcyIsImtleSIsInZhbHVlIiwiUmVnRXhwIiwibG9va2JlaGluZCIsInF1b3RlZCIsImJvb2xlYW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/refractor/lang/systemd.js\n"));

/***/ })

}]);
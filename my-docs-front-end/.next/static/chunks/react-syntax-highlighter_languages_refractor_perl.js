"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["react-syntax-highlighter_languages_refractor_perl"],{

/***/ "(app-pages-browser)/./node_modules/refractor/lang/perl.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/perl.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nmodule.exports = perl;\nperl.displayName = \"perl\";\nperl.aliases = [];\nfunction perl(Prism) {\n    ;\n    (function(Prism) {\n        var brackets = /(?:\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)|\\{(?:[^{}\\\\]|\\\\[\\s\\S])*\\}|\\[(?:[^[\\]\\\\]|\\\\[\\s\\S])*\\]|<(?:[^<>\\\\]|\\\\[\\s\\S])*>)/.source;\n        Prism.languages.perl = {\n            comment: [\n                {\n                    // POD\n                    pattern: /(^\\s*)=\\w[\\s\\S]*?=cut.*/m,\n                    lookbehind: true,\n                    greedy: true\n                },\n                {\n                    pattern: /(^|[^\\\\$])#.*/,\n                    lookbehind: true,\n                    greedy: true\n                }\n            ],\n            // TODO Could be nice to handle Heredoc too.\n            string: [\n                {\n                    pattern: RegExp(/\\b(?:q|qq|qw|qx)(?![a-zA-Z0-9])\\s*/.source + \"(?:\" + [\n                        // q/.../\n                        /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\n                        // eslint-disable-next-line regexp/strict\n                        /([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source,\n                        // q{...}\n                        // q[...]\n                        // q<...>\n                        brackets\n                    ].join(\"|\") + \")\"),\n                    greedy: true\n                },\n                {\n                    pattern: /(\"|`)(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n                    greedy: true\n                },\n                // FIXME Multi-line single-quoted strings are not supported as they would break variables containing '\n                {\n                    pattern: /'(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n                    greedy: true\n                }\n            ],\n            regex: [\n                {\n                    pattern: RegExp(/\\b(?:m|qr)(?![a-zA-Z0-9])\\s*/.source + \"(?:\" + [\n                        // m/.../\n                        /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\n                        // eslint-disable-next-line regexp/strict\n                        /([a-zA-Z0-9])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source,\n                        // m{...}\n                        // m[...]\n                        // m<...>\n                        brackets\n                    ].join(\"|\") + \")\" + /[msixpodualngc]*/.source),\n                    greedy: true\n                },\n                {\n                    pattern: RegExp(/(^|[^-])\\b(?:s|tr|y)(?![a-zA-Z0-9])\\s*/.source + \"(?:\" + [\n                        // s/.../.../\n                        // eslint-disable-next-line regexp/strict\n                        /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2/.source,\n                        // eslint-disable-next-line regexp/strict\n                        /([a-zA-Z0-9])(?:(?!\\3)[^\\\\]|\\\\[\\s\\S])*\\3(?:(?!\\3)[^\\\\]|\\\\[\\s\\S])*\\3/.source,\n                        // s{...}{...}\n                        // s[...][...]\n                        // s<...><...>\n                        // s(...)[...]\n                        brackets + /\\s*/.source + brackets\n                    ].join(\"|\") + \")\" + /[msixpodualngcer]*/.source),\n                    lookbehind: true,\n                    greedy: true\n                },\n                // The look-ahead tries to prevent two divisions on\n                // the same line from being highlighted as regex.\n                // This does not support multi-line regex.\n                {\n                    pattern: /\\/(?:[^\\/\\\\\\r\\n]|\\\\.)*\\/[msixpodualngc]*(?=\\s*(?:$|[\\r\\n,.;})&|\\-+*~<>!?^]|(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|x|xor)\\b))/,\n                    greedy: true\n                }\n            ],\n            // FIXME Not sure about the handling of ::, ', and #\n            variable: [\n                // ${^POSTMATCH}\n                /[&*$@%]\\{\\^[A-Z]+\\}/,\n                /[&*$@%]\\^[A-Z_]/,\n                /[&*$@%]#?(?=\\{)/,\n                /[&*$@%]#?(?:(?:::)*'?(?!\\d)[\\w$]+(?![\\w$]))+(?:::)*/,\n                /[&*$@%]\\d+/,\n                // The negative lookahead prevents from breaking the %= operator\n                /(?!%=)[$@%][!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~]/\n            ],\n            filehandle: {\n                // <>, <FOO>, _\n                pattern: /<(?![<=])\\S*?>|\\b_\\b/,\n                alias: \"symbol\"\n            },\n            \"v-string\": {\n                // v1.2, 1.2.3\n                pattern: /v\\d+(?:\\.\\d+)*|\\d+(?:\\.\\d+){2,}/,\n                alias: \"string\"\n            },\n            function: {\n                pattern: /(\\bsub[ \\t]+)\\w+/,\n                lookbehind: true\n            },\n            keyword: /\\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\\b/,\n            number: /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)\\b/,\n            operator: /-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b|\\+[+=]?|-[-=>]?|\\*\\*?=?|\\/\\/?=?|=[=~>]?|~[~=]?|\\|\\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\\.(?:=|\\.\\.?)?|[\\\\?]|\\bx(?:=|\\b)|\\b(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|xor)\\b/,\n            punctuation: /[{}[\\];(),:]/\n        };\n    })(Prism);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/refractor/lang/perl.js\n"));

/***/ })

}]);
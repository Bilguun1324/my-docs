"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["react-syntax-highlighter_languages_refractor_ejs"],{

/***/ "(app-pages-browser)/./node_modules/refractor/lang/ejs.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/ejs.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar refractorMarkupTemplating = __webpack_require__(/*! ./markup-templating.js */ \"(app-pages-browser)/./node_modules/refractor/lang/markup-templating.js\");\nmodule.exports = ejs;\nejs.displayName = \"ejs\";\nejs.aliases = [\n    \"eta\"\n];\nfunction ejs(Prism) {\n    Prism.register(refractorMarkupTemplating);\n    (function(Prism) {\n        Prism.languages.ejs = {\n            delimiter: {\n                pattern: /^<%[-_=]?|[-_]?%>$/,\n                alias: \"punctuation\"\n            },\n            comment: /^#[\\s\\S]*/,\n            \"language-javascript\": {\n                pattern: /[\\s\\S]+/,\n                inside: Prism.languages.javascript\n            }\n        };\n        Prism.hooks.add(\"before-tokenize\", function(env) {\n            var ejsPattern = /<%(?!%)[\\s\\S]+?%>/g;\n            Prism.languages[\"markup-templating\"].buildPlaceholders(env, \"ejs\", ejsPattern);\n        });\n        Prism.hooks.add(\"after-tokenize\", function(env) {\n            Prism.languages[\"markup-templating\"].tokenizePlaceholders(env, \"ejs\");\n        });\n        Prism.languages.eta = Prism.languages.ejs;\n    })(Prism);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWZyYWN0b3IvbGFuZy9lanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxJQUFJQSw0QkFBNEJDLG1CQUFPQSxDQUFDO0FBQ3hDQyxPQUFPQyxPQUFPLEdBQUdDO0FBQ2pCQSxJQUFJQyxXQUFXLEdBQUc7QUFDbEJELElBQUlFLE9BQU8sR0FBRztJQUFDO0NBQU07QUFDckIsU0FBU0YsSUFBSUcsS0FBSztJQUNoQkEsTUFBTUMsUUFBUSxDQUFDUjtJQUNiLFVBQVVPLEtBQUs7UUFDZkEsTUFBTUUsU0FBUyxDQUFDTCxHQUFHLEdBQUc7WUFDcEJNLFdBQVc7Z0JBQ1RDLFNBQVM7Z0JBQ1RDLE9BQU87WUFDVDtZQUNBQyxTQUFTO1lBQ1QsdUJBQXVCO2dCQUNyQkYsU0FBUztnQkFDVEcsUUFBUVAsTUFBTUUsU0FBUyxDQUFDTSxVQUFVO1lBQ3BDO1FBQ0Y7UUFDQVIsTUFBTVMsS0FBSyxDQUFDQyxHQUFHLENBQUMsbUJBQW1CLFNBQVVDLEdBQUc7WUFDOUMsSUFBSUMsYUFBYTtZQUNqQlosTUFBTUUsU0FBUyxDQUFDLG9CQUFvQixDQUFDVyxpQkFBaUIsQ0FDcERGLEtBQ0EsT0FDQUM7UUFFSjtRQUNBWixNQUFNUyxLQUFLLENBQUNDLEdBQUcsQ0FBQyxrQkFBa0IsU0FBVUMsR0FBRztZQUM3Q1gsTUFBTUUsU0FBUyxDQUFDLG9CQUFvQixDQUFDWSxvQkFBb0IsQ0FBQ0gsS0FBSztRQUNqRTtRQUNBWCxNQUFNRSxTQUFTLENBQUNhLEdBQUcsR0FBR2YsTUFBTUUsU0FBUyxDQUFDTCxHQUFHO0lBQzNDLEdBQUdHO0FBQ0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlZnJhY3Rvci9sYW5nL2Vqcy5qcz84NjAwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xudmFyIHJlZnJhY3Rvck1hcmt1cFRlbXBsYXRpbmcgPSByZXF1aXJlKCcuL21hcmt1cC10ZW1wbGF0aW5nLmpzJylcbm1vZHVsZS5leHBvcnRzID0gZWpzXG5lanMuZGlzcGxheU5hbWUgPSAnZWpzJ1xuZWpzLmFsaWFzZXMgPSBbJ2V0YSddXG5mdW5jdGlvbiBlanMoUHJpc20pIHtcbiAgUHJpc20ucmVnaXN0ZXIocmVmcmFjdG9yTWFya3VwVGVtcGxhdGluZylcbiAgOyhmdW5jdGlvbiAoUHJpc20pIHtcbiAgICBQcmlzbS5sYW5ndWFnZXMuZWpzID0ge1xuICAgICAgZGVsaW1pdGVyOiB7XG4gICAgICAgIHBhdHRlcm46IC9ePCVbLV89XT98Wy1fXT8lPiQvLFxuICAgICAgICBhbGlhczogJ3B1bmN0dWF0aW9uJ1xuICAgICAgfSxcbiAgICAgIGNvbW1lbnQ6IC9eI1tcXHNcXFNdKi8sXG4gICAgICAnbGFuZ3VhZ2UtamF2YXNjcmlwdCc6IHtcbiAgICAgICAgcGF0dGVybjogL1tcXHNcXFNdKy8sXG4gICAgICAgIGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHRcbiAgICAgIH1cbiAgICB9XG4gICAgUHJpc20uaG9va3MuYWRkKCdiZWZvcmUtdG9rZW5pemUnLCBmdW5jdGlvbiAoZW52KSB7XG4gICAgICB2YXIgZWpzUGF0dGVybiA9IC88JSg/ISUpW1xcc1xcU10rPyU+L2dcbiAgICAgIFByaXNtLmxhbmd1YWdlc1snbWFya3VwLXRlbXBsYXRpbmcnXS5idWlsZFBsYWNlaG9sZGVycyhcbiAgICAgICAgZW52LFxuICAgICAgICAnZWpzJyxcbiAgICAgICAgZWpzUGF0dGVyblxuICAgICAgKVxuICAgIH0pXG4gICAgUHJpc20uaG9va3MuYWRkKCdhZnRlci10b2tlbml6ZScsIGZ1bmN0aW9uIChlbnYpIHtcbiAgICAgIFByaXNtLmxhbmd1YWdlc1snbWFya3VwLXRlbXBsYXRpbmcnXS50b2tlbml6ZVBsYWNlaG9sZGVycyhlbnYsICdlanMnKVxuICAgIH0pXG4gICAgUHJpc20ubGFuZ3VhZ2VzLmV0YSA9IFByaXNtLmxhbmd1YWdlcy5lanNcbiAgfSkoUHJpc20pXG59XG4iXSwibmFtZXMiOlsicmVmcmFjdG9yTWFya3VwVGVtcGxhdGluZyIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZWpzIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJyZWdpc3RlciIsImxhbmd1YWdlcyIsImRlbGltaXRlciIsInBhdHRlcm4iLCJhbGlhcyIsImNvbW1lbnQiLCJpbnNpZGUiLCJqYXZhc2NyaXB0IiwiaG9va3MiLCJhZGQiLCJlbnYiLCJlanNQYXR0ZXJuIiwiYnVpbGRQbGFjZWhvbGRlcnMiLCJ0b2tlbml6ZVBsYWNlaG9sZGVycyIsImV0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/refractor/lang/ejs.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/refractor/lang/markup-templating.js":
/*!**********************************************************!*\
  !*** ./node_modules/refractor/lang/markup-templating.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nmodule.exports = markupTemplating;\nmarkupTemplating.displayName = \"markupTemplating\";\nmarkupTemplating.aliases = [];\nfunction markupTemplating(Prism) {\n    ;\n    (function(Prism) {\n        /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */ function getPlaceholder(language, index) {\n            return \"___\" + language.toUpperCase() + index + \"___\";\n        }\n        Object.defineProperties(Prism.languages[\"markup-templating\"] = {}, {\n            buildPlaceholders: {\n                /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */ value: function(env, language, placeholderPattern, replaceFilter) {\n                    if (env.language !== language) {\n                        return;\n                    }\n                    var tokenStack = env.tokenStack = [];\n                    env.code = env.code.replace(placeholderPattern, function(match) {\n                        if (typeof replaceFilter === \"function\" && !replaceFilter(match)) {\n                            return match;\n                        }\n                        var i = tokenStack.length;\n                        var placeholder // Check for existing strings\n                        ;\n                        while(env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1){\n                            ++i;\n                        } // Create a sparse array\n                        tokenStack[i] = match;\n                        return placeholder;\n                    }) // Switch the grammar to markup\n                    ;\n                    env.grammar = Prism.languages.markup;\n                }\n            },\n            tokenizePlaceholders: {\n                /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */ value: function(env, language) {\n                    if (env.language !== language || !env.tokenStack) {\n                        return;\n                    } // Switch the grammar back\n                    env.grammar = Prism.languages[language];\n                    var j = 0;\n                    var keys = Object.keys(env.tokenStack);\n                    function walkTokens(tokens) {\n                        for(var i = 0; i < tokens.length; i++){\n                            // all placeholders are replaced already\n                            if (j >= keys.length) {\n                                break;\n                            }\n                            var token = tokens[i];\n                            if (typeof token === \"string\" || token.content && typeof token.content === \"string\") {\n                                var k = keys[j];\n                                var t = env.tokenStack[k];\n                                var s = typeof token === \"string\" ? token : token.content;\n                                var placeholder = getPlaceholder(language, k);\n                                var index = s.indexOf(placeholder);\n                                if (index > -1) {\n                                    ++j;\n                                    var before = s.substring(0, index);\n                                    var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), \"language-\" + language, t);\n                                    var after = s.substring(index + placeholder.length);\n                                    var replacement = [];\n                                    if (before) {\n                                        replacement.push.apply(replacement, walkTokens([\n                                            before\n                                        ]));\n                                    }\n                                    replacement.push(middle);\n                                    if (after) {\n                                        replacement.push.apply(replacement, walkTokens([\n                                            after\n                                        ]));\n                                    }\n                                    if (typeof token === \"string\") {\n                                        tokens.splice.apply(tokens, [\n                                            i,\n                                            1\n                                        ].concat(replacement));\n                                    } else {\n                                        token.content = replacement;\n                                    }\n                                }\n                            } else if (token.content) {\n                                walkTokens(token.content);\n                            }\n                        }\n                        return tokens;\n                    }\n                    walkTokens(env.tokens);\n                }\n            }\n        });\n    })(Prism);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/refractor/lang/markup-templating.js\n"));

/***/ })

}]);
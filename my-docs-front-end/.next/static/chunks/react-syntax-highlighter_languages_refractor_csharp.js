"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["react-syntax-highlighter_languages_refractor_csharp"],{

/***/ "(app-pages-browser)/./node_modules/refractor/lang/csharp.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/csharp.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nmodule.exports = csharp;\ncsharp.displayName = \"csharp\";\ncsharp.aliases = [\n    \"dotnet\",\n    \"cs\"\n];\nfunction csharp(Prism) {\n    ;\n    (function(Prism) {\n        /**\n     * Replaces all placeholders \"<<n>>\" of given pattern with the n-th replacement (zero based).\n     *\n     * Note: This is a simple text based replacement. Be careful when using backreferences!\n     *\n     * @param {string} pattern the given pattern.\n     * @param {string[]} replacements a list of replacement which can be inserted into the given pattern.\n     * @returns {string} the pattern with all placeholders replaced with their corresponding replacements.\n     * @example replace(/a<<0>>a/.source, [/b+/.source]) === /a(?:b+)a/.source\n     */ function replace(pattern, replacements) {\n            return pattern.replace(/<<(\\d+)>>/g, function(m, index) {\n                return \"(?:\" + replacements[+index] + \")\";\n            });\n        }\n        /**\n     * @param {string} pattern\n     * @param {string[]} replacements\n     * @param {string} [flags]\n     * @returns {RegExp}\n     */ function re(pattern, replacements, flags) {\n            return RegExp(replace(pattern, replacements), flags || \"\");\n        }\n        /**\n     * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.\n     *\n     * @param {string} pattern\n     * @param {number} depthLog2\n     * @returns {string}\n     */ function nested(pattern, depthLog2) {\n            for(var i = 0; i < depthLog2; i++){\n                pattern = pattern.replace(/<<self>>/g, function() {\n                    return \"(?:\" + pattern + \")\";\n                });\n            }\n            return pattern.replace(/<<self>>/g, \"[^\\\\s\\\\S]\");\n        } // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/\n        var keywordKinds = {\n            // keywords which represent a return or variable type\n            type: \"bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void\",\n            // keywords which are used to declare a type\n            typeDeclaration: \"class enum interface record struct\",\n            // contextual keywords\n            // (\"var\" and \"dynamic\" are missing because they are used like types)\n            contextual: \"add alias and ascending async await by descending from(?=\\\\s*(?:\\\\w|$)) get global group into init(?=\\\\s*;) join let nameof not notnull on or orderby partial remove select set unmanaged value when where with(?=\\\\s*{)\",\n            // all other keywords\n            other: \"abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield\"\n        } // keywords\n        ;\n        function keywordsToPattern(words) {\n            return \"\\\\b(?:\" + words.trim().replace(/ /g, \"|\") + \")\\\\b\";\n        }\n        var typeDeclarationKeywords = keywordsToPattern(keywordKinds.typeDeclaration);\n        var keywords = RegExp(keywordsToPattern(keywordKinds.type + \" \" + keywordKinds.typeDeclaration + \" \" + keywordKinds.contextual + \" \" + keywordKinds.other));\n        var nonTypeKeywords = keywordsToPattern(keywordKinds.typeDeclaration + \" \" + keywordKinds.contextual + \" \" + keywordKinds.other);\n        var nonContextualKeywords = keywordsToPattern(keywordKinds.type + \" \" + keywordKinds.typeDeclaration + \" \" + keywordKinds.other) // types\n        ;\n        var generic = nested(/<(?:[^<>;=+\\-*/%&|^]|<<self>>)*>/.source, 2) // the idea behind the other forbidden characters is to prevent false positives. Same for tupleElement.\n        ;\n        var nestedRound = nested(/\\((?:[^()]|<<self>>)*\\)/.source, 2);\n        var name = /@?\\b[A-Za-z_]\\w*\\b/.source;\n        var genericName = replace(/<<0>>(?:\\s*<<1>>)?/.source, [\n            name,\n            generic\n        ]);\n        var identifier = replace(/(?!<<0>>)<<1>>(?:\\s*\\.\\s*<<1>>)*/.source, [\n            nonTypeKeywords,\n            genericName\n        ]);\n        var array = /\\[\\s*(?:,\\s*)*\\]/.source;\n        var typeExpressionWithoutTuple = replace(/<<0>>(?:\\s*(?:\\?\\s*)?<<1>>)*(?:\\s*\\?)?/.source, [\n            identifier,\n            array\n        ]);\n        var tupleElement = replace(/[^,()<>[\\];=+\\-*/%&|^]|<<0>>|<<1>>|<<2>>/.source, [\n            generic,\n            nestedRound,\n            array\n        ]);\n        var tuple = replace(/\\(<<0>>+(?:,<<0>>+)+\\)/.source, [\n            tupleElement\n        ]);\n        var typeExpression = replace(/(?:<<0>>|<<1>>)(?:\\s*(?:\\?\\s*)?<<2>>)*(?:\\s*\\?)?/.source, [\n            tuple,\n            identifier,\n            array\n        ]);\n        var typeInside = {\n            keyword: keywords,\n            punctuation: /[<>()?,.:[\\]]/\n        } // strings & characters\n        ;\n        // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#character-literals\n        // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#string-literals\n        var character = /'(?:[^\\r\\n'\\\\]|\\\\.|\\\\[Uux][\\da-fA-F]{1,8})'/.source // simplified pattern\n        ;\n        var regularString = /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/.source;\n        var verbatimString = /@\"(?:\"\"|\\\\[\\s\\S]|[^\\\\\"])*\"(?!\")/.source;\n        Prism.languages.csharp = Prism.languages.extend(\"clike\", {\n            string: [\n                {\n                    pattern: re(/(^|[^$\\\\])<<0>>/.source, [\n                        verbatimString\n                    ]),\n                    lookbehind: true,\n                    greedy: true\n                },\n                {\n                    pattern: re(/(^|[^@$\\\\])<<0>>/.source, [\n                        regularString\n                    ]),\n                    lookbehind: true,\n                    greedy: true\n                }\n            ],\n            \"class-name\": [\n                {\n                    // Using static\n                    // using static System.Math;\n                    pattern: re(/(\\busing\\s+static\\s+)<<0>>(?=\\s*;)/.source, [\n                        identifier\n                    ]),\n                    lookbehind: true,\n                    inside: typeInside\n                },\n                {\n                    // Using alias (type)\n                    // using Project = PC.MyCompany.Project;\n                    pattern: re(/(\\busing\\s+<<0>>\\s*=\\s*)<<1>>(?=\\s*;)/.source, [\n                        name,\n                        typeExpression\n                    ]),\n                    lookbehind: true,\n                    inside: typeInside\n                },\n                {\n                    // Using alias (alias)\n                    // using Project = PC.MyCompany.Project;\n                    pattern: re(/(\\busing\\s+)<<0>>(?=\\s*=)/.source, [\n                        name\n                    ]),\n                    lookbehind: true\n                },\n                {\n                    // Type declarations\n                    // class Foo<A, B>\n                    // interface Foo<out A, B>\n                    pattern: re(/(\\b<<0>>\\s+)<<1>>/.source, [\n                        typeDeclarationKeywords,\n                        genericName\n                    ]),\n                    lookbehind: true,\n                    inside: typeInside\n                },\n                {\n                    // Single catch exception declaration\n                    // catch(Foo)\n                    // (things like catch(Foo e) is covered by variable declaration)\n                    pattern: re(/(\\bcatch\\s*\\(\\s*)<<0>>/.source, [\n                        identifier\n                    ]),\n                    lookbehind: true,\n                    inside: typeInside\n                },\n                {\n                    // Name of the type parameter of generic constraints\n                    // where Foo : class\n                    pattern: re(/(\\bwhere\\s+)<<0>>/.source, [\n                        name\n                    ]),\n                    lookbehind: true\n                },\n                {\n                    // Casts and checks via as and is.\n                    // as Foo<A>, is Bar<B>\n                    // (things like if(a is Foo b) is covered by variable declaration)\n                    pattern: re(/(\\b(?:is(?:\\s+not)?|as)\\s+)<<0>>/.source, [\n                        typeExpressionWithoutTuple\n                    ]),\n                    lookbehind: true,\n                    inside: typeInside\n                },\n                {\n                    // Variable, field and parameter declaration\n                    // (Foo bar, Bar baz, Foo[,,] bay, Foo<Bar, FooBar<Bar>> bax)\n                    pattern: re(/\\b<<0>>(?=\\s+(?!<<1>>|with\\s*\\{)<<2>>(?:\\s*[=,;:{)\\]]|\\s+(?:in|when)\\b))/.source, [\n                        typeExpression,\n                        nonContextualKeywords,\n                        name\n                    ]),\n                    inside: typeInside\n                }\n            ],\n            keyword: keywords,\n            // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#literals\n            number: /(?:\\b0(?:x[\\da-f_]*[\\da-f]|b[01_]*[01])|(?:\\B\\.\\d+(?:_+\\d+)*|\\b\\d+(?:_+\\d+)*(?:\\.\\d+(?:_+\\d+)*)?)(?:e[-+]?\\d+(?:_+\\d+)*)?)(?:[dflmu]|lu|ul)?\\b/i,\n            operator: />>=?|<<=?|[-=]>|([-+&|])\\1|~|\\?\\?=?|[-+*/%&|^!=<>]=?/,\n            punctuation: /\\?\\.?|::|[{}[\\];(),.:]/\n        });\n        Prism.languages.insertBefore(\"csharp\", \"number\", {\n            range: {\n                pattern: /\\.\\./,\n                alias: \"operator\"\n            }\n        });\n        Prism.languages.insertBefore(\"csharp\", \"punctuation\", {\n            \"named-parameter\": {\n                pattern: re(/([(,]\\s*)<<0>>(?=\\s*:)/.source, [\n                    name\n                ]),\n                lookbehind: true,\n                alias: \"punctuation\"\n            }\n        });\n        Prism.languages.insertBefore(\"csharp\", \"class-name\", {\n            namespace: {\n                // namespace Foo.Bar {}\n                // using Foo.Bar;\n                pattern: re(/(\\b(?:namespace|using)\\s+)<<0>>(?:\\s*\\.\\s*<<0>>)*(?=\\s*[;{])/.source, [\n                    name\n                ]),\n                lookbehind: true,\n                inside: {\n                    punctuation: /\\./\n                }\n            },\n            \"type-expression\": {\n                // default(Foo), typeof(Foo<Bar>), sizeof(int)\n                pattern: re(/(\\b(?:default|sizeof|typeof)\\s*\\(\\s*(?!\\s))(?:[^()\\s]|\\s(?!\\s)|<<0>>)*(?=\\s*\\))/.source, [\n                    nestedRound\n                ]),\n                lookbehind: true,\n                alias: \"class-name\",\n                inside: typeInside\n            },\n            \"return-type\": {\n                // Foo<Bar> ForBar(); Foo IFoo.Bar() => 0\n                // int this[int index] => 0; T IReadOnlyList<T>.this[int index] => this[index];\n                // int Foo => 0; int Foo { get; set } = 0;\n                pattern: re(/<<0>>(?=\\s+(?:<<1>>\\s*(?:=>|[({]|\\.\\s*this\\s*\\[)|this\\s*\\[))/.source, [\n                    typeExpression,\n                    identifier\n                ]),\n                inside: typeInside,\n                alias: \"class-name\"\n            },\n            \"constructor-invocation\": {\n                // new List<Foo<Bar[]>> { }\n                pattern: re(/(\\bnew\\s+)<<0>>(?=\\s*[[({])/.source, [\n                    typeExpression\n                ]),\n                lookbehind: true,\n                inside: typeInside,\n                alias: \"class-name\"\n            },\n            /*'explicit-implementation': {\n// int IFoo<Foo>.Bar => 0; void IFoo<Foo<Foo>>.Foo<T>();\npattern: replace(/\\b<<0>>(?=\\.<<1>>)/, className, methodOrPropertyDeclaration),\ninside: classNameInside,\nalias: 'class-name'\n},*/ \"generic-method\": {\n                // foo<Bar>()\n                pattern: re(/<<0>>\\s*<<1>>(?=\\s*\\()/.source, [\n                    name,\n                    generic\n                ]),\n                inside: {\n                    function: re(/^<<0>>/.source, [\n                        name\n                    ]),\n                    generic: {\n                        pattern: RegExp(generic),\n                        alias: \"class-name\",\n                        inside: typeInside\n                    }\n                }\n            },\n            \"type-list\": {\n                // The list of types inherited or of generic constraints\n                // class Foo<F> : Bar, IList<FooBar>\n                // where F : Bar, IList<int>\n                pattern: re(/\\b((?:<<0>>\\s+<<1>>|record\\s+<<1>>\\s*<<5>>|where\\s+<<2>>)\\s*:\\s*)(?:<<3>>|<<4>>|<<1>>\\s*<<5>>|<<6>>)(?:\\s*,\\s*(?:<<3>>|<<4>>|<<6>>))*(?=\\s*(?:where|[{;]|=>|$))/.source, [\n                    typeDeclarationKeywords,\n                    genericName,\n                    name,\n                    typeExpression,\n                    keywords.source,\n                    nestedRound,\n                    /\\bnew\\s*\\(\\s*\\)/.source\n                ]),\n                lookbehind: true,\n                inside: {\n                    \"record-arguments\": {\n                        pattern: re(/(^(?!new\\s*\\()<<0>>\\s*)<<1>>/.source, [\n                            genericName,\n                            nestedRound\n                        ]),\n                        lookbehind: true,\n                        greedy: true,\n                        inside: Prism.languages.csharp\n                    },\n                    keyword: keywords,\n                    \"class-name\": {\n                        pattern: RegExp(typeExpression),\n                        greedy: true,\n                        inside: typeInside\n                    },\n                    punctuation: /[,()]/\n                }\n            },\n            preprocessor: {\n                pattern: /(^[\\t ]*)#.*/m,\n                lookbehind: true,\n                alias: \"property\",\n                inside: {\n                    // highlight preprocessor directives as keywords\n                    directive: {\n                        pattern: /(#)\\b(?:define|elif|else|endif|endregion|error|if|line|nullable|pragma|region|undef|warning)\\b/,\n                        lookbehind: true,\n                        alias: \"keyword\"\n                    }\n                }\n            }\n        }) // attributes\n        ;\n        var regularStringOrCharacter = regularString + \"|\" + character;\n        var regularStringCharacterOrComment = replace(/\\/(?![*/])|\\/\\/[^\\r\\n]*[\\r\\n]|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>/.source, [\n            regularStringOrCharacter\n        ]);\n        var roundExpression = nested(replace(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [\n            regularStringCharacterOrComment\n        ]), 2) // https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/#attribute-targets\n        ;\n        var attrTarget = /\\b(?:assembly|event|field|method|module|param|property|return|type)\\b/.source;\n        var attr = replace(/<<0>>(?:\\s*\\(<<1>>*\\))?/.source, [\n            identifier,\n            roundExpression\n        ]);\n        Prism.languages.insertBefore(\"csharp\", \"class-name\", {\n            attribute: {\n                // Attributes\n                // [Foo], [Foo(1), Bar(2, Prop = \"foo\")], [return: Foo(1), Bar(2)], [assembly: Foo(Bar)]\n                pattern: re(/((?:^|[^\\s\\w>)?])\\s*\\[\\s*)(?:<<0>>\\s*:\\s*)?<<1>>(?:\\s*,\\s*<<1>>)*(?=\\s*\\])/.source, [\n                    attrTarget,\n                    attr\n                ]),\n                lookbehind: true,\n                greedy: true,\n                inside: {\n                    target: {\n                        pattern: re(/^<<0>>(?=\\s*:)/.source, [\n                            attrTarget\n                        ]),\n                        alias: \"keyword\"\n                    },\n                    \"attribute-arguments\": {\n                        pattern: re(/\\(<<0>>*\\)/.source, [\n                            roundExpression\n                        ]),\n                        inside: Prism.languages.csharp\n                    },\n                    \"class-name\": {\n                        pattern: RegExp(identifier),\n                        inside: {\n                            punctuation: /\\./\n                        }\n                    },\n                    punctuation: /[:,]/\n                }\n            }\n        }) // string interpolation\n        ;\n        var formatString = /:[^}\\r\\n]+/.source // multi line\n        ;\n        var mInterpolationRound = nested(replace(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [\n            regularStringCharacterOrComment\n        ]), 2);\n        var mInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [\n            mInterpolationRound,\n            formatString\n        ]) // single line\n        ;\n        var sInterpolationRound = nested(replace(/[^\"'/()]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>|\\(<<self>>*\\)/.source, [\n            regularStringOrCharacter\n        ]), 2);\n        var sInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [\n            sInterpolationRound,\n            formatString\n        ]);\n        function createInterpolationInside(interpolation, interpolationRound) {\n            return {\n                interpolation: {\n                    pattern: re(/((?:^|[^{])(?:\\{\\{)*)<<0>>/.source, [\n                        interpolation\n                    ]),\n                    lookbehind: true,\n                    inside: {\n                        \"format-string\": {\n                            pattern: re(/(^\\{(?:(?![}:])<<0>>)*)<<1>>(?=\\}$)/.source, [\n                                interpolationRound,\n                                formatString\n                            ]),\n                            lookbehind: true,\n                            inside: {\n                                punctuation: /^:/\n                            }\n                        },\n                        punctuation: /^\\{|\\}$/,\n                        expression: {\n                            pattern: /[\\s\\S]+/,\n                            alias: \"language-csharp\",\n                            inside: Prism.languages.csharp\n                        }\n                    }\n                },\n                string: /[\\s\\S]+/\n            };\n        }\n        Prism.languages.insertBefore(\"csharp\", \"string\", {\n            \"interpolation-string\": [\n                {\n                    pattern: re(/(^|[^\\\\])(?:\\$@|@\\$)\"(?:\"\"|\\\\[\\s\\S]|\\{\\{|<<0>>|[^\\\\{\"])*\"/.source, [\n                        mInterpolation\n                    ]),\n                    lookbehind: true,\n                    greedy: true,\n                    inside: createInterpolationInside(mInterpolation, mInterpolationRound)\n                },\n                {\n                    pattern: re(/(^|[^@\\\\])\\$\"(?:\\\\.|\\{\\{|<<0>>|[^\\\\\"{])*\"/.source, [\n                        sInterpolation\n                    ]),\n                    lookbehind: true,\n                    greedy: true,\n                    inside: createInterpolationInside(sInterpolation, sInterpolationRound)\n                }\n            ],\n            char: {\n                pattern: RegExp(character),\n                greedy: true\n            }\n        });\n        Prism.languages.dotnet = Prism.languages.cs = Prism.languages.csharp;\n    })(Prism);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/refractor/lang/csharp.js\n"));

/***/ })

}]);
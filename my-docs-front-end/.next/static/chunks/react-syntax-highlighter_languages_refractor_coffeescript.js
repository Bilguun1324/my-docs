"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["react-syntax-highlighter_languages_refractor_coffeescript"],{

/***/ "(app-pages-browser)/./node_modules/refractor/lang/coffeescript.js":
/*!*****************************************************!*\
  !*** ./node_modules/refractor/lang/coffeescript.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nmodule.exports = coffeescript;\ncoffeescript.displayName = \"coffeescript\";\ncoffeescript.aliases = [\n    \"coffee\"\n];\nfunction coffeescript(Prism) {\n    ;\n    (function(Prism) {\n        // Ignore comments starting with { to privilege string interpolation highlighting\n        var comment = /#(?!\\{).+/;\n        var interpolation = {\n            pattern: /#\\{[^}]+\\}/,\n            alias: \"variable\"\n        };\n        Prism.languages.coffeescript = Prism.languages.extend(\"javascript\", {\n            comment: comment,\n            string: [\n                // Strings are multiline\n                {\n                    pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n                    greedy: true\n                },\n                {\n                    // Strings are multiline\n                    pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n                    greedy: true,\n                    inside: {\n                        interpolation: interpolation\n                    }\n                }\n            ],\n            keyword: /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n            \"class-member\": {\n                pattern: /@(?!\\d)\\w+/,\n                alias: \"variable\"\n            }\n        });\n        Prism.languages.insertBefore(\"coffeescript\", \"comment\", {\n            \"multiline-comment\": {\n                pattern: /###[\\s\\S]+?###/,\n                alias: \"comment\"\n            },\n            // Block regexp can contain comments and interpolation\n            \"block-regex\": {\n                pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n                alias: \"regex\",\n                inside: {\n                    comment: comment,\n                    interpolation: interpolation\n                }\n            }\n        });\n        Prism.languages.insertBefore(\"coffeescript\", \"string\", {\n            \"inline-javascript\": {\n                pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n                inside: {\n                    delimiter: {\n                        pattern: /^`|`$/,\n                        alias: \"punctuation\"\n                    },\n                    script: {\n                        pattern: /[\\s\\S]+/,\n                        alias: \"language-javascript\",\n                        inside: Prism.languages.javascript\n                    }\n                }\n            },\n            // Block strings\n            \"multiline-string\": [\n                {\n                    pattern: /'''[\\s\\S]*?'''/,\n                    greedy: true,\n                    alias: \"string\"\n                },\n                {\n                    pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n                    greedy: true,\n                    alias: \"string\",\n                    inside: {\n                        interpolation: interpolation\n                    }\n                }\n            ]\n        });\n        Prism.languages.insertBefore(\"coffeescript\", \"keyword\", {\n            // Object property\n            property: /(?!\\d)\\w+(?=\\s*:(?!:))/\n        });\n        delete Prism.languages.coffeescript[\"template-string\"];\n        Prism.languages.coffee = Prism.languages.coffeescript;\n    })(Prism);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWZyYWN0b3IvbGFuZy9jb2ZmZWVzY3JpcHQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsT0FBT0MsT0FBTyxHQUFHQztBQUNqQkEsYUFBYUMsV0FBVyxHQUFHO0FBQzNCRCxhQUFhRSxPQUFPLEdBQUc7SUFBQztDQUFTO0FBQ2pDLFNBQVNGLGFBQWFHLEtBQUs7O0lBQ3ZCLFVBQVVBLEtBQUs7UUFDZixpRkFBaUY7UUFDakYsSUFBSUMsVUFBVTtRQUNkLElBQUlDLGdCQUFnQjtZQUNsQkMsU0FBUztZQUNUQyxPQUFPO1FBQ1Q7UUFDQUosTUFBTUssU0FBUyxDQUFDUixZQUFZLEdBQUdHLE1BQU1LLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLGNBQWM7WUFDbEVMLFNBQVNBO1lBQ1RNLFFBQVE7Z0JBQ04sd0JBQXdCO2dCQUN4QjtvQkFDRUosU0FBUztvQkFDVEssUUFBUTtnQkFDVjtnQkFDQTtvQkFDRSx3QkFBd0I7b0JBQ3hCTCxTQUFTO29CQUNUSyxRQUFRO29CQUNSQyxRQUFRO3dCQUNOUCxlQUFlQTtvQkFDakI7Z0JBQ0Y7YUFDRDtZQUNEUSxTQUNFO1lBQ0YsZ0JBQWdCO2dCQUNkUCxTQUFTO2dCQUNUQyxPQUFPO1lBQ1Q7UUFDRjtRQUNBSixNQUFNSyxTQUFTLENBQUNNLFlBQVksQ0FBQyxnQkFBZ0IsV0FBVztZQUN0RCxxQkFBcUI7Z0JBQ25CUixTQUFTO2dCQUNUQyxPQUFPO1lBQ1Q7WUFDQSxzREFBc0Q7WUFDdEQsZUFBZTtnQkFDYkQsU0FBUztnQkFDVEMsT0FBTztnQkFDUEssUUFBUTtvQkFDTlIsU0FBU0E7b0JBQ1RDLGVBQWVBO2dCQUNqQjtZQUNGO1FBQ0Y7UUFDQUYsTUFBTUssU0FBUyxDQUFDTSxZQUFZLENBQUMsZ0JBQWdCLFVBQVU7WUFDckQscUJBQXFCO2dCQUNuQlIsU0FBUztnQkFDVE0sUUFBUTtvQkFDTkcsV0FBVzt3QkFDVFQsU0FBUzt3QkFDVEMsT0FBTztvQkFDVDtvQkFDQVMsUUFBUTt3QkFDTlYsU0FBUzt3QkFDVEMsT0FBTzt3QkFDUEssUUFBUVQsTUFBTUssU0FBUyxDQUFDUyxVQUFVO29CQUNwQztnQkFDRjtZQUNGO1lBQ0EsZ0JBQWdCO1lBQ2hCLG9CQUFvQjtnQkFDbEI7b0JBQ0VYLFNBQVM7b0JBQ1RLLFFBQVE7b0JBQ1JKLE9BQU87Z0JBQ1Q7Z0JBQ0E7b0JBQ0VELFNBQVM7b0JBQ1RLLFFBQVE7b0JBQ1JKLE9BQU87b0JBQ1BLLFFBQVE7d0JBQ05QLGVBQWVBO29CQUNqQjtnQkFDRjthQUNEO1FBQ0g7UUFDQUYsTUFBTUssU0FBUyxDQUFDTSxZQUFZLENBQUMsZ0JBQWdCLFdBQVc7WUFDdEQsa0JBQWtCO1lBQ2xCSSxVQUFVO1FBQ1o7UUFDQSxPQUFPZixNQUFNSyxTQUFTLENBQUNSLFlBQVksQ0FBQyxrQkFBa0I7UUFDdERHLE1BQU1LLFNBQVMsQ0FBQ1csTUFBTSxHQUFHaEIsTUFBTUssU0FBUyxDQUFDUixZQUFZO0lBQ3ZELEdBQUdHO0FBQ0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlZnJhY3Rvci9sYW5nL2NvZmZlZXNjcmlwdC5qcz8wODBhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvZmZlZXNjcmlwdFxuY29mZmVlc2NyaXB0LmRpc3BsYXlOYW1lID0gJ2NvZmZlZXNjcmlwdCdcbmNvZmZlZXNjcmlwdC5hbGlhc2VzID0gWydjb2ZmZWUnXVxuZnVuY3Rpb24gY29mZmVlc2NyaXB0KFByaXNtKSB7XG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgLy8gSWdub3JlIGNvbW1lbnRzIHN0YXJ0aW5nIHdpdGggeyB0byBwcml2aWxlZ2Ugc3RyaW5nIGludGVycG9sYXRpb24gaGlnaGxpZ2h0aW5nXG4gICAgdmFyIGNvbW1lbnQgPSAvIyg/IVxceykuKy9cbiAgICB2YXIgaW50ZXJwb2xhdGlvbiA9IHtcbiAgICAgIHBhdHRlcm46IC8jXFx7W159XStcXH0vLFxuICAgICAgYWxpYXM6ICd2YXJpYWJsZSdcbiAgICB9XG4gICAgUHJpc20ubGFuZ3VhZ2VzLmNvZmZlZXNjcmlwdCA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2phdmFzY3JpcHQnLCB7XG4gICAgICBjb21tZW50OiBjb21tZW50LFxuICAgICAgc3RyaW5nOiBbXG4gICAgICAgIC8vIFN0cmluZ3MgYXJlIG11bHRpbGluZVxuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjogLycoPzpcXFxcW1xcc1xcU118W15cXFxcJ10pKicvLFxuICAgICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgLy8gU3RyaW5ncyBhcmUgbXVsdGlsaW5lXG4gICAgICAgICAgcGF0dGVybjogL1wiKD86XFxcXFtcXHNcXFNdfFteXFxcXFwiXSkqXCIvLFxuICAgICAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgIGludGVycG9sYXRpb246IGludGVycG9sYXRpb25cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBrZXl3b3JkOlxuICAgICAgICAvXFxiKD86YW5kfGJyZWFrfGJ5fGNhdGNofGNsYXNzfGNvbnRpbnVlfGRlYnVnZ2VyfGRlbGV0ZXxkb3xlYWNofGVsc2V8ZXh0ZW5kfGV4dGVuZHN8ZmFsc2V8ZmluYWxseXxmb3J8aWZ8aW58aW5zdGFuY2VvZnxpc3xpc250fGxldHxsb29wfG5hbWVzcGFjZXxuZXd8bm98bm90fG51bGx8b2Z8b2ZmfG9ufG9yfG93bnxyZXR1cm58c3VwZXJ8c3dpdGNofHRoZW58dGhpc3x0aHJvd3x0cnVlfHRyeXx0eXBlb2Z8dW5kZWZpbmVkfHVubGVzc3x1bnRpbHx3aGVufHdoaWxlfHdpbmRvd3x3aXRofHllc3x5aWVsZClcXGIvLFxuICAgICAgJ2NsYXNzLW1lbWJlcic6IHtcbiAgICAgICAgcGF0dGVybjogL0AoPyFcXGQpXFx3Ky8sXG4gICAgICAgIGFsaWFzOiAndmFyaWFibGUnXG4gICAgICB9XG4gICAgfSlcbiAgICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdjb2ZmZWVzY3JpcHQnLCAnY29tbWVudCcsIHtcbiAgICAgICdtdWx0aWxpbmUtY29tbWVudCc6IHtcbiAgICAgICAgcGF0dGVybjogLyMjI1tcXHNcXFNdKz8jIyMvLFxuICAgICAgICBhbGlhczogJ2NvbW1lbnQnXG4gICAgICB9LFxuICAgICAgLy8gQmxvY2sgcmVnZXhwIGNhbiBjb250YWluIGNvbW1lbnRzIGFuZCBpbnRlcnBvbGF0aW9uXG4gICAgICAnYmxvY2stcmVnZXgnOiB7XG4gICAgICAgIHBhdHRlcm46IC9cXC97M31bXFxzXFxTXSo/XFwvezN9LyxcbiAgICAgICAgYWxpYXM6ICdyZWdleCcsXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIGNvbW1lbnQ6IGNvbW1lbnQsXG4gICAgICAgICAgaW50ZXJwb2xhdGlvbjogaW50ZXJwb2xhdGlvblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdjb2ZmZWVzY3JpcHQnLCAnc3RyaW5nJywge1xuICAgICAgJ2lubGluZS1qYXZhc2NyaXB0Jzoge1xuICAgICAgICBwYXR0ZXJuOiAvYCg/OlxcXFxbXFxzXFxTXXxbXlxcXFxgXSkqYC8sXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIGRlbGltaXRlcjoge1xuICAgICAgICAgICAgcGF0dGVybjogL15gfGAkLyxcbiAgICAgICAgICAgIGFsaWFzOiAncHVuY3R1YXRpb24nXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzY3JpcHQ6IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC9bXFxzXFxTXSsvLFxuICAgICAgICAgICAgYWxpYXM6ICdsYW5ndWFnZS1qYXZhc2NyaXB0JyxcbiAgICAgICAgICAgIGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHRcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBCbG9jayBzdHJpbmdzXG4gICAgICAnbXVsdGlsaW5lLXN0cmluZyc6IFtcbiAgICAgICAge1xuICAgICAgICAgIHBhdHRlcm46IC8nJydbXFxzXFxTXSo/JycnLyxcbiAgICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgICAgYWxpYXM6ICdzdHJpbmcnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwYXR0ZXJuOiAvXCJcIlwiW1xcc1xcU10qP1wiXCJcIi8sXG4gICAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICAgIGFsaWFzOiAnc3RyaW5nJyxcbiAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgIGludGVycG9sYXRpb246IGludGVycG9sYXRpb25cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9KVxuICAgIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2NvZmZlZXNjcmlwdCcsICdrZXl3b3JkJywge1xuICAgICAgLy8gT2JqZWN0IHByb3BlcnR5XG4gICAgICBwcm9wZXJ0eTogLyg/IVxcZClcXHcrKD89XFxzKjooPyE6KSkvXG4gICAgfSlcbiAgICBkZWxldGUgUHJpc20ubGFuZ3VhZ2VzLmNvZmZlZXNjcmlwdFsndGVtcGxhdGUtc3RyaW5nJ11cbiAgICBQcmlzbS5sYW5ndWFnZXMuY29mZmVlID0gUHJpc20ubGFuZ3VhZ2VzLmNvZmZlZXNjcmlwdFxuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiY29mZmVlc2NyaXB0IiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJjb21tZW50IiwiaW50ZXJwb2xhdGlvbiIsInBhdHRlcm4iLCJhbGlhcyIsImxhbmd1YWdlcyIsImV4dGVuZCIsInN0cmluZyIsImdyZWVkeSIsImluc2lkZSIsImtleXdvcmQiLCJpbnNlcnRCZWZvcmUiLCJkZWxpbWl0ZXIiLCJzY3JpcHQiLCJqYXZhc2NyaXB0IiwicHJvcGVydHkiLCJjb2ZmZWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/refractor/lang/coffeescript.js\n"));

/***/ })

}]);
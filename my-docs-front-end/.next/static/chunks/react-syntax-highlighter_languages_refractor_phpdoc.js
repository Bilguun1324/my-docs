"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["react-syntax-highlighter_languages_refractor_phpdoc"],{

/***/ "(app-pages-browser)/./node_modules/refractor/lang/javadoclike.js":
/*!****************************************************!*\
  !*** ./node_modules/refractor/lang/javadoclike.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nmodule.exports = javadoclike;\njavadoclike.displayName = \"javadoclike\";\njavadoclike.aliases = [];\nfunction javadoclike(Prism) {\n    ;\n    (function(Prism) {\n        var javaDocLike = Prism.languages.javadoclike = {\n            parameter: {\n                pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\n                lookbehind: true\n            },\n            keyword: {\n                // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n                // @word, {@word}\n                pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n                lookbehind: true\n            },\n            punctuation: /[{}]/\n        };\n        /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */ function docCommentSupport(lang, callback) {\n            var tokenName = \"doc-comment\";\n            var grammar = Prism.languages[lang];\n            if (!grammar) {\n                return;\n            }\n            var token = grammar[tokenName];\n            if (!token) {\n                // add doc comment: /** */\n                var definition = {};\n                definition[tokenName] = {\n                    pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n                    lookbehind: true,\n                    alias: \"comment\"\n                };\n                grammar = Prism.languages.insertBefore(lang, \"comment\", definition);\n                token = grammar[tokenName];\n            }\n            if (token instanceof RegExp) {\n                // convert regex to object\n                token = grammar[tokenName] = {\n                    pattern: token\n                };\n            }\n            if (Array.isArray(token)) {\n                for(var i = 0, l = token.length; i < l; i++){\n                    if (token[i] instanceof RegExp) {\n                        token[i] = {\n                            pattern: token[i]\n                        };\n                    }\n                    callback(token[i]);\n                }\n            } else {\n                callback(token);\n            }\n        }\n        /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */ function addSupport(languages, docLanguage) {\n            if (typeof languages === \"string\") {\n                languages = [\n                    languages\n                ];\n            }\n            languages.forEach(function(lang) {\n                docCommentSupport(lang, function(pattern) {\n                    if (!pattern.inside) {\n                        pattern.inside = {};\n                    }\n                    pattern.inside.rest = docLanguage;\n                });\n            });\n        }\n        Object.defineProperty(javaDocLike, \"addSupport\", {\n            value: addSupport\n        });\n        javaDocLike.addSupport([\n            \"java\",\n            \"javascript\",\n            \"php\"\n        ], javaDocLike);\n    })(Prism);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWZyYWN0b3IvbGFuZy9qYXZhZG9jbGlrZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxPQUFPLEdBQUdDO0FBQ2pCQSxZQUFZQyxXQUFXLEdBQUc7QUFDMUJELFlBQVlFLE9BQU8sR0FBRyxFQUFFO0FBQ3hCLFNBQVNGLFlBQVlHLEtBQUs7O0lBQ3RCLFVBQVVBLEtBQUs7UUFDZixJQUFJQyxjQUFlRCxNQUFNRSxTQUFTLENBQUNMLFdBQVcsR0FBRztZQUMvQ00sV0FBVztnQkFDVEMsU0FDRTtnQkFDRkMsWUFBWTtZQUNkO1lBQ0FDLFNBQVM7Z0JBQ1AsMEZBQTBGO2dCQUMxRixpQkFBaUI7Z0JBQ2pCRixTQUFTO2dCQUNUQyxZQUFZO1lBQ2Q7WUFDQUUsYUFBYTtRQUNmO1FBQ0E7Ozs7O0tBS0MsR0FDRCxTQUFTQyxrQkFBa0JDLElBQUksRUFBRUMsUUFBUTtZQUN2QyxJQUFJQyxZQUFZO1lBQ2hCLElBQUlDLFVBQVVaLE1BQU1FLFNBQVMsQ0FBQ08sS0FBSztZQUNuQyxJQUFJLENBQUNHLFNBQVM7Z0JBQ1o7WUFDRjtZQUNBLElBQUlDLFFBQVFELE9BQU8sQ0FBQ0QsVUFBVTtZQUM5QixJQUFJLENBQUNFLE9BQU87Z0JBQ1YsMEJBQTBCO2dCQUMxQixJQUFJQyxhQUFhLENBQUM7Z0JBQ2xCQSxVQUFVLENBQUNILFVBQVUsR0FBRztvQkFDdEJQLFNBQVM7b0JBQ1RDLFlBQVk7b0JBQ1pVLE9BQU87Z0JBQ1Q7Z0JBQ0FILFVBQVVaLE1BQU1FLFNBQVMsQ0FBQ2MsWUFBWSxDQUFDUCxNQUFNLFdBQVdLO2dCQUN4REQsUUFBUUQsT0FBTyxDQUFDRCxVQUFVO1lBQzVCO1lBQ0EsSUFBSUUsaUJBQWlCSSxRQUFRO2dCQUMzQiwwQkFBMEI7Z0JBQzFCSixRQUFRRCxPQUFPLENBQUNELFVBQVUsR0FBRztvQkFDM0JQLFNBQVNTO2dCQUNYO1lBQ0Y7WUFDQSxJQUFJSyxNQUFNQyxPQUFPLENBQUNOLFFBQVE7Z0JBQ3hCLElBQUssSUFBSU8sSUFBSSxHQUFHQyxJQUFJUixNQUFNUyxNQUFNLEVBQUVGLElBQUlDLEdBQUdELElBQUs7b0JBQzVDLElBQUlQLEtBQUssQ0FBQ08sRUFBRSxZQUFZSCxRQUFRO3dCQUM5QkosS0FBSyxDQUFDTyxFQUFFLEdBQUc7NEJBQ1RoQixTQUFTUyxLQUFLLENBQUNPLEVBQUU7d0JBQ25CO29CQUNGO29CQUNBVixTQUFTRyxLQUFLLENBQUNPLEVBQUU7Z0JBQ25CO1lBQ0YsT0FBTztnQkFDTFYsU0FBU0c7WUFDWDtRQUNGO1FBQ0E7Ozs7O0tBS0MsR0FDRCxTQUFTVSxXQUFXckIsU0FBUyxFQUFFc0IsV0FBVztZQUN4QyxJQUFJLE9BQU90QixjQUFjLFVBQVU7Z0JBQ2pDQSxZQUFZO29CQUFDQTtpQkFBVTtZQUN6QjtZQUNBQSxVQUFVdUIsT0FBTyxDQUFDLFNBQVVoQixJQUFJO2dCQUM5QkQsa0JBQWtCQyxNQUFNLFNBQVVMLE9BQU87b0JBQ3ZDLElBQUksQ0FBQ0EsUUFBUXNCLE1BQU0sRUFBRTt3QkFDbkJ0QixRQUFRc0IsTUFBTSxHQUFHLENBQUM7b0JBQ3BCO29CQUNBdEIsUUFBUXNCLE1BQU0sQ0FBQ0MsSUFBSSxHQUFHSDtnQkFDeEI7WUFDRjtRQUNGO1FBQ0FJLE9BQU9DLGNBQWMsQ0FBQzVCLGFBQWEsY0FBYztZQUMvQzZCLE9BQU9QO1FBQ1Q7UUFDQXRCLFlBQVlzQixVQUFVLENBQUM7WUFBQztZQUFRO1lBQWM7U0FBTSxFQUFFdEI7SUFDeEQsR0FBR0Q7QUFDTCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvamF2YWRvY2xpa2UuanM/NjIzYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBqYXZhZG9jbGlrZVxuamF2YWRvY2xpa2UuZGlzcGxheU5hbWUgPSAnamF2YWRvY2xpa2UnXG5qYXZhZG9jbGlrZS5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGphdmFkb2NsaWtlKFByaXNtKSB7XG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgdmFyIGphdmFEb2NMaWtlID0gKFByaXNtLmxhbmd1YWdlcy5qYXZhZG9jbGlrZSA9IHtcbiAgICAgIHBhcmFtZXRlcjoge1xuICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgIC8oXltcXHQgXSooPzpcXC97M318XFwqfFxcL1xcKlxcKilcXHMqQCg/OmFyZ3xhcmd1bWVudHN8cGFyYW0pXFxzKylcXHcrL20sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBrZXl3b3JkOiB7XG4gICAgICAgIC8vIGtleXdvcmRzIGFyZSB0aGUgZmlyc3Qgd29yZCBpbiBhIGxpbmUgcHJlY2VkZWQgYmUgYW4gYEBgIG9yIHN1cnJvdW5kZWQgYnkgY3VybHkgYnJhY2VzLlxuICAgICAgICAvLyBAd29yZCwge0B3b3JkfVxuICAgICAgICBwYXR0ZXJuOiAvKF5bXFx0IF0qKD86XFwvezN9fFxcKnxcXC9cXCpcXCopXFxzKnxcXHspQFthLXpdW2EtekEtWi1dK1xcYi9tLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAgcHVuY3R1YXRpb246IC9be31dL1xuICAgIH0pXG4gICAgLyoqXG4gICAgICogQWRkcyBkb2MgY29tbWVudCBzdXBwb3J0IHRvIHRoZSBnaXZlbiBsYW5ndWFnZSBhbmQgY2FsbHMgYSBnaXZlbiBjYWxsYmFjayBvbiBlYWNoIGRvYyBjb21tZW50IHBhdHRlcm4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGFuZyB0aGUgbGFuZ3VhZ2UgYWRkIGRvYyBjb21tZW50IHN1cHBvcnQgdG8uXG4gICAgICogQHBhcmFtIHsocGF0dGVybjoge2luc2lkZToge3Jlc3Q6IHVuZGVmaW5lZH19KSA9PiB2b2lkfSBjYWxsYmFjayB0aGUgZnVuY3Rpb24gY2FsbGVkIHdpdGggZWFjaCBkb2MgY29tbWVudCBwYXR0ZXJuIGFzIGFyZ3VtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRvY0NvbW1lbnRTdXBwb3J0KGxhbmcsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgdG9rZW5OYW1lID0gJ2RvYy1jb21tZW50J1xuICAgICAgdmFyIGdyYW1tYXIgPSBQcmlzbS5sYW5ndWFnZXNbbGFuZ11cbiAgICAgIGlmICghZ3JhbW1hcikge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHZhciB0b2tlbiA9IGdyYW1tYXJbdG9rZW5OYW1lXVxuICAgICAgaWYgKCF0b2tlbikge1xuICAgICAgICAvLyBhZGQgZG9jIGNvbW1lbnQ6IC8qKiAqL1xuICAgICAgICB2YXIgZGVmaW5pdGlvbiA9IHt9XG4gICAgICAgIGRlZmluaXRpb25bdG9rZW5OYW1lXSA9IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvKF58W15cXFxcXSlcXC9cXCpcXCpbXi9dW1xcc1xcU10qPyg/OlxcKlxcL3wkKS8sXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICBhbGlhczogJ2NvbW1lbnQnXG4gICAgICAgIH1cbiAgICAgICAgZ3JhbW1hciA9IFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUobGFuZywgJ2NvbW1lbnQnLCBkZWZpbml0aW9uKVxuICAgICAgICB0b2tlbiA9IGdyYW1tYXJbdG9rZW5OYW1lXVxuICAgICAgfVxuICAgICAgaWYgKHRva2VuIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgcmVnZXggdG8gb2JqZWN0XG4gICAgICAgIHRva2VuID0gZ3JhbW1hclt0b2tlbk5hbWVdID0ge1xuICAgICAgICAgIHBhdHRlcm46IHRva2VuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHRva2VuKSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRva2VuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGlmICh0b2tlbltpXSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICAgICAgdG9rZW5baV0gPSB7XG4gICAgICAgICAgICAgIHBhdHRlcm46IHRva2VuW2ldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhbGxiYWNrKHRva2VuW2ldKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayh0b2tlbilcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBkb2MtY29tbWVudCBzdXBwb3J0IHRvIHRoZSBnaXZlbiBsYW5ndWFnZXMgZm9yIHRoZSBnaXZlbiBkb2N1bWVudGF0aW9uIGxhbmd1YWdlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXXxzdHJpbmd9IGxhbmd1YWdlc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkb2NMYW5ndWFnZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZFN1cHBvcnQobGFuZ3VhZ2VzLCBkb2NMYW5ndWFnZSkge1xuICAgICAgaWYgKHR5cGVvZiBsYW5ndWFnZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGxhbmd1YWdlcyA9IFtsYW5ndWFnZXNdXG4gICAgICB9XG4gICAgICBsYW5ndWFnZXMuZm9yRWFjaChmdW5jdGlvbiAobGFuZykge1xuICAgICAgICBkb2NDb21tZW50U3VwcG9ydChsYW5nLCBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgICAgIGlmICghcGF0dGVybi5pbnNpZGUpIHtcbiAgICAgICAgICAgIHBhdHRlcm4uaW5zaWRlID0ge31cbiAgICAgICAgICB9XG4gICAgICAgICAgcGF0dGVybi5pbnNpZGUucmVzdCA9IGRvY0xhbmd1YWdlXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoamF2YURvY0xpa2UsICdhZGRTdXBwb3J0Jywge1xuICAgICAgdmFsdWU6IGFkZFN1cHBvcnRcbiAgICB9KVxuICAgIGphdmFEb2NMaWtlLmFkZFN1cHBvcnQoWydqYXZhJywgJ2phdmFzY3JpcHQnLCAncGhwJ10sIGphdmFEb2NMaWtlKVxuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiamF2YWRvY2xpa2UiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImphdmFEb2NMaWtlIiwibGFuZ3VhZ2VzIiwicGFyYW1ldGVyIiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJrZXl3b3JkIiwicHVuY3R1YXRpb24iLCJkb2NDb21tZW50U3VwcG9ydCIsImxhbmciLCJjYWxsYmFjayIsInRva2VuTmFtZSIsImdyYW1tYXIiLCJ0b2tlbiIsImRlZmluaXRpb24iLCJhbGlhcyIsImluc2VydEJlZm9yZSIsIlJlZ0V4cCIsIkFycmF5IiwiaXNBcnJheSIsImkiLCJsIiwibGVuZ3RoIiwiYWRkU3VwcG9ydCIsImRvY0xhbmd1YWdlIiwiZm9yRWFjaCIsImluc2lkZSIsInJlc3QiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/refractor/lang/javadoclike.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/refractor/lang/markup-templating.js":
/*!**********************************************************!*\
  !*** ./node_modules/refractor/lang/markup-templating.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nmodule.exports = markupTemplating;\nmarkupTemplating.displayName = \"markupTemplating\";\nmarkupTemplating.aliases = [];\nfunction markupTemplating(Prism) {\n    ;\n    (function(Prism) {\n        /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */ function getPlaceholder(language, index) {\n            return \"___\" + language.toUpperCase() + index + \"___\";\n        }\n        Object.defineProperties(Prism.languages[\"markup-templating\"] = {}, {\n            buildPlaceholders: {\n                /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */ value: function(env, language, placeholderPattern, replaceFilter) {\n                    if (env.language !== language) {\n                        return;\n                    }\n                    var tokenStack = env.tokenStack = [];\n                    env.code = env.code.replace(placeholderPattern, function(match) {\n                        if (typeof replaceFilter === \"function\" && !replaceFilter(match)) {\n                            return match;\n                        }\n                        var i = tokenStack.length;\n                        var placeholder // Check for existing strings\n                        ;\n                        while(env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1){\n                            ++i;\n                        } // Create a sparse array\n                        tokenStack[i] = match;\n                        return placeholder;\n                    }) // Switch the grammar to markup\n                    ;\n                    env.grammar = Prism.languages.markup;\n                }\n            },\n            tokenizePlaceholders: {\n                /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */ value: function(env, language) {\n                    if (env.language !== language || !env.tokenStack) {\n                        return;\n                    } // Switch the grammar back\n                    env.grammar = Prism.languages[language];\n                    var j = 0;\n                    var keys = Object.keys(env.tokenStack);\n                    function walkTokens(tokens) {\n                        for(var i = 0; i < tokens.length; i++){\n                            // all placeholders are replaced already\n                            if (j >= keys.length) {\n                                break;\n                            }\n                            var token = tokens[i];\n                            if (typeof token === \"string\" || token.content && typeof token.content === \"string\") {\n                                var k = keys[j];\n                                var t = env.tokenStack[k];\n                                var s = typeof token === \"string\" ? token : token.content;\n                                var placeholder = getPlaceholder(language, k);\n                                var index = s.indexOf(placeholder);\n                                if (index > -1) {\n                                    ++j;\n                                    var before = s.substring(0, index);\n                                    var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), \"language-\" + language, t);\n                                    var after = s.substring(index + placeholder.length);\n                                    var replacement = [];\n                                    if (before) {\n                                        replacement.push.apply(replacement, walkTokens([\n                                            before\n                                        ]));\n                                    }\n                                    replacement.push(middle);\n                                    if (after) {\n                                        replacement.push.apply(replacement, walkTokens([\n                                            after\n                                        ]));\n                                    }\n                                    if (typeof token === \"string\") {\n                                        tokens.splice.apply(tokens, [\n                                            i,\n                                            1\n                                        ].concat(replacement));\n                                    } else {\n                                        token.content = replacement;\n                                    }\n                                }\n                            } else if (token.content) {\n                                walkTokens(token.content);\n                            }\n                        }\n                        return tokens;\n                    }\n                    walkTokens(env.tokens);\n                }\n            }\n        });\n    })(Prism);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/refractor/lang/markup-templating.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/refractor/lang/php.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/php.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar refractorMarkupTemplating = __webpack_require__(/*! ./markup-templating.js */ \"(app-pages-browser)/./node_modules/refractor/lang/markup-templating.js\");\nmodule.exports = php;\nphp.displayName = \"php\";\nphp.aliases = [];\nfunction php(Prism) {\n    Prism.register(refractorMarkupTemplating) /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   * Rewritten by Tom Pavelec\n   *\n   * Supports PHP 5.3 - 8.0\n   */ ;\n    (function(Prism) {\n        var comment = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/;\n        var constant = [\n            {\n                pattern: /\\b(?:false|true)\\b/i,\n                alias: \"boolean\"\n            },\n            {\n                pattern: /(::\\s*)\\b[a-z_]\\w*\\b(?!\\s*\\()/i,\n                greedy: true,\n                lookbehind: true\n            },\n            {\n                pattern: /(\\b(?:case|const)\\s+)\\b[a-z_]\\w*(?=\\s*[;=])/i,\n                greedy: true,\n                lookbehind: true\n            },\n            /\\b(?:null)\\b/i,\n            /\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/\n        ];\n        var number = /\\b0b[01]+(?:_[01]+)*\\b|\\b0o[0-7]+(?:_[0-7]+)*\\b|\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b|(?:\\b\\d+(?:_\\d+)*\\.?(?:\\d+(?:_\\d+)*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i;\n        var operator = /<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/;\n        var punctuation = /[{}\\[\\](),:;]/;\n        Prism.languages.php = {\n            delimiter: {\n                pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n                alias: \"important\"\n            },\n            comment: comment,\n            variable: /\\$+(?:\\w+\\b|(?=\\{))/,\n            package: {\n                pattern: /(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n                lookbehind: true,\n                inside: {\n                    punctuation: /\\\\/\n                }\n            },\n            \"class-name-definition\": {\n                pattern: /(\\b(?:class|enum|interface|trait)\\s+)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                lookbehind: true,\n                alias: \"class-name\"\n            },\n            \"function-definition\": {\n                pattern: /(\\bfunction\\s+)[a-z_]\\w*(?=\\s*\\()/i,\n                lookbehind: true,\n                alias: \"function\"\n            },\n            keyword: [\n                {\n                    pattern: /(\\(\\s*)\\b(?:array|bool|boolean|float|int|integer|object|string)\\b(?=\\s*\\))/i,\n                    alias: \"type-casting\",\n                    greedy: true,\n                    lookbehind: true\n                },\n                {\n                    pattern: /([(,?]\\s*)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string)\\b(?=\\s*\\$)/i,\n                    alias: \"type-hint\",\n                    greedy: true,\n                    lookbehind: true\n                },\n                {\n                    pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string|void)\\b/i,\n                    alias: \"return-type\",\n                    greedy: true,\n                    lookbehind: true\n                },\n                {\n                    pattern: /\\b(?:array(?!\\s*\\()|bool|float|int|iterable|mixed|object|string|void)\\b/i,\n                    alias: \"type-declaration\",\n                    greedy: true\n                },\n                {\n                    pattern: /(\\|\\s*)(?:false|null)\\b|\\b(?:false|null)(?=\\s*\\|)/i,\n                    alias: \"type-declaration\",\n                    greedy: true,\n                    lookbehind: true\n                },\n                {\n                    pattern: /\\b(?:parent|self|static)(?=\\s*::)/i,\n                    alias: \"static-context\",\n                    greedy: true\n                },\n                {\n                    // yield from\n                    pattern: /(\\byield\\s+)from\\b/i,\n                    lookbehind: true\n                },\n                /\\bclass\\b/i,\n                {\n                    // https://www.php.net/manual/en/reserved.keywords.php\n                    //\n                    // keywords cannot be preceded by \"->\"\n                    // the complex lookbehind means `(?<!(?:->|::)\\s*)`\n                    pattern: /((?:^|[^\\s>:]|(?:^|[^-])>|(?:^|[^:]):)\\s*)\\b(?:abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield|__halt_compiler)\\b/i,\n                    lookbehind: true\n                }\n            ],\n            \"argument-name\": {\n                pattern: /([(,]\\s+)\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n                lookbehind: true\n            },\n            \"class-name\": [\n                {\n                    pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                    greedy: true,\n                    lookbehind: true\n                },\n                {\n                    pattern: /(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                    greedy: true,\n                    lookbehind: true\n                },\n                {\n                    pattern: /\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,\n                    greedy: true\n                },\n                {\n                    pattern: /(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,\n                    alias: \"class-name-fully-qualified\",\n                    greedy: true,\n                    lookbehind: true,\n                    inside: {\n                        punctuation: /\\\\/\n                    }\n                },\n                {\n                    pattern: /(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,\n                    alias: \"class-name-fully-qualified\",\n                    greedy: true,\n                    inside: {\n                        punctuation: /\\\\/\n                    }\n                },\n                {\n                    pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n                    alias: \"class-name-fully-qualified\",\n                    greedy: true,\n                    lookbehind: true,\n                    inside: {\n                        punctuation: /\\\\/\n                    }\n                },\n                {\n                    pattern: /\\b[a-z_]\\w*(?=\\s*\\$)/i,\n                    alias: \"type-declaration\",\n                    greedy: true\n                },\n                {\n                    pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n                    alias: [\n                        \"class-name-fully-qualified\",\n                        \"type-declaration\"\n                    ],\n                    greedy: true,\n                    inside: {\n                        punctuation: /\\\\/\n                    }\n                },\n                {\n                    pattern: /\\b[a-z_]\\w*(?=\\s*::)/i,\n                    alias: \"static-context\",\n                    greedy: true\n                },\n                {\n                    pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,\n                    alias: [\n                        \"class-name-fully-qualified\",\n                        \"static-context\"\n                    ],\n                    greedy: true,\n                    inside: {\n                        punctuation: /\\\\/\n                    }\n                },\n                {\n                    pattern: /([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,\n                    alias: \"type-hint\",\n                    greedy: true,\n                    lookbehind: true\n                },\n                {\n                    pattern: /([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n                    alias: [\n                        \"class-name-fully-qualified\",\n                        \"type-hint\"\n                    ],\n                    greedy: true,\n                    lookbehind: true,\n                    inside: {\n                        punctuation: /\\\\/\n                    }\n                },\n                {\n                    pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                    alias: \"return-type\",\n                    greedy: true,\n                    lookbehind: true\n                },\n                {\n                    pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n                    alias: [\n                        \"class-name-fully-qualified\",\n                        \"return-type\"\n                    ],\n                    greedy: true,\n                    lookbehind: true,\n                    inside: {\n                        punctuation: /\\\\/\n                    }\n                }\n            ],\n            constant: constant,\n            function: {\n                pattern: /(^|[^\\\\\\w])\\\\?[a-z_](?:[\\w\\\\]*\\w)?(?=\\s*\\()/i,\n                lookbehind: true,\n                inside: {\n                    punctuation: /\\\\/\n                }\n            },\n            property: {\n                pattern: /(->\\s*)\\w+/,\n                lookbehind: true\n            },\n            number: number,\n            operator: operator,\n            punctuation: punctuation\n        };\n        var string_interpolation = {\n            pattern: /\\{\\$(?:\\{(?:\\{[^{}]+\\}|[^{}]+)\\}|[^{}])+\\}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)?)/,\n            lookbehind: true,\n            inside: Prism.languages.php\n        };\n        var string = [\n            {\n                pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n                alias: \"nowdoc-string\",\n                greedy: true,\n                inside: {\n                    delimiter: {\n                        pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n                        alias: \"symbol\",\n                        inside: {\n                            punctuation: /^<<<'?|[';]$/\n                        }\n                    }\n                }\n            },\n            {\n                pattern: /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n                alias: \"heredoc-string\",\n                greedy: true,\n                inside: {\n                    delimiter: {\n                        pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n                        alias: \"symbol\",\n                        inside: {\n                            punctuation: /^<<<\"?|[\";]$/\n                        }\n                    },\n                    interpolation: string_interpolation\n                }\n            },\n            {\n                pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n                alias: \"backtick-quoted-string\",\n                greedy: true\n            },\n            {\n                pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n                alias: \"single-quoted-string\",\n                greedy: true\n            },\n            {\n                pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n                alias: \"double-quoted-string\",\n                greedy: true,\n                inside: {\n                    interpolation: string_interpolation\n                }\n            }\n        ];\n        Prism.languages.insertBefore(\"php\", \"variable\", {\n            string: string,\n            attribute: {\n                pattern: /#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,\n                greedy: true,\n                inside: {\n                    \"attribute-content\": {\n                        pattern: /^(#\\[)[\\s\\S]+(?=\\]$)/,\n                        lookbehind: true,\n                        // inside can appear subset of php\n                        inside: {\n                            comment: comment,\n                            string: string,\n                            \"attribute-class-name\": [\n                                {\n                                    pattern: /([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                                    alias: \"class-name\",\n                                    greedy: true,\n                                    lookbehind: true\n                                },\n                                {\n                                    pattern: /([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,\n                                    alias: [\n                                        \"class-name\",\n                                        \"class-name-fully-qualified\"\n                                    ],\n                                    greedy: true,\n                                    lookbehind: true,\n                                    inside: {\n                                        punctuation: /\\\\/\n                                    }\n                                }\n                            ],\n                            constant: constant,\n                            number: number,\n                            operator: operator,\n                            punctuation: punctuation\n                        }\n                    },\n                    delimiter: {\n                        pattern: /^#\\[|\\]$/,\n                        alias: \"punctuation\"\n                    }\n                }\n            }\n        });\n        Prism.hooks.add(\"before-tokenize\", function(env) {\n            if (!/<\\?/.test(env.code)) {\n                return;\n            }\n            var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/g;\n            Prism.languages[\"markup-templating\"].buildPlaceholders(env, \"php\", phpPattern);\n        });\n        Prism.hooks.add(\"after-tokenize\", function(env) {\n            Prism.languages[\"markup-templating\"].tokenizePlaceholders(env, \"php\");\n        });\n    })(Prism);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/refractor/lang/php.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/refractor/lang/phpdoc.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/phpdoc.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar refractorPhp = __webpack_require__(/*! ./php.js */ \"(app-pages-browser)/./node_modules/refractor/lang/php.js\");\nvar refractorJavadoclike = __webpack_require__(/*! ./javadoclike.js */ \"(app-pages-browser)/./node_modules/refractor/lang/javadoclike.js\");\nmodule.exports = phpdoc;\nphpdoc.displayName = \"phpdoc\";\nphpdoc.aliases = [];\nfunction phpdoc(Prism) {\n    Prism.register(refractorPhp);\n    Prism.register(refractorJavadoclike);\n    (function(Prism) {\n        var typeExpression = /(?:\\b[a-zA-Z]\\w*|[|\\\\[\\]])+/.source;\n        Prism.languages.phpdoc = Prism.languages.extend(\"javadoclike\", {\n            parameter: {\n                pattern: RegExp(\"(@(?:global|param|property(?:-read|-write)?|var)\\\\s+(?:\" + typeExpression + \"\\\\s+)?)\\\\$\\\\w+\"),\n                lookbehind: true\n            }\n        });\n        Prism.languages.insertBefore(\"phpdoc\", \"keyword\", {\n            \"class-name\": [\n                {\n                    pattern: RegExp(\"(@(?:global|package|param|property(?:-read|-write)?|return|subpackage|throws|var)\\\\s+)\" + typeExpression),\n                    lookbehind: true,\n                    inside: {\n                        keyword: /\\b(?:array|bool|boolean|callback|double|false|float|int|integer|mixed|null|object|resource|self|string|true|void)\\b/,\n                        punctuation: /[|\\\\[\\]()]/\n                    }\n                }\n            ]\n        });\n        Prism.languages.javadoclike.addSupport(\"php\", Prism.languages.phpdoc);\n    })(Prism);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWZyYWN0b3IvbGFuZy9waHBkb2MuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxJQUFJQSxlQUFlQyxtQkFBT0EsQ0FBQztBQUMzQixJQUFJQyx1QkFBdUJELG1CQUFPQSxDQUFDO0FBQ25DRSxPQUFPQyxPQUFPLEdBQUdDO0FBQ2pCQSxPQUFPQyxXQUFXLEdBQUc7QUFDckJELE9BQU9FLE9BQU8sR0FBRyxFQUFFO0FBQ25CLFNBQVNGLE9BQU9HLEtBQUs7SUFDbkJBLE1BQU1DLFFBQVEsQ0FBQ1Q7SUFDZlEsTUFBTUMsUUFBUSxDQUFDUDtJQUNiLFVBQVVNLEtBQUs7UUFDZixJQUFJRSxpQkFBaUIsOEJBQThCQyxNQUFNO1FBQ3pESCxNQUFNSSxTQUFTLENBQUNQLE1BQU0sR0FBR0csTUFBTUksU0FBUyxDQUFDQyxNQUFNLENBQUMsZUFBZTtZQUM3REMsV0FBVztnQkFDVEMsU0FBU0MsT0FDUCw0REFDRU4saUJBQ0E7Z0JBRUpPLFlBQVk7WUFDZDtRQUNGO1FBQ0FULE1BQU1JLFNBQVMsQ0FBQ00sWUFBWSxDQUFDLFVBQVUsV0FBVztZQUNoRCxjQUFjO2dCQUNaO29CQUNFSCxTQUFTQyxPQUNQLDJGQUNFTjtvQkFFSk8sWUFBWTtvQkFDWkUsUUFBUTt3QkFDTkMsU0FDRTt3QkFDRkMsYUFBYTtvQkFDZjtnQkFDRjthQUNEO1FBQ0g7UUFDQWIsTUFBTUksU0FBUyxDQUFDVSxXQUFXLENBQUNDLFVBQVUsQ0FBQyxPQUFPZixNQUFNSSxTQUFTLENBQUNQLE1BQU07SUFDdEUsR0FBR0c7QUFDTCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcGhwZG9jLmpzPzQyZWQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG52YXIgcmVmcmFjdG9yUGhwID0gcmVxdWlyZSgnLi9waHAuanMnKVxudmFyIHJlZnJhY3RvckphdmFkb2NsaWtlID0gcmVxdWlyZSgnLi9qYXZhZG9jbGlrZS5qcycpXG5tb2R1bGUuZXhwb3J0cyA9IHBocGRvY1xucGhwZG9jLmRpc3BsYXlOYW1lID0gJ3BocGRvYydcbnBocGRvYy5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIHBocGRvYyhQcmlzbSkge1xuICBQcmlzbS5yZWdpc3RlcihyZWZyYWN0b3JQaHApXG4gIFByaXNtLnJlZ2lzdGVyKHJlZnJhY3RvckphdmFkb2NsaWtlKVxuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIHZhciB0eXBlRXhwcmVzc2lvbiA9IC8oPzpcXGJbYS16QS1aXVxcdyp8W3xcXFxcW1xcXV0pKy8uc291cmNlXG4gICAgUHJpc20ubGFuZ3VhZ2VzLnBocGRvYyA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2phdmFkb2NsaWtlJywge1xuICAgICAgcGFyYW1ldGVyOiB7XG4gICAgICAgIHBhdHRlcm46IFJlZ0V4cChcbiAgICAgICAgICAnKEAoPzpnbG9iYWx8cGFyYW18cHJvcGVydHkoPzotcmVhZHwtd3JpdGUpP3x2YXIpXFxcXHMrKD86JyArXG4gICAgICAgICAgICB0eXBlRXhwcmVzc2lvbiArXG4gICAgICAgICAgICAnXFxcXHMrKT8pXFxcXCRcXFxcdysnXG4gICAgICAgICksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH1cbiAgICB9KVxuICAgIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ3BocGRvYycsICdrZXl3b3JkJywge1xuICAgICAgJ2NsYXNzLW5hbWUnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwYXR0ZXJuOiBSZWdFeHAoXG4gICAgICAgICAgICAnKEAoPzpnbG9iYWx8cGFja2FnZXxwYXJhbXxwcm9wZXJ0eSg/Oi1yZWFkfC13cml0ZSk/fHJldHVybnxzdWJwYWNrYWdlfHRocm93c3x2YXIpXFxcXHMrKScgK1xuICAgICAgICAgICAgICB0eXBlRXhwcmVzc2lvblxuICAgICAgICAgICksXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgIGtleXdvcmQ6XG4gICAgICAgICAgICAgIC9cXGIoPzphcnJheXxib29sfGJvb2xlYW58Y2FsbGJhY2t8ZG91YmxlfGZhbHNlfGZsb2F0fGludHxpbnRlZ2VyfG1peGVkfG51bGx8b2JqZWN0fHJlc291cmNlfHNlbGZ8c3RyaW5nfHRydWV8dm9pZClcXGIvLFxuICAgICAgICAgICAgcHVuY3R1YXRpb246IC9bfFxcXFxbXFxdKCldL1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pXG4gICAgUHJpc20ubGFuZ3VhZ2VzLmphdmFkb2NsaWtlLmFkZFN1cHBvcnQoJ3BocCcsIFByaXNtLmxhbmd1YWdlcy5waHBkb2MpXG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbInJlZnJhY3RvclBocCIsInJlcXVpcmUiLCJyZWZyYWN0b3JKYXZhZG9jbGlrZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJwaHBkb2MiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsInJlZ2lzdGVyIiwidHlwZUV4cHJlc3Npb24iLCJzb3VyY2UiLCJsYW5ndWFnZXMiLCJleHRlbmQiLCJwYXJhbWV0ZXIiLCJwYXR0ZXJuIiwiUmVnRXhwIiwibG9va2JlaGluZCIsImluc2VydEJlZm9yZSIsImluc2lkZSIsImtleXdvcmQiLCJwdW5jdHVhdGlvbiIsImphdmFkb2NsaWtlIiwiYWRkU3VwcG9ydCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/refractor/lang/phpdoc.js\n"));

/***/ })

}]);
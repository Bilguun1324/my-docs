"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["react-syntax-highlighter_languages_refractor_livescript"],{

/***/ "(app-pages-browser)/./node_modules/refractor/lang/livescript.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/livescript.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nmodule.exports = livescript;\nlivescript.displayName = \"livescript\";\nlivescript.aliases = [];\nfunction livescript(Prism) {\n    Prism.languages.livescript = {\n        comment: [\n            {\n                pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n                lookbehind: true\n            },\n            {\n                pattern: /(^|[^\\\\])#.*/,\n                lookbehind: true\n            }\n        ],\n        \"interpolated-string\": {\n            /* Look-behind and look-ahead prevents wrong behavior of the greedy pattern\n       * forcing it to match \"\"\"-quoted string when it would otherwise match \"-quoted first. */ pattern: /(^|[^\"])(\"\"\"|\")(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2(?!\")/,\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                variable: {\n                    pattern: /(^|[^\\\\])#[a-z_](?:-?[a-z]|[\\d_])*/m,\n                    lookbehind: true\n                },\n                interpolation: {\n                    pattern: /(^|[^\\\\])#\\{[^}]+\\}/m,\n                    lookbehind: true,\n                    inside: {\n                        \"interpolation-punctuation\": {\n                            pattern: /^#\\{|\\}$/,\n                            alias: \"variable\"\n                        } // See rest below\n                    }\n                },\n                string: /[\\s\\S]+/\n            }\n        },\n        string: [\n            {\n                pattern: /('''|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n                greedy: true\n            },\n            {\n                pattern: /<\\[[\\s\\S]*?\\]>/,\n                greedy: true\n            },\n            /\\\\[^\\s,;\\])}]+/\n        ],\n        regex: [\n            {\n                pattern: /\\/\\/(?:\\[[^\\r\\n\\]]*\\]|\\\\.|(?!\\/\\/)[^\\\\\\[])+\\/\\/[gimyu]{0,5}/,\n                greedy: true,\n                inside: {\n                    comment: {\n                        pattern: /(^|[^\\\\])#.*/,\n                        lookbehind: true\n                    }\n                }\n            },\n            {\n                pattern: /\\/(?:\\[[^\\r\\n\\]]*\\]|\\\\.|[^/\\\\\\r\\n\\[])+\\/[gimyu]{0,5}/,\n                greedy: true\n            }\n        ],\n        keyword: {\n            pattern: /(^|(?!-).)\\b(?:break|case|catch|class|const|continue|default|do|else|extends|fallthrough|finally|for(?: ever)?|function|if|implements|it|let|loop|new|null|otherwise|own|return|super|switch|that|then|this|throw|try|unless|until|var|void|when|while|yield)(?!-)\\b/m,\n            lookbehind: true\n        },\n        \"keyword-operator\": {\n            pattern: /(^|[^-])\\b(?:(?:delete|require|typeof)!|(?:and|by|delete|export|from|import(?: all)?|in|instanceof|is(?: not|nt)?|not|of|or|til|to|typeof|with|xor)(?!-)\\b)/m,\n            lookbehind: true,\n            alias: \"operator\"\n        },\n        boolean: {\n            pattern: /(^|[^-])\\b(?:false|no|off|on|true|yes)(?!-)\\b/m,\n            lookbehind: true\n        },\n        argument: {\n            // Don't match .&. nor &&\n            pattern: /(^|(?!\\.&\\.)[^&])&(?!&)\\d*/m,\n            lookbehind: true,\n            alias: \"variable\"\n        },\n        number: /\\b(?:\\d+~[\\da-z]+|\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[a-z]\\w*)?)/i,\n        identifier: /[a-z_](?:-?[a-z]|[\\d_])*/i,\n        operator: [\n            // Spaced .\n            {\n                pattern: /( )\\.(?= )/,\n                lookbehind: true\n            },\n            // .= .~ .. ...\n            // .&. .^. .<<. .>>. .>>>.\n            // := :: ::=\n            // &&\n            // || |>\n            // < << <<< <<<<\n            // <- <-- <-! <--!\n            // <~ <~~ <~! <~~!\n            // <| <= <?\n            // > >> >= >?\n            // - -- -> -->\n            // + ++\n            // @ @@\n            // % %%\n            // * **\n            // ! != !~=\n            // !~> !~~>\n            // !-> !-->\n            // ~ ~> ~~> ~=\n            // = ==\n            // ^ ^^\n            // / ?\n            /\\.(?:[=~]|\\.\\.?)|\\.(?:[&|^]|<<|>>>?)\\.|:(?:=|:=?)|&&|\\|[|>]|<(?:<<?<?|--?!?|~~?!?|[|=?])?|>[>=?]?|-(?:->?|>)?|\\+\\+?|@@?|%%?|\\*\\*?|!(?:~?=|--?>|~?~>)?|~(?:~?>|=)?|==?|\\^\\^?|[\\/?]/\n        ],\n        punctuation: /[(){}\\[\\]|.,:;`]/\n    };\n    Prism.languages.livescript[\"interpolated-string\"].inside[\"interpolation\"].inside.rest = Prism.languages.livescript;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWZyYWN0b3IvbGFuZy9saXZlc2NyaXB0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBR0M7QUFDakJBLFdBQVdDLFdBQVcsR0FBRztBQUN6QkQsV0FBV0UsT0FBTyxHQUFHLEVBQUU7QUFDdkIsU0FBU0YsV0FBV0csS0FBSztJQUN2QkEsTUFBTUMsU0FBUyxDQUFDSixVQUFVLEdBQUc7UUFDM0JLLFNBQVM7WUFDUDtnQkFDRUMsU0FBUztnQkFDVEMsWUFBWTtZQUNkO1lBQ0E7Z0JBQ0VELFNBQVM7Z0JBQ1RDLFlBQVk7WUFDZDtTQUNEO1FBQ0QsdUJBQXVCO1lBQ3JCOzZGQUN1RixHQUN2RkQsU0FBUztZQUNUQyxZQUFZO1lBQ1pDLFFBQVE7WUFDUkMsUUFBUTtnQkFDTkMsVUFBVTtvQkFDUkosU0FBUztvQkFDVEMsWUFBWTtnQkFDZDtnQkFDQUksZUFBZTtvQkFDYkwsU0FBUztvQkFDVEMsWUFBWTtvQkFDWkUsUUFBUTt3QkFDTiw2QkFBNkI7NEJBQzNCSCxTQUFTOzRCQUNUTSxPQUFPO3dCQUNULEVBQUUsaUJBQWlCO29CQUNyQjtnQkFDRjtnQkFDQUMsUUFBUTtZQUNWO1FBQ0Y7UUFDQUEsUUFBUTtZQUNOO2dCQUNFUCxTQUFTO2dCQUNURSxRQUFRO1lBQ1Y7WUFDQTtnQkFDRUYsU0FBUztnQkFDVEUsUUFBUTtZQUNWO1lBQ0E7U0FDRDtRQUNETSxPQUFPO1lBQ0w7Z0JBQ0VSLFNBQVM7Z0JBQ1RFLFFBQVE7Z0JBQ1JDLFFBQVE7b0JBQ05KLFNBQVM7d0JBQ1BDLFNBQVM7d0JBQ1RDLFlBQVk7b0JBQ2Q7Z0JBQ0Y7WUFDRjtZQUNBO2dCQUNFRCxTQUFTO2dCQUNURSxRQUFRO1lBQ1Y7U0FDRDtRQUNETyxTQUFTO1lBQ1BULFNBQ0U7WUFDRkMsWUFBWTtRQUNkO1FBQ0Esb0JBQW9CO1lBQ2xCRCxTQUNFO1lBQ0ZDLFlBQVk7WUFDWkssT0FBTztRQUNUO1FBQ0FJLFNBQVM7WUFDUFYsU0FBUztZQUNUQyxZQUFZO1FBQ2Q7UUFDQVUsVUFBVTtZQUNSLHlCQUF5QjtZQUN6QlgsU0FBUztZQUNUQyxZQUFZO1lBQ1pLLE9BQU87UUFDVDtRQUNBTSxRQUFRO1FBQ1JDLFlBQVk7UUFDWkMsVUFBVTtZQUNSLFdBQVc7WUFDWDtnQkFDRWQsU0FBUztnQkFDVEMsWUFBWTtZQUNkO1lBQ0EsZUFBZTtZQUNmLDBCQUEwQjtZQUMxQixZQUFZO1lBQ1osS0FBSztZQUNMLFFBQVE7WUFDUixnQkFBZ0I7WUFDaEIsa0JBQWtCO1lBQ2xCLGtCQUFrQjtZQUNsQixXQUFXO1lBQ1gsYUFBYTtZQUNiLGNBQWM7WUFDZCxPQUFPO1lBQ1AsT0FBTztZQUNQLE9BQU87WUFDUCxPQUFPO1lBQ1AsV0FBVztZQUNYLFdBQVc7WUFDWCxXQUFXO1lBQ1gsY0FBYztZQUNkLE9BQU87WUFDUCxPQUFPO1lBQ1AsTUFBTTtZQUNOO1NBQ0Q7UUFDRGMsYUFBYTtJQUNmO0lBQ0FsQixNQUFNQyxTQUFTLENBQUNKLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQ1MsTUFBTSxDQUN0RCxnQkFDRCxDQUFDQSxNQUFNLENBQUNhLElBQUksR0FBR25CLE1BQU1DLFNBQVMsQ0FBQ0osVUFBVTtBQUM1QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvbGl2ZXNjcmlwdC5qcz85MTllIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxpdmVzY3JpcHRcbmxpdmVzY3JpcHQuZGlzcGxheU5hbWUgPSAnbGl2ZXNjcmlwdCdcbmxpdmVzY3JpcHQuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBsaXZlc2NyaXB0KFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5saXZlc2NyaXB0ID0ge1xuICAgIGNvbW1lbnQ6IFtcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogLyhefFteXFxcXF0pXFwvXFwqW1xcc1xcU10qP1xcKlxcLy8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKSMuKi8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH1cbiAgICBdLFxuICAgICdpbnRlcnBvbGF0ZWQtc3RyaW5nJzoge1xuICAgICAgLyogTG9vay1iZWhpbmQgYW5kIGxvb2stYWhlYWQgcHJldmVudHMgd3JvbmcgYmVoYXZpb3Igb2YgdGhlIGdyZWVkeSBwYXR0ZXJuXG4gICAgICAgKiBmb3JjaW5nIGl0IHRvIG1hdGNoIFwiXCJcIi1xdW90ZWQgc3RyaW5nIHdoZW4gaXQgd291bGQgb3RoZXJ3aXNlIG1hdGNoIFwiLXF1b3RlZCBmaXJzdC4gKi9cbiAgICAgIHBhdHRlcm46IC8oXnxbXlwiXSkoXCJcIlwifFwiKSg/OlxcXFxbXFxzXFxTXXwoPyFcXDIpW15cXFxcXSkqXFwyKD8hXCIpLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgdmFyaWFibGU6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvKF58W15cXFxcXSkjW2Etel9dKD86LT9bYS16XXxbXFxkX10pKi9tLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgaW50ZXJwb2xhdGlvbjoge1xuICAgICAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKSNcXHtbXn1dK1xcfS9tLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICAnaW50ZXJwb2xhdGlvbi1wdW5jdHVhdGlvbic6IHtcbiAgICAgICAgICAgICAgcGF0dGVybjogL14jXFx7fFxcfSQvLFxuICAgICAgICAgICAgICBhbGlhczogJ3ZhcmlhYmxlJ1xuICAgICAgICAgICAgfSAvLyBTZWUgcmVzdCBiZWxvd1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc3RyaW5nOiAvW1xcc1xcU10rL1xuICAgICAgfVxuICAgIH0sXG4gICAgc3RyaW5nOiBbXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC8oJycnfCcpKD86XFxcXFtcXHNcXFNdfCg/IVxcMSlbXlxcXFxdKSpcXDEvLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC88XFxbW1xcc1xcU10qP1xcXT4vLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH0sXG4gICAgICAvXFxcXFteXFxzLDtcXF0pfV0rL1xuICAgIF0sXG4gICAgcmVnZXg6IFtcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogL1xcL1xcLyg/OlxcW1teXFxyXFxuXFxdXSpcXF18XFxcXC58KD8hXFwvXFwvKVteXFxcXFxcW10pK1xcL1xcL1tnaW15dV17MCw1fS8sXG4gICAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgY29tbWVudDoge1xuICAgICAgICAgICAgcGF0dGVybjogLyhefFteXFxcXF0pIy4qLyxcbiAgICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC9cXC8oPzpcXFtbXlxcclxcblxcXV0qXFxdfFxcXFwufFteL1xcXFxcXHJcXG5cXFtdKStcXC9bZ2lteXVdezAsNX0vLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH1cbiAgICBdLFxuICAgIGtleXdvcmQ6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8oXnwoPyEtKS4pXFxiKD86YnJlYWt8Y2FzZXxjYXRjaHxjbGFzc3xjb25zdHxjb250aW51ZXxkZWZhdWx0fGRvfGVsc2V8ZXh0ZW5kc3xmYWxsdGhyb3VnaHxmaW5hbGx5fGZvcig/OiBldmVyKT98ZnVuY3Rpb258aWZ8aW1wbGVtZW50c3xpdHxsZXR8bG9vcHxuZXd8bnVsbHxvdGhlcndpc2V8b3dufHJldHVybnxzdXBlcnxzd2l0Y2h8dGhhdHx0aGVufHRoaXN8dGhyb3d8dHJ5fHVubGVzc3x1bnRpbHx2YXJ8dm9pZHx3aGVufHdoaWxlfHlpZWxkKSg/IS0pXFxiL20sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgfSxcbiAgICAna2V5d29yZC1vcGVyYXRvcic6IHtcbiAgICAgIHBhdHRlcm46XG4gICAgICAgIC8oXnxbXi1dKVxcYig/Oig/OmRlbGV0ZXxyZXF1aXJlfHR5cGVvZikhfCg/OmFuZHxieXxkZWxldGV8ZXhwb3J0fGZyb218aW1wb3J0KD86IGFsbCk/fGlufGluc3RhbmNlb2Z8aXMoPzogbm90fG50KT98bm90fG9mfG9yfHRpbHx0b3x0eXBlb2Z8d2l0aHx4b3IpKD8hLSlcXGIpL20sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgYWxpYXM6ICdvcGVyYXRvcidcbiAgICB9LFxuICAgIGJvb2xlYW46IHtcbiAgICAgIHBhdHRlcm46IC8oXnxbXi1dKVxcYig/OmZhbHNlfG5vfG9mZnxvbnx0cnVlfHllcykoPyEtKVxcYi9tLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgYXJndW1lbnQ6IHtcbiAgICAgIC8vIERvbid0IG1hdGNoIC4mLiBub3IgJiZcbiAgICAgIHBhdHRlcm46IC8oXnwoPyFcXC4mXFwuKVteJl0pJig/ISYpXFxkKi9tLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGFsaWFzOiAndmFyaWFibGUnXG4gICAgfSxcbiAgICBudW1iZXI6IC9cXGIoPzpcXGQrfltcXGRhLXpdK3xcXGRbXFxkX10qKD86XFwuXFxkW1xcZF9dKik/KD86W2Etel1cXHcqKT8pL2ksXG4gICAgaWRlbnRpZmllcjogL1thLXpfXSg/Oi0/W2Etel18W1xcZF9dKSovaSxcbiAgICBvcGVyYXRvcjogW1xuICAgICAgLy8gU3BhY2VkIC5cbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogLyggKVxcLig/PSApLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSwgLy8gRnVsbCBsaXN0LCBpbiBvcmRlcjpcbiAgICAgIC8vIC49IC5+IC4uIC4uLlxuICAgICAgLy8gLiYuIC5eLiAuPDwuIC4+Pi4gLj4+Pi5cbiAgICAgIC8vIDo9IDo6IDo6PVxuICAgICAgLy8gJiZcbiAgICAgIC8vIHx8IHw+XG4gICAgICAvLyA8IDw8IDw8PCA8PDw8XG4gICAgICAvLyA8LSA8LS0gPC0hIDwtLSFcbiAgICAgIC8vIDx+IDx+fiA8fiEgPH5+IVxuICAgICAgLy8gPHwgPD0gPD9cbiAgICAgIC8vID4gPj4gPj0gPj9cbiAgICAgIC8vIC0gLS0gLT4gLS0+XG4gICAgICAvLyArICsrXG4gICAgICAvLyBAIEBAXG4gICAgICAvLyAlICUlXG4gICAgICAvLyAqICoqXG4gICAgICAvLyAhICE9ICF+PVxuICAgICAgLy8gIX4+ICF+fj5cbiAgICAgIC8vICEtPiAhLS0+XG4gICAgICAvLyB+IH4+IH5+PiB+PVxuICAgICAgLy8gPSA9PVxuICAgICAgLy8gXiBeXlxuICAgICAgLy8gLyA/XG4gICAgICAvXFwuKD86Wz1+XXxcXC5cXC4/KXxcXC4oPzpbJnxeXXw8PHw+Pj4/KVxcLnw6KD86PXw6PT8pfCYmfFxcfFt8Pl18PCg/Ojw8Pzw/fC0tPyE/fH5+PyE/fFt8PT9dKT98Pls+PT9dP3wtKD86LT4/fD4pP3xcXCtcXCs/fEBAP3wlJT98XFwqXFwqP3whKD86fj89fC0tPz58fj9+Pik/fH4oPzp+Pz58PSk/fD09P3xcXF5cXF4/fFtcXC8/XS9cbiAgICBdLFxuICAgIHB1bmN0dWF0aW9uOiAvWygpe31cXFtcXF18Liw6O2BdL1xuICB9XG4gIFByaXNtLmxhbmd1YWdlcy5saXZlc2NyaXB0WydpbnRlcnBvbGF0ZWQtc3RyaW5nJ10uaW5zaWRlW1xuICAgICdpbnRlcnBvbGF0aW9uJ1xuICBdLmluc2lkZS5yZXN0ID0gUHJpc20ubGFuZ3VhZ2VzLmxpdmVzY3JpcHRcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibGl2ZXNjcmlwdCIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInBhdHRlcm4iLCJsb29rYmVoaW5kIiwiZ3JlZWR5IiwiaW5zaWRlIiwidmFyaWFibGUiLCJpbnRlcnBvbGF0aW9uIiwiYWxpYXMiLCJzdHJpbmciLCJyZWdleCIsImtleXdvcmQiLCJib29sZWFuIiwiYXJndW1lbnQiLCJudW1iZXIiLCJpZGVudGlmaWVyIiwib3BlcmF0b3IiLCJwdW5jdHVhdGlvbiIsInJlc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/refractor/lang/livescript.js\n"));

/***/ })

}]);
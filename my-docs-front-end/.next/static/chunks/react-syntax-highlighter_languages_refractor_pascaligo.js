"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["react-syntax-highlighter_languages_refractor_pascaligo"],{

/***/ "(app-pages-browser)/./node_modules/refractor/lang/pascaligo.js":
/*!**************************************************!*\
  !*** ./node_modules/refractor/lang/pascaligo.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nmodule.exports = pascaligo;\npascaligo.displayName = \"pascaligo\";\npascaligo.aliases = [];\nfunction pascaligo(Prism) {\n    ;\n    (function(Prism) {\n        // Pascaligo is a layer 2 smart contract language for the tezos blockchain\n        var braces = /\\((?:[^()]|\\((?:[^()]|\\([^()]*\\))*\\))*\\)/.source;\n        var type = /(?:\\b\\w+(?:<braces>)?|<braces>)/.source.replace(/<braces>/g, function() {\n            return braces;\n        });\n        var pascaligo = Prism.languages.pascaligo = {\n            comment: /\\(\\*[\\s\\S]+?\\*\\)|\\/\\/.*/,\n            string: {\n                pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|\\^[a-z]/i,\n                greedy: true\n            },\n            \"class-name\": [\n                {\n                    pattern: RegExp(/(\\btype\\s+\\w+\\s+is\\s+)<type>/.source.replace(/<type>/g, function() {\n                        return type;\n                    }), \"i\"),\n                    lookbehind: true,\n                    inside: null // see below\n                },\n                {\n                    pattern: RegExp(/<type>(?=\\s+is\\b)/.source.replace(/<type>/g, function() {\n                        return type;\n                    }), \"i\"),\n                    inside: null // see below\n                },\n                {\n                    pattern: RegExp(/(:\\s*)<type>/.source.replace(/<type>/g, function() {\n                        return type;\n                    })),\n                    lookbehind: true,\n                    inside: null // see below\n                }\n            ],\n            keyword: {\n                pattern: /(^|[^&])\\b(?:begin|block|case|const|else|end|fail|for|from|function|if|is|nil|of|remove|return|skip|then|type|var|while|with)\\b/i,\n                lookbehind: true\n            },\n            boolean: {\n                pattern: /(^|[^&])\\b(?:False|True)\\b/i,\n                lookbehind: true\n            },\n            builtin: {\n                pattern: /(^|[^&])\\b(?:bool|int|list|map|nat|record|string|unit)\\b/i,\n                lookbehind: true\n            },\n            function: /\\b\\w+(?=\\s*\\()/,\n            number: [\n                // Hexadecimal, octal and binary\n                /%[01]+|&[0-7]+|\\$[a-f\\d]+/i,\n                /\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?(?:mtz|n)?/i\n            ],\n            operator: /->|=\\/=|\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=|]|\\b(?:and|mod|or)\\b/,\n            punctuation: /\\(\\.|\\.\\)|[()\\[\\]:;,.{}]/\n        };\n        var classNameInside = [\n            \"comment\",\n            \"keyword\",\n            \"builtin\",\n            \"operator\",\n            \"punctuation\"\n        ].reduce(function(accum, key) {\n            accum[key] = pascaligo[key];\n            return accum;\n        }, {});\n        pascaligo[\"class-name\"].forEach(function(p) {\n            p.inside = classNameInside;\n        });\n    })(Prism);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWZyYWN0b3IvbGFuZy9wYXNjYWxpZ28uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsT0FBT0MsT0FBTyxHQUFHQztBQUNqQkEsVUFBVUMsV0FBVyxHQUFHO0FBQ3hCRCxVQUFVRSxPQUFPLEdBQUcsRUFBRTtBQUN0QixTQUFTRixVQUFVRyxLQUFLOztJQUNwQixVQUFVQSxLQUFLO1FBQ2YsMEVBQTBFO1FBQzFFLElBQUlDLFNBQVMsMkNBQTJDQyxNQUFNO1FBQzlELElBQUlDLE9BQU8sa0NBQWtDRCxNQUFNLENBQUNFLE9BQU8sQ0FDekQsYUFDQTtZQUNFLE9BQU9IO1FBQ1Q7UUFFRixJQUFJSixZQUFhRyxNQUFNSyxTQUFTLENBQUNSLFNBQVMsR0FBRztZQUMzQ1MsU0FBUztZQUNUQyxRQUFRO2dCQUNOQyxTQUFTO2dCQUNUQyxRQUFRO1lBQ1Y7WUFDQSxjQUFjO2dCQUNaO29CQUNFRCxTQUFTRSxPQUNQLCtCQUErQlIsTUFBTSxDQUFDRSxPQUFPLENBQzNDLFdBQ0E7d0JBQ0UsT0FBT0Q7b0JBQ1QsSUFFRjtvQkFFRlEsWUFBWTtvQkFDWkMsUUFBUSxLQUFLLFlBQVk7Z0JBQzNCO2dCQUNBO29CQUNFSixTQUFTRSxPQUNQLG9CQUFvQlIsTUFBTSxDQUFDRSxPQUFPLENBQUMsV0FBVzt3QkFDNUMsT0FBT0Q7b0JBQ1QsSUFDQTtvQkFFRlMsUUFBUSxLQUFLLFlBQVk7Z0JBQzNCO2dCQUNBO29CQUNFSixTQUFTRSxPQUNQLGVBQWVSLE1BQU0sQ0FBQ0UsT0FBTyxDQUFDLFdBQVc7d0JBQ3ZDLE9BQU9EO29CQUNUO29CQUVGUSxZQUFZO29CQUNaQyxRQUFRLEtBQUssWUFBWTtnQkFDM0I7YUFDRDtZQUNEQyxTQUFTO2dCQUNQTCxTQUNFO2dCQUNGRyxZQUFZO1lBQ2Q7WUFDQUcsU0FBUztnQkFDUE4sU0FBUztnQkFDVEcsWUFBWTtZQUNkO1lBQ0FJLFNBQVM7Z0JBQ1BQLFNBQVM7Z0JBQ1RHLFlBQVk7WUFDZDtZQUNBSyxVQUFVO1lBQ1ZDLFFBQVE7Z0JBQ04sZ0NBQWdDO2dCQUNoQztnQkFDQTthQUNEO1lBQ0RDLFVBQ0U7WUFDRkMsYUFBYTtRQUNmO1FBQ0EsSUFBSUMsa0JBQWtCO1lBQ3BCO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7U0FDRCxDQUFDQyxNQUFNLENBQUMsU0FBVUMsS0FBSyxFQUFFQyxHQUFHO1lBQzNCRCxLQUFLLENBQUNDLElBQUksR0FBRzFCLFNBQVMsQ0FBQzBCLElBQUk7WUFDM0IsT0FBT0Q7UUFDVCxHQUFHLENBQUM7UUFDSnpCLFNBQVMsQ0FBQyxhQUFhLENBQUMyQixPQUFPLENBQUMsU0FBVUMsQ0FBQztZQUN6Q0EsRUFBRWIsTUFBTSxHQUFHUTtRQUNiO0lBQ0YsR0FBR3BCO0FBQ0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlZnJhY3Rvci9sYW5nL3Bhc2NhbGlnby5qcz8yMGNiIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhc2NhbGlnb1xucGFzY2FsaWdvLmRpc3BsYXlOYW1lID0gJ3Bhc2NhbGlnbydcbnBhc2NhbGlnby5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIHBhc2NhbGlnbyhQcmlzbSkge1xuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIC8vIFBhc2NhbGlnbyBpcyBhIGxheWVyIDIgc21hcnQgY29udHJhY3QgbGFuZ3VhZ2UgZm9yIHRoZSB0ZXpvcyBibG9ja2NoYWluXG4gICAgdmFyIGJyYWNlcyA9IC9cXCgoPzpbXigpXXxcXCgoPzpbXigpXXxcXChbXigpXSpcXCkpKlxcKSkqXFwpLy5zb3VyY2VcbiAgICB2YXIgdHlwZSA9IC8oPzpcXGJcXHcrKD86PGJyYWNlcz4pP3w8YnJhY2VzPikvLnNvdXJjZS5yZXBsYWNlKFxuICAgICAgLzxicmFjZXM+L2csXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBicmFjZXNcbiAgICAgIH1cbiAgICApXG4gICAgdmFyIHBhc2NhbGlnbyA9IChQcmlzbS5sYW5ndWFnZXMucGFzY2FsaWdvID0ge1xuICAgICAgY29tbWVudDogL1xcKFxcKltcXHNcXFNdKz9cXCpcXCl8XFwvXFwvLiovLFxuICAgICAgc3RyaW5nOiB7XG4gICAgICAgIHBhdHRlcm46IC8oW1wiJ2BdKSg/OlxcXFxbXFxzXFxTXXwoPyFcXDEpW15cXFxcXSkqXFwxfFxcXlthLXpdL2ksXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfSxcbiAgICAgICdjbGFzcy1uYW1lJzogW1xuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjogUmVnRXhwKFxuICAgICAgICAgICAgLyhcXGJ0eXBlXFxzK1xcdytcXHMraXNcXHMrKTx0eXBlPi8uc291cmNlLnJlcGxhY2UoXG4gICAgICAgICAgICAgIC88dHlwZT4vZyxcbiAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICksXG4gICAgICAgICAgICAnaSdcbiAgICAgICAgICApLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgaW5zaWRlOiBudWxsIC8vIHNlZSBiZWxvd1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjogUmVnRXhwKFxuICAgICAgICAgICAgLzx0eXBlPig/PVxccytpc1xcYikvLnNvdXJjZS5yZXBsYWNlKC88dHlwZT4vZywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gdHlwZVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAnaSdcbiAgICAgICAgICApLFxuICAgICAgICAgIGluc2lkZTogbnVsbCAvLyBzZWUgYmVsb3dcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHBhdHRlcm46IFJlZ0V4cChcbiAgICAgICAgICAgIC8oOlxccyopPHR5cGU+Ly5zb3VyY2UucmVwbGFjZSgvPHR5cGU+L2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHR5cGVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKSxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGluc2lkZTogbnVsbCAvLyBzZWUgYmVsb3dcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGtleXdvcmQ6IHtcbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvKF58W14mXSlcXGIoPzpiZWdpbnxibG9ja3xjYXNlfGNvbnN0fGVsc2V8ZW5kfGZhaWx8Zm9yfGZyb218ZnVuY3Rpb258aWZ8aXN8bmlsfG9mfHJlbW92ZXxyZXR1cm58c2tpcHx0aGVufHR5cGV8dmFyfHdoaWxlfHdpdGgpXFxiL2ksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBib29sZWFuOiB7XG4gICAgICAgIHBhdHRlcm46IC8oXnxbXiZdKVxcYig/OkZhbHNlfFRydWUpXFxiL2ksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBidWlsdGluOiB7XG4gICAgICAgIHBhdHRlcm46IC8oXnxbXiZdKVxcYig/OmJvb2x8aW50fGxpc3R8bWFwfG5hdHxyZWNvcmR8c3RyaW5nfHVuaXQpXFxiL2ksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBmdW5jdGlvbjogL1xcYlxcdysoPz1cXHMqXFwoKS8sXG4gICAgICBudW1iZXI6IFtcbiAgICAgICAgLy8gSGV4YWRlY2ltYWwsIG9jdGFsIGFuZCBiaW5hcnlcbiAgICAgICAgLyVbMDFdK3wmWzAtN10rfFxcJFthLWZcXGRdKy9pLCAvLyBEZWNpbWFsXG4gICAgICAgIC9cXGJcXGQrKD86XFwuXFxkKyk/KD86ZVsrLV0/XFxkKyk/KD86bXR6fG4pPy9pXG4gICAgICBdLFxuICAgICAgb3BlcmF0b3I6XG4gICAgICAgIC8tPnw9XFwvPXxcXC5cXC58XFwqXFwqfDo9fDxbPD0+XT98Pls+PV0/fFsrXFwtKlxcL109P3xbQF49fF18XFxiKD86YW5kfG1vZHxvcilcXGIvLFxuICAgICAgcHVuY3R1YXRpb246IC9cXChcXC58XFwuXFwpfFsoKVxcW1xcXTo7LC57fV0vXG4gICAgfSlcbiAgICB2YXIgY2xhc3NOYW1lSW5zaWRlID0gW1xuICAgICAgJ2NvbW1lbnQnLFxuICAgICAgJ2tleXdvcmQnLFxuICAgICAgJ2J1aWx0aW4nLFxuICAgICAgJ29wZXJhdG9yJyxcbiAgICAgICdwdW5jdHVhdGlvbidcbiAgICBdLnJlZHVjZShmdW5jdGlvbiAoYWNjdW0sIGtleSkge1xuICAgICAgYWNjdW1ba2V5XSA9IHBhc2NhbGlnb1trZXldXG4gICAgICByZXR1cm4gYWNjdW1cbiAgICB9LCB7fSlcbiAgICBwYXNjYWxpZ29bJ2NsYXNzLW5hbWUnXS5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XG4gICAgICBwLmluc2lkZSA9IGNsYXNzTmFtZUluc2lkZVxuICAgIH0pXG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJwYXNjYWxpZ28iLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsImJyYWNlcyIsInNvdXJjZSIsInR5cGUiLCJyZXBsYWNlIiwibGFuZ3VhZ2VzIiwiY29tbWVudCIsInN0cmluZyIsInBhdHRlcm4iLCJncmVlZHkiLCJSZWdFeHAiLCJsb29rYmVoaW5kIiwiaW5zaWRlIiwia2V5d29yZCIsImJvb2xlYW4iLCJidWlsdGluIiwiZnVuY3Rpb24iLCJudW1iZXIiLCJvcGVyYXRvciIsInB1bmN0dWF0aW9uIiwiY2xhc3NOYW1lSW5zaWRlIiwicmVkdWNlIiwiYWNjdW0iLCJrZXkiLCJmb3JFYWNoIiwicCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/refractor/lang/pascaligo.js\n"));

/***/ })

}]);
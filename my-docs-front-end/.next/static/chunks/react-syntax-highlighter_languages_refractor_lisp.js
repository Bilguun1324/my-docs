"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["react-syntax-highlighter_languages_refractor_lisp"],{

/***/ "(app-pages-browser)/./node_modules/refractor/lang/lisp.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/lisp.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nmodule.exports = lisp;\nlisp.displayName = \"lisp\";\nlisp.aliases = [];\nfunction lisp(Prism) {\n    ;\n    (function(Prism) {\n        /**\n     * Functions to construct regular expressions\n     * e.g. (interactive ... or (interactive)\n     *\n     * @param {string} name\n     * @returns {RegExp}\n     */ function simple_form(name) {\n            return RegExp(/(\\()/.source + \"(?:\" + name + \")\" + /(?=[\\s\\)])/.source);\n        }\n        /**\n     * booleans and numbers\n     *\n     * @param {string} pattern\n     * @returns {RegExp}\n     */ function primitive(pattern) {\n            return RegExp(/([\\s([])/.source + \"(?:\" + pattern + \")\" + /(?=[\\s)])/.source);\n        } // Patterns in regular expressions\n        // Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html\n        // & and : are excluded as they are usually used for special purposes\n        var symbol = /(?!\\d)[-+*/~!@$%^=<>{}\\w]+/.source // symbol starting with & used in function arguments\n        ;\n        var marker = \"&\" + symbol // Open parenthesis for look-behind\n        ;\n        var par = \"(\\\\()\";\n        var endpar = \"(?=\\\\))\" // End the pattern with look-ahead space\n        ;\n        var space = \"(?=\\\\s)\";\n        var nestedPar = /(?:[^()]|\\((?:[^()]|\\((?:[^()]|\\((?:[^()]|\\((?:[^()]|\\([^()]*\\))*\\))*\\))*\\))*\\))*/.source;\n        var language = {\n            // Three or four semicolons are considered a heading.\n            // See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html\n            heading: {\n                pattern: /;;;.*/,\n                alias: [\n                    \"comment\",\n                    \"title\"\n                ]\n            },\n            comment: /;.*/,\n            string: {\n                pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n                greedy: true,\n                inside: {\n                    argument: /[-A-Z]+(?=[.,\\s])/,\n                    symbol: RegExp(\"`\" + symbol + \"'\")\n                }\n            },\n            \"quoted-symbol\": {\n                pattern: RegExp(\"#?'\" + symbol),\n                alias: [\n                    \"variable\",\n                    \"symbol\"\n                ]\n            },\n            \"lisp-property\": {\n                pattern: RegExp(\":\" + symbol),\n                alias: \"property\"\n            },\n            splice: {\n                pattern: RegExp(\",@?\" + symbol),\n                alias: [\n                    \"symbol\",\n                    \"variable\"\n                ]\n            },\n            keyword: [\n                {\n                    pattern: RegExp(par + \"(?:and|(?:cl-)?letf|cl-loop|cond|cons|error|if|(?:lexical-)?let\\\\*?|message|not|null|or|provide|require|setq|unless|use-package|when|while)\" + space),\n                    lookbehind: true\n                },\n                {\n                    pattern: RegExp(par + \"(?:append|by|collect|concat|do|finally|for|in|return)\" + space),\n                    lookbehind: true\n                }\n            ],\n            declare: {\n                pattern: simple_form(/declare/.source),\n                lookbehind: true,\n                alias: \"keyword\"\n            },\n            interactive: {\n                pattern: simple_form(/interactive/.source),\n                lookbehind: true,\n                alias: \"keyword\"\n            },\n            boolean: {\n                pattern: primitive(/nil|t/.source),\n                lookbehind: true\n            },\n            number: {\n                pattern: primitive(/[-+]?\\d+(?:\\.\\d*)?/.source),\n                lookbehind: true\n            },\n            defvar: {\n                pattern: RegExp(par + \"def(?:const|custom|group|var)\\\\s+\" + symbol),\n                lookbehind: true,\n                inside: {\n                    keyword: /^def[a-z]+/,\n                    variable: RegExp(symbol)\n                }\n            },\n            defun: {\n                pattern: RegExp(par + /(?:cl-)?(?:defmacro|defun\\*?)\\s+/.source + symbol + /\\s+\\(/.source + nestedPar + /\\)/.source),\n                lookbehind: true,\n                greedy: true,\n                inside: {\n                    keyword: /^(?:cl-)?def\\S+/,\n                    // See below, this property needs to be defined later so that it can\n                    // reference the language object.\n                    arguments: null,\n                    function: {\n                        pattern: RegExp(\"(^\\\\s)\" + symbol),\n                        lookbehind: true\n                    },\n                    punctuation: /[()]/\n                }\n            },\n            lambda: {\n                pattern: RegExp(par + \"lambda\\\\s+\\\\(\\\\s*(?:&?\" + symbol + \"(?:\\\\s+&?\" + symbol + \")*\\\\s*)?\\\\)\"),\n                lookbehind: true,\n                greedy: true,\n                inside: {\n                    keyword: /^lambda/,\n                    // See below, this property needs to be defined later so that it can\n                    // reference the language object.\n                    arguments: null,\n                    punctuation: /[()]/\n                }\n            },\n            car: {\n                pattern: RegExp(par + symbol),\n                lookbehind: true\n            },\n            punctuation: [\n                // open paren, brackets, and close paren\n                /(?:['`,]?\\(|[)\\[\\]])/,\n                {\n                    pattern: /(\\s)\\.(?=\\s)/,\n                    lookbehind: true\n                }\n            ]\n        };\n        var arg = {\n            \"lisp-marker\": RegExp(marker),\n            varform: {\n                pattern: RegExp(/\\(/.source + symbol + /\\s+(?=\\S)/.source + nestedPar + /\\)/.source),\n                inside: language\n            },\n            argument: {\n                pattern: RegExp(/(^|[\\s(])/.source + symbol),\n                lookbehind: true,\n                alias: \"variable\"\n            },\n            rest: language\n        };\n        var forms = \"\\\\S+(?:\\\\s+\\\\S+)*\";\n        var arglist = {\n            pattern: RegExp(par + nestedPar + endpar),\n            lookbehind: true,\n            inside: {\n                \"rest-vars\": {\n                    pattern: RegExp(\"&(?:body|rest)\\\\s+\" + forms),\n                    inside: arg\n                },\n                \"other-marker-vars\": {\n                    pattern: RegExp(\"&(?:aux|optional)\\\\s+\" + forms),\n                    inside: arg\n                },\n                keys: {\n                    pattern: RegExp(\"&key\\\\s+\" + forms + \"(?:\\\\s+&allow-other-keys)?\"),\n                    inside: arg\n                },\n                argument: {\n                    pattern: RegExp(symbol),\n                    alias: \"variable\"\n                },\n                punctuation: /[()]/\n            }\n        };\n        language[\"lambda\"].inside.arguments = arglist;\n        language[\"defun\"].inside.arguments = Prism.util.clone(arglist);\n        language[\"defun\"].inside.arguments.inside.sublist = arglist;\n        Prism.languages.lisp = language;\n        Prism.languages.elisp = language;\n        Prism.languages.emacs = language;\n        Prism.languages[\"emacs-lisp\"] = language;\n    })(Prism);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/refractor/lang/lisp.js\n"));

/***/ })

}]);